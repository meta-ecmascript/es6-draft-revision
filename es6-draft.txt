Contents Page

Introduction vii

_1_ _Scope_ 

_2_ _Conformance_ 

_3_ _Normative references_ 

_4_ _Overview_ 

_4.1_ _Web Scripting_ 

_4.2_ _ECMAScript Overview_ 

_4.2.1_ _Objects_ 

_4.2.2_ _The Strict Variant of ECMAScript_ 

_4.3_ _Terms and definitions_ 

_4.4_ _Organization of This Specification_ 

_5_ _Notational Conventions_ 

_5.1_ _Syntactic and Lexical Grammars_ 

_5.1.1_ _Context-Free Grammars_ 

_5.1.2_ _The Lexical and RegExp Grammars_ 

_5.1.3_ _The Numeric String Grammar_ 

_5.1.4_ _The Syntactic Grammar_ 

_5.1.5_ _Grammar Notation_ 

_5.2_ _Algorithm Conventions_ 

_5.3_ _Static Semantic Rules_ 

_6_ _ECMAScript Data Types and Values_ 

_6.1_ _ECMAScript Language Types_ 

_6.1.1_ _The Undefined Type_ 

_6.1.2_ _The Null Type_ 

_6.1.3_ _The Boolean Type_ 

_6.1.4_ _The String Type_ 

_6.1.5_ _The Symbol Type_ 

_6.1.6_ _The Number Type_ 

_6.1.7_ _The Object Type_ 

_6.2_ _ECMAScript Specification Types_ 

_6.2.1_ _The List and Record Specification Type_ 

_6.2.2_ _The Completion Record Specification Type_ 

_6.2.3_ _The Reference Specification Type_ 

_6.2.4_ _The Property Descriptor Specification Type_ 

_6.2.5_ _The Lexical Environment and Environment Record Specification
Types_ 38

_6.2.6_ _Data Blocks_ 

_7_ _Abstract Operations_ 

_7.1_ _Type Conversion_ 

_7.1.1_ _ToPrimitive ( input [, PreferredType] )_ 

_7.1.2_ _ToBoolean ( argument )_ 

_7.1.3_ _ToNumber ( argument )_ 

_7.1.4_ _ToInteger ( argument )_ 

_7.1.5_ _ToInt32 ( argument )_ 

_7.1.6_ _ToUint32 ( argument )_ 

_7.1.7_ _ToInt16 ( argument )_ 

_7.1.8_ _ToUint16 ( argument )_ 

_7.1.9_ _ToInt8 ( argument )_ 

_7.1.10_ _ToUint8 ( argument )_ 

_7.1.11_ _ToUint8Clamp ( argument )_ 

_7.1.12_ _ToString ( argument )_ 

_7.1.13_ _ToObject ( argument )_ 

_7.1.14_ _ToPropertyKey ( argument )_ 

_7.1.15_ _ToLength ( argument )_ 

_7.1.16_ _CanonicalNumericIndexString ( argument )_ 

_7.2_ _Testing and Comparison Operations_ 

_7.2.1_ _RequireObjectCoercible ( argument )_ 

_7.2.2_ _IsArray ( argument )_ 

_7.2.3_ _IsCallable ( argument )_ 

_7.2.4_ _IsConstructor ( argument )_ 

_7.2.5_ _IsExtensible (O)_ 

_7.2.6_ _IsInteger ( argument )_ 

_7.2.7_ _IsPropertyKey ( argument )_ 

_7.2.8_ _IsRegExp ( argument )_ 

_7.2.9_ _SameValue(x, y)_ 

_7.2.10_ _SameValueZero(x, y)_ 

_7.2.11_ _Abstract Relational Comparison_ 

_7.2.12_ _Abstract Equality Comparison_ 

_7.2.13_ _Strict Equality Comparison_ 

_7.3_ _Operations on Objects_ 

_7.3.1_ _Get (O, P)_ 

_7.3.2_ _GetV (V, P)_ 

_7.3.3_ _Set (O, P, V, Throw)_ 

_7.3.4_ _CreateDataProperty (O, P, V)_ 

_7.3.5_ _CreateMethodProperty (O, P, V)_ 

_7.3.6_ _CreateDataPropertyOrThrow (O, P, V)_ 

_7.3.7_ _DefinePropertyOrThrow (O, P, desc)_ 

_7.3.8_ _DeletePropertyOrThrow (O, P)_ 

_7.3.9_ _GetMethod (O, P)_ 

_7.3.10_ _HasProperty (O, P)_ 

_7.3.11_ _HasOwnProperty (O, P)_ 

_7.3.12_ _Call(F, V, [argumentsList])_ 

_7.3.13_ _Construct (F, [argumentsList], [newTarget])_ 

_7.3.14_ _SetIntegrityLevel (O, level)_ 

_7.3.15_ _TestIntegrityLevel (O, level)_ 

_7.3.16_ _CreateArrayFromList (elements)_ 

_7.3.17_ _CreateListFromArrayLike (obj [, elementTypes] )_ 

_7.3.18_ _Invoke(O,P, [argumentsList])_ 

_7.3.19_ _OrdinaryHasInstance (C, O)_ 

_7.3.20_ _SpeciesConstructor ( O, defaultConstructor )_ 

_7.3.21_ _EnumerableOwnNames (O)_ 

_7.3.22_ _GetFunctionRealm ( obj )_ 

_7.4_ _Operations on Iterator Objects_ 

_7.4.1_ _GetIterator ( obj, method )_ 

_7.4.2_ _IteratorNext ( iterator, value )_ 

_7.4.3_ _IteratorComplete ( iterResult )_ 

_7.4.4_ _IteratorValue ( iterResult )_ 

_7.4.5_ _IteratorStep ( iterator )_ 

_7.4.6_ _IteratorClose( iterator, completion )_ 

_7.4.7_ _CreateIterResultObject ( value, done )_ 

_7.4.8_ _CreateListIterator ( list )_ 

_8_ _Executable Code and Execution Contexts_ 

_8.1_ _Lexical Environments_ 

_8.1.1_ _Environment Records_ 

_8.1.2_ _Lexical Environment Operations_ 

_8.2_ _Code Realms_ 

_8.2.1_ _CreateRealm ( )_ 

_8.2.2_ _CreateIntrinsics ( realmRec )_ 

_8.2.3_ _SetRealmGlobalObject ( realmRec, globalObj )_ 

_8.2.4_ _SetDefaultGlobalBindings ( realmRec )_ 

_8.3_ _Execution Contexts_ 

_8.3.1_ _ResolveBinding ( name, [env] )_ 

_8.3.2_ _GetThisEnvironment ( )_ 

_8.3.3_ _ResolveThisBinding ( )_ 

_8.3.4_ _GetNewTarget ( )_ 

_8.3.5_ _GetGlobalObject ( )_ 

_8.4_ _Jobs and Job Queues_ 

_8.4.1_ _EnqueueJob ( queueName, job, arguments)_ 

_8.4.2_ _NextJob result_ 

_8.5_ _ECMAScript Initialization()_ 

_8.5.1_ _InitializeHostDefinedRealm ( realm )_ 

_9_ _Ordinary and Exotic Objects Behaviours_ 

_9.1_ _Ordinary Object Internal Methods and Internal Slots_ 

_9.1.1_ _[[GetPrototypeOf]] ( )_ 

_9.1.2_ _[[SetPrototypeOf]] (V)_ 

_9.1.3_ _[[IsExtensible]] ( )_ 

_9.1.4_ _[[PreventExtensions]] ( )_ 

_9.1.5_ _[[GetOwnProperty]] (P)_ 

_9.1.6_ _[[DefineOwnProperty]] (P, Desc)_ 

_9.1.7_ _[[HasProperty]](P)_ 

_9.1.8_ _[[Get]] (P, Receiver)_ 

_9.1.9_ _[[Set]] ( P, V, Receiver)_ 

_9.1.10_ _[[Delete]] (P)_ 

_9.1.11_ _[[Enumerate]] ()_ 

_9.1.12_ _[[OwnPropertyKeys]] ( )_ 

_9.1.13_ _ObjectCreate(proto, internalSlotsList)_ 

_9.1.14_ _OrdinaryCreateFromConstructor ( constructor,
intrinsicDefaultProto, internalSlotsList )_ 92

_9.1.15_ _GetPrototypeFromConstructor ( constructor,
intrinsicDefaultProto )_ 92

_9.2_ _ECMAScript Function Objects_ 

_9.2.1_ _[[Call]] ( thisArgument, argumentsList)_ 

_9.2.2_ _[[Construct]] ( argumentsList, newTarget)_ 

_9.2.3_ _FunctionAllocate (functionPrototype, strict [,functionKind] )
9

_9.2.4_ _FunctionInitialize (F, kind, ParameterList, Body, Scope)_ 

_9.2.5_ _FunctionCreate (kind, ParameterList, Body, Scope, Strict,
prototype)_ 96

_9.2.6_ _GeneratorFunctionCreate (kind, ParameterList, Body, Scope,
Strict)_ 96

_9.2.7_ _AddRestrictedFunctionProperties ( F, realm )_ 

_9.2.8_ _MakeConstructor (F, writablePrototype, prototype)_ 

_9.2.9_ _MakeClassConstructor ( F)_ 

_9.2.10_ _MakeMethod ( F, homeObject)_ 

_9.2.11_ _SetFunctionName (F, name, prefix)_ 

_9.2.12_ _FunctionDeclarationInstantiation(func, argumentsList)_ 

_9.3_ _Built-in Function Objects_ 

_9.3.1_ _[[Call]] ( thisArgument, argumentsList)_ 

_9.3.2_ _[[Construct]] (argumentsList, newTarget)_ 

_9.3.3_ _CreateBuiltinFunction(realm, steps, prototype,
internalSlotsList)_ 102

_9.4_ _Built-in Exotic Object Internal Methods and Slots_ 

_9.4.1_ _Bound Function Exotic Objects_ 

_9.4.2_ _Array Exotic Objects_ 

_9.4.3_ _String Exotic Objects_ 

_9.4.4_ _Arguments Exotic Objects_ 

_9.4.5_ _Integer Indexed Exotic Objects_ 

_9.4.6_ _Module Namespace Exotic Objects_ 

_9.5_ _Proxy Object Internal Methods and Internal Slots_ 

_9.5.1_ _[[GetPrototypeOf]] ( )_ 

_9.5.2_ _[[SetPrototypeOf]] (V)_ 

_9.5.3_ _[[IsExtensible]] ( )_ 

_9.5.4_ _[[PreventExtensions]] ( )_ 

_9.5.5_ _[[GetOwnProperty]] (P)_ 

_9.5.6_ _[[DefineOwnProperty]] (P, Desc)_ 

_9.5.7_ _[[HasProperty]] (P)_ 

_9.5.8_ _[[Get]] (P, Receiver)_ 

_9.5.9_ _[[Set]] ( P, V, Receiver)_ 

_9.5.10_ _[[Delete]] (P)_ 

_9.5.11_ _[[Enumerate]] ()_ 

_9.5.12_ _[[OwnPropertyKeys]] ( )_ 

_9.5.13_ _[[Call]] (thisArgument, argumentsList)_ 

_9.5.14_ _[[Construct]] ( argumentsList, newTarget)_ 

_9.5.15_ _ProxyCreate(target, handler)_ 

_10_ _ECMAScript Language: Source Code_ 

_10.1_ _Source Text_ 

_10.1.1_ _Static Semantics: UTF16Encoding ( cp )_ 

_10.1.2_ _Static Semantics: UTF16Decode( lead, trail )_ 

_10.2_ _Types of Source Code_ 

_10.2.1_ _Strict Mode Code_ 

_10.2.2_ _Non-ECMAScript Functions_ 

_11_ _ECMAScript Language: Lexical Grammar_ 

_11.1_ _Unicode Format-Control Characters_ 

_11.2_ _White Space_ 

_11.3_ _Line Terminators_ 

_11.4_ _Comments_ 

_11.5_ _Tokens_ 

_11.6_ _Names and Keywords_ 

_11.6.1_ _Identifier Names_ 

_11.6.2_ _Reserved Words_ 

_11.7_ _Punctuators_ 

_11.8_ _Literals_ 

_11.8.1_ _Null Literals_ 

_11.8.2_ _Boolean Literals_ 

_11.8.3_ _Numeric Literals_ 

_11.8.4_ _String Literals_ 

_11.8.5_ _Regular Expression Literals_ 

_11.8.6_ _Template Literal Lexical Components_ 

_11.9_ _Automatic Semicolon Insertion_ 

_11.9.1_ _Rules of Automatic Semicolon Insertion_ 

_11.9.2_ _Examples of Automatic Semicolon Insertion_ 

_12_ _ECMAScript Language: Expressions_ 

_12.1_ _Identifiers_ 

_12.1.1_ _Static Semantics: Early Errors_ 

_12.1.2_ _Static Semantics: BoundNames_ 

_12.1.3_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.1.4_ _Static Semantics: StringValue_ 

_12.1.5_ _Runtime Semantics: BindingInitialization_ 

_12.1.6_ _Runtime Semantics: Evaluation_ 

_12.2_ _Primary Expression_ 

_12.2.0_ _Semantics_ 

_12.2.1_ _The this Keyword_ 

_12.2.2_ _Identifier Reference_ 

_12.2.3_ _Literals_ 

_12.2.4_ _Array Initializer_ 

_12.2.5_ _Object Initializer_ 

_12.2.6_ _Function Defining Expressions_ 

_12.2.7_ _Regular Expression Literals_ 

_12.2.8_ _Template Literals_ 

_12.2.9_ _The Grouping Operator_ 

_12.3_ _Left-Hand-Side Expressions_ 

_12.3.1_ _Static Semantics_ 

_12.3.2_ _Property Accessors_ 

_12.3.3_ _The new Operator_ 

_12.3.4_ _Function Calls_ 

_12.3.5_ _The super Keyword_ 

_12.3.6_ _Argument Lists_ 

_12.3.7_ _Tagged Templates_ 

_12.3.8_ _Meta Properties_ 

_12.4_ _Postfix Expressions_ 

_12.4.1_ _Static Semantics: Early Errors_ 

_12.4.2_ _Static Semantics: IsFunctionDefinition_ 

_12.4.3_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.4.4_ _Postfix Increment Operator_ 

_12.4.5_ _Postfix Decrement Operator_ 

_12.5_ _Unary Operators_ 

_12.5.1_ _Static Semantics: Early Errors_ 

_12.5.2_ _Static Semantics: IsFunctionDefinition_ 

_12.5.3_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.5.4_ _The delete Operator_ 

_12.5.5_ _The void Operator_ 

_12.5.6_ _The typeof Operator_ 

_12.5.7_ _Prefix Increment Operator_ 

_12.5.8_ _Prefix Decrement Operator_ 

_12.5.9_ _Unary + Operator_ 

_12.5.10_ _Unary - Operator_ 

_12.5.11_ _Bitwise NOT Operator ( ~ )_ 

_12.5.12_ _Logical NOT Operator ( ! )_ 

_12.6_ _Multiplicative Operators_ 

_12.6.1_ _Static Semantics: IsFunctionDefinition_ 

_12.6.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.6.3_ _Runtime Semantics: Evaluation_ 

_12.7_ _Additive Operators_ 

_12.7.1_ _Static Semantics: IsFunctionDefinition_ 

_12.7.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.7.3_ _The Addition operator ( + )_ 

_12.7.4_ _The Subtraction Operator ( - )_ 

_12.7.5_ _Applying the Additive Operators to Numbers_ 

_12.8_ _Bitwise Shift Operators_ 

_12.8.1_ _Static Semantics: IsFunctionDefinition_ 

_12.8.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.8.3_ _The Left Shift Operator ( << )_ 

_12.8.4_ _The Signed Right Shift Operator ( >> )_ 

_12.8.5_ _The Unsigned Right Shift Operator ( >>> )_ 

_12.9_ _Relational Operators_ 

_12.9.1_ _Static Semantics: IsFunctionDefinition_ 

_12.9.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.9.3_ _Runtime Semantics: Evaluation_ 

_12.9.4_ _Runtime Semantics: InstanceofOperator(O, C)_ 

_12.10_ _Equality Operators_ 

_12.10.1_ _Static Semantics: IsFunctionDefinition_ 

_12.10.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.10.3_ _Runtime Semantics: Evaluation_ 

_12.11_ _Binary Bitwise Operators_ 

_12.11.1_ _Static Semantics: IsFunctionDefinition_ 

_12.11.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.11.3_ _Runtime Semantics: Evaluation_ 

_12.12_ _Binary Logical Operators_ 

_12.12.1_ _Static Semantics: IsFunctionDefinition_ 

_12.12.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.12.3_ _Runtime Semantics: Evaluation_ 

_12.13_ _Conditional Operator ( ? : )_ 

_12.13.1_ _Static Semantics: IsFunctionDefinition_ 

_12.13.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.13.3_ _Runtime Semantics: Evaluation_ 

_12.14_ _Assignment Operators_ 

_12.14.1_ _Static Semantics: Early Errors_ 

_12.14.2_ _Static Semantics: IsFunctionDefinition_ 

_12.14.3_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.14.4_ _Runtime Semantics: Evaluation_ 

_12.14.5_ _Destructuring Assignment_ 

_12.15_ _Comma Operator ( , )_ 

_12.15.1_ _Static Semantics: IsFunctionDefinition_ 

_12.15.2_ _Static Semantics: IsValidSimpleAssignmentTarget_ 

_12.15.3_ _Runtime Semantics: Evaluation_ 

_13_ _ECMAScript Language: Statements and Declarations_ 

_13.0_ _Statement Semantics_ 

_13.0.1_ _Static Semantics: ContainsDuplicateLabels_ 

_13.0.2_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.0.3_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.0.4_ _Static Semantics: DeclarationPart_ 

_13.0.5_ _Static Semantics: VarDeclaredNames_ 

_13.0.6_ _Static Semantics: VarScopedDeclarations_ 

_13.0.7_ _Runtime Semantics: LabelledEvaluation_ 

_13.0.8_ _Runtime Semantics: Evaluation_ 

_13.1_ _Block_ 

_13.1.1_ _Static Semantics: Early Errors_ 

_13.1.2_ _Static Semantics: ContainsDuplicateLabels_ 

_13.1.3_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.1.4_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.1.5_ _Static Semantics: LexicallyDeclaredNames_ 

_13.1.6_ _Static Semantics: LexicallyScopedDeclarations_ 

_13.1.7_ _Static Semantics: TopLevelLexicallyDeclaredNames_ 

_13.1.8_ _Static Semantics: TopLevelLexicallyScopedDeclarations_ 

_13.1.9_ _Static Semantics: TopLevelVarDeclaredNames_ 

_13.1.10_ _Static Semantics: TopLevelVarScopedDeclarations_ 

_13.1.11_ _Static Semantics: VarDeclaredNames_ 

_13.1.12_ _Static Semantics: VarScopedDeclarations_ 

_13.1.13_ _Runtime Semantics: Evaluation_ 

_13.1.14_ _Runtime Semantics: BlockDeclarationInstantiation( code, env
)_ 211

_13.2_ _Declarations and the Variable Statement_ 

_13.2.1_ _Let and Const Declarations_ 

_13.2.2_ _Variable Statement_ 

_13.2.3_ _Destructuring Binding Patterns_ 

_13.3_ _Empty Statement_ 

_13.3.1_ _Runtime Semantics: Evaluation_ 

_13.4_ _Expression Statement_ 

_13.4.1_ _Runtime Semantics: Evaluation_ 

_13.5_ _The if Statement_ 

_13.5.1_ _Static Semantics: Early Errors_ 

_13.5.2_ _Static Semantics: ContainsDuplicateLabels_ 

_13.5.3_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.5.4_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.5.5_ _Static Semantics: VarDeclaredNames_ 

_13.5.6_ _Static Semantics: VarScopedDeclarations_ 

_13.5.7_ _Runtime Semantics: Evaluation_ 

_13.6_ _Iteration Statements_ 

_13.6.0_ _Semantics_ 

_13.6.1_ _The do-while Statement_ 

_13.6.2_ _The while Statement_ 

_13.6.3_ _The for Statement_ 

_13.6.4_ _The for-in and for-of Statements_ 

_13.7_ _The continue Statement_ 

_13.7.1_ _Static Semantics: Early Errors_ 

_13.7.2_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.7.3_ _Runtime Semantics: Evaluation_ 

_13.8_ _The break Statement_ 

_13.8.1_ _Static Semantics: Early Errors_ 

_13.8.2_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.8.3_ _Runtime Semantics: Evaluation_ 

_13.9_ _The return Statement_ 

_13.9.1_ _Runtime Semantics: Evaluation_ 

_13.10_ _The with Statement_ 

_13.10.1_ _Static Semantics: Early Errors_ 

_13.10.2_ _Static Semantics: ContainsDuplicateLabels_ 

_13.10.3_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.10.4_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.10.5_ _Static Semantics: VarDeclaredNames_ 

_13.10.6_ _Static Semantics: VarScopedDeclarations_ 

_13.10.7_ _Runtime Semantics: Evaluation_ 

_13.11_ _The switch Statement_ 

_13.11.1_ _Static Semantics: Early Errors_ 

_13.11.2_ _Static Semantics: ContainsDuplicateLabels_ 

_13.11.3_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.11.4_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.11.5_ _Static Semantics: LexicallyDeclaredNames_ 

_13.11.6_ _Static Semantics: LexicallyScopedDeclarations_ 

_13.11.7_ _Static Semantics: VarDeclaredNames_ 

_13.11.8_ _Static Semantics: VarScopedDeclarations_ 

_13.11.9_ _Runtime Semantics: CaseBlockEvaluation_ 

_13.11.10_ _Runtime Semantics: CaseSelectorEvaluation_ 

_13.11.11_ _Runtime Semantics: Evaluation_ 

_13.12_ _Labelled Statements_ 

_13.12.1_ _Static Semantics: Early Errors_ 

_13.12.2_ _Static Semantics: ContainsDuplicateLabels_ 

_13.12.3_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.12.4_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.12.5_ _Static Semantics: IsLabelledFunction ( stmt )_ 

_13.12.6_ _Static Semantics: LexicallyDeclaredNames_ 

_13.12.7_ _Static Semantics: LexicallyScopedDeclarations_ 

_13.12.8_ _Static Semantics: TopLevelLexicallyDeclaredNames_ 

_13.12.9_ _Static Semantics: TopLevelLexicallyScopedDeclarations_ 

_13.12.10_ _Static Semantics: TopLevelVarDeclaredNames_ 

_13.12.11_ _Static Semantics: TopLevelVarScopedDeclarations_ 

_13.12.12_ _Static Semantics: VarDeclaredNames_ 

_13.12.13_ _Static Semantics: VarScopedDeclarations_ 

_13.12.14_ _Runtime Semantics: LabelledEvaluation_ 

_13.12.15_ _Runtime Semantics: Evaluation_ 

_13.13_ _The throw Statement_ 

_13.13.1_ _Runtime Semantics: Evaluation_ 

_13.14_ _The try Statement_ 

_13.14.1_ _Static Semantics: Early Errors_ 

_13.14.2_ _Static Semantics: ContainsDuplicateLabels_ 

_13.14.3_ _Static Semantics: ContainsUndefinedBreakTarget_ 

_13.14.4_ _Static Semantics: ContainsUndefinedContinueTarget_ 

_13.14.5_ _Static Semantics: VarDeclaredNames_ 

_13.14.6_ _Static Semantics: VarScopedDeclarations_ 

_13.14.7_ _Runtime Semantics: CatchClauseEvaluation_ 

_13.14.8_ _Runtime Semantics: Evaluation_ 

_13.15_ _The debugger statement_ 

_13.15.1_ _Runtime Semantics: Evaluation_ 

_14_ _ECMAScript Language: Functions and Classes_ 

_14.1_ _Function Definitions_ 

_14.1.1_ _Directive Prologues and the Use Strict Directive_ 

_14.1.2_ _Static Semantics: Early Errors_ 

_14.1.3_ _Static Semantics: BoundNames_ 

_14.1.4_ _Static Semantics: Contains_ 

_14.1.5_ _Static Semantics: ContainsExpression_ 

_14.1.6_ _Static Semantics: ExpectedArgumentCount_ 

_14.1.7_ _Static Semantics: HasInitializer_ 

_14.1.8_ _Static Semantics: HasName_ 

_14.1.9_ _Static Semantics: IsAnonymousFunctionDefinition ( production
)_ 262

_14.1.10_ _Static Semantics: IsConstantDeclaration_ 

_14.1.11_ _Static Semantics: IsFunctionDefinition_ 

_14.1.12_ _Static Semantics: IsSimpleParameterList_ 

_14.1.13_ _Static Semantics: LexicallyDeclaredNames_ 

_14.1.14_ _Static Semantics: LexicallyScopedDeclarations_ 

_14.1.15_ _Static Semantics: VarDeclaredNames_ 

_14.1.16_ _Static Semantics: VarScopedDeclarations_ 

_14.1.17_ _Runtime Semantics: EvaluateBody_ 

_14.1.18_ _Runtime Semantics: IteratorBindingInitialization_ 

_14.1.19_ _Runtime Semantics: InstantiateFunctionObject_ 

_14.1.20_ _Runtime Semantics: Evaluation_ 

_14.2_ _Arrow Function Definitions_ 

_14.2.1_ _Static Semantics: Early Errors_ 

_14.2.2_ _Static Semantics: BoundNames_ 

_14.2.3_ _Static Semantics: Contains_ 

_14.2.4_ _Static Semantics: ContainsExpression_ 

_14.2.5_ _Static Semantics: ExpectedArgumentCount_ 

_14.2.6_ _Static Semantics: HasInitializer_ 

_14.2.7_ _Static Semantics: HasName_ 

_14.2.8_ _Static Semantics: IsSimpleParameterList_ 

_14.2.9_ _Static Semantics: CoveredFormalsList_ 

_14.2.10_ _Static Semantics: LexicallyDeclaredNames_ 

_14.2.11_ _Static Semantics: LexicallyScopedDeclarations_ 

_14.2.12_ _Static Semantics: VarDeclaredNames_ 

_14.2.13_ _Static Semantics: VarScopedDeclarations_ 

_14.2.14_ _Runtime Semantics: IteratorBindingInitialization_ 

_14.2.15_ _Runtime Semantics: EvaluateBody_ 

_14.2.16_ _Runtime Semantics: Evaluation_ 

_14.3_ _Method Definitions_ 

_14.3.1_ _Static Semantics: Early Errors_ 

_14.3.2_ _Static Semantics: ComputedPropertyContains_ 

_14.3.3_ _Static Semantics: ExpectedArgumentCount_ 

_14.3.4_ _Static Semantics: HasComputedPropertyKey_ 

_14.3.5_ _Static Semantics: HasDirectSuper_ 

_14.3.6_ _Static Semantics: PropName_ 

_14.3.7_ _Static Semantics: SpecialMethod_ 

_14.3.8_ _Runtime Semantics: DefineMethod_ 

_14.3.9_ _Runtime Semantics: PropertyDefinitionEvaluation_ 

_14.4_ _Generator Function Definitions_ 

_14.4.1_ _Static Semantics: Early Errors_ 

_14.4.2_ _Static Semantics: BoundNames_ 

_14.4.3_ _Static Semantics: ComputedPropertyContains_ 

_14.4.4_ _Static Semantics: Contains_ 

_14.4.5_ _Static Semantics: HasComputedPropertyKey_ 

_14.4.6_ _Static Semantics: HasDirectSuper_ 

_14.4.7_ _Static Semantics: HasName_ 

_14.4.8_ _Static Semantics: IsConstantDeclaration_ 

_14.4.9_ _Static Semantics: IsFunctionDefinition_ 

_14.4.10_ _Static Semantics: PropName_ 

_14.4.11_ _Runtime Semantics: EvaluateBody_ 

_14.4.12_ _Runtime Semantics: InstantiateFunctionObject_ 

_14.4.13_ _Runtime Semantics: PropertyDefinitionEvaluation_ 

_14.4.14_ _Runtime Semantics: Evaluation_ 

_14.5_ _Class Definitions_ 

_14.5.1_ _Static Semantics: Early Errors_ 

_14.5.2_ _Static Semantics: BoundNames_ 

_14.5.3_ _Static Semantics: ConstructorMethod_ 

_14.5.4_ _Static Semantics: Contains_ 

_14.5.5_ _Static Semantics: ComputedPropertyContains_ 

_14.5.6_ _Static Semantics: HasName_ 

_14.5.7_ _Static Semantics: IsConstantDeclaration_ 

_14.5.8_ _Static Semantics: IsFunctionDefinition_ 

_14.5.9_ _Static Semantics: IsStatic_ 

_14.5.10_ _Static Semantics: NonConstructorMethodDefinitions_ 

_14.5.11_ _Static Semantics: PrototypePropertyNameList_ 

_14.5.12_ _Static Semantics: PropName_ 

_14.5.13_ _Static Semantics: StaticPropertyNameList_ 

_14.5.14_ _Runtime Semantics: ClassDefinitionEvaluation_ 

_14.5.15_ _Runtime Semantics: BindingClassDeclarationEvaluation_ 

_14.5.16_ _Runtime Semantics: Evaluation_ 

_14.6_ _Tail Position Calls_ 

_14.6.1_ _Static Semantics: IsInTailPosition(nonterminal)_ 

_14.6.2_ _Static Semantics: HasProductionInTailPosition_ 

_14.6.3_ _Runtime Semantics: PrepareForTailCall ( )_ 

_15_ _ECMAScript Language: Scripts and Modules_ 

_15.1_ _Scripts_ 

_15.1.1_ _Static Semantics: Early Errors_ 

_15.1.2_ _Static Semantics: IsStrict_ 

_15.1.3_ _Static Semantics: LexicallyDeclaredNames_ 

_15.1.4_ _Static Semantics: LexicallyScopedDeclarations_ 

_15.1.5_ _Static Semantics: VarDeclaredNames_ 

_15.1.6_ _Static Semantics: VarScopedDeclarations_ 

_15.1.7_ _Runtime Semantics: ScriptEvaluation_ 

_15.1.8_ _Runtime Semantics: GlobalDeclarationInstantiation (script,
env)_ 292

_15.1.9_ _Runtime Semantics: ScriptEvaluationJob ( sourceText )_ 

_15.2_ _Modules_ 

_15.2.1_ _Module Semantics_ 

_15.2.2_ _Imports_ 

_15.2.3_ _Exports_ 

_16_ _Error Handling and Language Extensions_ 

_16.1_ _Forbidden Extensions_ 

_17_ _ECMAScript Standard Built-in Objects_ 

_18_ _The Global Object_ 

_18.1_ _Value Properties of the Global Object_ 

_18.1.1_ _Infinity_ 

_18.1.2_ _NaN_ 

_18.1.3_ _undefined_ 

_18.2_ _Function Properties of the Global Object_ 

_18.2.1_ _eval (x)_ 

_18.2.2_ _isFinite (number)_ 

_18.2.3_ _isNaN (number)_ 

_18.2.4_ _parseFloat (string)_ 

_18.2.5_ _parseInt (string , radix)_ 

_18.2.6_ _URI Handling Functions_ 

_18.3_ _Constructor Properties of the Global Object_ 

_18.3.1_ _Array ( . . . )_ 

_18.3.2_ _ArrayBuffer ( . . . )_ 

_18.3.3_ _Boolean ( . . . )_ 

_18.3.4_ _DataView ( . . . )_ 

_18.3.5_ _Date ( . . . )_ 

_18.3.6_ _Error ( . . . )_ 

_18.3.7_ _EvalError ( . . . )_ 

_18.3.8_ _Float32Array ( . . . )_ 

_18.3.9_ _Float64Array ( . . . )_ 

_18.3.10_ _Function ( . . . )_ 

_18.3.11_ _Int8Array ( . . . )_ 

_18.3.12_ _Int16Array ( . . . )_ 

_18.3.13_ _Int32Array ( . . . )_ 

_18.3.14_ _Map ( . . . )_ 

_18.3.15_ _Number ( . . . )_ 

_18.3.16_ _Object ( . . . )_ 

_18.3.17_ _Proxy ( . . . )_ 

_18.3.18_ _Promise ( . . . )_ 

_18.3.19_ _RangeError ( . . . )_ 

_18.3.20_ _ReferenceError ( . . . )_ 

_18.3.21_ _RegExp ( . . . )_ 

_18.3.22_ _Set ( . . . )_ 

_18.3.23_ _String ( . . . )_ 

_18.3.24_ _Symbol ( . . . )_ 

_18.3.25_ _SyntaxError ( . . . )_ 

_18.3.26_ _TypeError ( . . . )_ 

_18.3.27_ _Uint8Array ( . . . )_ 

_18.3.28_ _Uint8ClampedArray ( . . . )_ 

_18.3.29_ _Uint16Array ( . . . )_ 

_18.3.30_ _Uint32Array ( . . . )_ 

_18.3.31_ _URIError ( . . . )_ 

_18.3.32_ _WeakMap ( . . . )_ 

_18.3.33_ _WeakSet ( . . . )_ 

_18.4_ _Other Properties of the Global Object_ 

_18.4.1_ _JSON_ 

_18.4.2_ _Math_ 

_18.4.3_ _Reflect_ 

_19_ _Fundamental Objects_ 

_19.1_ _Object Objects_ 

_19.1.1_ _The Object Constructor_ 

_19.1.2_ _Properties of the Object Constructor_ 

_19.1.3_ _Properties of the Object Prototype Object_ 

_19.1.4_ _Properties of Object Instances_ 

_19.2_ _Function Objects_ 

_19.2.1_ _The Function Constructor_ 

_19.2.2_ _Properties of the Function Constructor_ 

_19.2.3_ _Properties of the Function Prototype Object_ 

_19.2.4_ _Function Instances_ 

_19.3_ _Boolean Objects_ 

_19.3.1_ _The Boolean Constructor_ 

_19.3.2_ _Properties of the Boolean Constructor_ 

_19.3.3_ _Properties of the Boolean Prototype Object_ 

_19.3.4_ _Properties of Boolean Instances_ 

_19.4_ _Symbol Objects_ 

_19.4.1_ _The Symbol Constructor_ 

_19.4.2_ _Properties of the Symbol Constructor_ 

_19.4.3_ _Properties of the Symbol Prototype Object_ 

_19.4.4_ _Properties of Symbol Instances_ 

_19.5_ _Error Objects_ 

_19.5.1_ _The Error Constructor_ 

_19.5.2_ _Properties of the Error Constructor_ 

_19.5.3_ _Properties of the Error Prototype Object_ 

_19.5.4_ _Properties of Error Instances_ 

_19.5.5_ _Native Error Types Used in This Standard_ 

_19.5.6_ __NativeError Object Structure__ 

_20_ _Numbers and Dates_ 

_20.1_ _Number Objects_ 

_20.1.1_ _The Number Constructor_ 

_20.1.2_ _Properties of the Number Constructor_ 

_20.1.3_ _Properties of the Number Prototype Object_ 

_20.1.4_ _Properties of Number Instances_ 

_20.2_ _The Math Object_ 

_20.2.1_ _Value Properties of the Math Object_ 

_20.2.2_ _Function Properties of the Math Object_ 

_20.3_ _Date Objects_ 

_20.3.1_ _Overview of Date Objects and Definitions of Abstract
Operations_ 371

_20.3.2_ _The Date Constructor_ 

_20.3.3_ _Properties of the Date Constructor_ 

_20.3.4_ _Properties of the Date Prototype Object_ 

_20.3.5_ _Properties of Date Instances_ 

_21_ _Text Processing_ 

_21.1_ _String Objects_ 

_21.1.1_ _The String Constructor_ 

_21.1.2_ _Properties of the String Constructor_ 

_21.1.3_ _Properties of the String Prototype Object_ 

_21.1.4_ _Properties of String Instances_ 

_21.1.5_ _String Iterator Objects_ 

_21.2_ _RegExp (Regular Expression) Objects_ 

_21.2.1_ _Patterns_ 

_21.2.2_ _Pattern Semantics_ 

_21.2.3_ _The RegExp Constructor_ 

_21.2.4_ _Properties of the RegExp Constructor_ 

_21.2.5_ _Properties of the RegExp Prototype Object_ 

_21.2.6_ _Properties of RegExp Instances_ 

_22_ _Indexed Collections_ 

_22.1_ _Array Objects_ 

_22.1.1_ _The Array Constructor_ 

_22.1.2_ _Properties of the Array Constructor_ 

_22.1.3_ _Properties of the Array Prototype Object_ 

_22.1.4_ _Properties of Array Instances_ 

_22.1.5_ _Array Iterator Objects_ 

_22.2_ __TypedArray Objects__ 

_22.2.1_ _The %TypedArray% Intrinsic Object_ 

_22.2.2_ _Properties of the %TypedArray% Intrinsic Object_ 

_22.2.3_ _Properties of the %TypedArrayPrototype% Object_ 

_22.2.4_ _The _TypedArray_ Constructors_ 

_22.2.5_ _Properties of the _TypedArray_ Constructors_ 

_22.2.6_ _Properties of _TypedArray_ Prototype Objects_ 

_22.2.7_ _Properties of _TypedArray_ Instances_ 

_23_ _Keyed Collection_ 

_23.1_ _Map Objects_ 

_23.1.1_ _The Map Constructor_ 

_23.1.2_ _Properties of the Map Constructor_ 

_23.1.3_ _Properties of the Map Prototype Object_ 

_23.1.4_ _Properties of Map Instances_ 

_23.1.5_ _Map Iterator Objects_ 

_23.2_ _Set Objects_ 

_23.2.1_ _The Set Constructor_ 

_23.2.2_ _Properties of the Set Constructor_ 

_23.2.3_ _Properties of the Set Prototype Object_ 

_23.2.4_ _Properties of Set Instances_ 

_23.2.5_ _Set Iterator Objects_ 

_23.3_ _WeakMap Objects_ 

_23.3.1_ _The WeakMap Constructor_ 

_23.3.2_ _Properties of the WeakMap Constructor_ 

_23.3.3_ _Properties of the WeakMap Prototype Object_ 

_23.3.4_ _Properties of WeakMap Instances_ 

_23.4_ _WeakSet Objects_ 

_23.4.1_ _The WeakSet Constructor_ 

_23.4.2_ _Properties of the WeakSet Constructor_ 

_23.4.3_ _Properties of the WeakSet Prototype Object_ 

_23.4.4_ _Properties of WeakSet Instances_ 

_24_ _Structured Data_ 

_24.1_ _ArrayBuffer Objects_ 

_24.1.1_ _Abstract Operations For ArrayBuffer Objects_ 

_24.1.2_ _The ArrayBuffer Constructor_ 

_24.1.3_ _Properties of the ArrayBuffer Constructor_ 

_24.1.4_ _Properties of the ArrayBuffer Prototype Object_ 

_24.1.5_ _Properties of the ArrayBuffer Instances_ 

_24.2_ _DataView Objects_ 

_24.2.1_ _Abstract Operations For DataView Objects_ 

_24.2.2_ _The DataView Constructor_ 

_24.2.3_ _Properties of the DataView Constructor_ 

_24.2.4_ _Properties of the DataView Prototype Object_ 

_24.2.5_ _Properties of DataView Instances_ 

_24.3_ _The JSON Object_ 

_24.3.1_ _JSON.parse ( text [ , reviver ] )_ 

_24.3.2_ _JSON.stringify ( value [ , replacer [ , space ] ] )_ 

_24.3.3_ _JSON [ @@toStringTag ]_ 

_25_ _Control Abstraction Objects_ 

_25.1_ _Iteration_ 

_25.1.1_ _Common Iteration Interfaces_ 

_25.1.2_ _The %IteratorPrototype% Object_ 

_25.2_ _GeneratorFunction Objects_ 

_25.2.1_ _The GeneratorFunction Constructor_ 

_25.2.2_ _Properties of the GeneratorFunction Constructor_ 

_25.2.3_ _Properties of the GeneratorFunction Prototype Object_ 

_25.2.4_ _GeneratorFunction Instances_ 

_25.3_ _Generator Objects_ 

_25.3.1_ _Properties of Generator Prototype_ 

_25.3.2_ _Properties of Generator Instances_ 

_25.3.3_ _Generator Abstract Operations_ 

_25.4_ _Promise Objects_ 

_25.4.1_ _Promise Abstract Operations_ 

_25.4.2_ _Promise Jobs_ 

_25.4.3_ _The Promise Constructor_ 

_25.4.4_ _Properties of the Promise Constructor_ 

_25.4.5_ _Properties of the Promise Prototype Object_ 

_25.4.6_ _Properties of Promise Instances_ 

_26_ _Reflection_ 

_26.1_ _The Reflect Object_ 

_26.1.1_ _Reflect.apply ( target, thisArgument, argumentsList )_ 

_26.1.2_ _Reflect.construct ( target, argumentsList [, newTarget] )_ 

_26.1.3_ _Reflect.defineProperty ( target, propertyKey, attributes )
5

_26.1.4_ _Reflect.deleteProperty ( target, propertyKey )_ 

_26.1.5_ _Reflect.enumerate ( target )_ 

_26.1.6_ _Reflect.get ( target, propertyKey [ , receiver ])_ 

_26.1.7_ _Reflect.getOwnPropertyDescriptor ( target, propertyKey )_ 

_26.1.8_ _Reflect.getPrototypeOf ( target )_ 

_26.1.9_ _Reflect.has ( target, propertyKey )_ 

_26.1.10_ _Reflect.isExtensible (target)_ 

_26.1.11_ _Reflect.ownKeys ( target )_ 

_26.1.12_ _Reflect.preventExtensions ( target )_ 

_26.1.13_ _Reflect.set ( target, propertyKey, V [ , receiver ] )_ 

_26.1.14_ _Reflect.setPrototypeOf ( target, proto )_ 

_26.2_ _Proxy Objects_ 

_26.2.1_ _The Proxy Constructor_ 

_26.2.2_ _Properties of the Proxy Constructor_ 

_26.3_ _Module Namespace Objects_ 

_26.3.1_ _@@toStringTag_ 

_26.3.2_ _[ @@iterator ] ( )_ 

_Annex A (informative) Grammar Summary_ 

_A.1_ _Lexical Grammar_ 

_A.2_ _Expressions_ 

_A.3_ _Statements_ 

_A.4_ _Functions and Classes_ 

_A.5_ _Scripts and Modules_ 

_A.6_ _Number Conversions_ 

_A.7_ _Universal Resource Identifier Character Classes_ 

_A.8_ _Regular Expressions_ 

_Annex B (normative) Additional ECMAScript Features for Web Browsers
5

_B.1_ _Additional Syntax_ 

_B.1.1_ _Numeric Literals_ 

_B.1.2_ _String Literals_ 

_B.1.3_ _HTML-like Comments_ 

_B.1.4_ _Regular Expressions Patterns_ 

_B.2_ _Additional Built-in Properties_ 

_B.2.1_ _Additional Properties of the Global Object_ 

_B.2.2_ _Additional Properties of the Object.prototype Object_ 

_B.2.3_ _Additional Properties of the String.prototype Object_ 

_B.2.4_ _Additional Properties of the Date.prototype Object_ 

_B.2.5_ _Additional Properties of the RegExp.prototype Object_ 

_B.3_ _Other Additional Features_ 

_B.3.1_ ___proto__ Property Names in Object Initializers_ 

_B.3.2_ _Labelled Function Declarations_ 

_B.3.3_ _Block-Level Function Declarations Web Legacy Compatibility
Semantics_ 582

_B.3.4_ _FunctionDeclarations in IfStatement Statement Clauses_ 

_B.3.5_ _VariableStatements in Catch blocks_ 

_Annex C (informative) The Strict Mode of ECMAScript_ 

_Annex D (informative) Corrections and Clarifications in ECMAScript 
with Possible Compatibility Impact_ 587

_Annex E (informative) Additions and Changes That Introduce
Incompatibilities with Prior Editions_ 589

Introduction

This is the sixth edition of ECMAScript Language Specification. Since
publication of the first edition in 1997, ECMAScript has grown to be one
of the world’s most widely used general purpose programming languages.
It is best known as the language embedded in web browsers but has also
been widely adopted for server and embedded applications. The sixth
edition is the most extensive update to ECMAScript since the publication
of the first edition in 1997.

Goals for the sixth edition include providing better support for large
applications, library creation, and for use of ECMAScript as a
compilation target for other languages. Some of its major enhancements
include modules, class declarations, lexical block scoping, iterators
and generators, promises for asynchronous programming, destructuring
patterns, and proper tail calls. The ECMAScript library of built-ins has
been expanded to support additional data abstractions including maps,
sets, and arrays of binary numeric values as well as additional support
for Unicode supplemental characters in strings and regular expressions.
The built-ins are now extensible via subclassing.

Focused development of the sixth edition started in 2009, as the fifth
edition was being prepared for publication. However, this was preceded
by significant experimentation and language enhancement design efforts
dating to the publication of the third edition in 1999. In a very real
sense, the completion of the sixth edition is the culmination of a
fifteen year effort. Dozens of individuals representing many
organizations have made very significant contributions within TC39 to
the development of this edition and to the prior editions. In addition,
a vibrant informal community has emerged supporting TC39’s ECMAScript
efforts. This community has reviewed numerous drafts, filed thousands of
bug reports, performed implementation experiments, contributed test
suites, and educated the world-wide developer community about
ECMAScript. Unfortunately, it is impossible to identify and acknowledge
every person and organization who has contributed to this effort.

New uses and requirements for ECMAScript continue to emerge. The sixth
edition provides the foundation for regular, incremental language and
library enhancements.

Allen Wirfs-Brock
ECMA-262, 6^th^ Edition Project Editor

This Ecma Standard has been adopted by the General Assembly of <month>
<year>.

ECMA-262 EDITION HISTORY

This Ecma Standard is based on several originating technologies, the
most well-known being JavaScript (Netscape) and JScript (Microsoft). The
language was invented by Brendan Eich at Netscape and first appeared in
that company’s Navigator 2.0 browser. It has appeared in all subsequent
browsers from Netscape and in all browsers from Microsoft starting with
Internet Explorer 3.0.

The development of this Standard started in November 1996. The first
edition of this Ecma Standard was adopted by the Ecma General Assembly
of June 1997.

That Ecma Standard was submitted to ISO/IEC JTC 1 for adoption under the
fast-track procedure, and approved as international standard ISO/IEC
16262, in April 1998. The Ecma General Assembly of June 1998 approved
the second edition of ECMA-262 to keep it fully aligned with ISO/IEC
16262. Changes between the first and the second edition are editorial in
nature.

The third edition of the Standard introduced powerful regular
expressions, better string handling, new control statements, try/catch
exception handling, tighter definition of errors, formatting for numeric
output and minor changes in anticipation future language growth. The
third edition of the ECMAScript standard was adopted by the Ecma General
Assembly of December 1999 and published as ISO/IEC 16262:2002 in June
2002.

After publication of the third edition, ECMAScript achieved massive
adoption in conjunction with the World Wide Web where it has become the
programming language that is supported by essentially all web browsers.
Significant work was done to develop a fourth edition of ECMAScript.
However, that work was not completed and not published[1] as the fourth
edition of ECMAScript but some of it was incorporated into the
development of the sixth edition.

The fifth edition of ECMAScript (published as ECMA-262 5^th^ edition)
codified de facto interpretations of the language specification that
have become common among browser implementations and added support for
new features that had emerged since the publication of the third
edition. Such features include accessor properties, reflective creation
and inspection of objects, program control of property attributes,
additional array manipulation functions, support for the JSON object
encoding format, and a strict mode that provides enhanced error checking
and program security. The Fifth Edition was adopted by the Ecma General
Assembly of December 2009.

The Fifth Edition was submitted to ISO/IEC JTC 1 for adoption under the
fast-track procedure, and approved as international standard ISO/IEC
16262:2011. Edition 5.1 of the ECMAScript Standard incorporated minor
corrections and is the same text as ISO/IEC 16262:2011. The 5.1 Edition
was adopted by the Ecma General Assembly of June 2011.

_"DISCLAIMER

_This draft document may be copied and furnished to others, and
derivative works that comment on or otherwise explain it or assist in
its implementation may be prepared, copied, published, and distributed,
in whole or in part, without restriction of any kind, provided that the
above copyright notice and this section are included on all such copies
and derivative works. However, this document itself may not be modified
in any way, including by removing the copyright notice or references to
Ecma International, except as needed for the purpose of developing any
document or deliverable produced by Ecma International._

_This disclaimer is valid only prior to final version of this document.
After approval all rights on the standard are reserved by Ecma
International._

_The limited permissions are granted through the standardization phase
and will not be revoked by Ecma International or its successors or
assigns during this time._

_This document and the information contained herein is provided on an
"AS IS" basis and ECMA INTERNATIONAL DISCLAIMS ALL WARRANTIES, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
THE INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY
IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
PURPOSE."_

ECMAScript 2015 Language Specification



SCOPE


This Standard defines the ECMAScript 2015 general purpose programming
language.



CONFORMANCE


A conforming implementation of ECMAScript must provide and support all
the types, values, objects, properties, functions, and program syntax
and semantics described in this specification.

A conforming implementation of ECMAScript must interpret source text
input in conformance with the Unicode Standard, Version 5.1.0 or later
and ISO/IEC 10646. If the adopted ISO/IEC 10646-1 subset is not
otherwise specified, it is presumed to be the Unicode set, collection
10646.

A conforming implementation of ECMAScript that provides an application
programming interface that supports programs that need to adapt to the
linguistic and cultural conventions used by different human languages
and countries must implement the interface defined by the most recent
edition of ECMA-402 that is compatible with this specification.

A conforming implementation of ECMAScript may provide additional types,
values, objects, properties, and functions beyond those described in
this specification. In particular, a conforming implementation of
ECMAScript may provide properties not described in this specification,
and values for those properties, for objects that are described in this
specification.

A conforming implementation of ECMAScript may support program and
regular expression syntax not described in this specification. In
particular, a conforming implementation of ECMAScript may support
program syntax that makes use of the “future reserved words” listed in
subclause 11.6.2.2 of this specification.

A conforming implementation of ECMAScript must not implement any
extension that is listed as a Forbidden Extension in subclause 16.1.



NORMATIVE REFERENCES


The following referenced documents are indispensable for the application
of this document. For dated references, only the edition cited applies.
For undated references, the latest edition of the referenced document
(including any amendments) applies.

IEEE Std 754-2008: _IEEE Standard for Floating-Point Arithmetic_.
Institute of Electrical and Electronic Engineers, New York (2008)

ISO/IEC 10646:2003: _Information Technology – Universal Multiple-Octet
Coded Character Set (UCS) plus Amendment 1:2005, Amendment 2:2006,
Amendment 3:2008, and Amendment 4:2008_, plus additional amendments and
corrigenda, or successor

_The Unicode Standard, Version 5.0_, as amended by Unicode 5.1.0, or
successor.
_http://www.unicode.org/versions/latest

_Unicode Standard Annex #15, Unicode Normalization Forms, version
Unicode 5.1.0_, or successor.
_http://www.unicode.org/reports/tr15/

_Unicode Standard Annex #31, Unicode Identifiers and Pattern Syntax,
version Unicode 5.1.0_, or successor.
_http://www.unicode.org/reports/tr31/

ECMA-402, _ECMAScript 2015 Internationalization API Specification_.
_http://www.ecma-international.org/publications/standards/Ecma-402.htm

ECMA-404, _The JSON Data Interchange Format_.
_http://www.ecma-international.org/publications/standards/Ecma-404.htm



OVERVIEW


This section contains a non-normative overview of the ECMAScript
language.

ECMAScript is an object-oriented programming language for performing
computations and manipulating computational objects within a host
environment. ECMAScript as defined here is not intended to be
computationally self-sufficient; indeed, there are no provisions in this
specification for input of external data or output of computed results.
Instead, it is expected that the computational environment of an
ECMAScript program will provide not only the objects and other
facilities described in this specification but also certain
environment-specific objects, whose description and behaviour are beyond
the scope of this specification except to indicate that they may provide
certain properties that can be accessed and certain functions that can
be called from an ECMAScript program.

ECMAScript was originally designed to be used as a scripting language,
but has become widely used as a general purpose programming language. A
_SCRIPTING LANGUAGE_ is a programming language that is used to
manipulate, customize, and automate the facilities of an existing
system. In such systems, useful functionality is already available
through a user interface, and the scripting language is a mechanism for
exposing that functionality to program control. In this way, the
existing system is said to provide a host environment of objects and
facilities, which completes the capabilities of the scripting language.
A scripting language is intended for use by both professional and
non-professional programmers.

ECMAScript was originally designed to be a _WEB SCRIPTING LANGUAGE_,
providing a mechanism to enliven Web pages in browsers and to perform
server computation as part of a Web-based client-server architecture.
ECMAScript is now used to provide core scripting capabilities for a
variety of host environments. Therefore the core language is specified
in this document apart from any particular host environment.

ECMAScript usage has moved beyond simple scripting and it is now used
for the full spectrum of programming tasks in many different
environments and scales. As the usage of ECMAScript has expanded, so has
the features and facilities it provides. ECMAScript is now a fully
featured general propose programming language.

Some of the facilities of ECMAScript are similar to those used in other
programming languages; in particular C, Java, Self, and Scheme as
described in:

ISO/IEC 9899:1996, Programming Languages – C.

Gosling, James, Bill Joy and Guy Steele. The Java^^ Language
Specification. Addison Wesley Publishing Co., 1996.

Ungar, David, and Smith, Randall B. Self: The Power of Simplicity.
OOPSLA '87 Conference Proceedings, pp. 227–241, Orlando, FL, October
1987.

IEEE Standard for the Scheme Programming Language. IEEE Std 1178-1990.


Web Scripting

A web browser provides an ECMAScript host environment for client-side
computation including, for instance, objects that represent windows,
menus, pop-ups, dialog boxes, text areas, anchors, frames, history,
cookies, and input/output. Further, the host environment provides a
means to attach scripting code to events such as change of focus, page
and image loading, unloading, error and abort, selection, form
submission, and mouse actions. Scripting code appears within the HTML
and the displayed page is a combination of user interface elements and
fixed and computed text and images. The scripting code is reactive to
user interaction and there is no need for a main program.

A web server provides a different host environment for server-side
computation including objects representing requests, clients, and files;
and mechanisms to lock and share data. By using browser-side and
server-side scripting together, it is possible to distribute computation
between the client and server while providing a customized user
interface for a Web-based application.

Each Web browser and server that supports ECMAScript supplies its own
host environment, completing the ECMAScript execution environment.


ECMAScript Overview

The following is an informal overview of ECMAScript—not all parts of the
language are described. This overview is not part of the standard
proper.

ECMAScript is object-based: basic language and host facilities are
provided by objects, and an ECMAScript program is a cluster of
communicating objects. In ECMAScript, an _OBJECT_ is a collection of
zero or more _PROPERTIES_ each with _ATTRIBUTES_ that determine how each
property can be used—for example, when the Writable attribute for a
property is set to FALSE, any attempt by executed ECMAScript code to
assign a different value to the property fails. Properties are
containers that hold other objects, _PRIMITIVE VALUES_, or _FUNCTIONS_.
A primitive value is a member of one of the following built-in types:
UNDEFINED, NULL, BOOLEAN, NUMBER, STRING, and SYMBOL; an object is a
member of the built-in type OBJECT; and a function is a callable object.
A function that is associated with an object via a property is called a
_METHOD_.

ECMAScript defines a collection of _BUILT-IN OBJECTS_ that round out the
definition of ECMAScript entities. These built-in objects include the
global object; objects that are fundamental to the runtime semantics of
the language including OBJECT, FUNCTION, BOOLEAN, SYMBOL, and various
ERROR objects; objects that represent and manipulate numeric values
including MATH, NUMBER, and DATE; the text processing objects STRING and
REGEXP; objects that are indexed collections of values including ARRAY
and nine different kinds of Typed Arrays whose elements all have a
specific numeric data representation; keyed collections including MAP
and SET objects; objects supporting structured data including the JSON
object, ARRAYBUFFER, and DATAVIEW; objects supporting control
abstractions including generator functions and PROMISE objects; and,
reflection objects including PROXY and REFLECT.

ECMAScript also defines a set of built-in _OPERATORS_. ECMAScript
operators include various unary operations, multiplicative operators,
additive operators, bitwise shift operators, relational operators,
equality operators, binary bitwise operators, binary logical operators,
assignment operators, and the comma operator.

Large ECMAScript programs are supported by _MODULES_ which allow a
program to be divided into multiple sequences of statements and
declarations. Each module explicitly identifies declarations it uses
that need to be provided by other modules and which of its declarations
are available for use by other modules.

ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax
is relaxed to enable it to serve as an easy-to-use scripting language.
For example, a variable is not required to have its type declared nor
are types associated with properties, and defined functions are not
required to have their declarations appear textually before calls to
them.

Objects

Even though ECMAScript includes syntax for class definitions, ECMAScript
objects are not fundamentally class-based such as those in C++,
Smalltalk, or Java. Instead objects may be created in various ways
including via a literal notation or via _CONSTRUCTORS_ which create
objects and then execute code that initializes all or part of them by
assigning initial values to their properties. Each constructor is a
function that has a property named "PROTOTYPE" that is used to implement
_PROTOTYPE-BASED INHERITANCE_ and _SHARED PROPERTIES_. Objects are
created by using constructors in NEW expressions; for example, NEW
DATE(2009,11) creates a new Date object. Invoking a constructor without
using NEW has consequences that depend on the constructor. For example,
DATE() produces a string representation of the current date and time
rather than an object.

Every object created by a constructor has an implicit reference (called
the object’s _prototype_) to the value of its constructor’s "PROTOTYPE"
property. Furthermore, a prototype may have a non-null implicit
reference to its prototype, and so on; this is called the _prototype
chain_. When a reference is made to a property in an object, that
reference is to the property of that name in the first object in the
prototype chain that contains a property of that name. In other words,
first the object mentioned directly is examined for such a property; if
that object contains the named property, that is the property to which
the reference refers; if that object does not contain the named
property, the prototype for that object is examined next; and so on.

  --
  --

Figure 1 — Object/Prototype Relationships

In a class-based object-oriented language, in general, state is carried
by instances, methods are carried by classes, and inheritance is only of
structure and behaviour. In ECMAScript, the state and methods are
carried by objects, while structure, behaviour, and state are all
inherited.

All objects that do not directly contain a particular property that
their prototype contains share that property and its value. Figure 1
illustrates this:

CF is a constructor (and also an object). Five objects have been created
by using NEW expressions: CF~1~, CF~2~, CF~3~, CF~4~, and CF~5~. Each of
these objects contains properties named q1 and q2. The dashed lines
represent the implicit prototype relationship; so, for example, CF~3~’s
prototype is CF~P~. The constructor, CF, has two properties itself,
named P1 and P2, which are not visible to CF~P~, CF~1~, CF~2~, CF~3~,
CF~4~, or CF~5~. The property named CFP1 in CF~P~ is shared by CF~1~,
CF~2~, CF~3~, CF~4~, and CF~5~ (but not by CF), as are any properties
found in CF~P~’s implicit prototype chain that are not named q1, q2, or
CFP1. Notice that there is no implicit prototype link between CF and
CF~P~.

Unlike most class-based object languages, properties can be added to
objects dynamically by assigning values to them. That is, constructors
are not required to name or assign values to all or any of the
constructed object’s properties. In the above diagram, one could add a
new shared property for CF~1~, CF~2~, CF~3~, CF~4~, and CF~5\ ~by
assigning a new value to the property in CF~P~.

Although ECMAScript objects are not inherently class-based, it is often
convenient to define class-like abstractions based upon a common pattern
of constructor functions, prototype objects, and methods. The ECMAScript
built-in objects themselves follow such a class-like pattern. Beginning
with ECMAScript 2015, the ECMAScript language includes syntactic class
definitions that permit programmers to concisely define objects that
conform to the same class-like abstraction pattern used by the built-in
objects.

The Strict Variant of ECMAScript

The ECMAScript Language recognizes the possibility that some users of
the language may wish to restrict their usage of some features available
in the language. They might do so in the interests of security, to avoid
what they consider to be error-prone features, to get enhanced error
checking, or for other reasons of their choosing. In support of this
possibility, ECMAScript defines a strict variant of the language. The
strict variant of the language excludes some specific syntactic and
semantic features of the regular ECMAScript language and modifies the
detailed semantics of some features. The strict variant also specifies
additional error conditions that must be reported by throwing error
exceptions in situations that are not specified as errors by the
non-strict form of the language.

The strict variant of ECMAScript is commonly referred to as the _strict
mode_ of the language. Strict mode selection and use of the strict mode
syntax and semantics of ECMAScript is explicitly made at the level of
individual ECMAScript source text units. Because strict mode is selected
at the level of a syntactic source text unit, strict mode only imposes
restrictions that have local effect within such a source text unit.
Strict mode does not restrict or modify any aspect of the ECMAScript
semantics that must operate consistently across multiple source text
units. A complete ECMAScript program may be composed of both strict mode
and non-strict mode ECMAScript source text units. In this case, strict
mode only applies when actually executing code that is defined within a
strict mode source text unit.

In order to conform to this specification, an ECMAScript implementation
must implement both the full unrestricted ECMAScript language and the
strict variant of the ECMAScript language as defined by this
specification. In addition, an implementation must support the
combination of unrestricted and strict mode source text units into a
single composite program.


Terms and definitions

For the purposes of this document, the following terms and definitions
apply.

4.3.

type

set of data values as defined in clause 6 of this specification

4.3.

primitive value

member of one of the types Undefined, Null, Boolean, Number, Symbol, or
String as defined in clause 6

NOTE A primitive value is a datum that is represented directly at the
lowest level of the language implementation.

4.3.

object

member of the type Object

NOTE An object is a collection of properties and has a single prototype
object. The prototype may be the null value.

4.3.

constructor

function object that creates and initializes objects

NOTE The value of a constructor’s prototype property is a prototype
object that is used to implement inheritance and shared properties.

4.3.

prototype

object that provides shared properties for other objects

NOTE When a constructor creates an object, that object implicitly
references the constructor’s PROTOTYPE property for the purpose of
resolving property references. The constructor’s PROTOTYPE property can
be referenced by the program expression _constructor_.PROTOTYPE, and
properties added to an object’s prototype are shared, through
inheritance, by all objects sharing the prototype. Alternatively, a new
object may be created with an explicitly specified prototype by using
the OBJECT.CREATE built-in function.

4.3.

ordinary object

object that has the default behaviour for the essential internal methods
that must be supported by all objects.

4.3.

exotic object

object that does not have the default behaviour for one or more of the
essential internal methods that must be supported by all objects.

NOTE Any object that is not an ordinary object is an exotic object.

4.3.

standard object

object whose semantics are defined by this specification

4.3.

built-in object

object specified and supplied by an ECMAScript implementation

NOTE Standard built-in objects are defined in this specification. An
ECMAScript implementation may specify and supply additional kinds of
built-in objects. A _built-in constructor_ is a built-in object that is
also a constructor.

4.3.

undefined value

primitive value used when a variable has not been assigned a value

4.3.

Undefined type

type whose sole value is the UNDEFINED value

4.3.

null value

primitive value that represents the intentional absence of any object
value

4.3.

Null type

type whose sole value is the null value

4.3.

Boolean value

member of the Boolean type

NOTE There are only two Boolean values, TRUE and FALSE

4.3.

Boolean type

type consisting of the primitive values TRUE and FALSE

4.3.

Boolean object

member of the Object type that is an instance of the standard built-in
BOOLEAN constructor

NOTE A Boolean object is created by using the BOOLEAN constructor in a
NEW expression, supplying a Boolean value as an argument. The resulting
object has an internal slot whose value is the Boolean value. A Boolean
object can be coerced to a Boolean value.

4.3.

String value

primitive value that is a finite ordered sequence of zero or more 16-bit
unsigned integer

NOTE A String value is a member of the String type. Each integer value
in the sequence usually represents a single 16-bit unit of UTF-16 text.
However, ECMAScript does not place any restrictions or requirements on
the values except that they must be 16-bit unsigned integers.

4.3.

String type

set of all possible String values

4.3.

String object

member of the Object type that is an instance of the standard built-in
STRING constructor

NOTE A String object is created by using the STRING constructor in a NEW
expression, supplying a String value as an argument. The resulting
object has an internal slot whose value is the String value. A String
object can be coerced to a String value by calling the STRING
constructor as a function (21.1.1.1).

4.3.

Number value

primitive value corresponding to a double-precision 64-bit binary format
IEEE 754-2008 value

NOTE A Number value is a member of the Number type and is a direct
representation of a number.

4.3.

Number type

set of all possible Number values including the special “Not-a-Number”
(NaN) value, positive infinity, and negative infinity

4.3.

Number object

member of the Object type that is an instance of the standard built-in
NUMBER constructor

NOTE A Number object is created by using the NUMBER constructor in a NEW
expression, supplying a Number value as an argument. The resulting
object has an internal slot whose value is the Number value. A Number
object can be coerced to a Number value by calling the NUMBER
constructor as a function (20.1.1.1).

4.3.

Infinity

number value that is the positive infinite Number value

4.3.

NaN

number value that is an IEEE 754-2008 “Not-a-Number” value

4.3.

Symbol value

primitive value that represents a unique, non-String Object property key

4.3.

Symbol type

set of all possible Symbol values

4.3.

Symbol object

member of the Object type that is an instance of the standard built-in
SYMBOL constructor

4.3.

function

member of the Object type that may be invoked as a subroutine

NOTE In addition to its properties, a function contains executable code
and state that determine how it behaves when invoked. A function’s code
may or may not be written in ECMAScript.

4.3.

built-in function

built-in object that is a function

NOTE Examples of built-in functions include PARSEINT and MATH.EXP. An
implementation may provide implementation-dependent built-in functions
that are not described in this specification.

4.3.

property

part of an object that associates a key (either a String value or a
Symbol value) and a value.

NOTE Depending upon the form of the property the value may be
represented either directly as a data value (a primitive value, an
object, or a function object) or indirectly by a pair of accessor
functions.

4.3.

method

function that is the value of a property

NOTE When a function is called as a method of an object, the object is
passed to the function as its THIS value.

4.3.

built-in method

method that is a built-in function

NOTE Standard built-in methods are defined in this specification, and an
ECMAScript implementation may specify and provide other additional
built-in methods.

4.3.

attribute

internal value that defines some characteristic of a property

4.3.

own property

property that is directly contained by its object

4.3.

inherited property

property of an object that is not an own property but is a property
(either own or inherited) of the object’s prototype


Organization of This Specification

The remainder of this specification is organized as follows:

Clause 5 defines the notational conventions used throughout the
specification.

Clauses 6−9 define the execution environment within which ECMAScript
programs operate.

Clauses 10−16 define the actual ECMAScript programming language
including its syntactic encoding and the execution semantics of all
language features.

Clauses 17−26 define the ECMAScript standard library. It includes the
definitions of all of the standard objects that are available for use by
ECMAScript programs as they execute.



NOTATIONAL CONVENTIONS


Syntactic and Lexical Grammars

Context-Free Grammars

A _context-free grammar_ consists of a number of _productions_. Each
production has an abstract symbol called a _nonterminal_ as its
_left-hand side_, and a sequence of zero or more nonterminal and
_terminal_ symbols as its _right-hand side_. For each grammar, the
terminal symbols are drawn from a specified alphabet.

A _chain production_ is a production that has exactly one nonterminal
symbol on its right-hand side along with zero or more terminal symbols.

Starting from a sentence consisting of a single distinguished
nonterminal, called the _goal symbol_, a given context-free grammar
specifies a _language_, namely, the (perhaps infinite) set of possible
sequences of terminal symbols that can result from repeatedly replacing
any nonterminal in the sequence with a right-hand side of a production
for which the nonterminal is the left-hand side.

The Lexical and RegExp Grammars

A _lexical grammar_ for ECMAScript is given in clause 11. This grammar
has as its terminal symbols Unicode code points that conform to the
rules for _SourceCharacter_ defined in 10.1. It defines a set of
productions, starting from the goal symbol _InputElementDiv_,
_InputElementTemplateTail_, or _InputElementRegExp_, or
_InputElementRegExpOrTemplateTail_, that describe how sequences of such
code points are translated into a sequence of input elements.

Input elements other than white space and comments form the terminal
symbols for the syntactic grammar for ECMAScript and are called
ECMAScript _tokens_. These tokens are the reserved words, identifiers,
literals, and punctuators of the ECMAScript language. Moreover, line
terminators, although not considered to be tokens, also become part of
the stream of input elements and guide the process of automatic
semicolon insertion (11.9). Simple white space and single-line comments
are discarded and do not appear in the stream of input elements for the
syntactic grammar. A _MultiLineComment_ (that is, a comment of the form
/*…*/ regardless of whether it spans more than one line) is likewise
simply discarded if it contains no line terminator; but if a
_MultiLineComment_ contains one or more line terminators, then it is
replaced by a single line terminator, which becomes part of the stream
of input elements for the syntactic grammar.

A _RegExp grammar_ for ECMAScript is given in 21.2.1. This grammar also
has as its terminal symbols the code points as defined by
_SourceCharacter_. It defines a set of productions, starting from the
goal symbol _Pattern_, that describe how sequences of code points are
translated into regular expression patterns.

Productions of the lexical and RegExp grammars are distinguished by
having two colons “::” as separating punctuation. The lexical and RegExp
grammars share some productions.

The Numeric String Grammar

Another grammar is used for translating Strings into numeric values.
This grammar is similar to the part of the lexical grammar having to do
with numeric literals and has as its terminal symbols _SourceCharacter_.
This grammar appears in 7.1.3.1.

Productions of the numeric string grammar are distinguished by having
three colons “:::” as punctuation.

The Syntactic Grammar

The _syntactic grammar_ for ECMAScript is given in clauses 11, 12, 13,
14, and 15. This grammar has ECMAScript tokens defined by the lexical
grammar as its terminal symbols (5.1.2). It defines a set of
productions, starting from two alternative goal symbols _Script_ and
_Module_, that describe how sequences of tokens form syntactically
correct independent components of ECMAScript programs.

When a stream of code points is to be parsed as an ECMAScript _Script_
or _Module_, it is first converted to a stream of input elements by
repeated application of the lexical grammar; this stream of input
elements is then parsed by a single application of the syntactic
grammar. The input stream is syntactically in error if the tokens in the
stream of input elements cannot be parsed as a single instance of the
goal nonterminal (_Script_ or _Module_), with no tokens left over.

Productions of the syntactic grammar are distinguished by having just
one colon “:” as punctuation.

The syntactic grammar as presented in clauses 12, 13, 14 and 15 is not a
complete account of which token sequences are accepted as a correct
ECMAScript _Script_ or _Module_. Certain additional token sequences are
also accepted, namely, those that would be described by the grammar if
only semicolons were added to the sequence in certain places (such as
before line terminator characters). Furthermore, certain token sequences
that are described by the grammar are not considered acceptable if a
line terminator character appears in certain “awkward” places.

In certain cases in order to avoid ambiguities the syntactic grammar
uses generalized productions that permit token sequences that do not
form a valid ECMAScript _Script_ or _Module_. For example, this
technique is used for object literals and object destructuring patterns.
In such cases a more restrictive _supplemental grammar_ is provided that
further restricts the acceptable token sequences. In certain contexts,
when explicitly specified, the input elements corresponding to such a
production are parsed again using a goal symbol of a supplemental
grammar. The input stream is syntactically in error if the tokens in the
stream of input elements parsed by a cover grammar cannot be parsed as a
single instance of the corresponding supplemental goal symbol, with no
tokens left over.

Grammar Notation

Terminal symbols of the lexical, RegExp, and numeric string grammars are
shown in FIXED WIDTH font, both in the productions of the grammars and
throughout this specification whenever the text directly refers to such
a terminal symbol. These are to appear in a script exactly as written.
All terminal symbol code points specified in this way are to be
understood as the appropriate Unicode code points from the Basic Latin
range, as opposed to any similar-looking code points from other Unicode
ranges.

Nonterminal symbols are shown in _italic_ type. The definition of a
nonterminal (also called a “production”) is introduced by the name of
the nonterminal being defined followed by one or more colons. (The
number of colons indicates to which grammar the production belongs.) One
or more alternative right-hand sides for the nonterminal then follow on
succeeding lines. For example, the syntactic definition:

WhileStatement :

WHILE ( Expression ) Statement

states that the nonterminal _WhileStatement_ represents the token WHILE,
followed by a left parenthesis token, followed by an _Expression_,
followed by a right parenthesis token, followed by a _Statement_. The
occurrences of _Expression_ and _Statement_ are themselves nonterminals.
As another example, the syntactic definition:

ArgumentList :

AssignmentExpression
ArgumentList , AssignmentExpression

states that an _ArgumentList_ may represent either a single
_AssignmentExpression_ or an _ArgumentList_, followed by a comma,
followed by an _AssignmentExpression_. This definition of _ArgumentList_
is recursive, that is, it is defined in terms of itself. The result is
that an _ArgumentList_ may contain any positive number of arguments,
separated by commas, where each argument expression is an
_AssignmentExpression_. Such recursive definitions of nonterminals are
common.

The subscripted suffix “~opt~”, which may appear after a terminal or
nonterminal, indicates an optional symbol. The alternative containing
the optional symbol actually specifies two right-hand sides, one that
omits the optional element and one that includes it. This means that:

VariableDeclaration :

BindingIdentifier Initializer~opt~

is a convenient abbreviation for:

VariableDeclaration :

BindingIdentifier
BindingIdentifier Initializer

and that:

IterationStatement :

FOR ( LexicalDeclaration Expression~opt~ ; Expression~opt~ ) Statement

is a convenient abbreviation for:

IterationStatement :

FOR ( LexicalDeclaration ; Expression~opt~ ) Statement
FOR ( LexicalDeclaration Expression ; Expression~opt~ ) Statement

which in turn is an abbreviation for:

IterationStatement :

FOR ( LexicalDeclaration ; ) Statement
FOR ( LexicalDeclaration ; Expression ) Statement
FOR ( LexicalDeclaration Expression ; ) Statement
FOR ( LexicalDeclaration Expression ; Expression ) Statement

so, in this example, the nonterminal _IterationStatement_ actually has
four alternative right-hand sides.

A production may be parameterized by a subscripted annotation of the
form “~[parameters]~”, which may appear as a suffix to the nonterminal
symbol defined by the production. “~parameters~” may be either a single
name or a comma separated list of names. A parameterized production is
shorthand for a set of productions defining all combinations of the
parameter names, preceded by an underscore, appended to the
parameterized nonterminal symbol. This means that:

StatementList~[Return]~ :

ReturnStatement
ExpressionStatement

is a convenient abbreviation for:

StatementList :

ReturnStatement
ExpressionStatement

StatementList_Return :

ReturnStatement
ExpressionStatement

and that:

StatementList~[Return,\ In]~ :

ReturnStatement
ExpressionStatement

is an abbreviation for:

StatementList :

ReturnStatement
ExpressionStatement

StatementList_Return :

ReturnStatement
ExpressionStatement

StatementList_In :

ReturnStatement
ExpressionStatement

StatementList_Return_In :

ReturnStatement
ExpressionStatement

Multiple parameters produce a combinatory number of productions, not all
of which are necessarily referenced in a complete grammar.

References to nonterminals on the right-hand side of a production can
also be parameterized. For example:

StatementList :

ReturnStatement
ExpressionStatement~[In]~

is equivalent to saying:

StatementList :

ReturnStatement
ExpressionStatement_In

A nonterminal reference may have both a parameter list and an “~opt~”
suffix. For example:

VariableDeclaration :

BindingIdentifier Initializer~[In]opt~

is an abbreviation for:

VariableDeclaration :

BindingIdentifier
BindingIdentifier Initializer_In

Prefixing a parameter name with “~?~” on a right-hand side nonterminal
reference makes that parameter value dependent upon the occurrence of
the parameter name on the reference to the current production’s
left-hand side symbol. For example:

VariableDeclaration~[In]~ :

BindingIdentifier Initializer~[?In]~

is an abbreviation for:

VariableDeclaration :

BindingIdentifier Initializer

VariableDeclaration_In :

BindingIdentifier Initializer_In

If a right-hand side alternative is prefixed with “[+parameter]” that
alternative is only available if the named parameter was used in
referencing the production’s nonterminal symbol. If a right-hand side
alternative is prefixed with “[~parameter]” that alternative is only
available if the named parameter was _not_ used in referencing the
production’s nonterminal symbol. This means that:

StatementList~[Return]~ :

[+Return] ReturnStatement
ExpressionStatement

is an abbreviation for:

StatementList :

ExpressionStatement

StatementList_Return :

ReturnStatement
ExpressionStatement

and that

StatementList~[Return]~ :

[~Return] ReturnStatement
ExpressionStatement

is an abbreviation for:

StatementList :

ReturnStatement
ExpressionStatement

StatementList_Return :

ExpressionStatement

When the words “ONE OF” follow the colon(s) in a grammar definition,
they signify that each of the terminal symbols on the following line or
lines is an alternative definition. For example, the lexical grammar for
ECMAScript contains the production:

NonZeroDigit :: ONE OF

1 2 3 4 5 6 7 8 

which is merely a convenient abbreviation for:

NonZeroDigit ::

1
2
3
4
5
6
7
8
9

If the phrase “[empty]” appears as the right-hand side of a production,
it indicates that the production's right-hand side contains no terminals
or nonterminals.

If the phrase “[lookahead ∉ _set_]” appears in the right-hand side of a
production, it indicates that the production may not be used if the
immediately following input token sequence is a member of the given
_set_. The _set_ can be written as a comma separated list of one or two
element terminal sequences enclosed in curly brackets. For convenience,
the set can also be written as a nonterminal, in which case it
represents the set of all terminals to which that nonterminal could
expand. If the _set_ consists of a single terminal the phrase
“[lookahead ≠ _terminal_]” may be used.

For example, given the definitions

DecimalDigit :: ONE OF

0 1 2 3 4 5 6 7 8 

DecimalDigits ::

DecimalDigit
DecimalDigits DecimalDigit

the definition

LookaheadExample ::

N [lookahead ∉ {1, 3, 5, 7, 9}] DecimalDigits
DecimalDigit [lookahead ∉ DecimalDigit ]

matches either the letter N followed by one or more decimal digits the
first of which is even, or a decimal digit not followed by another
decimal digit.

If the phrase “[no _LineTerminator_ here]” appears in the right-hand
side of a production of the syntactic grammar, it indicates that the
production is _a restricted production_: it may not be used if a
_LineTerminator_ occurs in the input stream at the indicated position.
For example, the production:

ThrowStatement :

THROW [no LineTerminator here] Expression ;

indicates that the production may not be used if a _LineTerminator_
occurs in the script between the THROW token and the _Expression_.

Unless the presence of a _LineTerminator_ is forbidden by a restricted
production, any number of occurrences of _LineTerminator_ may appear
between any two consecutive tokens in the stream of input elements
without affecting the syntactic acceptability of the script.

When an alternative in a production of the lexical grammar or the
numeric string grammar appears to be a multi-code point token, it
represents the sequence of code points that would make up such a token.

The right-hand side of a production may specify that certain expansions
are not permitted by using the phrase “BUT NOT” and then indicating the
expansions to be excluded. For example, the production:

Identifier ::

IdentifierName BUT NOT ReservedWord

means that the nonterminal _Identifier_ may be replaced by any sequence
of code points that could replace _IdentifierName_ provided that the
same sequence of code points could not replace _ReservedWord_.

Finally, a few nonterminal symbols are described by a descriptive phrase
in sans-serif type in cases where it would be impractical to list all
the alternatives:

SourceCharacter ::

any Unicode code point


Algorithm Conventions

The specification often uses a numbered list to specify steps in an
algorithm. These algorithms are used to precisely specify the required
semantics of ECMAScript language constructs. The algorithms are not
intended to imply the use of any specific implementation technique. In
practice, there may be more efficient algorithms available to implement
a given feature.

Algorithms may be explicitly parameterized, in which case the names and
usage of the parameters must be provided as part of the algorithm’s
definition. In order to facilitate their use in multiple parts of this
specification, some algorithms, called _abstract_ _operations_, are
named and written in parameterized functional form so that they may be
referenced by name from within other algorithms. Abstract operations are
typically referenced using a functional application style such as
operationName(_arg1_, _arg2_). Some abstract operations are treated as
polymorphically dispatched methods of class-like specification
abstractions. Such method-like abstract operations are typically
referenced using a method application style such as
_someValue_.operationName(_arg1_, _arg2_).

Algorithms may be associated with productions of one of the ECMAScript
grammars. A production that has multiple alternative definitions will
typically have a distinct algorithm for each alternative. When an
algorithm is associated with a grammar production, it may reference the
terminal and nonterminal symbols of the production alternative as if
they were parameters of the algorithm. When used in this manner,
nonterminal symbols refer to the actual alternative definition that is
matched when parsing the source text.

When an algorithm is associated with a production alternative, the
alternative is typically shown without any “[ ]” grammar annotations.
Such annotations should only affect the syntactic recognition of the
alternative and have no effect on the associated semantics for the
alternative.

Unless explicitly specified otherwise, all chain productions have an
implicit definition for every algorithm that might be applied to that
production’s left-hand side nonterminal. The implicit definition simply
reapplies the same algorithm name with the same parameters, if any, to
the chain production’s sole right-hand side nonterminal and then returns
the result. For example, assume there is a production:

Block :

{ StatementList }

but there is no corresponding Evaluation algorithm that is explicitly
specified for that production. If in some algorithm there is a statement
of the form: “Return the result of evaluating _Block_” it is implicit
that an Evaluation algorithm exists of the form:

RUNTIME SEMANTICS: EVALUATION

_Block_ : { _StatementList_ }

1.  Return the result of evaluating _StatementList_.

For clarity of expression, algorithm steps may be subdivided into
sequential substeps. Substeps are indented and may themselves be further
divided into indented substeps. Outline numbering conventions are used
to identify substeps with the first level of substeps labelled with
lower case alphabetic characters and the second level of substeps
labelled with lower case roman numerals. If more than three levels are
required these rules repeat with the fourth level using numeric labels.
For example:

1.  Top-level step

    a.  Substep.

    b.  Substep.

        i.  Subsubstep.

            1.  Subsubsubstep

                a.  Subsubsubsubstep

                    i.  Subsubsubsubsubstep

A step or substep may be written as an “if” predicate that conditions
its substeps. In this case, the substeps are only applied if the
predicate is true. If a step or substep begins with the word “else”, it
is a predicate that is the negation of the preceding “if” predicate step
at the same level.

A step may specify the iterative application of its substeps.

A step that begins with “Assert:” asserts an invariant condition of its
algorithm. Such assertions are used to make explicit algorithmic
invariants that would otherwise be implicit. Such assertions add no
additional semantic requirements and hence need not be checked by an
implementation. They are used simply to clarify algorithms.

Mathematical operations such as addition, subtraction, negation,
multiplication, division, and the mathematical functions defined later
in this clause should always be understood as computing exact
mathematical results on mathematical real numbers, which unless
otherwise noted do not include infinities and do not include a negative
zero that is distinguished from positive zero. Algorithms in this
standard that model floating-point arithmetic include explicit steps,
where necessary, to handle infinities and signed zero and to perform
rounding. If a mathematical operation or function is applied to a
floating-point number, it should be understood as being applied to the
exact mathematical value represented by that floating-point number; such
a floating-point number must be finite, and if it is +0 or −0 then the
corresponding mathematical value is simply 0.

The mathematical function abs(_x_) produces the absolute value of _x_,
which is −_x_ if _x_ is negative (less than zero) and otherwise is _x_
itself.

The mathematical function sign(_x_) produces 1 if _x_ is positive and −1
if _x_ is negative. The sign function is not used in this standard for
cases when _x_ is zero.

The mathematical function min(_x_~1~, _x_~2~, ..., _x_~n~) produces the
mathematically smallest of _x_~1~ through _x_~n~. The mathematical
function max(_x_~1~, _x_~2~, ..., _x_~n~) produces the mathematically
largest of _x_~1~ through _x_~n~. The domain and range of these
mathematical functions include +∞ and −∞.

The notation “_x_ modulo _y_” (_y_ must be finite and nonzero) computes
a value _k_ of the same sign as _y_ (or zero) such that abs(_k_) <
abs(_y_) and _x_−_k_ = _q_ × _y_ for some integer _q_.

The mathematical function floor(_x_) produces the largest integer
(closest to positive infinity) that is not larger than _x_.

NOTE floor(_x_) = _x_−(_x_ modulo 1).


Static Semantic Rules

Context-free grammars are not sufficiently powerful to express all the
rules that define whether a stream of input elements form a valid
ECMAScript _Script_ or _Module_ that may be evaluated. In some
situations additional rules are needed that may be expressed using
either ECMAScript algorithm conventions or prose requirements. Such
rules are always associated with a production of a grammar and are
called the _static semantics_ of the production.

Static Semantic Rules have names and typically are defined using an
algorithm. Named Static Semantic Rules are associated with grammar
productions and a production that has multiple alternative definitions
will typically have for each alternative a distinct algorithm for each
applicable named static semantic rule.

Unless otherwise specified every grammar production alternative in this
specification implicitly has a definition for a static semantic rule
named Contains which takes an argument named _symbol_ whose value is a
terminal or nonterminal of the grammar that includes the associated
production. The default definition of Contains is:

1.  For each terminal and nonterminal grammar symbol, _sym_, in the
    definition of this production do

    a.  If _sym_ is the same grammar symbol as _symbol_, return TRUE.

    b.  If _sym_ is a nonterminal, then

        i.  Let _contained_ be the result of _sym_ Contains _symbol_.

        ii. If _contained_ is TRUE, return TRUE.

2.  Return FALSE.

The above definition is explicitly over-ridden for specific productions.

A special kind of static semantic rule is an Early Error Rule. Early
error rules define early error conditions (see clause 16) that are
associated with specific grammar productions. Evaluation of most early
error rules are not explicitly invoked within the algorithms of this
specification. A conforming implementation must, prior to the first
evaluation of a _Script_, validate all of the early error rules of the
productions used to parse that _Script_. If any of the early error rules
are violated the _Script_ is invalid and cannot be evaluated.



ECMASCRIPT DATA TYPES AND VALUES 


Algorithms within this specification manipulate values each of which has
an associated type. The possible value types are exactly those defined
in this clause. Types are further subclassified into ECMAScript language
types and specification types.

Within this specification, the notation “Type(_x_)” is used as shorthand
for “the type of _x_” where “type” refers to the ECMAScript language and
specification types defined in this clause. When the term “empty” is
used as if it was naming a value, it is equivalent to saying “no value
of any type”.


ECMAScript Language Types

An ECMAScript language type corresponds to values that are directly
manipulated by an ECMAScript programmer using the ECMAScript language.
The ECMAScript language types are Undefined, Null, Boolean, String,
Symbol, Number, and Object. An ECMAScript language value is a value that
is characterized by an ECMAScript language type.

The Undefined Type

The Undefined type has exactly one value, called UNDEFINED. Any variable
that has not been assigned a value has the value UNDEFINED.

The Null Type

The Null type has exactly one value, called NULL.

The Boolean Type

The Boolean type represents a logical entity having two values, called
TRUE and FALSE.

The String Type

The String type is the set of all ordered sequences of zero or more
16-bit unsigned integer values (“elements”) up to a maximum length of
2^53^-1 elements. The String type is generally used to represent textual
data in a running ECMAScript program, in which case each element in the
String is treated as a UTF-16 code unit value. Each element is regarded
as occupying a position within the sequence. These positions are indexed
with nonnegative integers. The first element (if any) is at index 0, the
next element (if any) at index 1, and so on. The length of a String is
the number of elements (i.e., 16-bit values) within it. The empty String
has length zero and therefore contains no elements.

Where ECMAScript operations interpret String values, each element is
interpreted as a single UTF-16 code unit. However, ECMAScript does not
place any restrictions or requirements on the sequence of code units in
a String value, so they may be ill-formed when interpreted as UTF-16
code unit sequences. Operations that do not interpret String contents
treat them as sequences of undifferentiated 16-bit unsigned integers.
The function STRING.PROTOTYPE.NORMALIZE (see 21.1.3.12) can be used to
explicitly normalize a string value. STRING.PROTOTYPE.LOCALECOMPARE (see
21.1.3.10) internally normalizes string values, but no other operations
implicitly normalize the strings upon which they operate. Only
operations that are explicitly specified to be language or locale
sensitive produce language-sensitive results.

NOTE The rationale behind this design was to keep the implementation of
Strings as simple and high-performing as possible. If ECMAScript source
text is in Normalized Form C, string literals are guaranteed to also be
normalized, as long as they do not contain any Unicode escape sequences.

Some operations interpret String contents as UTF-16 encoded Unicode code
points. In that case the interpretation is:

-   A code unit in the range 0 to 0xD7FF or in the range 0xE000 to
    0xFFFF is interpreted as a code point with the same value.

-   A sequence of two code units, where the first code unit _c1_ is in
    the range 0xD800 to 0xDBFF and the second code unit _c2_ is in the
    range 0xDC00 to 0xDFFF, is a surrogate pair and is interpreted as a
    code point with the value (_c1_ - 0xD800) × 0x400 + (_c2_ –
    0xDC00) + 0x10000. (See 10.1.2)

-   A code unit that is in the range 0xD800 to 0xDFFF, but is not part
    of a surrogate pair, is interpreted as a code point with the same
    value.

The Symbol Type

The Symbol type is the set of all non-String values that may be used as
the key of an Object property (6.1.7).

Each possible Symbol value is unique and immutable.

Each Symbol value immutably holds an associated value called
[[Description]] that is either UNDEFINED or a String value.

Well-Known Symbols

Well-known symbols are built-in Symbol values that are explicitly
referenced by algorithms of this specification. They are typically used
as the keys of properties whose values serve as extension points of a
specification algorithm. Unless otherwise specified, well-known symbols
values are shared by all Code Realms (8.2).

Within this specification a well-known symbol is referred to by using a
notation of the form @@name, where “name” is one of the values listed in
Table 1.

Table 1— Well-known Symbols

  ----------------------- ----------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _SPECIFICATION NAME _   _[[DESCRIPTION]]_             _VALUE AND PURPOSE_
  @@hasInstance           "SYMBOL.HASINSTANCE"          A method that determines if a constructor object recognizes an object as one of the constructor’s instances. Called by the semantics of the INSTANCEOF operator.
  @@isConcatSpreadable    "SYMBOL.ISCONCATSPREADABLE"   A Boolean valued property that if true indicates that an object should be flattened to its array elements by ARRAY.PROTOTYPE.CONCAT.
  @@iterator              "SYMBOL.ITERATOR"             A method that returns the default Iterator for an object. Called by the semantics of the for-of statement.
  @@match                 "SYMBOL.MATCH"                A regular expression method that matches the regular expression against a string. Called by the STRING.PROTOTYPE.MATCH method.
  @@replace               "SYMBOL.REPLACE"              A regular expression method that replaces matched substrings of a string. Called by the STRING.PROTOTYPE.REPLACE method.
  @@search                "SYMBOL.SEARCH"               A regular expression method that returns the index within a string that matches the regular expression. Called by the STRING.PROTOTYPE.SEARCH method.
  @@species               "SYMBOL.SPECIES"              A function valued property that is the constructor function that is used to create derived objects.
  @@split                 "SYMBOL.SPLIT"                A regular expression method that splits a string at the indices that match the regular expression. Called by the STRING.PROTOTYPE.SPLIT method.
  @@toPrimitive           "SYMBOL.TOPRIMITIVE"          A method that converts an object to a corresponding primitive value. Called by the ToPrimitive abstract operation.
  @@toStringTag           "SYMBOL.TOSTRINGTAG"          A String valued property that is used in the creation of the default string description of an object. Accessed by the built-in method OBJECT.PROTOTYPE.TOSTRING.
  @@unscopables           "SYMBOL.UNSCOPABLES"          An object valued property whose own property names are property names that are excluded from the WITH environment bindings of the associated object.
  ----------------------- ----------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------

The Number Type

The Number type has exactly 18437736874454810627 (that is,
2^64^−2^53^+3) values, representing the double-precision 64-bit format
IEEE 754-2008 values as specified in the IEEE Standard for Binary
Floating-Point Arithmetic, except that the 9007199254740990 (that is,
2^53^−2) distinct “Not-a-Number” values of the IEEE Standard are
represented in ECMAScript as a single special NAN value. (Note that the
NAN value is produced by the program expression NAN.) In some
implementations, external code might be able to detect a difference
between various Not-a-Number values, but such behaviour is
implementation-dependent; to ECMAScript code, all NaN values are
indistinguishable from each other.

NOTE The bit pattern that might be observed in an ArrayBuffer (see 24.1)
after a Number value has been stored into it is not necessarily the same
as the internal representation of that Number value used by the
ECMAScript implementation.

There are two other special values, called POSITIVE INFINITY and
NEGATIVE INFINITY. For brevity, these values are also referred to for
expository purposes by the symbols +∞ and −∞, respectively. (Note that
these two infinite Number values are produced by the program expressions
+INFINITY (or simply INFINITY) and -INFINITY.)

The other 18437736874454810624 (that is, 2^64^−2^53^) values are called
the finite numbers. Half of these are positive numbers and half are
negative numbers; for every finite positive Number value there is a
corresponding negative value having the same magnitude.

Note that there is both a POSITIVE ZERO and a NEGATIVE ZERO. For
brevity, these values are also referred to for expository purposes by
the symbols +0 and −0, respectively. (Note that these two different zero
Number values are produced by the program expressions +0 (or simply 0)
and -0.)

The 18437736874454810622 (that is, 2^64^−2^53^−2) finite nonzero values
are of two kinds:

18428729675200069632 (that is, 2^64^−2^54^) of them are normalized,
having the form

  _s_ × _m_ × 2_^e^_

where _s_ is +1 or −1, _m_ is a positive integer less than 2^53^ but not
less than 2^52^, and _e_ is an integer ranging from −1074 to 971,
inclusive.

The remaining 9007199254740990 (that is, 2^53^−2) values are
denormalized, having the form

  _s_ × _m_ × 2_^e^_

where _s_ is +1 or −1, _m_ is a positive integer less than 2^52^, and
_e_ is −1074.

Note that all the positive and negative integers whose magnitude is no
greater than 2^53^ are representable in the Number type (indeed, the
integer 0 has two representations, +0 and -0).

A finite number has an _odd significand_ if it is nonzero and the
integer _m_ used to express it (in one of the two forms shown above) is
odd. Otherwise, it has an _even significand_.

In this specification, the phrase “the Number value for _x_” where _x_
represents an exact nonzero real mathematical quantity (which might even
be an irrational number such as π) means a Number value chosen in the
following manner. Consider the set of all finite values of the Number
type, with −0 removed and with two additional values added to it that
are not representable in the Number type, namely 2^1024^ (which is +1 ×
2^53^ × 2^971^) and −2^1024^ (which is −1 × 2^53^ × 2^971^). Choose the
member of this set that is closest in value to _x_. If two values of the
set are equally close, then the one with an even significand is chosen;
for this purpose, the two extra values 2^1024^ and −2^1024^ are
considered to have even significands. Finally, if 2^1024^ was chosen,
replace it with +∞; if −2^1024^ was chosen, replace it with −∞; if +0
was chosen, replace it with −0 if and only if _x_ is less than zero; any
other chosen value is used unchanged. The result is the Number value for
_x_. (This procedure corresponds exactly to the behaviour of the IEEE
754-2008 “round to nearest, ties to even” mode.)

Some ECMAScript operators deal only with integers in specific ranges
such as −2^31^ through 2^31^−1, inclusive, or in the range 0 through
2^16^−1, inclusive. These operators accept any value of the Number type
but first convert each such value to an integer value in the expected
range. See the descriptions of the numeric conversion operations in 7.1.

The Object Type

An Object is logically a collection of properties. Each property is
either a data property, or an accessor property:

-   A _data property_ associates a key value with an ECMAScript language
    value and a set of Boolean attributes.

-   An _accessor property_ associates a key value with one or two
    accessor functions, and a set of Boolean attributes. The accessor
    functions are used to store or retrieve an ECMAScript language value
    that is associated with the property.

Properties are identified using key values. A property key value is
either an ECMAScript String value or a Symbol value. All String and
Symbol values, including the empty string, are valid as property keys. A
_property name_ is a property key that is a String value.

An _integer index_ is a String-valued property key that is a canonical
numeric String (see 7.1.16) and whose numeric value is either +0 or a
positive integer ≤ 2^53^−1. An _array index_ is an integer index whose
numeric value _i_ is in the range +0 ≤ _i_ < 2^32^−1.

Property keys are used to access properties and their values. There are
two kinds of access for properties: _get_ and _set_, corresponding to
value retrieval and assignment, respectively. The properties accessible
via get and set access includes both _own properties_ that are a direct
part of an object and _inherited properties_ which are provided by
another associated object via a property inheritance relationship.
Inherited properties may be either own or inherited properties of the
associated object. Each own property of an object must each have a key
value that is distinct from the key values of the other own properties
of that object.

All objects are logically collections of properties, but there are
multiple forms of objects that differ in their semantics for accessing
and manipulating their properties. O_rdinary objects_ are the most
common form of objects and have the default object semantics. An _exotic
object_ is any form of object whose property semantics differ in any way
from the default semantics.

Property Attributes

Attributes are used in this specification to define and explain the
state of Object properties. A data property associates a key value with
the attributes listed in Table 2.

Table 2 — Attributes of a Data Property

  _ATTRIBUTE NAME_   _VALUE DOMAIN_                 _DESCRIPTION_
  ------------------ ------------------------------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[Value]]          Any ECMAScript language type   The value retrieved by a get access of the property.
  [[Writable]]       Boolean                        If FALSE, attempts by ECMAScript code to change the property’s [[Value]] attribute using [[Set]] will not succeed.
  [[Enumerable]]     Boolean                        If TRUE, the property will be enumerated by a for-in enumeration (see 13.6.4). Otherwise, the property is said to be non-enumerable.
  [[Configurable]]   Boolean                        If FALSE, attempts to delete the property, change the property to be an accessor property, or change its attributes (other than [[Value]], or changing [[Writable]] to FALSE) will fail.

An accessor property associates a key value with the attributes listed
in Table 3.

Table 3 — Attributes of an Accessor Property

  _ATTRIBUTE NAME_   _VALUE DOMAIN_          _DESCRIPTION_
  ------------------ ----------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[Get]]            Object _or_ Undefined   If the value is an Object it must be a function object. The function’s [[Call]] internal method (Table 6) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.
  [[Set]]            Object _or_ Undefined   If the value is an Object it must be a function object. The function’s [[Call]] internal method (Table 6) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property's [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property's [[Get]] internal method.
  [[Enumerable]]     Boolean                 If TRUE, the property is to be enumerated by a for-in enumeration (see 13.6.4). Otherwise, the property is said to be non-enumerable.
  [[Configurable]]   Boolean                 If FALSE, attempts to delete the property, change the property to be a data property, or change its attributes will fail.

If the initial values of a property’s attributes are not explicitly
specified by this specification, the default value defined in Table 4 is
used.

Table 4 — Default Attribute Values

  ATTRIBUTE NAME     DEFAULT VALUE
  ------------------ ---------------
  [[Value]]          UNDEFINED
  [[Get]]            UNDEFINED
  [[Set]]            UNDEFINED
  [[Writable]]       FALSE
  [[Enumerable]]     FALSE
  [[Configurable]]   FALSE

Object Internal Methods and Internal Slots

The actual semantics of objects, in ECMAScript, are specified via
algorithms called _internal methods_. Each object in an ECMAScript
engine is associated with a set of internal methods that defines its
runtime behaviour. These internal methods are not part of the ECMAScript
language. They are defined by this specification purely for expository
purposes. However, each object within an implementation of ECMAScript
must behave as specified by the internal methods associated with it. The
exact manner in which this is accomplished is determined by the
implementation.

Internal method names are polymorphic. This means that different object
values may perform different algorithms when a common internal method
name is invoked upon them. That actual object upon which an internal
method is invoked is the “target” of the invocation. If, at runtime, the
implementation of an algorithm attempts to use an internal method of an
object that the object does not support, a TYPEERROR exception is
thrown.

Internal slots correspond to internal state that is associated with
objects and used by various ECMAScript specification algorithms.
Internal slots are not object properties and they are not inherited.
Depending upon the specific internal slot specification, such state may
consist of values of any ECMAScript language type or of specific
ECMAScript specification type values. Unless explicitly specified
otherwise, internal slots are allocated as part of the process of
creating an object and may not be dynamically added to an object. Unless
specified otherwise, the initial value of an internal slot is the value
UNDEFINED. Various algorithms within this specification create objects
that have internal slots. However, the ECMAScript language provides no
direct way to associate internal slots with an object.

Internal methods and internal slots are identified within this
specification using names enclosed in double square brackets [[ ]].

Table 5 summarizes the _essential internal methods_ used by this
specification that are applicable to all objects created or manipulated
by ECMAScript code. Every object must have algorithms for all of the
essential internal methods. However, all objects do not necessarily use
the same algorithms for those methods.

The “Signature” column of Table 5 and other similar tables describes the
invocation pattern for each internal method. The invocation pattern
always includes a parenthesized list of descriptive parameter names. If
a parameter name is the same as an ECMAScript type name then the name
describes the required type of the parameter value. If an internal
method explicitly returns a value, its parameter list is followed by the
symbol “→” and the type name of the returned value. The type names used
in signatures refer to the types defined in clause 6 augmented by the
following additional names. “_any_” means the value may be any
ECMAScript language type. An internal method implicitly returns a
Completion Record as described in 6.2.2. In addition to its parameters,
an internal method always has access to the object that is the target of
the method invocation.

Table 5 — Essential Internal Methods

  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _INTERNAL METHOD_       _SIGNATURE_                              _DESCRIPTION_
  ----------------------- ---------------------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[GetPrototypeOf]]      () _→_ Object or Null                    Determine the object that provides inherited properties for this object. A NULL value indicates that there are no inherited properties.

  [[SetPrototypeOf]]      (_Object_ or Null) _→_ Boolean           Associate with this object another object that provides inherited properties. Passing NULL indicates that there are no inherited properties. Returns TRUE indicating that the operation was completed successfully or FALSE indicating that the operation was not successful.

  [[IsExtensible]]        ( ) _→_ Boolean                          Determine whether it is permitted to add additional properties to this object.

  [[PreventExtensions]]   ( ) _→_ Boolean                          Control whether new properties may be added to this object. Returns TRUE if the operation was successful or FALSE if the operation was unsuccessful.

  [[GetOwnProperty]]      (_propertyKey_) →                        Return a Property Descriptor for the own property of this object whose key is _propertyKey_, or UNDEFINED if no such property exists.
                                                                   
                          Undefined or Property Descriptor         

  [[HasProperty]]         (_propertyKey_) _→_ Boolean              Return a Boolean value indicating whether this object already has either an own or inherited property whose key is _propertyKey_.

  [[Get]]                 (_propertyKey_, _Receiver_)              Return the value of the property whose key is _propertyKey_ from this object. If any ECMAScript code must be executed to retrieve the property value, _Receiver_ is used as the THIS value when evaluating the code.
                          _→ any_                                  

  [[Set]]                 (_propertyKey_,_value_, _Receiver_)      Set the value of this object property whose key is _propertyKey_ to _value_. If any ECMAScript code must be executed to set the property value, _Receiver_ is used as the THIS value when evaluating the code. Returns TRUE if the property value was set or FALSE if it could not be set.
                          _→ Boolean_                              

  [[Delete]]              (_propertyKey_) _→_ Boolean              Remove the own property whose key is _propertyKey_ from this object . Return FALSE if the property was not deleted and is still present. Return TRUE if the property was deleted or is not present.

  [[DefineOwnProperty]]   (_propertyKey,_ _PropertyDescriptor_)_   Create or alter the own property, whose key is _propertyKey_, to have the state described by _PropertyDescriptor_. Return TRUE if that the property was successfully created/updated or FALSE if the property could not be created or updated.
                          →_ Boolean                               

  [[Enumerate]]           ()_→_Object                              Return an iterator object that produces the keys of the string-keyed enumerable properties of the object.

  [[OwnPropertyKeys]]     ()_→_List of propertyKey                 Return a List whose elements are all of the own property keys for the object.
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Table 6 summarizes additional essential internal methods that are
supported by objects that may be called as functions. A _function
object_ is an object that supports the [[Call]] internal methods. A
_constructor_ (also referred to as a _constructor function_) is a
function object that supports the [[Construct]] internal method.

Table 6 — Additional Essential Internal Methods of Function Objects

  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _INTERNAL METHOD_   _SIGNATURE_                 _DESCRIPTION_
  ------------------- --------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[Call]]            (_any_, a List of _any_)    Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a THIS value and a list containing the arguments passed to the function by a call expression. Objects that implement this internal method are _callable_.
                      _→_ _any_                   

  [[Construct]]       (a List of _any_, Object)   Creates an object. Invoked via the NEW or SUPER operators. The first argument to the internal method is a list containing the arguments of the operator. The second argument is the object to which the NEW operator was initially applied. Objects that implement this internal method are called _constructors_. A function object is not necessarily a constructor and such non-constructor function objects do not have a [[Construct]] internal method.
                      _→_ Object                  
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The semantics of the essential internal methods for ordinary objects and
standard exotic objects are specified in clause 9. If any specified use
of an internal method of an exotic object is not supported by an
implementation, that usage must throw a TYPEERROR exception when
attempted.

Invariants of the Essential Internal Methods

The Internal Methods of Objects of an ECMAScript engine must conform to
the list of invariants specified below. Ordinary ECMAScript Objects as
well as all standard exotic objects in this specification maintain these
invariants. ECMAScript Proxy objects maintain these invariants by means
of runtime checks on the result of traps invoked on the [[ProxyHandler]]
object.

Any implementation provided exotic objects must also maintain these
invariants for those objects. Violation of these invariants may cause
ECMAScript code to have unpredictable behaviour and create security
issues. However, violation of these invariants must never compromise the
memory safety of an implementation.

An implementation must not allow these invariants to be circumvented in
any manner such as by providing alternative interfaces that implement
the functionality of the essential internal methods without enforcing
their invariants.

Definitions:

● The _target_ of an internal method is the object upon which the
internal method is called.

● A target is _non-extensible_ if it has been observed to return false
from its [[IsExtensible]] internal method, or true from its
[[PreventExtensions]] internal method.

● A _non-existent_ property is a property that does not exist as an own
property on a non-extensible target.

● All references to _SameValue_ are according to the definition of
SameValue algorithm specified in 7.2.9.

[[GETPROTOTYPEOF]] ( )

● The Type of the return value must be either Object or Null.

● If target is non-extensible, and [[GetPrototypeOf]] returns a value v,
then any future calls to [[GetPrototypeOf]] should return the SameValue
as v.

NOTE An object’s prototype chain should have finite length (that is,
starting from any object, recursively applying the [[GetPrototypeOf]]
internal method to its result should eventually lead to the value null).
However, this requirement is not enforceable as an object level
invariant if the prototype chain includes any exotic objects that do not
use the ordinary object definition of [[GetPrototypeOf]]. Such a
circular prototype chain may result in infinite loops when accessing
object properties.

[[SETPROTOTYPEOF]] (V)

● The Type of the return value must be Boolean.

● If target is non-extensible, [[SetPrototypeOf]] must return false,
unless V is the SameValue as the target’s observed [[GetPrototypeOf]]
value.

[[PREVENTEXTENSIONS]] ( )

● The Type of the return value must be Boolean.

● If [[PreventExtensions]] returns true, all future calls to
[[IsExtensible]] on the target must return false and the target is now
considered non-extensible.

[[GETOWNPROPERTY]] (P)

● The Type of the return value must be either Property Descriptor or
Undefined.

● If the Type of the return value is Property Descriptor, the return
value must be a complete property descriptor (see 6.2.4.6).

● If a property P is described as a data property with Desc.[[Value]]
equal to v and Desc.[[Writable]] and Desc.[[Configurable]] are both
false, then the SameValue must be returned for the Desc.[[Value]]
attribute of the property on all future calls to [[GetOwnProperty]] ( P
).

● If P’s attributes other than [[Writable]] may change over time or if
the property might disappear, then P’s [[Configurable]] attribute must
be true.

● If the [[Writable]] attribute may change from false to true, then the
[[Configurable]] attribute must be true.

● If the target is non-extensible and P is non-existent, then all future
calls to [[GetOwnProperty]] (P) on the target must describe P as
non-existent (i.e. [[GetOwnProperty]] (P) must return undefined).

NOTE As a consequence of the third invariant, if a property is described
as a data property and it may return different values over time, then
either or both of the Desc.[[Writable]] and Desc.[[Configurable]]
attributes must be true even if no mechanism to change the value is
exposed via the other internal methods.

[[DEFINEOWNPROPERTY]] (P, DESC)

● The Type of the return value must be Boolean.

● [[DefineOwnProperty]] must return false if P has previously been
observed as a non-configurable own property of the target, unless
either:

  1. P is a non-configurable writable own data property. A
  non-configurable writable data property can be changed into a
  non-configurable non-writable data property.

2. All attributes in Desc are the SameValue as P’s attributes.

● [[DefineOwnProperty]] (P, Desc) must return false if target is
non-extensible and P is a non-existent own property. That is, a
non-extensible target object cannot be extended with new properties.

[[HASPROPERTY]] ( P )

● The Type of the return value must be Boolean.

● If P was previously observed as a non-configurable data or accessor
own property of the target, [[HasProperty]] must return true.

[[GET]] (P, RECEIVER)

● If P was previously observed as a non-configurable, non-writable own
data property of the target with value v, then [[Get]] must return the
SameValue.

● If P was previously observed as a non-configurable own accessor
property of the target whose [[Get]] attribute is undefined, the [[Get]]
operation must return undefined.

[[SET]] ( P, V, RECEIVER)

● The Type of the return value must be Boolean.

● If P was previously observed as a non-configurable, non-writable own
data property of the target, then [[Set]] must return false unless V is
the SameValue as P’s [[Value]] attribute.

● If P was previously observed as a non-configurable own accessor
property of the target whose [[Set]] attribute is undefined, the [[Set]]
operation must return false.

[[DELETE]] ( P )

● The Type of the return value must be Boolean.

● If P was previously observed to be a non-configurable own data or
accessor property of the target, [[Delete]] must return false.

[[ENUMERATE]] ( )

● The Type of the return value must be Object.

[[OWNPROPERTYKEYS]] ( )

● The return value must be a List.

●  The Type of each element of the returned List is either String or
Symbol.

● The returned List must contain at least the keys of all
non-configurable own properties that have previously been observed.

● If the object is non-extensible, the returned List must contain only
the keys of all own properties of the object that are observable using
[[GetOwnProperty]].

[[CONSTRUCT]] ( )

● The Type of the return value must be Object.

Well-Known Intrinsic Objects

Well-known intrinsics are built-in objects that are explicitly
referenced by the algorithms of this specification and which usually
have Realm specific identities. Unless otherwise specified each
intrinsic object actually corresponds to a set of similar objects, one
per Realm.

Within this specification a reference such as %name% means the intrinsic
object, associated with the current Realm, corresponding to the name.
Determination of the current Realm and its intrinsics is described in
8.3. The well-known intrinsics are listed in Table 7.

Table 7 — Well-known Intrinsic Objects

  ------------------------------ ------------------------ ---------------------------------------------------------------------------------
  _INTRINSIC NAME_               _GLOBAL NAME_            _ECMASCRIPT LANGUAGE ASSOCIATION_

  %Array%                        ARRAY                    The ARRAY constructor (22.1.1)

  %ArrayBuffer%                  ARRAYBUFFER              The ARRAYBUFFER constructor (24.1.2)

  %ArrayBufferPrototype%         ARRAYBUFFER.PROTOTYPE    The initial value of the PROTOTYPE data property of %ArrayBuffer%.

  %ArrayIteratorPrototype%                                The prototype of Array iterator objects (22.1.5)

  %ArrayPrototype%               ARRAY.PROTOTYPE          The initial value of the PROTOTYPE data property of %Array% (22.1.3)

  %ArrayProto_values%            ARRAY.PROTOTYPE.VALUES   The initial value of the VALUES data property of %ArrayPrototype% (22.1.3.29)

  %Boolean%                      BOOLEAN                  The BOOLEAN constructor (19.3.1)

  %BooleanPrototype%             BOOLEAN.PROTOTYPE        The initial value of the PROTOTYPE data property of %Boolean% (19.3.3)

  %DataView%                     DATAVIEW                 The DATAVIEW constructor (24.2.2)

  %DataViewPrototype%            DATAVIEW.PROTOTYPE       The initial value of the PROTOTYPE data property of %DataView%

  %Date%                         DATE                     The DATE constructor (20.3.2)

  %DatePrototype%                DATE.PROTOTYPE           The initial value of the PROTOTYPE data property of %Date%.

  %decodeURI%                    DECODEURI                The DECODEURI function (18.2.6.2)

  %decodeURIComponent%           DECODEURICOMPONENT       The DECODEURICOMPONENT function (18.2.6.3)

  %encodeURI%                    ENCODEURI                The ENCODEURI function (18.2.6.4)

  %encodeURIComponent%           ENCODEURICOMPONENT       The ENCODEURICOMPONENT function (18.2.6.5)

  %Error%                        ERROR                    The ERROR constructor (19.5.1)

  %ErrorPrototype%               ERROR.PROTOTYPE          The initial value of the PROTOTYPE data property of %Error%

  %eval%                         EVAL                     The EVAL function (18.2.1)

  %EvalError%                    EVALERROR                The EVALERROR constructor (19.5.5.1)

  %EvalErrorPrototype%           EVALERROR.PROTOTYPE      The initial value of the PROTOTYPE property of %EvalError%

  %Float32Array%                 FLOAT32ARRAY             The FLOAT32ARRAY constructor (22.2)

  %Float32ArrayPrototype%        FLOAT32ARRAY.PROTOTYPE   The initial value of the PROTOTYPE data property of %Float32Array%.

  %Float64Array%                 FLOAT64ARRAY             The FLOAT64ARRAY constructor (22.2)

  %Float64ArrayPrototype%        FLOAT64ARRAY.PROTOTYPE   The initial value of the PROTOTYPE data property of %Float64Array%

  %Function%                     FUNCTION                 The FUNCTION constructor (19.2.1)

  %FunctionPrototype%            FUNCTION.PROTOTYPE       The initial value of the PROTOTYPE data property of %Function%

  %Generator%                                             The initial value of the PROTOTYPE property of %GeneratorFunction%

  %GeneratorFunction%                                     The constructor of generator objects (25.2.1)

  %GeneratorPrototype%                                    The initial value of the PROTOTYPE property of %Generator%

  %Int8Array%                    INT8ARRAY                The INT8ARRAY constructor (22.2)

  %Int8ArrayPrototype%           INT8ARRAY.PROTOTYPE      The initial value of the PROTOTYPE data property of %Int8Array%

  %Int16Array%                   INT16ARRAY               The INT16ARRAY constructor (22.2)

  %Int16ArrayPrototype%          INT16ARRAY.PROTOTYPE     The initial value of the PROTOTYPE data property of %Int16Array%

  %Int32Array%                   INT32ARRAY               The INT32ARRAY constructor (22.2)

  %Int32ArrayPrototype%          INT32ARRAY.PROTOTYPE     The initial value of the PROTOTYPE data property of %Int32Array%

  %isFinite%                     ISFINITE                 The ISFINITE function (18.2.2)

  %isNaN%                        ISNAN                    The ISNAN function (18.2.3)

  %IteratorPrototype%                                     An object that all standard built-in iterator objects indirectly inherit from

  %JSON%                         JSON                     The JSON object (24.3)

  %Map%                          MAP                      The MAP constructor (23.1.1)

  %MapIteratorPrototype%                                  The prototype of Map iterator objects (23.1.5)

  %MapPrototype%                 MAP.PROTOTYPE            The initial value of the PROTOTYPE data property of %Map%

  %Math%                         MATH                     The MATH object (20.2)

  %Number%                       NUMBER                   The NUMBER constructor (20.1.1)

  %NumberPrototype%              NUMBER.PROTOTYPE         The initial value of the PROTOTYPE property of %Number%

  %Object%                       OBJECT                   The OBJECT constructor (19.1.1)

  %ObjectPrototype%              OBJECT.PROTOTYPE         The initial value of the PROTOTYPE data property of %Object%. (19.1.3)

  %ObjProto_toString%            OBJECT.PROTOTYPE.        The initial value of the TOSTRING data property of %ObjectPrototype% (19.1.3.6)
                                 TOSTRING                 

  %parseFloat%                   PARSEFLOAT               The PARSEFLOAT function (18.2.4)

  %parseInt%                     PARSEINT                 The PARSEINT function (18.2.5)

  %Promise%                      PROMISE                  The PROMISE constructor (25.4.3)

  %PromisePrototype%             PROMISE.PROTOTYPE        The initial value of the PROTOTYPE data property of %Promise%

  %Proxy%                        PROXY                    The PROXY constructor (26.2.1)

  %RangeError%                   RANGEERROR               The RANGEERROR constructor (19.5.5.2)

  %RangeErrorPrototype%          RANGEERROR.PROTOTYPE     The initial value of the PROTOTYPE property of %RangeError%

  %ReferenceError%               REFERENCEERROR           The REFERENCEERROR constructor (19.5.5.3)

  %ReferenceErrorPrototype%      REFERENCEERROR.          The initial value of the PROTOTYPE property of %ReferenceError%
                                 PROTOTYPE                

  %Reflect%                      REFLECT                  The REFLECT object (26.1)

  %RegExp%                       REGEXP                   The REGEXP constructor (21.2.3)

  %RegExpPrototype%              REGEXP.PROTOTYPE         The initial value of the PROTOTYPE data property of %RegExp%

  %Set%                          SET                      The SET constructor (23.2.1)

  %SetIteratorPrototype%                                  The prototype of Set iterator objects (23.2.5)

  %SetPrototype%                 SET.PROTOTYPE            The initial value of the PROTOTYPE data property of %Set%

  %String%                       STRING                   The STRING constructor (21.1.1)

  %StringIteratorPrototype%                               The prototype of String iterator objects (21.1.5)

  %StringPrototype%              STRING.PROTOTYPE         The initial value of the PROTOTYPE data property of %String%

  %Symbol%                       SYMBOL                   The SYMBOL constructor (19.4.1)

  %SymbolPrototype%              SYMBOL.PROTOTYPE         The initial value of the PROTOTYPE data property of %Symbol%. (19.4.3)

  %SyntaxError%                  SYNTAXERROR              The SYNTAXERROR constructor (19.5.5.4)

  %SyntaxErrorPrototype%         SYNTAXERROR.PROTOTYPE    The initial value of the PROTOTYPE property of %SyntaxError%

  %ThrowTypeError%                                        A function object that unconditionally throws a new instance of %TypeError%

  %TypedArray%                                            The super class of all typed Array constructors (22.2.1)

  %TypedArrayPrototype%                                   The initial value of the PROTOTYPE property of %TypedArray%

  %TypeError%                    TYPEERROR                The TYPEERROR constructor (19.5.5.5)

  %TypeErrorPrototype%           TYPEERROR.PROTOTYPE      The initial value of the PROTOTYPE property of %TypeError%

  %Uint8Array%                   UINT8ARRAY               The UINT8ARRAY constructor (22.2)

  %Uint8ArrayPrototype%          UINT8ARRAY.PROTOTYPE     The initial value of the PROTOTYPE data property of %Uint8Array%

  %Uint8ClampedArray%            UINT8CLAMPEDARRAY        The UINT8CLAMPEDARRAY constructor (22.2)

  %Uint8ClampedArrayPrototype%   UINT8CLAMPEDARRAY.       The initial value of the PROTOTYPE data property of %Uint8ClampedArray%
                                 PROTOTYPE                

  %Uint16Array%                  UINT16ARRAY              The UINT16ARRAY constructor (22.2)

  %Uint16ArrayPrototype%         UINT16ARRAY.PROTOTYPE    The initial value of the PROTOTYPE data property of %Uint16Array%

  %Uint32Array%                  UINT32ARRAY              The UINT32ARRAY constructor (22.2)

  %Uint32ArrayPrototype%         UINT32ARRAY.PROTOTYPE    The initial value of the PROTOTYPE data property of %Uint32Array%

  %URIError%                     URIERROR                 The URIERROR constructor (19.5.5.6)

  %URIErrorPrototype%            URIERROR.PROTOTYPE       The initial value of the PROTOTYPE property of %URIError%

  %WeakMap%                      WEAKMAP                  The WEAKMAP constructor (23.3.1)

  %WeakMapPrototype%             WEAKMAP.PROTOTYPE        The initial value of the PROTOTYPE data property of %WeakMap%

  %WeakSet%                      WEAKSET                  The WEAKSET constructor (23.4.1)

  %WeakSetPrototype%             WEAKSET.PROTOTYPE        The initial value of the PROTOTYPE data property of %WeakSet%
  ------------------------------ ------------------------ ---------------------------------------------------------------------------------


ECMAScript Specification Types

A specification type corresponds to meta-values that are used within
algorithms to describe the semantics of ECMAScript language constructs
and ECMAScript language types. The specification types are Reference,
List, Completion, Property Descriptor, Lexical Environment, Environment
Record, and Data Block. Specification type values are specification
artefacts that do not necessarily correspond to any specific entity
within an ECMAScript implementation. Specification type values may be
used to describe intermediate results of ECMAScript expression
evaluation but such values cannot be stored as properties of objects or
values of ECMAScript language variables.

The List and Record Specification Type

The List type is used to explain the evaluation of argument lists (see
12.3.6) in NEW expressions, in function calls, and in other algorithms
where a simple ordered list of values is needed. Values of the List type
are simply ordered sequences of list elements containing the individual
values. These sequences may be of any length. The elements of a list may
be randomly accessed using 0-origin indices. For notational convenience
an array-like syntax can be used to access List elements. For example,
_arguments_[2] is shorthand for saying the 3^rd^ element of the List
_arguments_.

For notational convenience within this specification, a literal syntax
can be used to express a new List value. For example, «1, 2» defines a
List value that has two elements each of which is initialized to a
specific value. A new empty List can be expressed as «».

The Record type is used to describe data aggregations within the
algorithms of this specification. A Record type value consists of one or
more named fields. The value of each field is either an ECMAScript value
or an abstract value represented by a name associated with the Record
type. Field names are always enclosed in double brackets, for example
[[value]].

For notational convenience within this specification, an object
literal-like syntax can be used to express a Record value. For example,
{[[field1]]: 42, [[field2]]: FALSE, [[field3]]: EMPTY} defines a Record
value that has three fields, each of which is initialized to a specific
value. Field name order is not significant. Any fields that are not
explicitly listed are considered to be absent.

In specification text and algorithms, dot notation may be used to refer
to a specific field of a Record value. For example, if R is the record
shown in the previous paragraph then R.[[field2]] is shorthand for “the
field of R named [[field2]]”.

Schema for commonly used Record field combinations may be named, and
that name may be used as a prefix to a literal Record value to identify
the specific kind of aggregations that is being described. For example:
PropertyDescriptor{[[Value]]: 42, [[Writable]]: FALSE, [[Configurable]]:
TRUE}.

The Completion Record Specification Type

The Completion type is a Record used to explain the runtime propagation
of values and control flow such as the behaviour of statements (BREAK,
CONTINUE, RETURN and THROW) that perform nonlocal transfers of control.

Values of the Completion type are Record values whose fields are defined
as by Table 8.

Table 8 — Completion Record Fields

  ------------ -------------------------------------------------- --------------------------------------------------
  _FIELD_      _VALUE_                                            _MEANING_
  [[type]]     One of NORMAL, BREAK, CONTINUE, RETURN, or THROW   The type of completion that occurred.
  [[value]]    any ECMAScript language value or EMPTY             The value that was produced.
  [[target]]   any ECMAScript string or EMPTY                     The target label for directed control transfers.
  ------------ -------------------------------------------------- --------------------------------------------------

The term “abrupt completion” refers to any completion with a [[type]]
value other than NORMAL.

NormalCompletion

The abstract operation NormalCompletion with a single _argument_, such
as:

1.  Return NormalCompletion(_argument_).

Is a shorthand that is defined as follows:

1.  Return Completion{[[type]]: normal, [[value]]: _argument_,
    [[target]]:empty}.

Implicit Completion Values

The algorithms of this specification often implicitly return Completion
Records whose [[type]] is NORMAL. Unless it is otherwise obvious from
the context, an algorithm statement that returns a value that is not a
Completion Record, such as:

1.  Return "INFINITY".

means the same thing as:

1.  Return NormalCompletion("INFINITY").

However, if the value expression of a “return” statement is a Completion
Record construction literal, the resulting Completion Record is
returned. If the value expression is a call to an abstract operation,
the “return” statement simply returns the Completion Record produced by
the abstract operation.

The abstract operation Completion(_completionRecord_) is used to
emphasize that a previously computed Completion Record is being
returned. The Completion abstract operation takes a single argument,
_completionRecord_, and performs the following steps:

1.  Assert: _completionRecord_ is a Completion Record.

2.  Return _completionRecord_ as the Completion Record of this abstract
    operation.

A “return” statement without a value in an algorithm step means the same
thing as:

1.  Return NormalCompletion(UNDEFINED).

Any reference to a Completion Record value that is in a context that
does not explicitly require a complete Completion Record value is
equivalent to an explicit reference to the [[value]] field of the
Completion Record value unless the Completion Record is an abrupt
completion.

Throw an Exception

Algorithms steps that say to throw an exception, such as

1.  Throw a TYPEERROR exception.

mean the same things as:

1.  Return Completion{[[type]]: throw, [[value]]: a newly created
    TYPEERROR object, [[target]]:empty}.

ReturnIfAbrupt

Algorithms steps that say

1.  ReturnIfAbrupt(_argument_).

mean the same thing as:

1.  If _argument_ is an abrupt completion, return _argument_.

2.  Else if _argument_ is a Completion Record, let _argument_ be
    _argument_.[[value]].

The Reference Specification Type

NOTE The Reference type is used to explain the behaviour of such
operators as DELETE, TYPEOF, the assignment operators, the SUPER keyword
and other language features. For example, the left-hand operand of an
assignment is expected to produce a reference.

A REFERENCE is a resolved name or property binding. A Reference consists
of three components, the _base_ value, the _referenced name_ and the
Boolean valued _strict reference_ flag. The _base_ value is either
UNDEFINED, an Object, a Boolean, a String, a Symbol, a Number, or an
Environment Record (8.1.1). A _base_ value of UNDEFINED indicates that
the Reference could not be resolved to a binding. The _referenced name_
is a String or Symbol value.

A Super Reference is a Reference that is used to represents a name
binding that was expressed using the super keyword. A Super Reference
has an additional _thisValue_ component and its _base_ value will never
be an Environment Record.

The following abstract operations are used in this specification to
access the components of references:

-   GetBase(V). Returns the _base_ value component of the reference V.

-   GetReferencedName(V). Returns the _referenced name_ component of the
      reference V.

-   IsStrictReference(V). Returns the _strict reference_ flag component
      of the reference V.

-   HasPrimitiveBase(V). Returns TRUE if Type(_base_) is Boolean,
      String, Symbol, or Number.

-   IsPropertyReference(V). Returns TRUE if either the _base_ value is
      an object or HasPrimitiveBase(V) is TRUE; otherwise returns FALSE.

-   IsUnresolvableReference(V). Returns TRUE if the _base_ value is
      UNDEFINED and FALSE otherwise.

-   IsSuperReference(V). Returns TRUE if this reference has a
      _thisValue_ component.

The following abstract operations are used in this specification to
operate on references:

GetValue (V)

1.  ReturnIfAbrupt(_V_).

2.  If Type(_V_) is not Reference, return _V_.

3.  Let _base_ be GetBase(_V_).

4.  If IsUnresolvableReference(_V_), throw a REFERENCEERROR exception.

5.  If IsPropertyReference(_V_), then

    a.  If HasPrimitiveBase(_V_) is TRUE, then

        i.  Assert: In this case, _base_ will never be NULL or
            UNDEFINED.

        ii. Let _base_ be ToObject(_base_).

    b.  Return _base._[[Get]](GetReferencedName(_V_),
        GetThisValue(_V_)).

6.  Else _base_ must be an Environment Record,

    a.  Return _base._GetBindingValue(GetReferencedName(_V_),
        IsStrictReference(_V_)) (see 8.1.1).

NOTE The object that may be created in step 5.a.ii is not accessible
outside of the above abstract operation and the ordinary object [[Get]]
internal method. An implementation might choose to avoid the actual
creation of the object.

PutValue (V, W)

1.  ReturnIfAbrupt(_V_).

2.  ReturnIfAbrupt(_W_).

3.  If Type(_V_) is not Reference, throw a REFERENCEERROR exception.

4.  Let _base_ be GetBase(_V_).

5.  If IsUnresolvableReference(_V_), then

    a.  If IsStrictReference(_V_) is TRUE, then

        i.  Throw REFERENCEERROR exception.

    b.  Let _globalObj_ be GetGlobalObject().

    c.  Return Set(_globalObj_,GetReferencedName(_V_), _W_, FALSE).

6.  Else if IsPropertyReference(_V_), then

    a.  If HasPrimitiveBase(_V_) is TRUE, then

        i.  Assert: In this case, _base_ will never be NULL or
            UNDEFINED.

        ii. Set _base_ to ToObject(_base_).

    b.  Let _succeeded_ be _base._[[Set]](GetReferencedName(_V_), _W_,
        GetThisValue(_V_)).

    c.  ReturnIfAbrupt(_succeeded_).

    d.  If _succeeded_ is FALSE and IsStrictReference(_V_) is TRUE,
        throw a TYPEERROR exception.

    e.  Return.

7.  Else _base_ must be an Environment Record.

    a.  Return _base._SetMutableBinding(GetReferencedName(_V_), _W_,
        IsStrictReference(_V_)) (see 8.1.1).

NOTE The object that may be created in step 6.a.ii is not accessible
outside of the above algorithm and the ordinary object [[Set]] internal
method. An implementation might choose to avoid the actual creation of
that object.

GetThisValue (V)

1.  Assert: IsPropertyReference(_V_) is TRUE.

2.  If IsSuperReference(_V_), then

    a.  Return the value of the _thisValue_ component of the reference
        _V_.

3.  Return GetBase(_V_).

InitializeReferencedBinding (V, W)

1.  ReturnIfAbrupt(_V_).

2.  ReturnIfAbrupt(_W_).

3.  Assert: Type(_V_) is Reference.

4.  Assert: IsUnresolvableReference(_V_) is FALSE.

5.  Let _base_ be GetBase(_V_).

6.  Assert: _base_ is an Environment Record.

7.  Return _base._InitializeBinding(GetReferencedName(_V_), _W_).

The Property Descriptor Specification Type

The Property Descriptor type is used to explain the manipulation and
reification of Object property attributes. Values of the Property
Descriptor type are Records. Each field’s name is an attribute name and
its value is a corresponding attribute value as specified in 6.1.7.1. In
addition, any field may be present or absent. The schema name used
within this specification to tag literal descriptions of Property
Descriptor records is “PropertyDescriptor”.

Property Descriptor values may be further classified as data Property
Descriptors and accessor Property Descriptors based upon the existence
or use of certain fields. A data Property Descriptor is one that
includes any fields named either [[Value]] or [[Writable]]. An accessor
Property Descriptor is one that includes any fields named either [[Get]]
or [[Set]]. Any Property Descriptor may have fields named [[Enumerable]]
and [[Configurable]]. A Property Descriptor value may not be both a data
Property Descriptor and an accessor Property Descriptor; however, it may
be neither. A generic Property Descriptor is a Property Descriptor value
that is neither a data Property Descriptor nor an accessor Property
Descriptor. A fully populated Property Descriptor is one that is either
an accessor Property Descriptor or a data Property Descriptor and that
has all of the fields that correspond to the property attributes defined
in either Table 2 or Table 3.

The following abstract operations are used in this specification to
operate upon Property Descriptor values:

IsAccessorDescriptor ( Desc )

When the abstract operation IsAccessorDescriptor is called with Property
Descriptor _Desc_, the following steps are taken:

1.  If _Desc_ is UNDEFINED, return FALSE.

2.  If both _Desc_.[[Get]] and _Desc_.[[Set]] are absent, return FALSE.

3.  Return TRUE.

IsDataDescriptor ( Desc )

When the abstract operation IsDataDescriptor is called with Property
Descriptor _Desc_, the following steps are taken:

1.  If _Desc_ is UNDEFINED, return FALSE.

2.  If both _Desc_.[[Value]] and _Desc_.[[Writable]] are absent, return
    FALSE.

3.  Return TRUE.

IsGenericDescriptor ( Desc )

When the abstract operation IsGenericDescriptor is called with Property
Descriptor _Desc_, the following steps are taken:

1.  If _Desc_ is UNDEFINED, return FALSE.

2.  If IsAccessorDescriptor(_Desc_) and IsDataDescriptor(_Desc_) are
    both FALSE, return TRUE.

3.  Return FALSE.

FromPropertyDescriptor ( Desc )

When the abstract operation FromPropertyDescriptor is called with
Property Descriptor _Desc_, the following steps are taken:

1.  If _Desc_ is UNDEFINED, return UNDEFINED.

2.  Let _obj_ be ObjectCreate(%ObjectPrototype%).

3.  Assert: _obj_ is an extensible ordinary object with no own
    properties.

4.  If _Desc_ has a [[Value]] field, then

    a.  Perform CreateDataProperty(_obj_, "VALUE", _Desc_.[[Value]]).

5.  If _Desc_ has a [[Writable]] field, then

    a.  Perform CreateDataProperty(_obj_, "WRITABLE",
        _Desc_.[[Writable]]).

6.  If _Desc_ has a [[Get]] field, then

    a.  Perform CreateDataProperty(_obj_, "GET", _Desc_.[[Get]]).

7.  If _Desc_ has a [[Set]] field, then

    a.  Perform CreateDataProperty(_obj_, "SET", _Desc_.[[Set]])

8.  If _Desc_ has an [[Enumerable]] field, then

    a.  Perform CreateDataProperty(_obj_, "ENUMERABLE",
        _Desc_.[[Enumerable]]).

9.  If _Desc_ has a [[Configurable]] field, then

    a.  Perform CreateDataProperty(_obj_ , "CONFIGURABLE",
        _Desc_.[[Configurable]]).

10. Assert: all of the above CreateDataProperty operations return TRUE.

11. Return _obj_.

ToPropertyDescriptor ( Obj )

When the abstract operation ToPropertyDescriptor is called with object
_Obj_, the following steps are taken:

1.  ReturnIfAbrupt(_Obj_).

2.  If Type(_Obj_) is not Object, throw a TYPEERROR exception.

3.  Let _desc_ be a new Property Descriptor that initially has no
    fields.

4.  If HasProperty(_Obj_, "ENUMERABLE") is TRUE, then

    a.  Let _enum_ be ToBoolean(Get(_Obj_, "ENUMERABLE")).

    b.  ReturnIfAbrupt(_enum_).

    c.  Set the [[Enumerable]] field of _desc_ to _enum_.

5.  If HasProperty(_Obj_, "CONFIGURABLE") is TRUE, then

    a.  Let _conf_ be ToBoolean(Get(_Obj_, "CONFIGURABLE")).

    b.  ReturnIfAbrupt(_conf_).

    c.  Set the [[Configurable]] field of _desc_ to _conf_.

6.  If HasProperty(_Obj_, "VALUE") is TRUE, then

    a.  Let _value_ be Get(_Obj_, "VALUE").

    b.  ReturnIfAbrupt(_value_).

    c.  Set the [[Value]] field of _desc_ to _value_.

7.  If HasProperty(_Obj_, "WRITABLE") is TRUE, then

    a.  Let _writable_ be ToBoolean(Get(_Obj_, "WRITABLE")).

    b.  ReturnIfAbrupt(_writable_).

    c.  Set the [[Writable]] field of _desc_ to _writable_.

8.  If HasProperty(_Obj_, "GET") is TRUE, then

    a.  Let _getter_ be Get(_Obj_, "GET").

    b.  ReturnIfAbrupt(_getter_).

    c.  If IsCallable(_getter_) is FALSE and _getter_ is not UNDEFINED,
        throw a TYPEERROR exception.

    d.  Set the [[Get]] field of _desc_ to _getter_.

9.  If HasProperty(_Obj_, "SET") is TRUE, then

    a.  Let _setter_ be Get(_Obj_, "SET").

    b.  ReturnIfAbrupt(_setter_).

    c.  If IsCallable(_setter_) is FALSE and _setter_ is not UNDEFINED,
        throw a TYPEERROR exception.

    d.  Set the [[Set]] field of _desc_ to _setter_.

10. If either _desc_.[[Get]] or _desc_.[[Set]] is present, then

    a.  If either _desc_.[[Value]] or _desc_.[[Writable]] is present,
        throw a TYPEERROR exception.

11. Return _desc_.

CompletePropertyDescriptor ( Desc )

When the abstract operation CompletePropertyDescriptor is called with
Property Descriptor _Desc_ the following steps are taken:

1.  ReturnIfAbrupt(_Desc_).

2.  Assert: _Desc_ is a Property Descriptor

3.  Let _like_ be Record{[[Value]]: UNDEFINED, [[Writable]]: FALSE,
    [[Get]]: UNDEFINED, [[Set]]: UNDEFINED, [[Enumerable]]: FALSE,
    [[Configurable]]: FALSE}.

4.  If either IsGenericDescriptor(_Desc_) or IsDataDescriptor(_Desc_) is
    TRUE, then

    a.  If _Desc_ does not have a [[Value]] field, set _Desc_.[[Value]]
        to _like_.[[Value]].

    b.  If _Desc_ does not have a [[Writable]] field, set
        _Desc_.[[Writable]] to _like_.[[Writable]].

5.  Else,

    a.  If _Desc_ does not have a [[Get]] field, set _Desc_.[[Get]] to
        _like_.[[Get]].

    b.  If _Desc_ does not have a [[Set]] field, set _Desc_.[[Set]] to
        _like_.[[Set]].

6.  If _Desc_ does not have an [[Enumerable]] field, set
    _Desc_.[[Enumerable]] to _like_.[[Enumerable]].

7.  If _Desc_ does not have a [[Configurable]] field, set
    _Desc_.[[Configurable]] to _like_.[[Configurable]].

8.  Return _Desc_.

The Lexical Environment and Environment Record Specification Types

The Lexical Environment and Environment Record types are used to explain
the behaviour of name resolution in nested functions and blocks. These
types and the operations upon them are defined in 8.1.

Data Blocks

The Data Block specification type is used to describe a distinct and
mutable sequence of byte-sized (8 bit) numeric values. A Data Block
value is created with a fixed number of bytes that each have the initial
value 0.

For notational convenience within this specification, an array-like
syntax can be used to express to the individual bytes of a Data Block
value. This notation presents a Data Block value as a 0-origined integer
indexed sequence of bytes. For example, if _db_ is a 5 byte Data Block
value then _db_[2] can be used to access its 3^rd^ byte.

The following abstract operations are used in this specification to
operate upon Data Block values:

CreateByteDataBlock(size)

When the abstract operation CreateByteDataBlock is called with integer
argument _size_, the following steps are taken:

1.  Assert: _size_≥0.

2.  Let _db_ be a new Data Block value consisting of _size_ bytes. If it
    is impossible to create such a Data Block, throw a RANGEERROR
    exception.

3.  Set all of the bytes of _db_ to 0.

4.  Return _db_.

CopyDataBlockBytes(toBlock, toIndex, fromBlock, fromIndex, count)

When the abstract operation CopyDataBlockBytes is called the following
steps are taken:

1.  Assert: _fromBlock_ and _toBlock_ are distinct Data Block values.

2.  Assert: _fromIndex_, _toIndex_, and _count_ are positive integer
    values.

3.  Let _fromSize_ be the number of bytes in _fromBlock_.

4.  Assert: _fromIndex_+_count_ ≤ _fromSize_.

5.  Let _toSize_ be the number of bytes in _toBlock_.

6.  Assert: _toIndex_+_count_ ≤ _toSize_.

7.  Repeat, while _count_>

    a.  Set _toBlock_[_toIndex_] to the value of
        _fromBlock_[_fromIndex_].

    b.  Increment _toIndex_ and _fromIndex_ each by 1.

    c.  Decrement _count_ by 1.

8.  Return NormalCompletion(empty)



ABSTRACT OPERATIONS 


These operations are not a part of the ECMAScript language; they are
defined here to solely to aid the specification of the semantics of the
ECMAScript language. Other, more specialized abstract operations are
defined throughout this specification.


Type Conversion

The ECMAScript language implicitly performs automatic type conversion as
needed. To clarify the semantics of certain constructs it is useful to
define a set of conversion abstract operations. The conversion abstract
operations are polymorphic; they can accept a value of any ECMAScript
language type or of a Completion Record value. But no other
specification types are used with these operations.

ToPrimitive ( input [, PreferredType] )

The abstract operation ToPrimitive takes an _input_ argument and an
optional argument _PreferredType_. The abstract operation ToPrimitive
converts its _input_ argument to a non-Object type. If an object is
capable of converting to more than one primitive type, it may use the
optional hint _PreferredType_ to favour that type. Conversion occurs
according to Table 9:

Table 9 — ToPrimitive Conversions

  ------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------
  _INPUT TYPE_        _RESULT_
  Completion Record   If _input_ is an abrupt completion, return _input_. Otherwise return ToPrimitive(_input_.[[value]]) also passing the optional hint _PreferredType_.
  Undefined           Return _input_.
  Null                Return _input_.
  Boolean             Return _input_.
  Number              Return _input_.
  String              Return _input_.
  Symbol              Return _input_.
  Object              Perform the steps following this table.
  ------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------

When Type(_input_) is Object, the following steps are taken:

1.  If _PreferredType_ was not passed, let _hint_ be "DEFAULT".

2.  Else if _PreferredType_ is hint String, let _hint_ be "STRING".

3.  Else _PreferredType_ is hint Number, let _hint_ be "NUMBER".

4.  Let _exoticToPrim_ be GetMethod(_input_, @@toPrimitive).

5.  ReturnIfAbrupt(_exoticToPrim_).

6.  If _exoticToPrim_ is not UNDEFINED, then

    a.  Let _result_ be Call(_exoticToPrim_, _input,_ «_hint_»).

    b.  ReturnIfAbrupt(_result_).

    c.  If Type(_result_) is not Object, return _result_.

    d.  Throw a TYPEERROR exception.

7.  If _hint_ is "DEFAULT", let _hint_ be "NUMBER".

8.  Return OrdinaryToPrimitive(_input,hint_).

When the abstract operation OrdinaryToPrimitive is called with arguments
_O_ and _hint_, the following steps are taken:

1.  Assert: Type(_O_) is Object

2.  Assert: Type(_hint_) is String and its value is either "STRING" or
    "NUMBER".

3.  If _hint_ is "STRING", then

    a.  Let _methodNames_ be «"TOSTRING", "VALUEOF"».

4.  Else,

    a.  Let _methodNames_ be «"VALUEOF", "TOSTRING"».

5.  For each _name_ in _methodNames_ in List order, do

    a.  Let _method_ be Get(_O_, _name_).

    b.  ReturnIfAbrupt(_method_).

    c.  If IsCallable(_method_) is TRUE, then

        i.  Let _result_ be Call(_method_, _O_).

        ii. ReturnIfAbrupt(_result_).

        iii. If Type(_result_) is not Object, return _result_.

6.  Throw a TYPEERROR exception.

NOTE When ToPrimitive is called with no hint, then it generally behaves
as if the hint were Number. However, objects may over-ride this
behaviour by defining a @@toPrimitive method. Of the objects defined in
this specification only Date objects (see 20.3.4.45) and Symbol objects
(see 19.4.3.4) over-ride the default ToPrimitive behaviour. Date objects
treat no hint as if the hint were String.

ToBoolean ( argument )

The abstract operation ToBoolean converts _argument_ to a value of type
Boolean according to Table 10:

Table 10 — ToBoolean Conversions

  ------------------- -------------------------------------------------------------------------------------------------------------
  _ARGUMENT TYPE_     _RESULT_
  Completion Record   If _argument_ is an abrupt completion, return _argument_. Otherwise return ToBoolean(_argument_.[[value]]).
  Undefined           Return FALSE.
  Null                Return FALSE.
  Boolean             Return _argument_.
  Number              Return FALSE if _argument_ is +0, −0, or NAN; otherwise return TRUE.
  String              Return FALSE if _argument_ is the empty String (its length is zero); otherwise return TRUE.
  Symbol              Return TRUE.
  Object              Return TRUE.
  ------------------- -------------------------------------------------------------------------------------------------------------

ToNumber ( argument )

The abstract operation ToNumber converts _argument_ to a value of type
Number according to Table 11:

Table 11 — ToNumber Conversions

  ------------------- ------------------------------------------------------------------------------------------------------------
  _ARGUMENT TYPE_     _RESULT_

  Completion Record   If _argument_ is an abrupt completion, return _argument_. Otherwise return ToNumber(_argument_.[[value]]).

  Undefined           Return NAN.

  Null                Return +0.

  Boolean             Return 1 if _argument_ is TRUE. Return +0 if _argument_ is FALSE.

  Number              Return _argument_ (no conversion).

  String              See grammar and conversion algorithm below.

  Symbol              Throw a TYPEERROR exception.

  Object              Apply the following steps:
                      
                      Let _primValue_ be ToPrimitive(_argument_, hint Number).
                      
                      Return ToNumber(_primValue_).
  ------------------- ------------------------------------------------------------------------------------------------------------

ToNumber Applied to the String Type

ToNumber applied to Strings applies the following grammar to the input
String interpreted as a sequence of UTF-16 encoded code points (6.1.4).
If the grammar cannot interpret the String as an expansion of
_StringNumericLiteral_, then the result of ToNumber is NAN.

NOTE The terminal symbols of this grammar are all composed of Unicode
BMP code points so the result will be NAN if the string contains the
UTF-16 encoding of any supplementary code points or any unpaired
surrogate code points

Syntax

StringNumericLiteral :::

StrWhiteSpace~opt~
StrWhiteSpace~opt~ StrNumericLiteral StrWhiteSpace~opt~

StrWhiteSpace :::

StrWhiteSpaceChar StrWhiteSpace~opt~

StrWhiteSpaceChar :::

WhiteSpace
LineTerminator

StrNumericLiteral :::

StrDecimalLiteral
BinaryIntegerLiteral
OctalIntegerLiteral
HexIntegerLiteral

StrDecimalLiteral :::

StrUnsignedDecimalLiteral
+ StrUnsignedDecimalLiteral
- StrUnsignedDecimalLiteral

StrUnsignedDecimalLiteral :::

INFINITY
 DecimalDigits . DecimalDigits~opt~ ExponentPart~opt~
. DecimalDigits ExponentPart~opt~
DecimalDigits ExponentPart~opt~

DecimalDigits :::

DecimalDigit
DecimalDigits DecimalDigit

DecimalDigit ::: ONE OF

0 1 2 3 4 5 6 7 8 

ExponentPart :::

ExponentIndicator SignedInteger

ExponentIndicator ::: ONE OF

E E

SignedInteger :::

DecimalDigits
+ DecimalDigits
- DecimalDigits

All grammar symbols not explicitly defined above have the definitions
used in the Lexical Grammar for numeric literals (11.8.3)

NOTE Some differences should be noted between the syntax of a
_StringNumericLiteral_ and a _NumericLiteral_ (see 11.8.3):

-   A _StringNumericLiteral_ may include leading and/or trailing white
    space and/or line terminators.

-   A _StringNumericLiteral_ that is decimal may have any number of
    leading 0 digits.

-   A _StringNumericLiteral_ that is decimal may include a + or - to
    indicate its sign.

-   A _StringNumericLiteral_ that is empty or contains only white space
    is converted to +0.

-   INFINITY AND –INFINITY are recognized as a _StringNumericLiteral_
    but not as a _NumericLiteral_.

Runtime Semantics: MV’s

The conversion of a String to a Number value is similar overall to the
determination of the Number value for a numeric literal (see 11.8.3),
but some of the details are different, so the process for converting a
String numeric literal to a value of Number type is given here. This
value is determined in two steps: first, a mathematical value (MV) is
derived from the String numeric literal; second, this mathematical value
is rounded as described below. The MV on any grammar symbol, not
provided below, is the MV for that symbol defined in 11.8.3.1.

-   The MV of _StringNumericLiteral_ ::: [empty] is 0.

-   The MV of _StringNumericLiteral_ ::: _StrWhiteSpace_ is 0.

-   The MV of _StringNumericLiteral_ ::: _StrWhiteSpace~opt~_
      _StrNumericLiteral_ _StrWhiteSpace~opt~_ is the MV of
      _StrNumericLiteral_, no matter whether white space is present or
      not.

-   The MV of _StrNumericLiteral_ ::: _StrDecimalLiteral_ is the MV of
      _StrDecimalLiteral_.

-   The MV of _StrNumericLiteral_ ::: _BinaryIntegerLiteral_ is the MV
      of _BinaryIntegerLiteral_.

-   The MV of _StrNumericLiteral_ ::: _OctalIntegerLiteral_ is the MV of
      _OctalIntegerLiteral_.

-   The MV of _StrNumericLiteral_ ::: _HexIntegerLiteral_ is the MV of
      _HexIntegerLiteral_.

-   The MV of _StrDecimalLiteral_ ::: _StrUnsignedDecimalLiteral_ is the
      MV of _StrUnsignedDecimalLiteral_.

-   The MV of _StrDecimalLiteral_ ::: + _StrUnsignedDecimalLiteral_ is
      the MV of _StrUnsignedDecimalLiteral_.

-   The MV of _StrDecimalLiteral_ ::: - _StrUnsignedDecimalLiteral_ is
      the negative of the MV of _StrUnsignedDecimalLiteral_. (Note that
      if the MV of _StrUnsignedDecimalLiteral_ is 0, the negative of
      this MV is also 0. The rounding rule described below handles the
      conversion of this signless mathematical zero to a floating-point
      +0 or −0 as appropriate.)

-   The MV of _StrUnsignedDecimalLiteral_ ::: INFINITY is 10^10000^ (a
      value so large that it will round to +∞).

-   The MV of _StrUnsignedDecimalLiteral_ ::: _DecimalDigits_. is the MV
      of _DecimalDigits_.

-   The MV of _StrUnsignedDecimalLiteral_ ::: _DecimalDigits_ .
      _DecimalDigits_ is the MV of the first _DecimalDigits_ plus (the
      MV of the second _DecimalDigits_ times 10^−_n_^), where _n_ is the
      number of code points in the second _DecimalDigits_.

-   The MV of _StrUnsignedDecimalLiteral_ ::: _DecimalDigits_.
      _ExponentPart_ is the MV of _DecimalDigits_ times 10_^e^_, where
      _e_ is the MV of _ExponentPart_.

-   The MV of _StrUnsignedDecimalLiteral_ ::: _DecimalDigits_.
      _DecimalDigits ExponentPart_ is (the MV of the first
      _DecimalDigits_ plus (the MV of the second _DecimalDigits_ times
      10^−_n_^)) times 10_^e^_, where _n_ is the number of code points
      in the second _DecimalDigits_ and _e_ is the MV of _ExponentPart_.

-   The MV of _StrUnsignedDecimalLiteral_ ::: . _DecimalDigits_ is the
      MV of _DecimalDigits_ times 10^−_n_^, where _n_ is the number of
      code points in _DecimalDigits_.

-   The MV of _StrUnsignedDecimalLiteral_ ::: . _DecimalDigits
      ExponentPart_ is the MV of _DecimalDigits_ times 10^_e_−_n_^,
      where _n_ is the number of code points in _DecimalDigits_ and _e_
      is the MV of _ExponentPart_.

-   The MV of _StrUnsignedDecimalLiteral_ ::: _DecimalDigits_ is the MV
      of _DecimalDigits_.

-   The MV of _StrUnsignedDecimalLiteral_ ::: _DecimalDigits_
      _ExponentPart_ is the MV of _DecimalDigits_ times 10_^e^_, where
      _e_ is the MV of _ExponentPart_.

Once the exact MV for a String numeric literal has been determined, it
is then rounded to a value of the Number type. If the MV is 0, then the
rounded value is +0 unless the first non white space code point in the
String numeric literal is ‘-’, in which case the rounded value is −0.
Otherwise, the rounded value must be the Number value for the MV (in the
sense defined in 6.1.6), unless the literal includes a
_StrUnsignedDecimalLiteral_ and the literal has more than 20 significant
digits, in which case the Number value may be either the Number value
for the MV of a literal produced by replacing each significant digit
after the 20th with a 0 digit or the Number value for the MV of a
literal produced by replacing each significant digit after the 20th with
a 0 digit and then incrementing the literal at the 20th digit position.
A digit is significant if it is not part of an _ExponentPart_ and

-   it is not 0; or

-   there is a nonzero digit to its left and there is a nonzero digit,
    not in the _ExponentPart_, to its right.

ToInteger ( argument )

The abstract operation ToInteger converts _argument_ to an integral
numeric value. This abstract operation functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, return +0.

4.  If _number_ is +0, −0, +∞, or −∞, return _number_.

5.  Return the number value that is the same sign as _number_ and whose
    magnitude is floor(abs(_number_)).

ToInt32 ( argument )

The abstract operation ToInt32 converts _argument_ to one of 2^32^
integer values in the range −2^31^ through 2^31^−1, inclusive. This
abstract operation functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, +0, −0, +∞, or −∞, return +0.

4.  Let _int_ be the mathematical value that is the same sign as
    _number_ and whose magnitude is floor(abs(_number_)).

5.  Let _int32bit_ be _int_ modulo 2^32^.

6.  If _int32bit_ ≥ 2^31^, return _int32bit_ − 2^32^, otherwise return
    _int32bit_.

NOTE Given the above definition of ToInt32:

-   The ToInt32 abstract operation is idempotent: if applied to a result
    that it produced, the second application leaves that value
    unchanged.

-   ToInt32(ToUint32(_x_)) is equal to ToInt32(_x_) for all values of
    _x_. (It is to preserve this latter property that +∞ and −∞ are
    mapped to +0.)

-   ToInt32 maps −0 to +0.

ToUint32 ( argument )

The abstract operation ToUint32 converts _argument_ to one of 2^32^
integer values in the range 0 through 2^32^−1, inclusive. This abstract
operation functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, +0, −0, +∞, or −∞, return +0.

4.  Let _int_ be the mathematical value that is the same sign as
    _number_ and whose magnitude is floor(abs(_number_)).

5.  Let _int32bit_ be _int_ modulo 2^32^.

6.  Return _int32bit_.

NOTE Given the above definition of ToUint32:

-   Step 6 is the only difference between ToUint32 and ToInt32.

-   The ToUint32 abstract operation is idempotent: if applied to a
    result that it produced, the second application leaves that value
    unchanged.

-   ToUint32(ToInt32(_x_)) is equal to ToUint32(_x_) for all values of
    _x_. (It is to preserve this latter property that +∞ and −∞ are
    mapped to +0.)

-   ToUint32 maps −0 to +0.

ToInt16 ( argument )

The abstract operation ToInt16 converts _argument_ to one of 2^16^
integer values in the range −32768 through 32767, inclusive. This
abstract operation functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, +0, −0, +∞, or −∞, return +0.

4.  Let _int_ be the mathematical value that is the same sign as
    _number_ and whose magnitude is floor(abs(_number_)).

5.  Let _int16bit_ be _int_ modulo 2^16^.

6.  If _int16bit_ ≥ 2^15^, return _int16bit_ − 2^16^, otherwise return
    _int16bit_.

ToUint16 ( argument )

The abstract operation ToUint16 converts _argument_ to one of 2^16^
integer values in the range 0 through 2^16^−1, inclusive. This abstract
operation functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, +0, −0, +∞, or −∞, return +0.

4.  Let _int_ be the mathematical value that is the same sign as
    _number_ and whose magnitude is floor(abs(_number_)).

5.  Let _int16bit_ be _int_ modulo 2^16^.

6.  Return _int16bit_.

NOTE Given the above definition of ToUint16:

-   The substitution of 2^16^ for 2^32^ in step 5 is the only difference
    between ToUint32 and ToUint16.

-   ToUint16 maps −0 to +0.

ToInt8 ( argument )

The abstract operation ToInt8 converts _argument_ to one of 2^8^ integer
values in the range −128 through 127, inclusive. This abstract operation
functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, +0, −0, +∞, or −∞, return +0.

4.  Let _int_ be the mathematical value that is the same sign as
    _number_ and whose magnitude is floor(abs(_number_)).

5.  Let _int8bit_ be _int_ modulo 2^8^.

6.  If _int8bit_ ≥ 2^7^, return _int8bit_ − 2^8^, otherwise return
    _int8bit_.

ToUint8 ( argument )

The abstract operation ToUint8 converts _argument_ to one of 2^8^
integer values in the range 0 through 255, inclusive. This abstract
operation functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, +0, −0, +∞, or −∞, return +0.

4.  Let _int_ be the mathematical value that is the same sign as
    _number_ and whose magnitude is floor(abs(_number_)).

5.  Let _int8bit_ be _int_ modulo 2^8^.

6.  Return _int8bit_.

ToUint8Clamp ( argument )

The abstract operation ToUint8Clamp converts _argument_ to one of 2^8^
integer values in the range 0 through 255, inclusive. This abstract
operation functions as follows:

1.  Let _number_ be ToNumber(_argument_).

2.  ReturnIfAbrupt(_number_).

3.  If _number_ is NAN, return +0.

4.  If _number_ ≤ 0, return +0.

5.  If _number_ ≥ 255, return 255.

6.  Let _f_ be floor(_number_).

7.  If _f +_ 0.5 < _number_, return _f_ + 1.

8.  If _number_ < _f +_ 0.5, return _f_.

9.  If _f_ is odd, return _f_ + 1.

10. Return _f_.

NOTE Note that unlike the other ECMAScript integer conversion abstract
operation, ToUint8Clamp rounds rather than truncates non-integer values
and does not convert +∞ to 0. ToUint8Clamp does “round half to even”
tie-breaking. This differs from MATH.ROUND which does “round half up”
tie-breaking.

ToString ( argument )

The abstract operation ToString converts _argument_ to a value of type
String according to Table 12:

Table 12 — ToString Conversions

  ------------------- ------------------------------------------------------------------------------------------------------------
  _ARGUMENT TYPE_     _RESULT_

  Completion Record   If _argument_ is an abrupt completion, return _argument_. Otherwise return ToString(_argument_.[[value]]).

  Undefined           Return "UNDEFINED".

  Null                Return "NULL".

  Boolean             If _argument_ is TRUE, return "TRUE".
                      
                      If _argument_ is FALSE, return "FALSE".

  Number              See 7.1.12.1.

  String              Return _argument_.

  Symbol              Throw a TYPEERROR exception.

  Object              Apply the following steps:
                      
                      1. Let _primValue_ be ToPrimitive(_argument_, hint String).
                      
                      2. Return ToString(_primValue_).
  ------------------- ------------------------------------------------------------------------------------------------------------

ToString Applied to the Number Type

The abstract operation ToString converts a Number _m_ to String format
as follows:

1.  If _m_ is NAN, return the String "NAN".

2.  If _m_ is +0 or −0, return the String "0".

3.  If _m_ is less than zero, return the String concatenation of the
    String "-" and ToString(−_m_).

4.  If _m_ is +∞, return the String "INFINITY".

5.  Otherwise, let _n_, _k_, and _s_ be integers such that _k_ ≥ 1,
    10^_k_−1^ ≤ _s_ < 10_^k^_, the Number value for _s_ × 10_^n−k^_ is
    _m_, and _k_ is as small as possible. Note that _k_ is the number of
    digits in the decimal representation of _s_, that _s_ is not
    divisible by 10, and that the least significant digit of _s_ is not
    necessarily uniquely determined by these criteria.

6.  If _k_ ≤ _n_ ≤ 21, return the String consisting of the code units of
    the _k_ digits of the decimal representation of _s_ (in order, with
    no leading zeroes), followed by _n−k_ occurrences of the code unit
    0x0030 (DIGIT ZERO).

7.  If 0 < _n_ ≤ 21, return the String consisting of the code units of
    the most significant _n_ digits of the decimal representation of
    _s_, followed by the code unit 0x002E (FULL STOP), followed by the
    code units of the remaining _k−n_ digits of the decimal
    representation of _s_.

8.  If −6 < _n_ ≤ 0, return the String consisting of the code unit
    0x0030 (DIGIT ZERO), followed by the code unit 0x002E (FULL STOP),
    followed by −_n_ occurrences of the code unit 0x0030 (DIGIT ZERO),
    followed by the code units of the _k_ digits of the decimal
    representation of _s_.

9.  Otherwise, if _k_ = 1, return the String consisting of the code unit
    of the single digit of _s_, followed by code unit 0x0065 (LATIN
    SMALL LETTER E), followed by the code unit 0x002B (PLUS SIGN) or the
    code unit 0x002D (HYPHEN-MINUS) according to whether _n_−1 is
    positive or negative, followed by the code units of the decimal
    representation of the integer abs(_n_−1) (with no leading zeroes).

10. Return the String consisting of the code units of the most
    significant digit of the decimal representation of _s_, followed by
    code unit 0x002E (FULL STOP), followed by the code units of the
    remaining _k_−1 digits of the decimal representation of _s_,
    followed by code unit 0x0065 (LATIN SMALL LETTER E), followed by
    code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS)
    according to whether _n_−1 is positive or negative, followed by the
    code units of the decimal representation of the integer abs(_n_−1)
    (with no leading zeroes).

NOTE 1 The following observations may be useful as guidelines for
implementations, but are not part of the normative requirements of this
Standard:

-   If x is any Number value other than −0, then ToNumber(ToString(x))
    is exactly the same Number value as x.

-   The least significant digit of s is not always uniquely determined
    by the requirements listed in step 5.

NOTE 2 For implementations that provide more accurate conversions than
required by the rules above, it is recommended that the following
alternative version of step 5 be used as a guideline:

  Otherwise, let _n_, _k_, and _s_ be integers such that _k_ ≥ 1,
  10^_k_−1^ ≤ _s_ < 10_^k^_, the Number value for _s_ × 10^_n_−_k_^ is
  _m_, and _k_ is as small as possible. If there are multiple
  possibilities for _s_, choose the value of _s_ for which _s_ ×
  10^_n_−_k_^ is closest in value to _m_. If there are two such possible
  values of _s_, choose the one that is even. Note that _k_ is the
  number of digits in the decimal representation of _s_ and that _s_ is
  not divisible by 10.

NOTE 3 Implementers of ECMAScript may find useful the paper and code
written by David M. Gay for binary-to-decimal conversion of
floating-point numbers:

  Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary
  Conversions. Numerical Analysis, Manuscript 90-10. AT&T Bell
  Laboratories (Murray Hill, New Jersey). November 30, 1990. Available
  as
  http://cm.bell-labs.com/cm/cs/doc/90/4-10.ps.gz. Associated code
  available as
  http://netlib.sandia.gov/fp/dtoa.c and as
  http://netlib.sandia.gov/fp/g_fmt.c and may also be found at the
  various NETLIB mirror sites.

ToObject ( argument )

The abstract operation ToObject converts _argument_ to a value of type
Object according to Table 13:

Table 13 — ToObject Conversions

  ------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------
  _ARGUMENT TYPE_     _RESULT_
  Completion Record   If _argument_ is an abrupt completion, return _argument_. Otherwise return ToObject(_argument_.[[value]]).
  Undefined           Throw a TYPEERROR exception.
  Null                Throw a TYPEERROR exception.
  Boolean             Return a new Boolean object whose [[BooleanData]] internal slot is set to the value of _argument_. See 19.3 for a description of Boolean objects.
  Number              Return a new Number object whose [[NumberData]] internal slot is set to the value of _argument_. See 20.1 for a description of Number objects.
  String              Return a new String object whose [[StringData]] internal slot is set to the value of _argument_. See 21.1 for a description of String objects.
  Symbol              Return a new Symbol object whose [[SymbolData]] internal slot is set to the value of _argument_. See 19.4 for a description of Symbol objects.
  Object              Return _argument_.
  ------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------

ToPropertyKey ( argument ) 

The abstract operation ToPropertyKey converts _argument_ to a value that
can be used as a property key by performing the following steps:

1.  Let _key_ be ToPrimitive(_argument_, hint String).

2.  ReturnIfAbrupt(_key_).

3.  If Type(_key_) is Symbol, then

    a.  Return _key_.

4.  Return ToString(_key_).

ToLength ( argument ) 

The abstract operation ToLength converts _argument_ to an integer
suitable for use as the length of an array-like object. It performs the
following steps:

1.  ReturnIfAbrupt(_argument_).

2.  Let _len_ be ToInteger(_argument_).

3.  ReturnIfAbrupt(_len_).

4.  If _len_ ≤ +0, return +0.

5.  If _len_ is +∞, return 2^53^-1.

6.  Return min(_len_, 2^53^-1).

CanonicalNumericIndexString ( argument )

The abstract operation CanonicalNumericIndexString returns _argument_
converted to a numeric value if it is a String representation of a
Number that would be produced by ToString, or the string "-0".
Otherwise, it returns UNDEFINED. This abstract operation functions as
follows:

1.  Assert: Type(_argument_) is String.

2.  If _argument_ is "-0", return −0.

3.  Let _n_ be ToNumber(_argument_).

4.  If SameValue(ToString(_n_), _argument_) is FALSE, return UNDEFINED.

5.  Return _n_.

A _canonical numeric string_ is any String value for which the
CanonicalNumericIndexString abstract operation does not return
UNDEFINED.


Testing and Comparison Operations

RequireObjectCoercible ( argument )

The abstract operation RequireObjectCoercible throws an error if
_argument_ is a value that cannot be converted to an Object using
ToObject. It is defined by Table 14:

Table 14 — RequireObjectCoercible Results

  _ARGUMENT TYPE_     _RESULT_
  ------------------- --------------------------------------------------------------------------------------------------------------------------
  Completion Record   If _argument_ is an abrupt completion, return _argument_. Otherwise return RequireObjectCoercible(_argument_.[[value]]).
  Undefined           Throw a TYPEERROR exception.
  Null                Throw a TYPEERROR exception.
  Boolean             Return _argument_.
  Number              Return _argument_.
  String              Return _argument_.
  Symbol              Return _argument_.
  Object              Return _argument_.

IsArray ( argument )

The abstract operation IsArray takes one argument _argument_, and
performs the following steps:

1.  If Type(_argument_) is not Object, return FALSE.

2.  If _argument_ is an Array exotic object, return TRUE.

3.  If _argument_ is a Proxy exotic object, then

    a.  If the value of the [[ProxyHandler]] internal slot of _argument_
        is NULL, throw a TYPEERROR exception.

    b.  Let _target_ be the value of the [[ProxyTarget]] internal slot
        of _argument_.

    c.  Return IsArray(_target_).

4.  Return FALSE.

IsCallable ( argument )

The abstract operation IsCallable determines if _argument_, which must
be an ECMAScript language value or a Completion Record, is a callable
function with a [[Call]] internal method.

1.  ReturnIfAbrupt(_argument_).

2.  If Type(_argument_) is not Object, return FALSE.

3.  If _argument_ has a [[Call]] internal method, return TRUE.

4.  Return FALSE.

IsConstructor ( argument )

The abstract operation IsConstructor determines if _argument_, which
must be an ECMAScript language value or a Completion Record, is a
function object with a [[Construct]] internal method.

1.  ReturnIfAbrupt(_argument_).

2.  If Type(_argument_) is not Object, return FALSE.

3.  If _argument_ has a [[Construct]] internal method, return TRUE.

4.  Return FALSE.

IsExtensible (O)

The abstract operation IsExtensible is used to determine whether
additional properties can be added to the object that is _O_. A Boolean
value is returned. This abstract operation performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Return _O_.[[IsExtensible]]().

IsInteger ( argument )

The abstract operation IsInteger determines if _argument_ is a finite
integer numeric value.

1.  ReturnIfAbrupt(_argument_).

2.  If Type(_argument_) is not Number, return FALSE.

3.  If _argument_ is NAN, +∞, or −∞, return FALSE.

4.  If floor(abs(_argument_)) ≠ abs(_argument_), return FALSE.

5.  Return TRUE.

IsPropertyKey ( argument )

The abstract operation IsPropertyKey determines if _argument_, which
must be an ECMAScript language value or a Completion Record, is a value
that may be used as a property key.

1.  ReturnIfAbrupt(_argument_).

2.  If Type(_argument_) is String, return TRUE.

3.  If Type(_argument_) is Symbol, return TRUE.

4.  Return FALSE.

IsRegExp ( argument ) 

The abstract operation IsRegExp with argument _argument_ performs the
following steps:

1.  If Type(_argument_) is not Object, return FALSE.

2.  Let _isRegExp_ be Get(_argument_, @@match).

3.  ReturnIfAbrupt(_isRegExp_).

4.  If _isRegExp_ is not UNDEFINED, return ToBoolean(_isRegExp_).

5.  If _argument_ has a [[RegExpMatcher]] internal slot, return TRUE.

6.  Return FALSE.

SameValue(x, y)

The internal comparison abstract operation SameValue(_x_, _y_), where
_x_ and _y_ are ECMAScript language values, produces TRUE or FALSE. Such
a comparison is performed as follows:

1.  ReturnIfAbrupt(_x_).

2.  ReturnIfAbrupt(_y_).

3.  If Type(_x_) is different from Type(_y_), return FALSE.

4.  If Type(_x_) is Undefined, return TRUE.

5.  If Type(_x_) is Null, return TRUE.

6.  If Type(_x_) is Number, then

    a.  If _x_ is NaN and _y_ is NaN, return TRUE.

    b.  If _x_ is +0 and _y_ is -0, return FALSE.

    c.  If _x_ is -0 and _y_ is +0, return FALSE.

    d.  If _x_ is the same Number value as _y_, return TRUE.

    e.  Return FALSE.

7.  If Type(_x_) is String, then

    a.  If _x_ and _y_ are exactly the same sequence of code units (same
        length and same code units at corresponding indices) return
        TRUE; otherwise, return FALSE.

8.  If Type(_x_) is Boolean, then

    a.  If _x_ and _y_ are both TRUE or both FALSE, return TRUE;
        otherwise, return FALSE.

9.  If Type(_x_) is Symbol, then

    a.  If _x_ and _y_ are both the same Symbol value, return TRUE;
        otherwise, return FALSE.

10. Return TRUE if _x_ and _y_ are the same Object value. Otherwise,
    return FALSE.

SameValueZero(x, y)

The internal comparison abstract operation SameValueZero(_x_, _y_),
where _x_ and _y_ are ECMAScript language values, produces TRUE or
FALSE. Such a comparison is performed as follows:

1.  ReturnIfAbrupt(_x_).

2.  ReturnIfAbrupt(_y_).

3.  If Type(_x_) is different from Type(_y_), return FALSE.

4.  If Type(_x_) is Undefined, return TRUE.

5.  If Type(_x_) is Null, return TRUE.

6.  If Type(_x_) is Number, then

    a.  If _x_ is NaN and _y_ is NaN, return TRUE.

    b.  If _x_ is +0 and _y_ is -0, return TRUE.

    c.  If _x_ is -0 and _y_ is +0, return TRUE.

    d.  If _x_ is the same Number value as _y_, return TRUE.

    e.  Return FALSE.

7.  If Type(_x_) is String, then

    a.  If _x_ and _y_ are exactly the same sequence of code units (same
        length and same code units at corresponding indices) return
        TRUE; otherwise, return FALSE.

8.  If Type(_x_) is Boolean, then

    a.  If _x_ and _y_ are both TRUE or both FALSE, return TRUE;
        otherwise, return FALSE.

9.  If Type(_x_) is Symbol, then

    a.  If _x_ and _y_ are both the same Symbol value, return TRUE;
        otherwise, return FALSE.

10. Return TRUE if _x_ and _y_ are the same Object value. Otherwise,
    return FALSE.

NOTE SameValueZero differs from SameValue only in its treatment of +0
and -0.

Abstract Relational Comparison 

The comparison _x_ < _y_, where _x_ and _y_ are values, produces TRUE,
FALSE, or UNDEFINED (which indicates that at least one operand is NAN).
In addition to _x_ and _y_ the algorithm takes a Boolean flag named
_LeftFirst_ as a parameter. The flag is used to control the order in
which operations with potentially visible side-effects are performed
upon _x_ and _y_. It is necessary because ECMAScript specifies left to
right evaluation of expressions. The default value of _LeftFirst_ is
TRUE and indicates that the _x_ parameter corresponds to an expression
that occurs to the left of the _y_ parameter’s corresponding expression.
If _LeftFirst_ is FALSE, the reverse is the case and operations must be
performed upon _y_ before _x_. Such a comparison is performed as
follows:

1.  ReturnIfAbrupt(_x_).

2.  ReturnIfAbrupt(_y_).

3.  If the _LeftFirst_ flag is TRUE, then

    a.  Let _px_ be ToPrimitive(_x_, hint Number).

    b.  ReturnIfAbrupt(_px_).

    c.  Let _py_ be ToPrimitive(_y_, hint Number).

    d.  ReturnIfAbrupt(_py_).

4.  Else the order of evaluation needs to be reversed to preserve left
    to right evaluation

    a.  Let _py_ be ToPrimitive(_y_, hint Number).

    b.  ReturnIfAbrupt(_py_).

    c.  Let _px_ be ToPrimitive(_x_, hint Number).

    d.  ReturnIfAbrupt(_px_).

5.  If both _px_ and _py_ are Strings, then

    a.  If _py_ is a prefix of _px_, return FALSE. (A String value _p_
        is a prefix of String value _q_ if _q_ can be the result of
        concatenating _p_ and some other String _r_. Note that any
        String is a prefix of itself, because _r_ may be the empty
        String.)

    b.  If _px_ is a prefix of _py_, return TRUE.

    c.  Let _k_ be the smallest nonnegative integer such that the code
        unit at index _k_ within _px_ is different from the code unit at
        index _k_ within _py_. (There must be such a _k_, for neither
        String is a prefix of the other.)

    d.  Let _m_ be the integer that is the code unit value at index _k_
        within _px_.

    e.  Let _n_ be the integer that is the code unit value at index _k_
        within _py_.

    f.  If _m_ < _n_, return TRUE. Otherwise, return FALSE.

6.  Else,

    a.  Let _nx_ be ToNumber(_px_). Because _px_ and _py_ are primitive
        values evaluation order is not important.

    b.  ReturnIfAbrupt(_nx_).

    c.  Let _ny_ be ToNumber(_py_).

    d.  ReturnIfAbrupt(_ny_).

    e.  If _nx_ is NAN, return UNDEFINED.

    f.  If _ny_ is NAN, return UNDEFINED.

    g.  If _nx_ and _ny_ are the same Number value, return FALSE.

    h.  If _nx_ is +0 and _ny_ is −0, return FALSE.

    i.  If _nx_ is −0 and _ny_ is +0, return FALSE.

    j.  If _nx_ is +∞, return FALSE.

    k.  If _ny_ is +∞, return TRUE.

    l.  If _ny_ is −∞, return FALSE.

    m.  If _nx_ is −∞, return TRUE.

    n.  If the mathematical value of _nx_ is less than the mathematical
        value of _ny_ —note that these mathematical values are both
        finite and not both zero—return TRUE. Otherwise, return FALSE.

NOTE 1 Step 5 differs from step 11 in the algorithm for the addition
operator + (12.7.3) in using “and” instead of “or”.

NOTE 2 The comparison of Strings uses a simple lexicographic ordering on
sequences of code unit values. There is no attempt to use the more
complex, semantically oriented definitions of character or string
equality and collating order defined in the Unicode specification.
Therefore String values that are canonically equal according to the
Unicode standard could test as unequal. In effect this algorithm assumes
that both Strings are already in normalized form. Also, note that for
strings containing supplementary characters, lexicographic ordering on
sequences of UTF-16 code unit values differs from that on sequences of
code point values.

Abstract Equality Comparison 

The comparison _x_ == _y_, where _x_ and _y_ are values, produces TRUE
or FALSE. Such a comparison is performed as follows:

1.  ReturnIfAbrupt(_x_).

2.  ReturnIfAbrupt(_y_).

3.  If Type(_x_) is the same as Type(_y_), then

    a.  Return the result of performing Strict Equality Comparison _x_
        === _y_.

4.  If _x_ is NULL and _y_ is UNDEFINED, return TRUE.

5.  If _x_ is UNDEFINED and _y_ is NULL, return TRUE.

6.  If Type(_x_) is Number and Type(_y_) is String,
    return the result of the comparison _x_ == ToNumber(_y_).

7.  If Type(_x_) is String and Type(_y_) is Number,
    return the result of the comparison ToNumber(_x_) == _y_.

8.  If Type(_x_) is Boolean, return the result of the comparison
    ToNumber(_x_) == _y_.

9.  If Type(_y_) is Boolean, return the result of the comparison _x_ ==
    ToNumber(_y_).

10. If Type(_x_) is either String, Number, or Symbol and Type(_y_) is
    Object, then
    return the result of the comparison _x_ == ToPrimitive(_y_).

11. If Type(_x_) is Object and Type(_y_) is either String, Number, or
    Symbol, then
    return the result of the comparison ToPrimitive(_x_) == _y_.

12. Return FALSE.

Strict Equality Comparison 

The comparison _x_ === _y_, where _x_ and _y_ are values, produces TRUE
or FALSE. Such a comparison is performed as follows:

1.  If Type(_x_) is different from Type(_y_), return FALSE.

2.  If Type(_x_) is Undefined, return TRUE.

3.  If Type(_x_) is Null, return TRUE.

4.  If Type(_x_) is Number, then

    a.  If _x_ is NAN, return FALSE.

    b.  If _y_ is NAN, return FALSE.

    c.  If _x_ is the same Number value as _y_, return TRUE.

    d.  If _x_ is +0 and _y_ is −0, return TRUE.

    e.  If _x_ is −0 and _y_ is +0, return TRUE.

    f.  Return FALSE.

5.  If Type(_x_) is String, then

    a.  If _x_ and _y_ are exactly the same sequence of code units (same
        length and same code units at corresponding indices), return
        TRUE.

    b.  Else, return FALSE.

6.  If Type(_x_) is Boolean, then

    a.  If _x_ and _y_ are both TRUE or both FALSE, return TRUE.

    b.  Else, return FALSE.

7.  If _x_ and _y_ are the same Symbol value, return TRUE.

8.  If _x_ and _y_ are the same Object value, return TRUE.

9.  Return FALSE.

NOTE This algorithm differs from the SameValue Algorithm (7.2.9) in its
treatment of signed zeroes and NaNs.


 Operations on Objects

Get (O, P)

The abstract operation Get is used to retrieve the value of a specific
property of an object. The operation is called with arguments _O_ and
_P_ where _O_ is the object and _P_ is the property key. This abstract
operation performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Return _O_.[[Get]](_P_, _O_).

GetV (V, P)

The abstract operation GetV is used to retrieve the value of a specific
property of an ECMAScript language value. If the value is not an object,
the property lookup is performed using a wrapper object appropriate for
the type of the value. The operation is called with arguments _V_ and
_P_ where _V_ is the value and _P_ is the property key. This abstract
operation performs the following steps:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _O_ be ToObject(_V_).

3.  ReturnIfAbrupt(_O_).

4.  Return _O_.[[Get]](_P_, _V_).

Set (O, P, V, Throw)

The abstract operation Set is used to set the value of a specific
property of an object. The operation is called with arguments _O_, _P_,
_V_, and _Throw_ where _O_ is the object, _P_ is the property key, _V
is the new value for the property and _Throw_ is a Boolean flag. This
abstract operation performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Assert: Type(_Throw_) is Boolean.

4.  Let _success_ be _O_.[[Set]](_P_, _V_, _O_).

5.  ReturnIfAbrupt(_success_).

6.  If _success_ is FALSE and _Throw_ is TRUE, throw a TYPEERROR
    exception.

7.  Return _success_.

CreateDataProperty (O, P, V)

The abstract operation CreateDataProperty is used to create a new own
property of an object. The operation is called with arguments _O_, _P_,
and _V_ where _O_ is the object, _P_ is the property key, and _V_ is the
value for the property. This abstract operation performs the following
steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Let _newDesc_ be the PropertyDescriptor{[[Value]]: _V_,
    [[Writable]]: TRUE, [[Enumerable]]: TRUE, [[Configurable]]: TRUE}.

4.  Return _O_.[[DefineOwnProperty]](_P_, _newDesc_).

NOTE This abstract operation creates a property whose attributes are set
to the same defaults used for properties created by the ECMAScript
language assignment operator. Normally, the property will not already
exist. If it does exist and is not configurable or if _O_ is not
extensible, [[DefineOwnProperty]] will return FALSE.

CreateMethodProperty (O, P, V)

The abstract operation CreateMethodProperty is used to create a new own
property of an object. The operation is called with arguments _O_, _P_,
and _V_ where _O_ is the object, _P_ is the property key, and _V_ is the
value for the property. This abstract operation performs the following
steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Let _newDesc_ be the PropertyDescriptor{[[Value]]: _V_,
    [[Writable]]: TRUE, [[Enumerable]]: FALSE, [[Configurable]]: TRUE}.

4.  Return _O_.[[DefineOwnProperty]](_P_, _newDesc_).

NOTE This abstract operation creates a property whose attributes are set
to the same defaults used for built-in methods and methods defined using
class declaration syntax. Normally, the property will not already exist.
If it does exist and is not configurable or if _O_ is not extensible,
[[DefineOwnProperty]] will return FALSE.

CreateDataPropertyOrThrow (O, P, V)

The abstract operation CreateDataPropertyOrThrow is used to create a new
own property of an object. It throws a TYPEERROR exception if the
requested property update cannot be performed. The operation is called
with arguments _O_, _P_, and _V_ where _O_ is the object, _P_ is the
property key, and _V_ is the value for the property. This abstract
operation performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Let _success_ be CreateDataProperty(_O_, _P_, _V_).

4.  ReturnIfAbrupt(_success_).

5.  If _success_ is FALSE, throw a TYPEERROR exception.

6.  Return _success_.

NOTE This abstract operation creates a property whose attributes are set
to the same defaults used for properties created by the ECMAScript
language assignment operator. Normally, the property will not already
exist. If it does exist and is not configurable or if _O_ is not
extensible, [[DefineOwnProperty]] will return FALSE causing this
operation to throw a TYPEERROR exception.

DefinePropertyOrThrow (O, P, desc)

The abstract operation DefinePropertyOrThrow is used to call the
[[DefineOwnProperty]] internal method of an object in a manner that will
throw a TYPEERROR exception if the requested property update cannot be
performed. The operation is called with arguments _O_, _P_, and _desc_
where _O_ is the object, _P_ is the property key, and _desc_ is the
Property Descriptor for the property. This abstract operation performs
the following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Let _success_ be _O_.[[DefineOwnProperty]](_P_, _desc_).

4.  ReturnIfAbrupt(_success_).

5.  If _success_ is FALSE, throw a TYPEERROR exception.

6.  Return _success_.

DeletePropertyOrThrow (O, P)

The abstract operation DeletePropertyOrThrow is used to remove a
specific own property of an object. It throws an exception if the
property is not configurable. The operation is called with arguments _O_
and _P_ where _O_ is the object and _P_ is the property key. This
abstract operation performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Let _success_ be _O_.[[Delete]](_P_).

4.  ReturnIfAbrupt(_success_).

5.  If _success_ is FALSE, throw a TYPEERROR exception.

6.  Return _success_.

GetMethod (O, P)

The abstract operation GetMethod is used to get the value of a specific
property of an object when the value of the property is expected to be a
function. The operation is called with arguments _O_ and _P_ where _O_
is the object, _P_ is the property key. This abstract operation performs
the following steps:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _func_ be GetV(_O_, _P_).

3.  ReturnIfAbrupt(_func_).

4.  If _func_ is either UNDEFINED or NULL, return UNDEFINED.

5.  If IsCallable(_func_) is FALSE, throw a TYPEERROR exception.

6.  Return _func_.

HasProperty (O, P)

The abstract operation HasProperty is used to determine whether an
object has a property with the specified property key. The property may
be either an own or inherited. A Boolean value is returned. The
operation is called with arguments _O_ and _P_ where _O_ is the object
and _P_ is the property key. This abstract operation performs the
following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Return _O_.[[HasProperty]](_P_).

HasOwnProperty (O, P)

The abstract operation HasOwnProperty is used to determine whether an
object has an own property with the specified property key. A Boolean
value is returned. The operation is called with arguments _O_ and _P_
where _O_ is the object and _P_ is the property key. This abstract
operation performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: IsPropertyKey(_P_) is TRUE.

3.  Let _desc_ be _O_.[[GetOwnProperty]](_P_).

4.  ReturnIfAbrupt(_desc_).

5.  If _desc_ is UNDEFINED, return FALSE.

6.  Return TRUE.

Call(F, V, [argumentsList])

The abstract operation Call is used to call the [[Call]] internal method
of a function object. The operation is called with arguments _F_, _V_ ,
and optionally _argumentsList_ where _F_ is the function object, _V_ is
an ECMAScript language value that is the THIS value of the [[Call]], and
_argumentsList_ is the value passed to the corresponding argument of the
internal method. If _argumentsList_ is not present, an empty List is
used as its value. This abstract operation performs the following steps:

1.  ReturnIfAbrupt(_F_).

2.  If _argumentsList_ was not passed, let _argumentsList_ be a new
    empty List.

3.  If IsCallable(_F_) is FALSE, throw a TYPEERROR exception.

4.  Return _F_.[[Call]](_V_, _argumentsList_).

1.  

2.  

3.  

4.  

Construct (F, [argumentsList], [newTarget])

The abstract operation Construct is used to call the [[Construct]]
internal method of a function object. The operation is called with
arguments _F_, and optionally _argumentsList_, and _newTarget_ where _F_
is the function object. _argumentsList_ and _newTarget_ are the values
to be passed as the corresponding arguments of the internal method. If
_argumentsList_ is not present, an empty List is used as its value. If
_newTarget_ is not present, _F_ is used as its value. This abstract
operation performs the following steps:

1.  If _newTarget_ was not passed, let _newTarget_ be _F_.

2.  If _argumentsList_ was not passed, let _argumentsList_ be a new
    empty List.

3.  Assert: IsConstructor (_F_) is TRUE.

4.  Assert: IsConstructor (_newTarget_) is TRUE.

5.  Return _F_.[[Construct]](_argumentsList_, _newTarget_).

NOTE If _newTarget_ is not passed, this operation is equivalent to: NEW
F(...ARGUMENTSLIST)

SetIntegrityLevel (O, level)

The abstract operation SetIntegrityLevel is used to fix the set of own
properties of an object. This abstract operation performs the following
steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: _level_ is either "SEALED" or "FROZEN".

3.  Let _status_ be _O_.[[PreventExtensions]]().

4.  ReturnIfAbrupt(_status_).

5.  If _status_ is FALSE, return FALSE.

6.  Let _keys_ be _O_.[[OwnPropertyKeys]]().

7.  ReturnIfAbrupt(_keys_).

8.  If _level_ is "SEALED", then

    a.  Repeat for each element _k_ of _keys_,

        i.  Let _status_ be DefinePropertyOrThrow(_O_, _k_,
            PropertyDescriptor{ [[Configurable]]: FALSE}).

        ii. ReturnIfAbrupt(_status_).

9.  Else _level_ is "FROZEN",

    a.  Repeat for each element _k_ of _keys_,

        i.  Let _currentDesc_ be _O_.[[GetOwnProperty]](_k_).

        ii. ReturnIfAbrupt(_currentDesc_).

        iii. If _currentDesc_ is not UNDEFINED, then

            1.  If IsAccessorDescriptor(_currentDesc_) is TRUE, then

                a.  Let _desc_ be the
                    PropertyDescriptor{[[Configurable]]: FALSE}.

            2.  Else,

                a.  Let _desc_ be the PropertyDescriptor {
                    [[Configurable]]: FALSE, [[Writable]]: FALSE }.

            3.  Let _status_ be DefinePropertyOrThrow(_O_, _k_, _desc_).

            4.  ReturnIfAbrupt(_status_).

10. Return TRUE.

TestIntegrityLevel (O, level)

The abstract operation TestIntegrityLevel is used to determine if the
set of own properties of an object are fixed. This abstract operation
performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Assert: _level_ is either "SEALED" or "FROZEN".

3.  Let _status_ be IsExtensible(_O_).

4.  ReturnIfAbrupt(_status_).

5.  If _status_ is TRUE, return FALSE

6.  NOTE If the object is extensible, none of its properties are
    examined.

7.  Let _keys_ be _O_.[[OwnPropertyKeys]]().

8.  ReturnIfAbrupt(_keys_).

9.  Repeat for each element _k_ of _keys_,

    a.  Let _currentDesc_ be _O_.[[GetOwnProperty]](_k_).

    b.  ReturnIfAbrupt(_currentDesc_).

    c.  If _currentDesc_ is not UNDEFINED, then

        i.  If _currentDesc_.[[Configurable]] is TRUE, return FALSE.

        ii. If _level_ is "FROZEN" and IsDataDescriptor(_currentDesc_)
            is TRUE, then

            1.  If _currentDesc_.[[Writable]] is TRUE, return FALSE.

10. Return TRUE.

CreateArrayFromList (elements)

The abstract operation CreateArrayFromList is used to create an Array
object whose elements are provided by a List. This abstract operation
performs the following steps:

1.  Assert: _elements_ is a List whose elements are all ECMAScript
    language values.

2.  Let _array_ be ArrayCreate(0) (see 9.4.2.2).

3.  Let _n_ be 0.

4.  For each element _e_ of _elements

    a.  Let _status_ be CreateDataProperty(_array_, ToString(_n_), _e_).

    b.  Assert: _status_ is TRUE.

    c.  Increment _n_ by 1.

5.  Return _array_.

CreateListFromArrayLike (obj [, elementTypes] )

The abstract operation CreateListFromArrayLike is used to create a List
value whose elements are provided by the indexed properties of an
array-like object, _obj_. The optional argument _elementTypes_ is a List
containing the names of ECMAScript Language Types that are allowed for
element values of the List that is created. This abstract operation
performs the following steps:

1.  ReturnIfAbrupt(_obj_).

2.  If _elementTypes_ was not passed, let _elementTypes_ be (Undefined,
    Null, Boolean, String, Symbol, Number, Object).

3.  If Type(_obj_) is not Object, throw a TYPEERROR exception.

4.  Let _len_ be ToLength(Get(_obj_, "LENGTH")).

5.  ReturnIfAbrupt(_len_).

6.  Let _list_ be an empty List.

7.  Let _index_ be 0.

8.  Repeat while _index_ < _len

    a.  Let _indexName_ be ToString(_index_).

    b.  Let _next_ be Get(_obj_, _indexName_).

    c.  ReturnIfAbrupt(_next_).

    d.  If Type(_next_) is not an element of _elementTypes_, throw a
        TYPEERROR exception.

    e.  Append _next_ as the last element of _list_.

    f.  Set _index_ to _index_ + 1.

9.  Return _list_.

Invoke(O,P, [argumentsList])

The abstract operation Invoke is used to call a method property of an
object. The operation is called with arguments _O_, _P_ , and optionally
_argumentsList_ where _O_ serves as both the lookup point for the
property and the THIS value of the call, _P_ is the property key, and
_argumentsList_ is the list of arguments values passed to the method. If
_argumentsList_ is not present, an empty List is used as its value. This
abstract operation performs the following steps:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  If _argumentsList_ was not passed, let _argumentsList_ be a new
    empty List.

3.  Let _func_ be GetV(_O_, _P_).

4.  Return Call(_func_, _O_, _argumentsList_).

OrdinaryHasInstance (C, O)

The abstract operation OrdinaryHasInstance implements the default
algorithm for determining if an object _O_ inherits from the instance
object inheritance path provided by constructor _C_. This abstract
operation performs the following steps:

1.  If IsCallable(_C_) is FALSE, return FALSE.

2.  If _C_ has a [[BoundTargetFunction]] internal slot, then

    a.  Let _BC_ be the value of _C’s_ [[BoundTargetFunction]] internal
        slot.

    b.  Return InstanceofOperator(_O_,_BC_) (see 12.9.4).

3.  If Type(_O_) is not Object, return FALSE.

4.  Let _P_ be Get(_C_, "PROTOTYPE").

5.  ReturnIfAbrupt(_P_).

6.  If Type(_P_) is not Object, throw a TYPEERROR exception.

7.  Repeat

    a.  Let _O_ be _O_.[[GetPrototypeOf]]().

    b.  ReturnIfAbrupt(_O_).

    c.  If _O_ is NULL, return FALSE.

    d.  If SameValue(_P_, _O_) is TRUE, return TRUE.

SpeciesConstructor ( O, defaultConstructor )

The abstract operation SpeciesConstructor is used to retrieve the
constructor that should be used to create new objects that are derived
from the argument object _O_. The _defaultConstructor_ argument is the
constructor to use if a constructor @@species property cannot be found
starting from _O_. This abstract operation performs the following steps:

1.  Assert: Type(_O_) is Object.

2.  Let _C_ be Get(_O_, "CONSTRUCTOR").

3.  ReturnIfAbrupt(_C_).

4.  If _C_ is UNDEFINED, return _defaultConstructor_.

5.  If Type(_C_) is not Object, throw a TYPEERROR exception.

6.  Let _S_ be Get(_C_, @@species).

7.  ReturnIfAbrupt(_S_).

8.  If _S_ is either UNDEFINED or NULL, return _defaultConstructor_.

9.  If IsConstructor(_S_) is TRUE, return _S.

10. Throw a TYPEERROR exception.

EnumerableOwnNames (O)

When the abstract operation EnumerableOwnNames is called with Object _O_
the following steps are taken:

1.  Assert: Type(_O_) is Object.

2.  Let _ownKeys_ be _O_.[[OwnPropertyKeys]]().

3.  ReturnIfAbrupt(_ownKeys_).

4.  Let _names_ be a new empty List.

5.  Repeat, for each element _key_ of _ownKeys_ in List order

    a.  If Type(_key_) is String, then

        i.  Let _desc_ be _O_.[[GetOwnProperty]](_key_).

        ii. ReturnIfAbrupt(_desc_).

        iii. If _desc_ is not UNDEFINED, then

            1.  If _desc._[[Enumerable]] is TRUE, append _key_ to
                _names_.

6.  Order the elements of _names_ so they are in the same relative order
    as would be produced by the Iterator that would be returned if the
    [[Enumerate]] internal method was invoked on _O_.

7.  Return _names_.

NOTE The order of elements is returned list is the same as the
enumeration order that used by a for-in statement.

GetFunctionRealm ( obj ) 

The abstract operation GetFunctionRealm with argument _obj_ performs the
following steps:

1.  Assert: _obj_ is a callable object.

2.  If _obj_ has a [[Realm]] internal slot, then

    a.  Return _obj_’s [[Realm]] internal slot.

3.  If _obj_ is a Bound Function exotic object, then

    a.  Let _target_ be _obj_’s [[BoundTargetFunction]] internal slot.

    b.  Return GetFunctionRealm(_target_).

4.  If _obj_ is a Proxy exotic object, then

    a.  If the value of the [[ProxyHandler]] internal slot of _obj_ is
        NULL, throw a TYPEERROR exception.

    b.  Let _proxyTarget_ be the value of _obj_’s [[ProxyTarget]]
        internal slot.

    c.  Return GetFunctionRealm(_proxyTarget_).

5.  Return the running execution context’s Realm.

NOTE Step 5 will only be reached if _target_ is a non-standard exotic
function object that does not have a [[Realm]] internal slot.


Operations on Iterator Objects

See Common Iteration Interfaces (25.1).

GetIterator ( obj, method )

The abstract operation GetIterator with argument _obj_ and optional
argument _method_ performs the following steps:

1.  ReturnIfAbrupt(_obj_).

2.  If _method_ was not passed, then

    a.  Let _method_ be GetMethod(_obj_, @@iterator).

    b.  ReturnIfAbrupt(_method_).

3.  Let _iterator_ be Call(_method_,_obj_).

4.  ReturnIfAbrupt(_iterator_)_.

5.  If Type(_iterator_) is not Object, throw a TYPEERROR exception.

6.  Return _iterator_.

IteratorNext ( iterator, value )

The abstract operation IteratorNext with argument _iterator_ and
optional argument _value_ performs the following steps:

1.  If _value_ was not passed, then

    a.  Let _result_ be Invoke(_iterator_, "NEXT", «‍ »).

2.  Else,

    a.  Let _result_ be Invoke(_iterator_, "NEXT", «‍_value_»).

3.  ReturnIfAbrupt(_result_).

4.  If Type(_result_) is not Object, throw a TYPEERROR exception.

5.  Return _result_.

IteratorComplete ( iterResult )

The abstract operation IteratorComplete with argument _iterResult_
performs the following steps:

1.  Assert: Type(_iterResult_) is Object.

2.  Return ToBoolean(Get(_iterResult_, "DONE")).

IteratorValue ( iterResult )

The abstract operation IteratorValue with argument _iterResult_ performs
the following steps:

1.  Assert: Type(_iterResult_) is Object.

2.  Return Get(_iterResult_, "VALUE").

IteratorStep ( iterator )

The abstract operation IteratorStep with argument _iterator_ requests
the next value from _iterator_ and returns either FALSE indicating that
the iterator has reached its end or the IteratorResult object if a next
value is available. IteratorStep performs the following steps:

1.  Let _result_ be IteratorNext(_iterator_).

2.  ReturnIfAbrupt(_result_).

3.  Let _done_ be IteratorComplete(_result_).

4.  ReturnIfAbrupt(_done_).

5.  If _done_ is TRUE, return FALSE.

6.  Return _result_.

IteratorClose( iterator, completion )

The abstract operation IteratorClose with arguments _iterator_ and
_completion_ is used to notify an iterator that it should perform any
actions it would normally perform when it has reached its completed
state:

1.  Assert: Type(_iterator_) is Object.

2.  Assert: _completion_ is a Completion Record.

3.  Let _return_ be GetMethod(_iterator_, "RETURN").

4.  ReturnIfAbrupt(_return_).

5.  If _return_ is UNDEFINED, return Completion(_completion_).

6.  Let _innerResult_ be Call(_return_, _iterator_, «‍ »).

7.  If _completion_.[[type]] is throw, return Completion(_completion_).

8.  If _innerResult_.[[type]] is throw, return
    Completion(_innerResult_).

9.  If Type(_innerResult_.[[value]]) is not Object_,_ throw a TYPEERROR
    exception.

10. Return Completion(_completion_).

CreateIterResultObject ( value, done )

The abstract operation CreateIterResultObject with arguments _value_ and
_done_ creates an object that supports the IteratorResult interface by
performing the following steps:

1.  Assert: Type(_done_) is Boolean.

2.  Let _obj_ be ObjectCreate(%ObjectPrototype%).

3.  Perform CreateDataProperty(_obj_, "VALUE", _value_).

4.  Perform CreateDataProperty(_obj_, "DONE", _done_).

5.  Return _obj_.

CreateListIterator ( list ) 

The abstract operation CreateListIterator with argument _list_ creates
an Iterator (25.1.1.2) object whose next method returns the successive
elements of _list_. It performs the following steps:

1.  Let _iterator_ be ObjectCreate(%IteratorPrototype%,
    «[[IteratorNext]], [[IteratedList]], [[ListIteratorNextIndex]]»).

2.  Set _iterator’s_ [[IteratedList]] internal slot to _list_.

3.  Set _iterator’s_ [[ListIteratorNextIndex]] internal slot to 0.

4.  Let _next_ be a new built-in function object as defined in
    ListIterator NEXT (7.4.8.1).

5.  Set _iterator’s_ [[IteratorNext]] internal slot to _next_.

6.  Perform CreateMethodProperty(_iterator_, "NEXT", _next_).

7.  Return _iterator_.

ListIterator next( ) 

The ListIterator NEXT method is a standard built-in function object
(clause 17) that performs the following steps:

1.  Let _O_ be the THIS value.

2.  Let _f_ be the active function object.

3.  If _O_ does not have a [[IteratorNext]] internal slot, throw a
    TYPEERROR exception.

4.  Let _next_ be the value of the [[IteratorNext]] internal slot of
    _O_.

5.  If SameValue(_f_, _next_) is FALSE, throw a TYPEERROR exception.

6.  If _O_ does not have a [[IteratedList]] internal slot, throw a
    TYPEERROR exception.

7.  Let _list_ be the value of the [[IteratedList]] internal slot of
    _O_.

8.  Let _index_ be the value of the [[ListIteratorNextIndex]] internal
    slot of _O_.

9.  Let _len_ be the number of elements of _list_.

10. If _index_ ≥ _len_, then

    a.  Return CreateIterResultObject(UNDEFINED, TRUE).

11. Set the value of the [[ListIteratorNextIndex]] internal slot of _O
    to _index_+1.

12. Return CreateIterResultObject(_list_[_index_], FALSE).

NOTE A ListIterator NEXT method will throw an exception if applied to
any object other than the one with which it was originally associated.

1.  2.  3.  4.  5.  6.  7.  8.  

1.  2.  3.  4.  5.  6.  7.  8.  9.  a.  b.  c.  i.  

    d.  

10. 11. 



EXECUTABLE CODE AND EXECUTION CONTEXTS


Lexical Environments

A _Lexical Environment_ is a specification type used to define the
association of _Identifiers_ to specific variables and functions based
upon the lexical nesting structure of ECMAScript code. A Lexical
Environment consists of an Environment Record and a possibly null
reference to an _outer_ Lexical Environment. Usually a Lexical
Environment is associated with some specific syntactic structure of
ECMAScript code such as a _FunctionDeclaration_, a _BlockStatement_, or
a _Catch_ clause of a _TryStatement_ and a new Lexical Environment is
created each time such code is evaluated.

An Environment Record records the identifier bindings that are created
within the scope of its associated Lexical Environment. It is referred
to as the Lexical Environment’s EnvironmentRecord

The outer environment reference is used to model the logical nesting of
Lexical Environment values. The outer reference of a (inner) Lexical
Environment is a reference to the Lexical Environment that logically
surrounds the inner Lexical Environment. An outer Lexical Environment
may, of course, have its own outer Lexical Environment. A Lexical
Environment may serve as the outer environment for multiple inner
Lexical Environments. For example, if a _FunctionDeclaration_ contains
two nested _FunctionDeclarations_ then the Lexical Environments of each
of the nested functions will have as their outer Lexical Environment the
Lexical Environment of the current evaluation of the surrounding
function.

A _global environment_ is a Lexical Environment which does not have an
outer environment. The global environment’s outer environment reference
is NULL. A global environment’s EnvironmentRecord may be prepopulated
with identifier bindings and includes an associated _global object_
whose properties provide some of the global environment’s identifier
bindings. This global object is the value of a global environment’s THIS
binding. As ECMAScript code is executed, additional properties may be
added to the global object and the initial properties may be modified.

A _module environment_ is a Lexical Environment that contains the
bindings for the top level declarations of a _Module_. It also contains
the bindings that are explicitly imported by the _Module_. The outer
environment of a module environment is a global environment.

A _function environment_ is a Lexical Environment that corresponds to
the invocation of an ECMAScript function object. A function environment
may establish a new THIS binding. A function environment also captures
the state necessary to support SUPER method invocations.

Lexical Environments and Environment Record values are purely
specification mechanisms and need not correspond to any specific
artefact of an ECMAScript implementation. It is impossible for an
ECMAScript program to directly access or manipulate such values.

Environment Records

There are two primary kinds of Environment Record values used in this
specification: _declarative_ _Environment Records_ and _object_
_Environment Records_. Declarative Environment Records are used to
define the effect of ECMAScript language syntactic elements such as
_FunctionDeclarations_, _VariableDeclarations_, and _Catch_ clauses that
directly associate identifier bindings with ECMAScript language values.
Object Environment Records are used to define the effect of ECMAScript
elements such as _WithStatement_ that associate identifier bindings with
the properties of some object. Global Environment Records and function
Environment Records are specializations that are used for specifically
for _Script_ global declarations and for top-level declarations within
functions.

For specification purposes Environment Record values are values of the
Record specification type and can be thought of as existing in a simple
object-oriented hierarchy where Environment Record is an abstract class
with three concrete subclasses, declarative Environment Record, object
Environment Record, and global Environment Record. Function Environment
Records and module Environment Records are subclasses of declarative
Environment Record. The abstract class includes the abstract
specification methods defined in Table 15. These abstract methods have
distinct concrete algorithms for each of the concrete subclasses.

Table 15 — Abstract Methods of Environment Records

  _METHOD_                       _PURPOSE_
  ------------------------------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  HasBinding(N)                  Determine if an Environment Record has a binding for the String value _N_. Return TRUE if it does and FALSE if it does not
  CreateMutableBinding(N, D)     Create a new but uninitialized mutable binding in an Environment Record. The String value _N_ is the text of the bound name. If the optional Boolean argument _D_ is TRUE the binding is may be subsequently deleted.
  CreateImmutableBinding(N, S)   Create a new but uninitialized immutable binding in an Environment Record. The String value N is the text of the bound name. If _S_ is TRUE then attempts to access the value of the binding before it is initialized or set it after it has been initialized will always throw an exception, regardless of the strict mode setting of operations that reference that binding. _S_ is an optional parameter that defaults to FALSE.
  InitializeBinding(N,V)         Set the value of an already existing but uninitialized binding in an Environment Record. The String value N is the text of the bound name. V is the value for the binding and is a value of any ECMAScript language type.
  SetMutableBinding(N,V, S)      Set the value of an already existing mutable binding in an Environment Record. The String value _N_ is the text of the bound name. _V_ is the value for the binding and may be a value of any ECMAScript language type. _S_ is a Boolean flag. If _S_ is TRUE and the binding cannot be set throw a TYPEERROR exception.
  GetBindingValue(N,S)           Returns the value of an already existing binding from an Environment Record. The String value _N_ is the text of the bound name. _S_ is used to identify references originating in strict mode code or that otherwise require strict mode reference semantics. If _S_ is TRUE and the binding does not exist throw a REFERENCEERROR exception. If the binding exists but is uninitialized a REFERENCEERROR is thrown, regardless of the value of _S._
  DeleteBinding(N)               Delete a binding from an Environment Record. The String value _N_ is the text of the bound name. If a binding for _N_ exists, remove the binding and return TRUE. If the binding exists but cannot be removed return FALSE. If the binding does not exist return TRUE.
  HasThisBinding()               Determine if an Environment Record establishes a THIS binding. Return TRUE if it does and FALSE if it does not.
  HasSuperBinding()              Determine if an Environment Record establishes a SUPER method binding. Return TRUE if it does and FALSE if it does not.
  WithBaseObject ()              If this Environment Record is associated with a WITH statement, return the with object. Otherwise, return UNDEFINED.

Declarative Environment Records

Each declarative Environment Record is associated with an ECMAScript
program scope containing variable, constant, let, class, module, import,
and/or function declarations. A declarative Environment Record binds the
set of identifiers defined by the declarations contained within its
scope.

The behaviour of the concrete specification methods for declarative
Environment Records is defined by the following algorithms.

HasBinding(N)

The concrete Environment Record method HasBinding for declarative
Environment Records simply determines if the argument identifier is one
of the identifiers bound by the record:

1.  Let _envRec_ be the declarative Environment Record for which the
    method was invoked.

2.  If _envRec_ has a binding for the name that is the value of _N_,
    return TRUE.

3.  Return FALSE.

CreateMutableBinding (N, D)

The concrete Environment Record method CreateMutableBinding for
declarative Environment Records creates a new mutable binding for the
name _N_ that is uninitialized. A binding must not already exist in this
Environment Record for _N_. If Boolean argument _D_ is provided and has
the value TRUE the new binding is marked as being subject to deletion.

1.  Let _envRec_ be the declarative Environment Record for which the
    method was invoked.

2.  Assert: _envRec_ does not already have a binding for _N_.

3.  Create a mutable binding in _envRec_ for _N_ and record that it is
    uninitialized. If _D_ is TRUE record that the newly created binding
    may be deleted by a subsequent DeleteBinding call.

4.  Return NormalCompletion(empty).

CreateImmutableBinding (N, S)

The concrete Environment Record method CreateImmutableBinding for
declarative Environment Records creates a new immutable binding for the
name _N_ that is uninitialized. A binding must not already exist in this
Environment Record for _N_. If Boolean argument _S_ is provided and has
the value TRUE the new binding is marked as a strict binding.

1.  Let _envRec_ be the declarative Environment Record for which the
    method was invoked.

2.  Assert: _envRec_ does not already have a binding for _N_.

3.  Create an immutable binding in _envRec_ for _N_ and record that it
    is uninitialized. If _S_ is TRUE record that the newly created
    binding is a strict binding.

4.  Return NormalCompletion(empty).

InitializeBinding (N,V)

The concrete Environment Record method InitializeBinding for declarative
Environment Records is used to set the bound value of the current
binding of the identifier whose name is the value of the argument _N_ to
the value of argument _V_. An uninitialized binding for _N_ must already
exist.

1.  Let _envRec_ be the declarative Environment Record for which the
    method was invoked.

2.  Assert: _envRec_ must have an uninitialized binding for _N_.

3.  Set the bound value for _N_ in _envRec_ to _V_.

4.  Record that the binding for _N_ in _envRec_ has been initialized.

5.  Return NormalCompletion(empty).

SetMutableBinding (N,V,S)

The concrete Environment Record method SetMutableBinding for declarative
Environment Records attempts to change the bound value of the current
binding of the identifier whose name is the value of the argument _N_ to
the value of argument _V_. A binding for _N_ normally already exist, but
in rare cases it may not. If the binding is an immutable binding, a
TYPEERROR is thrown if S is TRUE.

1.  Let _envRec_ be the declarative Environment Record for which the
    method was invoked.

2.  If _envRec_ does not have a binding for _N_, then

    a.  If _S_ is TRUE throw a REFERENCEERROR exception.

    b.  Perform _envRec_.CreateMutableBinding(_N_, TRUE).

    c.  Perform _envRec_.InitializeBinding(_N_, _V_).

    d.  Return NormalCompletion(empty).

3.  If the binding for _N_ in _envRec_ is a strict binding, let _S_ be
    TRUE.

4.  If the binding for _N_ in _envRec_ has not yet been initialized
    throw a REFERENCEERROR exception.

5.  Else if the binding for _N_ in _envRec_ is a mutable binding, change
    its bound value to _V_.

6.  Else this must be an attempt to change the value of an immutable
    binding so if _S_ is TRUE throw a TYPEERROR exception.

7.  Return NormalCompletion(empty).

NOTE An example of ECMAScript code that results in a missing binding at
step 2 is:

function f(){eval("var x; x = (delete x, 0);")}

GetBindingValue(N,S)

The concrete Environment Record method GetBindingValue for declarative
Environment Records simply returns the value of its bound identifier
whose name is the value of the argument _N_. If the binding exists but
is uninitialized a REFERENCEERROR is thrown, regardless of the value of
_S.

1.  Let _envRec_ be the declarative Environment Record for which the
    method was invoked.

2.  Assert: _envRec_ has a binding for _N_.

3.  If the binding for _N_ in _envRec_ is an uninitialized binding,
    throw a REFERENCEERROR exception.

4.  Return the value currently bound to _N_ in _envRec_.

DeleteBinding (N)

The concrete Environment Record method DeleteBinding for declarative
Environment Records can only delete bindings that have been explicitly
designated as being subject to deletion.

1.  Let _envRec_ be the declarative Environment Record for which the
    method was invoked.

2.  Assert: _envRec_ has a binding for the name that is the value of
    _N_.

3.  If the binding for _N_ in _envRec_ cannot be deleted, return FALSE.

4.  Remove the binding for _N_ from _envRec_.

5.  Return TRUE.

HasThisBinding () 

Regular declarative Environment Records do not provide a THIS binding.

1.  Return FALSE.

HasSuperBinding ()

Regular declarative Environment Records do not provide a SUPER binding.

1.  Return FALSE.

 WithBaseObject()

Declarative Environment Records always return UNDEFINED as their
WithBaseObject.

1.  Return UNDEFINED.

Object Environment Records

Each object Environment Record is associated with an object called its
_binding object_. An object Environment Record binds the set of string
identifier names that directly correspond to the property names of its
binding object. Property keys that are not strings in the form of an
_IdentifierName_ are not included in the set of bound identifiers. Both
own and inherited properties are included in the set regardless of the
setting of their [[Enumerable]] attribute. Because properties can be
dynamically added and deleted from objects, the set of identifiers bound
by an object Environment Record may potentially change as a side-effect
of any operation that adds or deletes properties. Any bindings that are
created as a result of such a side-effect are considered to be a mutable
binding even if the Writable attribute of the corresponding property has
the value FALSE. Immutable bindings do not exist for object Environment
Records.

Object Environment Records created for WITH statements (13.10) can
provide their binding object as an implicit THIS value for use in
function calls. The capability is controlled by a _withEnvironment_
Boolean value that is associated with each object Environment Record. By
default, the value of _withEnvironment_ is FALSE for any object
Environment Record.

The behaviour of the concrete specification methods for object
Environment Records is defined by the following algorithms.

HasBinding(N)

The concrete Environment Record method HasBinding for object Environment
Records determines if its associated binding object has a property whose
name is the value of the argument _N_:

1.  Let _envRec_ be the object Environment Record for which the method
    was invoked.

2.  Let _bindings_ be the binding object for _envRec_.

3.  Let _foundBinding_ be HasProperty(_bindings_, _N_)

4.  ReturnIfAbrupt(_foundBinding_).

5.  If _foundBinding_ is FALSE, return FALSE.

6.  If the _withEnvironment_ flag of _envRec_ is FALSE, return TRUE.

7.  Let _unscopables_ be Get(_bindings_, @@unscopables).

8.  ReturnIfAbrupt(_unscopables_).

9.  If Type(_unscopables_) is Object, then

    a.  Let _blocked_ be ToBoolean(Get(_unscopables_, _N_)).

    b.  ReturnIfAbrupt(_blocked_).

    c.  If _blocked_ is TRUE, return FALSE.

10. Return TRUE.

CreateMutableBinding (N, D)

The concrete Environment Record method CreateMutableBinding for object
Environment Records creates in an Environment Record’s associated
binding object a property whose name is the String value and initializes
it to the value UNDEFINED. If Boolean argument _D_ is provided and has
the value TRUE the new property’s [[Configurable]] attribute is set to
TRUE, otherwise it is set to FALSE.

1.  Let _envRec_ be the object Environment Record for which the method
    was invoked.

2.  Let _bindings_ be the binding object for _envRec_.

3.  If _D_ is TRUE then let _configValue_ be TRUE otherwise let
    _configValue_ be FALSE.

4.  Return DefinePropertyOrThrow(_bindings_, _N_,
    PropertyDescriptor{[[Value]]:UNDEFINED, [[Writable]]: TRUE,
    [[Enumerable]]: TRUE , [[Configurable]]: _configValue_}).

NOTE Normally _envRec_ will not have a binding for _N_ but if it does,
the semantics of DefinePropertyOrThrow may result in an existing binding
being replaced or shadowed or cause an abrupt completion to be returned.

CreateImmutableBinding (N, S)

The concrete Environment Record method CreateImmutableBinding is never
used within this specification in association with Object Environment
Records.

InitializeBinding (N,V)

The concrete Environment Record method InitializeBinding for object
Environment Records is used to set the bound value of the current
binding of the identifier whose name is the value of the argument _N_ to
the value of argument _V_. An uninitialized binding for _N_ must already
exist.

1.  Let _envRec_ be the object Environment Record for which the method
    was invoked.

2.  Assert: _envRec_ must have an uninitialized binding for _N_.

3.  Record that the binding for _N_ in _envRec_ has been initialized.

4.  Return _envRec_.SetMutableBinding(_N_, _V_, FALSE).

NOTE In this specification, all uses of CreateMutableBinding for object
Environment Records are immediately followed by a call to
InitializeBinding for the same name. Hence, implementations do not need
to explicitly track the initialization state of individual object
Environment Record bindings.

SetMutableBinding (N,V,S)

The concrete Environment Record method SetMutableBinding for object
Environment Records attempts to set the value of the Environment
Record’s associated binding object’s property whose name is the value of
the argument _N_ to the value of argument _V_. A property named _N_
normally already exists but if it does not or is not currently writable,
error handling is determined by the value of the Boolean argument _S_.

1.  Let _envRec_ be the object Environment Record for which the method
    was invoked.

2.  Let _bindings_ be the binding object for _envRec_.

3.  Return Set(_bindings_, _N_, _V_, _S_).

GetBindingValue(N,S)

The concrete Environment Record method GetBindingValue for object
Environment Records returns the value of its associated binding object’s
property whose name is the String value of the argument identifier _N_.
The property should already exist but if it does not the result depends
upon the value of the _S_ argument:

1.  Let _envRec_ be the object Environment Record for which the method
    was invoked.

2.  Let _bindings_ be the binding object for _envRec_.

3.  Let _value_ be HasProperty(_bindings_, _N_).

4.  ReturnIfAbrupt(_value_).

5.  If _value_ is FALSE, then

    a.  If _S_ is FALSE, return the value UNDEFINED, otherwise throw a
        REFERENCEERROR exception.

6.  Return Get(_bindings_, _N_).

DeleteBinding (N)

The concrete Environment Record method DeleteBinding for object
Environment Records can only delete bindings that correspond to
properties of the environment object whose [[Configurable]] attribute
have the value TRUE.

1.  Let _envRec_ be the object Environment Record for which the method
    was invoked.

2.  Let _bindings_ be the binding object for _envRec_.

3.  Return _bindings_.[[Delete]](_N_).

HasThisBinding ()

Regular object Environment Records do not provide a THIS binding.

1.  Return FALSE.

HasSuperBinding ()

Regular object EnvironmentRecords do not provide a SUPER binding.

1.  Return FALSE.

 WithBaseObject()

Object Environment Records return UNDEFINED as their WithBaseObject
unless their _withEnvironment_ flag is TRUE.

1.  Let _envRec_ be the object Environment Record for which the method
    was invoked.

2.  If the _withEnvironment_ flag of _envRec_ is TRUE, return the
    binding object for _envRec_.

3.  Otherwise, return UNDEFINED.

Function Environment Records

A function Environment Record is a declarative Environment Record that
is used to represent the top-level scope of a function and, if the
function is not an _ArrowFunction_, provides a THIS binding. If a
function is not an _ArrowFunction_ function and references SUPER, its
function Environment Record also contains the state that is used to
perform SUPER method invocations from within the function.

Function Environment Records have the additional state fields listed in
Table 16.

Table 16 — Additional Fields of Function Environment Records

  _FIELD NAME_            _VALUE_                                       _MEANING_
  ----------------------- --------------------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[thisValue]]           Any                                           This is the THIS value used for this invocation of the function.
  [[thisBindingStatus]]   "LEXICAL" | "INITIALIZED" | "UNINITIALIZED"   If the value is "LEXICAL", this is an _ArrowFunction_ and does not have a local this value.
  [[FunctionObject]]      Object                                        The function Object whose invocation caused this Environment Record to be created.
  [[HomeObject]]          Object | UNDEFINED                            If the associated function has SUPER property accesses and is not an _ArrowFunction_, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is UNDEFINED.
  [[NewTarget]]           Object | UNDEFINED                            If this Environment Record was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] _newTarget_ parameter. Otherwise, its value is UNDEFINED.

Function Environment Records support all of the declarative Environment
Record methods listed in Table 15 and share the same specifications for
all of those methods except for HasThisBinding and HasSuperBinding. In
addition, function Environment Records support the methods listed in
Table 17:

Table 17 — Additional Methods of Function Environment Records

  _METHOD_           _PURPOSE_
  ------------------ ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  BindThisValue(V)   Set the [[thisValue]] and record that it has been initialized.
  GetThisBinding()   Return the value of this Environment Record’s THIS binding. Throws a REFERENCEERROR if the THIS binding has not been initialized.
  GetSuperBase()     Return the object that is the base for SUPER property accesses bound in this Environment Record. The object is derived from this Environment Record’s [[HomeObject]] field. The value UNDEFINED indicates that SUPER property accesses will produce runtime errors.

The behaviour of the additional concrete specification methods for
function Environment Records is defined by the following algorithms:

BindThisValue(V)

1.  Let _envRec_ be the function Environment Record for which the method
    was invoked.

2.  Assert: _envRec_.[[thisBindingStatus]] is not "LEXICAL".

3.  If _envRec_.[[thisBindingStatus]] is "INITIALIZED", throw a
    REFERENCEERROR exception.

4.  Set _envRec_.[[thisValue]] to _V_.

5.  Set _envRec_.[[thisBindingStatus]] to "INITIALIZED".

6.  Return _V_.

HasThisBinding ()

1.  Let _envRec_ be the function Environment Record for which the method
    was invoked.

2.  If _envRec_.[[thisBindingStatus]] is "LEXICAL", return FALSE;
    otherwise, return TRUE.

HasSuperBinding ()

1.  Let _envRec_ be the function Environment Record for which the method
    was invoked.

2.  If _envRec_.[[thisBindingStatus]] is "LEXICAL", return FALSE.

3.  If _envRec_.[[HomeObject]] has the value UNDEFINED, return FALSE,
    otherwise, return TRUE.

GetThisBinding ()

1.  Let _envRec_ be the function Environment Record for which the method
    was invoked.

2.  Assert: _envRec_.[[thisBindingStatus]] is not "LEXICAL".

3.  If _envRec_.[[thisBindingStatus]] is "UNINITIALIZED", throw a
    REFERENCEERROR exception.

4.  Return _envRec_.[[thisValue]].

GetSuperBase ()

1.  Let _envRec_ be the function Environment Record for which the method
    was invoked.

2.  Let _home_ be the value of _envRec_.[[HomeObject]].

3.  If _home_ has the value UNDEFINED, return UNDEFINED.

4.  Assert: Type(_home_) is Object.

5.  Return _home._[[GetPrototypeOf]]().

Global Environment Records

A global Environment Record is used to represent the outer most scope
that is shared by all of the ECMAScript _Script_ elements that are
processed in a common Realm (8.2). A global Environment Record provides
the bindings for built-in globals (clause 18), properties of the global
object, and for all top-level declarations (13.1.8, 13.1.10) that occur
within a _Script_.

A global Environment Record is logically a single record but it is
specified as a composite encapsulating an object Environment Record and
a declarative Environment Record. The object Environment Record has as
its base object the global object of the associated Realm. This global
object is the value returned by the global Environment Record’s
GetThisBinding concrete method. The object Environment Record component
of a global Environment Record contains the bindings for all built-in
globals (clause 18) and all bindings introduced by a
_FunctionDeclaration_, _GeneratorDeclaration_, or _VariableStatement
contained in global code. The bindings for all other ECMAScript
declarations in global code are contained in the declarative Environment
Record component of the global Environment Record.

Properties may be created directly on a global object. Hence, the object
Environment Record component of a global Environment Record may contain
both bindings created explicitly by _FunctionDeclaration_,
_GeneratorDeclaration_, or _VariableDeclaration_ declarations and
binding created implicitly as properties of the global object. In order
to identify which bindings were explicitly created using declarations, a
global Environment Record maintains a list of the names bound using its
CreateGlobalVarBindings and CreateGlobalFunctionBindings concrete
methods.

Global Environment Records have the additional fields listed in Table 18
and the additional methods listed in Table 19.

Table 18 — Additional Fields of Global Environment Records

  _FIELD NAME_            _VALUE_                          _MEANING_
  ----------------------- -------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[ObjectRecord]]        Object Environment Record        Binding object is the global object. It contains global built-in bindings as well as _FunctionDeclaration_, _GeneratorDeclaration_, and _VariableDeclaration_ bindings in global code for the associated Realm.
  [[DeclarativeRecord]]   Declarative Environment Record   Contains bindings for all declarations in global code for the associated Realm code except for _FunctionDeclaration_, _GeneratorDeclaration_, and _VariableDeclaration bindings_.
  [[VarNames]]            List of String                   The string names bound by _FunctionDeclaration_, _GeneratorDeclaration_, and _VariableDeclaration_ declarations in global code for the associated Realm.

Table 19 — Additional Methods of Global Environment Records

  _METHOD_                               _PURPOSE_

  GetThisBinding()                       Return the value of this Environment Record’s THIS binding.
  HasVarDeclaration (N)                  Determines if the argument identifier has a binding in this Environment Record that was created using a _VariableDeclaration_, _FunctionDeclaration_, or _GeneratorDeclaration_.
  HasLexicalDeclaration (N)              Determines if the argument identifier has a binding in this Environment Record that was created using a lexical declaration such as a _LexicalDeclaration_ or a _ClassDeclaration_.
  HasRestrictedGlobalProperty (N)        Determines if the argument is the name of a global object property that may not be shadowed by a global lexically binding.
  CanDeclareGlobalVar (N)                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument _N_.
  CanDeclareGlobalFunction (N)           Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument _N_.
  CreateGlobalVarBinding(N, D)           Used to create and initialize to UNDEFINED a global VAR binding in the [[ObjectRecord]] component of a global Environment Record. The binding will be a mutable binding. The corresponding global object property will have attribute values appropriate for a VAR. The String value _N_ is the bound name. If _D_ is TRUE the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.
  CreateGlobalFunctionBinding(N, V, D)   Create and initialize a global FUNCTION binding in the [[ObjectRecord]] component of a global Environment Record. The binding will be a mutable binding. The corresponding global object property will have attribute values appropriate for a FUNCTION. The String value _N_ is the bound name. _V_ is the initialization value. If the optional Boolean argument _D_ is TRUE the binding is may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.

The behaviour of the concrete specification methods for global
Environment Records is defined by the following algorithms.

HasBinding(N)

The concrete Environment Record method HasBinding for global Environment
Records simply determines if the argument identifier is one of the
identifiers bound by the record:

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  If _DclRec._HasBinding(_N_) is TRUE, return TRUE.

4.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

5.  Return _ObjRec._HasBinding(_N_).

CreateMutableBinding (N, D)

The concrete Environment Record method CreateMutableBinding for global
Environment Records creates a new mutable binding for the name _N_ that
is uninitialized. The binding is created in the associated
DeclarativeRecord. A binding for _N_ must not already exist in the
DeclarativeRecord. If Boolean argument _D_ is provided and has the value
TRUE the new binding is marked as being subject to deletion.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  If _DclRec_.HasBinding(_N_) is TRUE, throw a TYPEERROR exception.

4.  Return _DclRec_.CreateMutableBinding(_N_, _D_).

CreateImmutableBinding (N, S)

The concrete Environment Record method CreateImmutableBinding for global
Environment Records creates a new immutable binding for the name _N_
that is uninitialized. A binding must not already exist in this
Environment Record for _N_. If Boolean argument _S_ is provided and has
the value TRUE the new binding is marked as a strict binding.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  If _DclRec_.HasBinding(_N_) is TRUE, throw a TYPEERROR exception.

4.  Return _DclRec_.CreateImmutableBinding(_N_, _S_).

InitializeBinding (N,V)

The concrete Environment Record method InitializeBinding for global
Environment Records is used to set the bound value of the current
binding of the identifier whose name is the value of the argument _N_ to
the value of argument _V_. An uninitialized binding for _N_ must already
exist.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  If _DclRec._HasBinding(_N_) is TRUE, then

    a.  Return _DclRec_.InitializeBinding(_N_, _V_).

4.  Assert: If the binding exists it must be in the object Environment
    Record.

5.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

6.  Return _ObjRec._InitializeBinding(_N_, _V_).

SetMutableBinding (N,V,S)

The concrete Environment Record method SetMutableBinding for global
Environment Records attempts to change the bound value of the current
binding of the identifier whose name is the value of the argument _N_ to
the value of argument _V_. If the binding is an immutable binding, a
TYPEERROR is thrown if S is TRUE. A property named _N_ normally already
exists but if it does not or is not currently writable, error handling
is determined by the value of the Boolean argument _S_.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  If _DclRec._HasBinding(_N_) is TRUE, then

    a.  Return _DclRec._SetMutableBinding(_N_, _V_, _S_).

4.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

5.  Return _ObjRec_.SetMutableBinding(_N_, _V_, _S_).

GetBindingValue(N,S)

The concrete Environment Record method GetBindingValue for global
Environment Records returns the value of its bound identifier whose name
is the value of the argument _N_. If the binding is an uninitialized
binding throw a REFERENCEERROR exception. A property named _N_ normally
already exists but if it does not or is not currently writable, error
handling is determined by the value of the Boolean argument _S_.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  If _DclRec._HasBinding(_N_) is TRUE, then

    a.  Return _DclRec._GetBindingValue(_N_, _S_).

4.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

5.  Return _ObjRec_.GetBindingValue(_N_, _S_).

DeleteBinding (N)

The concrete Environment Record method DeleteBinding for global
Environment Records can only delete bindings that have been explicitly
designated as being subject to deletion.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  If _DclRec._HasBinding(_N_) is TRUE, then

    a.  Return _DclRec._DeleteBinding(_N_).

4.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

5.  Let _globalObject_ be the binding object for _ObjRec_.

6.  Let _existingProp_ be HasOwnProperty(_globalObject_, _N_).

7.  ReturnIfAbrupt(_existingProp_).

8.  If _existingProp_ is TRUE, then

    a.  Let _status_ be _ObjRec._DeleteBinding(_N_).

    b.  ReturnIfAbrupt(_status_).

    c.  If _status_ is TRUE, then

        i.  Let _varNames_ be _envRec_.[[VarNames]].

        ii. If _N_ is an element of _varNames_, remove that element from
            the _varNames_.

    d.  Return _status_.

9.  Return TRUE.

HasThisBinding ()

Global Environment Records always provide a THIS binding whose value is
the associated global object.

1.  Return TRUE.

HasSuperBinding ()

1.  Return FALSE.

 WithBaseObject()

Global Environment Records always return UNDEFINED as their
WithBaseObject.

1.  Return UNDEFINED.

GetThisBinding ()

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

3.  Let _bindings_ be the binding object for _ObjRec_.

4.  Return _bindings_.

HasVarDeclaration (N)

The concrete Environment Record method HasVarDeclaration for global
Environment Records determines if the argument identifier has a binding
in this record that was created using a _VariableStatement_ or a
_FunctionDeclaration_:

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _varDeclaredNames_ be _envRec_.[[VarNames]].

3.  If _varDeclaredNames_ contains the value of _N_, return TRUE.

4.  Return FALSE.

HasLexicalDeclaration (N)

The concrete Environment Record method HasLexicalDeclaration for global
Environment Records determines if the argument identifier has a binding
in this record that was created using a lexical declaration such as a
_LexicalDeclaration_ or a _ClassDeclaration_:

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _DclRec_ be _envRec_.[[DeclarativeRecord]].

3.  Return _DclRec._HasBinding(_N_).

HasRestrictedGlobalProperty (N)

The concrete Environment Record method HasRestrictedGlobalProperty for
global Environment Records determines if the argument identifier is the
name of a property of the global object that must not be shadowed by a
global lexically binding:

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

3.  Let _globalObject_ be the binding object for _ObjRec_.

4.  Let _existingProp_ be _globalObject_.[[GetOwnProperty]](_N_).

5.  ReturnIfAbrupt(_existingProp_).

6.  If _existingProp_ is UNDEFINED, return FALSE.

7.  If _existingProp_.[[Configurable]] is TRUE, return FALSE.

8.  Return TRUE.

NOTE Properties may exist upon a global object that were directly
created rather than being declared using a var or function declaration.
A global lexical binding may not be created that has the same name as a
non-configurable property of the global object. The global property
UNDEFINED is an example of such a property.

CanDeclareGlobalVar (N)

The concrete Environment Record method CanDeclareGlobalVar for global
Environment Records determines if a corresponding CreateGlobalVarBinding
call would succeed if called for the same argument _N_. Redundant var
declarations and var declarations for pre-existing global object
properties are allowed.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

3.  Let _globalObject_ be the binding object for _ObjRec_.

4.  Let _hasProperty_ be HasOwnProperty(_globalObject, N_).

5.  ReturnIfAbrupt(_hasProperty_).

6.  If _hasProperty_ is TRUE, return TRUE.

7.  Return IsExtensible(_globalObject_).

8.  9.  

CanDeclareGlobalFunction (N)

The concrete Environment Record method CanDeclareGlobalFunction for
global Environment Records determines if a corresponding
CreateGlobalFunctionBinding call would succeed if called for the same
argument _N_.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

3.  Let _globalObject_ be the binding object for _ObjRec_.

4.  Let _existingProp_ be _globalObject_.[[GetOwnProperty]](_N_).

5.  ReturnIfAbrupt(_existingProp_).

6.  If _existingProp_ is UNDEFINED, return IsExtensible(_globalObject_).

7.  If _existingProp_.[[Configurable]] is TRUE, return TRUE.

8.  If IsDataDescriptor(_existingProp_) is TRUE and _existingProp_ has
    attribute values {[[Writable]]: TRUE, [[Enumerable]]: TRUE}, return
    TRUE.

9.  Return FALSE.

CreateGlobalVarBinding (N, D)

The concrete Environment Record method CreateGlobalVarBinding for global
Environment Records creates and initializes a mutable binding in the
associated object Environment Record and records the bound name in the
associated [[VarNames]] List. If a binding already exists, it is reused
and assumed to be initialized.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

3.  Let _globalObject_ be the binding object for _ObjRec_.

4.  Let _hasProperty_ be HasOwnProperty(_globalObject, N_).

5.  ReturnIfAbrupt(_hasProperty_).

6.  Let _extensible_ be IsExtensible(_globalObject_).

7.  ReturnIfAbrupt(_extensible_).

8.  If _hasProperty_ is FALSE and _extensible_ is TRUE, then

    a.  Let _status_ be _ObjRec._CreateMutableBinding(_N_, _D_).

    b.  ReturnIfAbrupt(_status_).

    c.  Let _status_ be _ObjRec._InitializeBinding(_N_, UNDEFINED).

    d.  ReturnIfAbrupt(_status_).

9.  Let _varDeclaredNames_ be _envRec_.[[VarNames]].

10. If _varDeclaredNames_ does not contain the value of _N_, then

    a.  Append _N_ to _varDeclaredNames_.

11. Return NormalCompletion(empty).

CreateGlobalFunctionBinding (N, V, D)

The concrete Environment Record method CreateGlobalFunctionBinding for
global Environment Records creates and initializes a mutable binding in
the associated object Environment Record and records the bound name in
the associated [[VarNames]] List. If a binding already exists, it is
replaced.

1.  Let _envRec_ be the global Environment Record for which the method
    was invoked.

2.  Let _ObjRec_ be _envRec_.[[ObjectRecord]].

3.  Let _globalObject_ be the binding object for _ObjRec_.

4.  Let _existingProp_ be _globalObject_.[[GetOwnProperty]](_N_).

5.  ReturnIfAbrupt(_existingProp_).

6.  If _existingProp_ is UNDEFINED or _existingProp_.[[Configurable]] is
    TRUE, then

    a.  Let _desc_ be the PropertyDescriptor{[[Value]]:_V_,
        [[Writable]]: TRUE, [[Enumerable]]: TRUE , [[Configurable]]:
        _D_}.

7.  Else,

    a.  Let _desc_ be the PropertyDescriptor{[[Value]]:_V_ }.

8.  Let _status_ be DefinePropertyOrThrow(_globalObject_, _N_, _desc_).

9.  ReturnIfAbrupt(_status_).

10. Let _status_ be Set(_globalObject_, _N_, _V_, FALSE).

11. Record that the binding for _N_ in _ObjRec_ has been initialized.

12. ReturnIfAbrupt(_status_).

13. Let _varDeclaredNames_ be _envRec_.[[VarNames]].

14. If _varDeclaredNames_ does not contain the value of _N_, then

    a.  Append _N_ to _varDeclaredNames_.

15. Return NormalCompletion(empty).

NOTE Global function declarations are always represented as own
properties of the global object. If possible, an existing own property
is reconfigured to have a standard set of attribute values. Steps 10-12
are equivalent to what calling the InitializeBinding concrete method
would do and if _globalObject_ is a Proxy will produce the same sequence
of Proxy trap calls.

Module Environment Records

A module Environment Record is a declarative Environment Record that is
used to represent the outer scope of an ECMAScript _Module_. In
additional to normal mutable and immutable bindings, module Environment
Records also provide immutable import bindings which are bindings that
provide indirect access to a target binding that exists in another
Environment Record.

Module Environment Records support all of the declarative Environment
Record methods listed in Table 15 and share the same specifications for
all of those methods except for GetBindingValue, DeleteBinding,
HasThisBinding and GetThisBinding. In addition, module Environment
Records support the methods listed in Table 20:

Table 20 — Additional Methods of Module Environment Records

  _METHOD_                         _PURPOSE_
  -------------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  CreateImportBinding(N, M, N2 )   Create an immutable indirect binding in a module Environment Record. The String value _N_ is the text of the bound name. _M_ is a Module Record (see 15.2.1.14), and _N2_ is a binding that exists in M’s module Environment Record.
  GetThisBinding()                 Return the value of this Environment Record’s THIS binding.

The behaviour of the additional concrete specification methods for
module Environment Records are defined by the following algorithms:

GetBindingValue(N,S)

The concrete Environment Record method GetBindingValue for module
Environment Records returns the value of its bound identifier whose name
is the value of the argument _N_. However, if the binding is an indirect
binding the value of the target binding is returned. If the binding
exists but is uninitialized a REFERENCEERROR is thrown, regardless of
the value of _S._

1.  Let _envRec_ be the module Environment Record for which the method
    was invoked.

2.  Assert: _envRec_ has a binding for _N_.

3.  If the binding for _N_ is an indirect binding, then

    a.  Let _M_ and _N2_ be the indirection values provided when this
        binding for _N_ was created.

    b.  c.  Let _targetEnv_ be _M_.[[Environment]].

    d.  If _targetEnv_ is UNDEFINED, throw a REFERENCEERROR exception.

    e.  Let _targetER_ be _targetEnv_’s EnvironmentRecord.

    f.  Return _targetER_.GetBindingValue(_N2_, _S_).

4.  If the binding for _N_ in _envRec_ is an uninitialized binding,
    throw a REFERENCEERROR exception.

5.  Return the value currently bound to _N_ in _envRec_.

NOTE Because a _Module_ is always strict mode code, calls to
GetBindingValue should always pass TRUE as the value of _S_.

DeleteBinding (N)

The concrete Environment Record method DeleteBinding for module
Environment Records refuses to delete bindings.

1.  Let _envRec_ be the module Environment Record for which the method
    was invoked.

2.  If _envRec_ does not have a binding for the name that is the value
    of _N_, return TRUE.

3.  Return FALSE.

NOTE Because the bindings of a module Environment Record are not
deletable.

HasThisBinding () 

Module Environment Records provide a THIS binding.

1.  Return TRUE.

GetThisBinding ()

1.  Return UNDEFINED.

CreateImportBinding (N, M, N2)

The concrete Environment Record method CreateImportBinding for module
Environment Records creates a new initialized immutable indirect binding
for the name _N_. A binding must not already exist in this Environment
Record for _N_. _M_ is a Module Record (see 15.2.1.14), and _N2_ is the
name of a binding that exists in M’s module Environment Record. Accesses
to the value of the new binding will indirectly access the bound value
of value of the target binding.

1.  Let _envRec_ be the module Environment Record for which the method
    was invoked.

2.  Assert: _envRec_ does not already have a binding for _N_.

3.  Assert: _M_ is a Module Record.

4.  Assert: When _M_.[[Environment]] is instantiated it will have a
    direct binding for _N2_.

5.  Create an immutable indirect binding in _envRec_ for _N_ that
    references _M_ and _N2_ as its target binding _and r_ecord that the
    binding is initialized.

6.  Return NormalCompletion(empty).

Lexical Environment Operations

The following abstract operations are used in this specification to
operate upon lexical environments:

GetIdentifierReference (lex, name, strict) 

The abstract operation GetIdentifierReference is called with a Lexical
Environment _lex_, a String _name_, and a Boolean flag _strict._ The
value of _lex_ may be NULL. When called, the following steps are
performed:

1.  If _lex_ is the value NULL, then

    a.  Return a value of type Reference whose base value is UNDEFINED,
        whose referenced name is _name_, and whose strict reference flag
        is _strict_.

2.  Let _envRec_ be _lex_’s EnvironmentRecord.

3.  Let _exists_ be _envRec_.HasBinding(_name_).

4.  ReturnIfAbrupt(_exists_).

5.  If _exists_ is TRUE, then

    a.  Return a value of type Reference whose base value is _envRec_,
        whose referenced name is _name_, and whose strict reference flag
        is _strict._

6.  Else

    a.  Let _outer_ be the value of _lex’s_ outer environment reference.

    b.  Return GetIdentifierReference(_outer_, _name_, _strict_).

NewDeclarativeEnvironment (E) 

When the abstract operation NewDeclarativeEnvironment is called with a
Lexical Environment as argument _E_ the following steps are performed:

1.  Let _env_ be a new Lexical Environment.

2.  Let _envRec_ be a new declarative Environment Record containing no
    bindings.

3.  Set _env’s_ EnvironmentRecord to be _envRec_.

4.  Set the outer lexical environment reference of _env_ to _E_.

5.  Return _env_.

NewObjectEnvironment (O, E)

When the abstract operation NewObjectEnvironment is called with an
Object _O_ and a Lexical Environment _E_ as arguments, the following
steps are performed:

1.  Let _env_ be a new Lexical Environment.

2.  Let _envRec_ be a new object Environment Record containing _O_ as
    the binding object.

3.  Set _env’s_ EnvironmentRecord to _envRec_.

4.  Set the outer lexical environment reference of _env_ to _E_.

5.  Return _env_.

NewFunctionEnvironment ( F, newTarget ) 

When the abstract operation NewFunctionEnvironment is called with
arguments _F_ and _newTarget_ the following steps are performed:

1.  Assert: _F_ is an ECMAScript function.

2.  Assert: Type(_newTarget_) is Undefined or Object.

3.  Let _env_ be a new Lexical Environment.

4.  Let _envRec_ be a new function Environment Record containing no
    bindings.

5.  Set _envRec_.[[FunctionObject]] to _F_.

6.  If _F’s_ [[ThisMode]] internal slot is lexical, set
    _envRec_.[[thisBindingStatus]] to "LEXICAL".

7.  Else, Set _envRec_.[[thisBindingStatus]] to "UNINITIALIZED".

8.  Let _home_ be the value of _F’s_ [[HomeObject]] internal slot.

9.  Set _envRec_.[[HomeObject]] to _home_.

10. Set _envRec_.[[NewTarget]] to _newTarget_.

11. Set _env’s_ EnvironmentRecord to be _envRec_.

12. Set the outer lexical environment reference of _env_ to the value of
    _F’s_ [[Environment]] internal slot.

13. Return _env_.

NewGlobalEnvironment ( G ) 

When the abstract operation NewGlobalEnvironment is called with an
ECMAScript Object _G_ as its argument, the following steps are
performed:

1.  Let _env_ be a new Lexical Environment.

2.  Let _objRec_ be a new object Environment Record containing _G_ as
    the binding object.

3.  Let _dclRec_ be a new declarative Environment Record containing no
    bindings.

4.  Let _globalRec_ be a new global Environment Record.

5.  Set _globalRec_.[[ObjectRecord]] to _objRec_.

6.  Set _globalRec_.[[DeclarativeRecord]] to _dclRec_.

7.  Set _globalRec_.[[VarNames]] to a new empty List.

8.  Set _env’s_ EnvironmentRecord to _globalRec_.

9.  Set the outer lexical environment reference of _env_ to NULL

10. Return _env_.

NewModuleEnvironment (E)

When the abstract operation NewModuleEnvironment is called with a
Lexical Environment argument _E_ the following steps are performed:

1.  Let _env_ be a new Lexical Environment.

2.  Let _envRec_ be a new module Environment Record containing no
    bindings.

3.  Set _env’s_ EnvironmentRecord to be _envRec_.

4.  Set the outer lexical environment reference of _env_ to _E_.

5.  Return _env_.


Code Realms

Before it is evaluated, all ECMAScript code must be associated with a
_Realm_. Conceptually, a realm consists of a set of intrinsic objects,
an ECMAScript global environment, all of the ECMAScript code that is
loaded within the scope of that global environment, and other associated
state and resources.

A Realm is specified as a Record with the fields specified in Table 21:

Table 21 — Realm Record Fields

  ----------------- -------------------------------------------------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _FIELD NAME_      _VALUE_                                                                    _MEANING_
  [[intrinsics]]    Record whose field names are intrinsic keys and whose values are objects   These are the intrinsic values used by code associated with this Realm
  [[globalThis]]    Object                                                                     The global object for this Realm
  [[globalEnv]]     Lexical Environment                                                        The global environment for this Realm
  [[templateMap]]   A List of Record { [[strings]]: List, [[array]]: Object}.                  Template objects are canonicalized separately for each Realm using its [[templateMap]]. Each [[strings]] value is a List containing, in source text order, the raw string values of a _TemplateLiteral_ that has been evaluated. The associated [[array]] value is the corresponding template object that is passed to a tag function.
  ----------------- -------------------------------------------------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

An implementation may define other, implementation specific fields.

CreateRealm ( ) 

The abstract operation CreateRealm with no arguments performs the
following steps:

1.  Let _realmRec_ be a new Record.

2.  Perform CreateIntrinsics(_realmRec_).

3.  Set _realmRec_.[[globalThis]] to UNDEFINED.

4.  Set _realmRec_.[[globalEnv]] to UNDEFINED.

5.  Set _realmRec_.[[templateMap]] to a new empty List.

6.  Return _realmRec_.

CreateIntrinsics ( realmRec ) 

When the abstract operation CreateIntrinsics with argument _realmRec_
performs the following steps:

1.  Let _intrinsics_ be a new Record.

2.  Set _realmRec_.[[intrinsics]] to _intrinsics_.

3.  Let _objProto_ be ObjectCreate(NULL).

4.  Set _intrinsics_.[[%ObjectPrototype%]] to _objProto_.

5.  Let _throwerSteps_ be the algorithm steps specified in 9.2.7.1 for
    the %ThrowTypeError% function.

6.  Let _thrower_ be CreateBuiltinFunction(_realmRec_, _throwerSteps_,
    NULL).

7.  Set _intrinsics_.[[%ThrowTypeError%]] to _thrower_.

8.  Let _noSteps_ be an empty sequence of algorithm steps.

9.  Let _funcProto_ be CreateBuiltinFunction(_realmRec_, _noSteps_,
    _objProto_).

10. Set _intrinsics_.[[%FunctionPrototype%]] to _funcProto_.

11. Call _thrower_.[[SetPrototypeOf]](_funcProto_).

12. Perform AddRestrictedFunctionProperties(_funcProto_, _realmRec_).

13. Set fields of _intrinsics_ with the values listed in Table 7 that
    have not already been handled above. The field names are the names
    listed in column one of the table. The value of each field is a new
    object value fully and recursively populated with property values as
    defined by the specification of each object in clauses 18-26. All
    object property values are newly created object values. All values
    that are built-in function objects are created by performing
    CreateBuiltinFunction(_realmRec_, <steps>, <prototype>, <slots>)
    where <steps> is the definition of that function provided by this
    specification, <prototype> is the specified value of the function’s
    [[Prototype]] internal slot and <slots> is a list of the names, if
    any, of the functions specified internal slots. The creation of the
    intrinsics and their properties must be ordered to avoid any
    dependencies upon objects that have not yet been created.

14. Return _intrinsics_.

SetRealmGlobalObject ( realmRec, globalObj ) 

The abstract operation SetRealmGlobalObject with arguments _realmRec_
and _globalObj_ performs the following steps:

1.  If _globalObj_ is UNDEFINED, then

    a.  Let _intrinsics_ be _realmRec_.[[intrinsics]].

    b.  Let _globalObj_ be
        ObjectCreate(_intrinsics_.[[%ObjectPrototype%]]).

2.  Assert: Type(_globalObj_) is Object.

3.  Set _realmRec_.[[globalThis]] to _globalObj_.

4.  Let _newGlobalEnv_ be NewGlobalEnvironment(_globalObj_).

5.  Set _realmRec_.[[globalEnv]] to _newGlobalEnv_.

6.  Return _realmRec_.

SetDefaultGlobalBindings ( realmRec )

The abstract operation SetDefaultGlobalBindings with argument _realmRec_
performs the following steps:

1.  Let _global_ be _realmRec_.[[globalThis]].

2.  For each property of the Global Object specified in clause 18, do

    a.  Let _name_ be the string value of the property name.

    b.  Let _desc_ be the fully populated data property descriptor for
        the property containing the specified attributes for the
        property. For properties listed in 18.2, 18.3, or 18.4 the value
        of the [[Value]] attribute is the corresponding intrinsic object
        from _realmRec_.

    c.  Let _status_ be DefinePropertyOrThrow(_global_, _name_, _desc_).

    d.  ReturnIfAbrupt(_status_).

3.  Return _global_.


Execution Contexts

An _execution context_ is a specification device that is used to track
the runtime evaluation of code by an ECMAScript implementation. At any
point in time, there is at most one execution context that is actually
executing code. This is known as the _running_ execution context. A
stack is used to track execution contexts. The running execution context
is always the top element of this stack. A new execution context is
created whenever control is transferred from the executable code
associated with the currently running execution context to executable
code that is not associated with that execution context. The newly
created execution context is pushed onto the stack and becomes the
running execution context.

An execution context contains whatever implementation specific state is
necessary to track the execution progress of its associated code. Each
execution context has at least the state components listed in Table 22.

Table 22 —State Components for All Execution Contexts

  _COMPONENT_             _PURPOSE_
  ----------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  code evaluation state   Any state needed to perform, suspend, and resume evaluation of the code associated with this execution context.
  Function                If this execution context is evaluating the code of a function object, then the value of this component is that function object. If the context is evaluating the code of a _Script_ or _Module_, the value is NULL.
  Realm                   The Realm from which associated code accesses ECMAScript resources.

Evaluation of code by the running execution context may be suspended at
various points defined within this specification. Once the running
execution context has been suspended a different execution context may
become the running execution context and commence evaluating its code.
At some later time a suspended execution context may again become the
running execution context and continue evaluating its code at the point
where it had previously been suspended. Transition of the running
execution context status among execution contexts usually occurs in
stack-like last-in/first-out manner. However, some ECMAScript features
require non-LIFO transitions of the running execution context.

The value of the Realm component of the running execution context is
also called the _current Realm_. The value of the Function component of
the running execution context is also called the _active function
object._

Execution contexts for ECMAScript code have the additional state
components listed in Table 23.

Table 23 — Additional State Components for ECMAScript Code Execution
Contexts

  _COMPONENT_           _PURPOSE_
  --------------------- ------------------------------------------------------------------------------------------------------------------------------------------
  LexicalEnvironment    Identifies the Lexical Environment used to resolve identifier references made by code within this execution context.
  VariableEnvironment   Identifies the Lexical Environment whose EnvironmentRecord holds bindings created by _VariableStatements_ within this execution context.

The LexicalEnvironment and VariableEnvironment components of an
execution context are always Lexical Environments. When an execution
context is created its LexicalEnvironment and VariableEnvironment
components initially have the same value.

Execution contexts representing the evaluation of generator objects have
the additional state components listed in Table 24.

Table 24 — Additional State Components for Generator Execution Contexts

  _COMPONENT_   _PURPOSE_
  ------------- ----------------------------------------------------------------
  Generator     The GeneratorObject that this execution context is evaluating.

In most situations only the running execution context (the top of the
execution context stack) is directly manipulated by algorithms within
this specification. Hence when the terms “LexicalEnvironment”, and
“VariableEnvironment” are used without qualification they are in
reference to those components of the running execution context.

An execution context is purely a specification mechanism and need not
correspond to any particular artefact of an ECMAScript implementation.
It is impossible for ECMAScript code to directly access or observe an
execution context.

ResolveBinding ( name, [env] ) 

The ResolveBinding abstract operation is used to determine the binding
of _name_ passed as a string value. The optional argument _env_ can be
used to explicitly provide the Lexical Environment that is to be
searched for the binding. During execution of ECMAScript code,
ResolveBinding is performed using the following algorithm:

1.  If _env_ was not passed or if _env_ is UNDEFINED, then

    a.  Let _env_ be the running execution context’s LexicalEnvironment.

2.  Assert: _env_ is a Lexical Environment.

3.  If the code matching the syntactic production that is being
    evaluated is contained in strict mode code, let _strict_ be TRUE,
    else let _strict_ be FALSE.

4.  Return GetIdentifierReference(_env_, _name_, _strict_ ).

NOTE The result of ResolveBinding is always a Reference value with its
referenced name component equal to the _name_ argument.

GetThisEnvironment ( ) 

The abstract operation GetThisEnvironment finds the Environment Record
that currently supplies the binding of the keyword THIS.
GetThisEnvironment performs the following steps:

1.  Let _lex_ be the running execution context’s LexicalEnvironment.

2.  Repeat

    a.  Let _envRec_ be _lex_’s EnvironmentRecord.

    b.  Let _exists_ be _envRec_.HasThisBinding().

    c.  If _exists_ is TRUE, return _envRec_.

    d.  Let _outer_ be the value of _lex’s_ outer environment reference.

    e.  Let _lex_ be _outer_.

NOTE The loop in step 2 will always terminate because the list of
environments always ends with the global environment which has a THIS
binding.

ResolveThisBinding ( ) 

The abstract operation ResolveThisBinding determines the binding of the
keyword THIS using the LexicalEnvironment of the running execution
context. ResolveThisBinding performs the following steps:

1.  Let _envRec_ be GetThisEnvironment( ).

2.  Return _envRec_.GetThisBinding().

GetNewTarget ( )

The abstract operation GetNewTarget determines the NewTarget value using
the LexicalEnvironment of the running execution context. GetNewTarget
performs the following steps:

1.  Let _envRec_ be GetThisEnvironment( ).

2.  Assert: _envRec_ has a [[NewTarget]] field.

3.  Return _envRec_.[[NewTarget]].

GetGlobalObject ( ) 

The abstract operation GetGlobalObject returns the global object used by
the currently running execution context. GetGlobalObject performs the
following steps:

1.  Let _ctx_ be the running execution context.

2.  Let _currentRealm_ be _ctx’s_ Realm.

3.  Return _currentRealm_.[[globalThis]].


Jobs and Job Queues

A Job is an abstract operation that initiates an ECMAScript computation
when no other ECMAScript computation is currently in progress. A Job
abstract operation may be defined to accept an arbitrary set of job
parameters.

Execution of a Job can be initiated only when there is no running
execution context and the execution context stack is empty. A PendingJob
is a request for the future execution of a Job. A PendingJob is an
internal Record whose fields are specified in Table 25. Once execution
of a Job is initiated, the Job always executes to completion. No other
Job may be initiated until the currently running Job completes. However,
the currently running Job or external events may cause the enqueuing of
additional PendingJobs that may be initiated sometime after completion
of the currently running Job.

Table 25 — PendingJob Record Fields

  ----------------- -------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _FIELD NAME_      _VALUE_                                _MEANING_
  [[Job]]           The name of a Job abstract operation   This is the abstract operation that is performed when execution of this PendingJob is initiated. Jobs are abstract operations that use NextJob rather than Return to indicate that they have completed.
  [[Arguments]]     A List                                 The List of argument values that are to be passed to [[Job]] when it is activated.
  [[Realm]]         A Realm Record                         The Realm for the initial execution context when this Pending Job is initiated.
  [[HostDefined]]   Any, default value is UNDEFINED.       Field reserved for use by host environments that need to associate additional information with a pending Job.
  ----------------- -------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A Job Queue is a FIFO queue of PendingJob records. Each Job Queue has a
name and the full set of available Job Queues are defined by an
ECMAScript implementation. Every ECMAScript implementation has at least
the Job Queues defined in Table 26.

Table 26 — Required Job Queues

  _NAME_        _PURPOSE_
  ------------- ------------------------------------------------------------------------------------------------------
  ScriptJobs    Jobs that validate and evaluate ECMAScript _Script_ and _Module_ source text. See clauses 10 and 15.
  PromiseJobs   Jobs that are responses to the settlement of a Promise (see 25.4).

A request for the future execution of a Job is made by enqueueing, on a
Job Queue, a PendingJob record that includes a Job abstract operation
name and any necessary argument values. When there is no running
execution context and the execution context stack is empty, the
ECMAScript implementation removes the first PendingJob from a Job Queue
and uses the information contained in it to create an execution context
and starts execution of the associated Job abstract operation.

The PendingJob records from a single Job Queue are always initiated in
FIFO order. This specification does not define the order in which
multiple Job Queues are serviced. An ECMAScript implementation may
interweave the FIFO evaluation of the PendingJob records of a Job Queue
with the evaluation of the PendingJob records of one or more other Job
Queues. An implementation must define what occurs when there are no
running execution context and all Job Queues are empty.

NOTE Typically an ECMAScript implementation will have its Job Queues
pre-initialized with at least one PendingJob and one of those Jobs will
be the first to be executed. An implementation might choose to free all
resources and terminate if the current Job completes and all Job Queues
are empty. Alternatively, it might choose to wait for a some
implementation specific agent or mechanism to enqueue new PendingJob
requests.

The following abstract operations are used to create and manage Jobs and
Job Queues:

EnqueueJob ( queueName, job, arguments)

The EnqueueJob abstract operation requires three arguments: _queueName_,
_job_, and _arguments_. It performs the following steps:

1.  Assert: Type(_queueName_) is String and its value is the name of a
    Job Queue recognized by this implementation.

2.  Assert: _job_ is the name of a Job.

3.  Assert: _arguments_ is a List that has the same number of elements
    as the number of parameters required by _job_.

4.  Let _callerContext_ be the running execution context.

5.  Let _callerRealm_ be _callerContext’s_ Realm.

6.  Let _pending_ be PendingJob{ [[Job]]: _job_, [[Arguments]]:
    _arguments_, [[Realm]]: _callerRealm_, [[HostDefined]]: UNDEFINED }.

7.  Perform any implementation or host environment defined processing of
    _pending_. This may include modifying the [[HostDefined]] field or
    any other field of _pending_.

8.  Add _pending_ at the back of the Job Queue named by _queueName_.

9.  Return NormalCompletion(empty).

NextJob result 

An algorithm step such as:

1.  NextJob _result_.

is used in Job abstract operations in place of:

1.  Return _result_.

Job abstract operations must not contain a Return step or a
ReturnIfAbrupt step. The NextJob _result_ operation is equivalent to the
following steps:

1.  If _result_ is an abrupt completion, perform implementation defined
    unhandled exception processing.

2.  Suspend the running execution context and remove it from the
    execution context stack.

3.  Assert: The execution context stack is now empty.

4.  Let _nextQueue_ be a non-empty Job Queue chosen in an implementation
    defined manner. If all Job Queues are empty, the result is
    implementation defined.

5.  Let _nextPending_ be the PendingJob record at the front of
    _nextQueue_. Remove that record from _nextQueue_.

6.  Let _newContext_ be a new execution context.

7.  Set _newContext_’s Realm to _nextPending_.[[Realm]].

8.  Push _newContext_ onto the execution context stack; _newContext_ is
    now the running execution context.

9.  Perform any implementation or host environment defined job
    initialization using _nextPending_.

10. Perform the abstract operation named by _nextPending_.[[Job]] using
    the elements of _nextPending_.[[Arguments]] as its arguments.


ECMAScript Initialization() 

An ECMAScript implementation performs the following steps prior to the
execution of any Jobs or the evaluation of any ECMAScript code:

1.  Let _realm_ be CreateRealm().

2.  Let _newContext_ be a new execution context.

3.  Set the Function of _newContext_ to NULL.

4.  Set the Realm of _newContext_ to _realm_.

5.  Push _newContext_ onto the execution context stack; _newContext_ is
    now the running execution context.

6.  Let _status_ be InitializeHostDefinedRealm(_realm_).

7.  If _status_ is an abrupt completion, then

    a.  Assert: The first realm could not be created.

    b.  Terminate ECMAScript execution.

8.  In an implementation dependent manner, obtain the ECMAScript source
    texts (see clause 10) for zero or more ECMAScript scripts and/or
    ECMAScript modules. For each such _sourceText_ do,

    a.  If _sourceText_ is the source code of a script, then

        i.  Perform EnqueueJob("ScriptJobs", ScriptEvaluationJob, «
            _sourceText_ »).

    b.  Else _sourceText_ is the source code of a module,

        i.  Perform EnqueueJob("ScriptJobs",
            TopLevelModuleEvaluationJob, « _sourceText_ »).

9.  NextJob NormalCompletion(UNDEFINED).

InitializeHostDefinedRealm ( realm ) 

The abstract operation InitializeHostDefinedRealm with parameter _realm_
performs the following steps:

1.  If this implementation requires use of an exotic object to serve as
    _realm_’s global object, let _global_ be such an object created in
    an implementation defined manner. Otherwise, let _global_ be
    UNDEFINED indicating that an ordinary object should be created as
    the global object.

2.  Perform SetRealmGlobalObject(_realm_, _global_).

3.  Let _globalObj_ be SetDefaultGlobalBindings(_realm_).

4.  ReturnIfAbrupt(_globalObj_).

5.  Create any implementation defined global object properties on
    _globalObj_.

6.  Return NormalCompletion(UNDEFINED).



ORDINARY AND EXOTIC OBJECTS BEHAVIOURS 


Ordinary Object Internal Methods and Internal Slots

All ordinary objects have an internal slot called [[Prototype]]. The
value of this internal slot is either NULL or an object and is used for
implementing inheritance. Data properties of the [[Prototype]] object
are inherited (are visible as properties of the child object) for the
purposes of get access, but not for set access. Accessor properties are
inherited for both get access and set access.

Every ordinary object has a Boolean-valued [[Extensible]] internal slot
that controls whether or not properties may be added to the object. If
the value of the [[Extensible]] internal slot is FALSE then additional
properties may not be added to the object. In addition, if
[[Extensible]] is FALSE the value of the [[Prototype]] internal slot of
the object may not be modified. Once the value of an object’s
[[Extensible]] internal slot has been set to FALSE it may not be
subsequently changed to TRUE.

In the following algorithm descriptions, assume _O_ is an ordinary
object, _P_ is a property key value, _V_ is any ECMAScript language
value, and _Desc_ is a Property Descriptor record.

[[GetPrototypeOf]] ( )

When the [[GetPrototypeOf]] internal method of _O_ is called the
following steps are taken:

1.  Return the value of the [[Prototype]] internal slot of _O_.

[[SetPrototypeOf]] (V)

When the [[SetPrototypeOf]] internal method of _O_ is called with
argument _V_ the following steps are taken:

1.  Assert: Either Type(_V_) is Object or Type(_V_) is Null.

2.  Let _extensible_ be the value of the [[Extensible]] internal slot of
    _O_.

3.  Let _current_ be the value of the [[Prototype]] internal slot of
    _O_.

4.  If SameValue(_V_, _current_), return TRUE.

5.  If _extensible_ is FALSE, return FALSE.

6.  Let _p_ be _V_.

7.  Let _done_ be FALSE.

8.  Repeat while _done_ is FALSE,

    a.  If _p_ is NULL, let _done_ be TRUE.

    b.  Else, if SameValue(_p_, _O_) is TRUE, return FALSE.

    c.  Else,

        i.  If the [[GetPrototypeOf]] internal method of _p_ is not the
            ordinary object internal method defined in 9.1.1, let _done_
            be TRUE.

        ii. Else, let _p_ be the value of _p_’s [[Prototype]] internal
            slot.

9.  Set the value of the [[Prototype]] internal slot of _O_ to _V_.

10. Return TRUE.

NOTE The loop in step 8 guarantees that there will be no circularities
in any prototype chain that only includes objects that use the ordinary
object definitions for [[GetPrototypeOf]] and [[SetPrototypeOf]].

[[IsExtensible]] ( )

When the [[IsExtensible]] internal method of _O_ is called the following
steps are taken:

1.  Return the value of the [[Extensible]] internal slot of _O_.

[[PreventExtensions]] ( )

When the [[PreventExtensions]] internal method of _O_ is called the
following steps are taken:

1.  Set the value of the [[Extensible]] internal slot of _O_ to FALSE.

2.  Return TRUE.

[[GetOwnProperty]] (P)

When the [[GetOwnProperty]] internal method of _O_ is called with
property key _P_, the following steps are taken:

1.  Return OrdinaryGetOwnProperty(_O_, _P_).

OrdinaryGetOwnProperty (O, P)

When the abstract operation OrdinaryGetOwnProperty is called with Object
_O_ and with property key _P_, the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  If _O_ does not have an own property with key _P_, return UNDEFINED.

3.  Let _D_ be a newly created Property Descriptor with no fields.

4.  Let _X_ be _O_’s own property whose key is _P_.

5.  If _X_ is a data property, then

    a.  Set _D_.[[Value]] to the value of _X_’s [[Value]] attribute.

    b.  Set _D_.[[Writable]] to the value of _X_’s [[Writable]]
        attribute

6.  Else _X_ is an accessor property, so

    a.  Set _D_.[[Get]] to the value of _X_’s [[Get]] attribute.

    b.  Set _D_.[[Set]] to the value of _X_’s [[Set]] attribute.

7.  Set _D_.[[Enumerable]] to the value of _X_’s [[Enumerable]]
    attribute.

8.  Set _D_.[[Configurable]] to the value of _X_’s [[Configurable]]
    attribute.

9.  Return _D_.

[[DefineOwnProperty]] (P, Desc)

When the [[DefineOwnProperty]] internal method of _O_ is called with
property key _P_ and Property Descriptor _Desc_, the following steps are
taken:

1.  Return OrdinaryDefineOwnProperty(_O_, _P_, _Desc_).

OrdinaryDefineOwnProperty (O, P, Desc)

When the abstract operation OrdinaryDefineOwnProperty is called with
Object _O_, property key _P_, and Property Descriptor _Desc_ the
following steps are taken:

1.  Let _current_ be _O_.[[GetOwnProperty]](_P_).

2.  ReturnIfAbrupt(_current_).

3.  Let _extensible_ be the value of the [[Extensible]] internal slot of
    _O_.

4.  Return ValidateAndApplyPropertyDescriptor(_O_, _P_, _extensible_,
    _Desc_, _current_).

IsCompatiblePropertyDescriptor (Extensible, Desc, Current)

When the abstract operation IsCompatiblePropertyDescriptor is called
with Boolean value _Extensible_, and Property Descriptors _Desc_, and
_Current_ the following steps are taken:

1.  Return ValidateAndApplyPropertyDescriptor(UNDEFINED, UNDEFINED,
    _Extensible_, _Desc_, _Current_).

ValidateAndApplyPropertyDescriptor (O, P, extensible, Desc, current)

When the abstract operation ValidateAndApplyPropertyDescriptor is called
with Object _O_, property key _P_, Boolean value _extensible_, and
Property Descriptors _Desc_, and _current_ the following steps are
taken:

This algorithm contains steps that test various fields of the Property
Descriptor _Desc_ for specific values. The fields that are tested in
this manner need not actually exist in _Desc_. If a field is absent then
its value is considered to be FALSE.

NOTE If UNDEFINED is passed as the _O_ argument only validation is
performed and no object updates are performed.

1.  Assert: If _O_ is not UNDEFINED then IsPropertyKey(_P_) is TRUE.

2.  If _current_ is UNDEFINED, then

    a.  If _extensible_ is FALSE, return FALSE.

    b.  Assert: _extensible_ is TRUE.

    c.  If IsGenericDescriptor(_Desc_) or IsDataDescriptor(_Desc_) is
        TRUE, then

        i.  If _O_ is not UNDEFINED, create an own data property named
            _P_ of object _O_ whose [[Value]], [[Writable]],
            [[Enumerable]] and [[Configurable]] attribute values are
            described by _Desc_. If the value of an attribute field of
            _Desc_ is absent, the attribute of the newly created
            property is set to its default value.

    d.  Else _Desc_ must be an accessor Property Descriptor,

        i.  If _O_ is not UNDEFINED, create an own accessor property
            named _P_ of object _O_ whose [[Get]], [[Set]],
            [[Enumerable]] and [[Configurable]] attribute values are
            described by _Desc_. If the value of an attribute field of
            _Desc_ is absent, the attribute of the newly created
            property is set to its default value.

    e.  Return TRUE.

3.  Return TRUE, if every field in _Desc_ is absent.

4.  Return TRUE, if every field in _Desc_ also occurs in _current_ and
    the value of every field in _Desc_ is the same value as the
    corresponding field in _current_ when compared using the SameValue
    algorithm.

5.  If the [[Configurable]] field of _current_ is FALSE, then

    a.  Return FALSE, if the [[Configurable]] field of _Desc_ is TRUE.

    b.  Return FALSE, if the [[Enumerable]] field of _Desc_ is present
        and the [[Enumerable]] fields of _current_ and _Desc_ are the
        Boolean negation of each other.

6.  If IsGenericDescriptor(_Desc_) is TRUE, no further validation is
    required.

7.  Else if IsDataDescriptor(_current_) and IsDataDescriptor(_Desc_)
    have different results, then

    a.  Return FALSE, if the [[Configurable]] field of _current_ is
        FALSE.

    b.  If IsDataDescriptor(_current_) is TRUE, then

        i.  If _O_ is not UNDEFINED, convert the property named _P_ of
            object _O_ from a data property to an accessor property.
            Preserve the existing values of the converted property’s
            [[Configurable]] and [[Enumerable]] attributes and set the
            rest of the property’s attributes to their default values.

    c.  Else,

        i.  If _O_ is not UNDEFINED, convert the property named _P_ of
            object _O_ from an accessor property to a data property.
            Preserve the existing values of the converted property’s
            [[Configurable]] and [[Enumerable]] attributes and set the
            rest of the property’s attributes to their default values.

8.  Else if IsDataDescriptor(_current_) and IsDataDescriptor(_Desc_) are
    both TRUE, then

    a.  If the [[Configurable]] field of _current_ is FALSE, then

        i.  Return FALSE, if the [[Writable]] field of _current_ is
            FALSE and the [[Writable]] field of _Desc_ is TRUE.

        ii. If the [[Writable]] field of _current_ is FALSE, then

            1.  Return FALSE, if the [[Value]] field of _Desc_ is
                present and SameValue(_Desc_.[[Value]],
                _current_.[[Value]]) is FALSE.

    b.  Else the [[Configurable]] field of _current_ is TRUE, so any
        change is acceptable.

9.  Else IsAccessorDescriptor(_current_) and
    IsAccessorDescriptor(_Desc_) are both TRUE,

    a.  If the [[Configurable]] field of _current_ is FALSE, then

        i.  Return FALSE, if the [[Set]] field of _Desc_ is present and
            SameValue(_Desc_.[[Set]], _current_.[[Set]]) is FALSE.

        ii. Return FALSE, if the [[Get]] field of _Desc_ is present and
            SameValue(_Desc_.[[Get]], _current_.[[Get]]) is FALSE.

10. If _O_ is not UNDEFINED, then

    a.  For each field of _Desc_ that is present, set the corresponding
        attribute of the property named _P_ of object _O_ to the value
        of the field.

11. Return TRUE.

NOTE Step 8.b allows any field of Desc to be different from the
corresponding field of current if current’s [[Configurable]] field is
TRUE. This even permits changing the [[Value]] of a property whose
[[Writable]] attribute is FALSE. This is allowed because a TRUE
[[Configurable]] attribute would permit an equivalent sequence of calls
where [[Writable]] is first set to TRUE, a new [[Value]] is set, and
then [[Writable]] is set to FALSE.

 [[HasProperty]](P)

When the [[HasProperty]] internal method of _O_ is called with property
key _P_, the following steps are taken:

1.  Return OrdinaryHasProperty(_O_, _P_).

OrdinaryHasProperty (O, P)

When the abstract operation OrdinaryHasProperty is called with Object
_O_ and with property key _P_, the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _hasOwn_ be OrdinaryGetOwnProperty(_O_, _P_).

3.  If _hasOwn_ is not UNDEFINED, return TRUE.

4.  Let _parent_ be _O_.[[GetPrototypeOf]]().

5.  ReturnIfAbrupt(_parent_).

6.  If _parent_ is not NULL, then

    a.  Return _parent_.[[HasProperty]](_P_).

7.  Return FALSE.

[[Get]] (P, Receiver)

When the [[Get]] internal method of _O_ is called with property key _P_
and ECMAScript language value _Receiver_ the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _desc_ be _O_.[[GetOwnProperty]](_P_).

3.  ReturnIfAbrupt(_desc_).

4.  If _desc_ is UNDEFINED, then

    a.  Let _parent_ be _O_.[[GetPrototypeOf]]().

    b.  ReturnIfAbrupt(_parent_).

    c.  If _parent_ is NULL, return UNDEFINED.

    d.  Return _parent_.[[Get]](_P_, _Receiver_).

5.  If IsDataDescriptor(_desc_) is TRUE, return _desc_.[[Value]].

6.  Otherwise, IsAccessorDescriptor(_desc_) must be TRUE so, let
    _getter_ be _desc_.[[Get]].

7.  If _getter_ is UNDEFINED, return UNDEFINED.

8.  Return Call(_getter,_ _Receiver_).

[[Set]] ( P, V, Receiver)

When the [[Set]] internal method of _O_ is called with property key _P_,
value _V_, and ECMAScript language value _Receiver_, the following steps
are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _ownDesc_ be _O_.[[GetOwnProperty]](_P_).

3.  ReturnIfAbrupt(_ownDesc_).

4.  If _ownDesc_ is UNDEFINED, then

    a.  Let _parent_ be _O_.[[GetPrototypeOf]]().

    b.  ReturnIfAbrupt(_parent_).

    c.  If _parent_ is not NULL, then

        i.  Return _parent_.[[Set]](_P_, _V_, _Receiver_).

    d.  Else,

        i.  Let _ownDesc_ be the PropertyDescriptor{[[Value]]:
            UNDEFINED, [[Writable]]: TRUE, [[Enumerable]]: TRUE,
            [[Configurable]]: TRUE}.

5.  If IsDataDescriptor(_ownDesc_) is TRUE, then

    a.  If _ownDesc_.[[Writable]] is FALSE, return FALSE.

    b.  If Type(_Receiver_) is not Object, return FALSE.

    c.  Let _existingDescriptor_ be _Receiver_.[[GetOwnProperty]](_P_).

    d.  ReturnIfAbrupt(_existingDescriptor_).

    e.  If _existingDescriptor_ is not UNDEFINED, then

        i.  Let _valueDesc_ be the PropertyDescriptor{[[Value]]: _V_}.

        ii. Return _Receiver_.[[DefineOwnProperty]](_P_, _valueDesc_).

    f.  Else _Receiver_ does not currently have a property _P_,

        i.  Return CreateDataProperty(_Receiver_, _P_, _V_).

6.  Assert: IsAccessorDescriptor(_ownDesc_) is TRUE.

7.  Let _setter_ be _ownDesc_.[[Set]].

8.  If _setter_ is UNDEFINED, return FALSE.

9.  Let _setterResult_ be Call(_setter_, _Receiver_, «_V_»).

10. ReturnIfAbrupt(_setterResult_).

11. Return TRUE.

 [[Delete]] (P)

When the [[Delete]] internal method of _O_ is called with property key
_P_ the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _desc_ be _O_.[[GetOwnProperty]](_P_).

3.  ReturnIfAbrupt(_desc_).

4.  If _desc_ is UNDEFINED, return TRUE.

5.  If _desc_.[[Configurable]] is TRUE, then

    a.  Remove the own property with name _P_ from _O_.

    b.  Return TRUE.

6.  Return FALSE.

[[Enumerate]] ()

When the [[Enumerate]] internal method of _O_ is called the following
steps are taken:

1.  Return an Iterator object (25.1.1.2) whose NEXT method iterates over
    all the String-valued keys of enumerable properties of _O_. The
    Iterator object must inherit from %IteratorPrototype% (25.1.2). The
    mechanics and order of enumerating the properties is not specified
    but must conform to the rules specified below.

The iterator’s NEXT method processes object properties to determine
whether the property key should be returned as an iterator value.
Returned property keys do not include keys that are Symbols. Properties
of the target object may be deleted during enumeration. A property that
is deleted before it is processed by the iterator’s NEXT method is
ignored. If new properties are added to the target object during
enumeration, the newly added properties are not guaranteed to be
processed in the active enumeration. A property name will be returned by
the iterator’s NEXT method at most once in any enumeration.

Enumerating the properties of the target object includes enumerating
properties of its prototype, and the prototype of the prototype, and so
on, recursively; but a property of a prototype is not processed if it
has the same name as a property that has already been processed by the
iterator’s NEXT method. The values of [[Enumerable]] attributes are not
considered when determining if a property of a prototype object has
already been processed. The enumerable property names of prototype
objects must be obtained as if by invoking the prototype object’s
[[Enumerate]] internal method. [[Enumerate]] must obtain the own
property keys of the target object as if by calling its
[[OwnPropertyKeys]] internal method. Property attributes of the target
object must be obtained as if by calling its [[GetOwnProperty]] internal
method.

NOTE The following is an informative definition of an ECMAScript
generator function that conforms to these rules:

function* enumerate(obj) {

let visited=new Set;

for (let key of Reflect.ownKeys(obj)) {

if (typeof key === "string") {

let desc = Reflect.getOwnPropertyDescriptor(obj,key);

if (desc) {

visited.add(key);

if (desc.enumerable) yield key;

}

}

}

let proto = Reflect.getPrototypeOf(obj)

if (proto === null) return;

for (let protoName of Reflect.enumerate(proto)) {

if (!visited.has(protoName)) yield protoName;

}

}

[[OwnPropertyKeys]] ( )

When the [[OwnPropertyKeys]] internal method of _O_ is called the
following steps are taken:

1.  Let _keys_ be a new empty List.

2.  For each own property key _P_ of _O_ that is an integer index, in
    ascending numeric index order

    a.  Add _P_ as the last element of _keys_.

3.  For each own property key _P_ of _O_ that is a String but is not an
    integer index, in property creation order

    a.  Add _P_ as the last element of _keys_.

4.  For each own property key _P_ of _O_ that is a Symbol, in property
    creation order

    a.  Add _P_ as the last element of _keys_.

5.  Return _keys_.

ObjectCreate(proto, internalSlotsList) 

The abstract operation ObjectCreate with argument _proto_ (an object or
null) is used to specify the runtime creation of new ordinary objects.
The optional argument _internalSlotsList_ is a List of the names of
additional internal slots that must be defined as part of the object. If
the list is not provided, an empty List is used. This abstract operation
performs the following steps:

1.  If _internalSlotsList_ was not provided, let _internalSlotsList_ be
    an empty List.

2.  Let _obj_ be a newly created object with an internal slot for each
    name in _internalSlotsList_.

3.  Set _obj_’s essential internal methods to the default ordinary
    object definitions specified in 9.1.

4.  Set the [[Prototype]] internal slot of _obj_ to _proto_.

5.  Set the [[Extensible]] internal slot of _obj_ to TRUE.

6.  Return _obj_.

OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto, internalSlotsList )

The abstract operation OrdinaryCreateFromConstructor creates an ordinary
object whose [[Prototype]] value is retrieved from a constructor’s
PROTOTYPE property, if it exists. Otherwise the intrinsic named by
_intrinsicDefaultProto_ is used for [[Prototype]]. The optional
_internalSlotsList_ is a List of the names of additional internal slots
that must be defined as part of the object. If the list is not provided,
an empty List is used. This abstract operation performs the following
steps:

1.  Assert: _intrinsicDefaultProto_ is a string value that is this
    specification’s name of an intrinsic object. The corresponding
    object must be an intrinsic that is intended to be used as the
    [[Prototype]] value of an object.

2.  Let _proto_ be GetPrototypeFromConstructor(_constructor_,
    _intrinsicDefaultProto_).

3.  ReturnIfAbrupt(_proto_).

4.  Return ObjectCreate(_proto_, _internalSlotsList_).

GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )

The abstract operation GetPrototypeFromConstructor determines the
[[Prototype]] value that should be used to create an object
corresponding to a specific constructor. The value is retrieved from the
constructor’s PROTOTYPE property, if it exists. Otherwise the intrinsic
named by _intrinsicDefaultProto_ is used for [[Prototype]]. This
abstract operation performs the following steps:

1.  Assert: _intrinsicDefaultProto_ is a string value that is this
    specification’s name of an intrinsic object. The corresponding
    object must be an intrinsic that is intended to be used as the
    [[Prototype]] value of an object.

2.  Assert: IsConstructor (_constructor_) is TRUE.

3.  Let _proto_ be Get(_constructor_, "PROTOTYPE").

4.  ReturnIfAbrupt(_proto_).

5.  If Type(_proto_) is not Object, then

    a.  Let _realm_ be GetFunctionRealm(_constructor_).

    b.  ReturnIfAbrupt(_realm_).

    c.  Let _proto_ be _realm’s_ intrinsic object named
        _intrinsicDefaultProto_.

6.  Return _proto_.

NOTE If _constructor_ does not supply a [[Prototype]] value, the default
value that is used is obtained from the Code Realm of the _constructor_
function rather than from the running execution context.


ECMAScript Function Objects

ECMAScript function objects encapsulate parameterized ECMAScript code
closed over a lexical environment and support the dynamic evaluation of
that code. An ECMAScript function object is an ordinary object and has
the same internal slots and the same internal methods as other ordinary
objects. The code of an ECMAScript function object may be either strict
mode code (10.2.1) or non-strict mode code. An ECMAScript function
object whose code is strict mode code is called a _strict function_. One
whose code is not strict mode code is called a _non-strict function_.

ECMAScript function objects have the additional internal slots listed in
Table 27.

Table 27 — Internal Slots of ECMAScript Function Objects

  _INTERNAL SLOT_        _TYPE_                      _DESCRIPTION_
  ---------------------- --------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[Environment]]        Lexical Environment         The Lexical Environment that the function was closed over. Used as the outer environment when evaluating the code of the function.
  [[FormalParameters]]   Parse Node                  The root parse node of the source text that defines the function’s formal parameter list.
  [[FunctionKind]]       String                      Either "NORMAL", "CLASSCONSTRUCTOR" or "GENERATOR".
  [[ECMAScriptCode]]     Parse Node                  The root parse node of the source text that defines the function’s body.
  [[ConstructorKind]]    String                      Either "BASE" or "DERIVED".
  [[Realm]]              Realm Record                The Code Realm in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.
  [[ThisMode]]           (lexical, strict, global)   Defines how THIS references are interpreted within the formal parameters and code body of the function. LEXICAL means that THIS refers to the THIS value of a lexically enclosing function. STRICT means that the THIS value is used exactly as provided by an invocation of the function. GLOBAL means that a THIS value of UNDEFINED is interpreted as a reference to the global object.
  [[Strict]]             Boolean                     TRUE if this is a strict mode function, FALSE if this is not a strict mode function.
  [[HomeObject]]         Object                      If the function uses SUPER, this is the object whose [[GetPrototypeOf]] provides the object where SUPER property lookups begin.

All ECMAScript function objects have the [[Call]] internal method
defined here. ECMAScript functions that are also constructors in
addition have the [[Construct]] internal method. ECMAScript function
objects whose code is not strict mode code have the [[GetOwnProperty]]
internal method defined here.

 

1.  2.  a.  i.  ii. 1.  

        iii. 

3.  

[[Call]] ( thisArgument, argumentsList) 

The [[Call]] internal method for an ECMAScript function object _F_ is
called with parameters _thisArgument_ and _argumentsList_, a List of
ECMAScript language values. The following steps are taken:

1.  Assert: _F_ is an ECMAScript function object.

2.  If _F_’s [[FunctionKind]] internal slot is "CLASSCONSTRUCTOR", throw
    a TYPEERROR exception.

3.  Let _callerContext_ be the running execution context.

4.  Let _calleeContext_ be PrepareForOrdinaryCall(_F_, UNDEFINED).

5.  Assert: _calleeContext_ is now the running execution context.

6.  7.  Perform OrdinaryCallBindThis(_F_, _calleeContext_,
    _thisArgument_).

8.  a.  b.  

9.  Let _result_ be OrdinaryCallEvaluateBody(_F_, _argumentsList_).

10. Remove _calleeContext_ from the execution context stack and restore
    _callerContext_ as the running execution context.

11. If _result_.[[type]] is return, return
    NormalCompletion(_result_.[[value]]).

12. ReturnIfAbrupt(_result_).

13. Return NormalCompletion(UNDEFINED).

NOTE When _calleeContext_ is removed from the execution context stack in
step 8 it must not be destroyed if it is suspended and retained for
later resumption by an accessible generator object_._

PrepareForOrdinaryCall( F, newTarget )

When the abstract operation PrepareForOrdinaryCall is called with
function object _F_ and ECMAScript language value _newTarget_, the
following steps are taken:

1.  Assert: Type(_newTarget_) is Undefined or Object.

2.  Let _callerContext_ be the running execution context.

3.  Let _calleeContext_ be a new ECMAScript code execution context.

4.  Set the Function of _calleeContext_ to _F_.

5.  Let _calleeRealm_ be the value of _F’s_ [[Realm]] internal slot.

6.  Set the Realm of _calleeContext_ to _calleeRealm_.

7.  Let _localEnv_ be NewFunctionEnvironment(_F_, _newTarget_).

8.  9.  10. Set the LexicalEnvironment of _calleeContext_ to _localEnv_.

11. Set the VariableEnvironment of _calleeContext_ to _localEnv_.

12. If _callerContext_ is not already suspended, Suspend
    _callerContext_.

13. Push _calleeContext_ onto the execution context stack;
    _calleeContext_ is now the running execution context.

14. NOTE Any exception objects produced after this point are associated
    with _calleeRealm_.

15. Return _calleeContext_.

OrdinaryCallBindThis ( F, calleeContext, thisArgument )

When the abstract operation OrdinaryCallBindThis is called with function
object _F_, execution context _calleeContext_, and ECMAScript value
_thisArgument_ the following steps are taken:

1.  Let _thisMode_ be the value of _F_’s [[ThisMode]] internal slot.

2.  If _thisMode_ is lexical, return NormalCompletion(UNDEFINED).

3.  Let _calleeRealm_ be the value of _F’s_ [[Realm]] internal slot.

4.  Let _localEnv_ be the LexicalEnvironment of _calleeContext_.

5.  If _thisMode_ is strict, let _thisValue_ be _thisArgument_.

6.  Else

    a.  if _thisArgument_ is NULL or UNDEFINED, then

        i.  Let _thisValue_ be _calleeRealm_.[[globalThis]].

    b.  Else

        i.  Let _thisValue_ be ToObject(_thisArgument_).

        ii. Assert: _thisValue_ is not an abrupt completion.

        iii. NOTE ToObject produces wrapper objects using _calleeRealm_.

7.  Let _envRec_ be _localEnv_’s EnvironmentRecord.

8.  Assert: The next step never returns an abrupt completion because
    _envRec_.[[thisBindingStatus]] is "UNINITIALIZED".

9.  Return _envRec_.BindThisValue(_thisValue_).

OrdinaryCallEvaluateBody ( F, argumentsList )

When the abstract operation OrdinaryCallEvaluateBody is called with
function object _F_ and List _argumentsList_ the following steps are
taken:

1.  Let _status_ be FunctionDeclarationInstantiation(_F_,
    _argumentsList_).

2.  ReturnIfAbrupt(_status_)

3.  Return the result of EvaluateBody of the parsed code that is the
    value of _F_'s [[ECMAScriptCode]] internal slot passing _F_ as the
    argument.

[[Construct]] ( argumentsList, newTarget)

The [[Construct]] internal method for an ECMAScript Function object _F_
is called with parameters _argumentsList_ and _newTarget_.
_argumentsList_ is a possibly empty List of ECMAScript language values.
The following steps are taken:

1.  Assert: _F_ is an ECMAScript function object.

2.  Assert: Type(_newTarget_) is Object.

3.  Let _callerContext_ be the running execution context.

4.  Let _kind_ be _F_’s [[ConstructorKind]] internal slot.

5.  If _kind_ is "BASE", then

    a.  Let _thisArgument_ be OrdinaryCreateFromConstructor(_newTarget_,
        "%OBJECTPROTOTYPE%").

    b.  ReturnIfAbrupt(_thisArgument_).

6.  Let _calleeContext_ be PrepareForOrdinaryCall(_F_, _newTarget_).

7.  8.  Assert: _calleeContext_ is now the running execution context.

9.  If _kind_ is "BASE",

10. perform OrdinaryCallBindThis(_F_, _calleeContext_, _thisArgument_).

    a.  i.  ii. 

11. Let _constructorEnv_ be the LexicalEnvironment of _calleeContext_.

12. Let _envRec_ be _constructorEnv_’s EnvironmentRecord.

13. Let _result_ be OrdinaryCallEvaluateBody(_F_, _argumentsList_).

14. Remove _calleeContext_ from the execution context stack and restore
    _callerContext_ as the running execution context.

15. If _result_.[[type]] is return, then

    a.  If Type(_result_.[[value]]) is Object, return
        NormalCompletion(_result_.[[value]]).

    b.  If _kind_ is "BASE", return NormalCompletion(_thisArgument_).

    c.  If _result_.[[value]] is not UNDEFINED, throw a TYPEERROR
        exception.

16. Else, ReturnIfAbrupt(_result_).

17. Return _envRec_.GetThisBinding().

FunctionAllocate (functionPrototype, strict [,functionKind] )

The abstract operation FunctionAllocate requires the two arguments
_functionPrototype_ and _strict_. It also accepts one optional argument,
_functionKind_. FunctionAllocate performs the following steps:

1.  Assert: Type(_functionPrototype_) is Object.

2.  Assert: If _functionKind_ is present, its value is either "NORMAL",
    "NON-CONSTRUCTOR" or "GENERATOR".

3.  If _functionKind_ is not present, let _functionKind_ be "NORMAL".

4.  If _functionKind_ is "NON-CONSTRUCTOR", then

    a.  Let _functionKind_ be "NORMAL".

    b.  Let _needsConstruct_ be FALSE.

5.  Else let _needsConstruct_ be TRUE.

6.  Let _F_ be a newly created ECMAScript function object with the
    internal slots listed in Table 27. All of those internal slots are
    initialized to UNDEFINED.

7.  Set _F_’s essential internal methods to the default ordinary object
    definitions specified in 9.1.

8.  9.  10. Set _F_’s [[Call]] internal method to the definition
    specified in 9.2.1.

11. If _needsConstruct_ is TRUE, then

    a.  Set _F_’s [[Construct]] internal method to the definition
        specified in 9.2.2.

    b.  If _functionKind_ is "GENERATOR", set the [[ConstructorKind]]
        internal slot of _F_ to "DERIVED".

    c.  Else, set the [[ConstructorKind]] internal slot of _F_ to
        "BASE".

    d.  NOTE Generator functions are tagged as "DERIVED" constructors to
        prevent [[Construct]] from preallocating a generator instance.
        Generator instance objects are allocated when EvaluateBody is
        applied to the _GeneratorBody_ of a generator function.

12. Set the [[Strict]] internal slot of _F_ to _strict_.

13. Set the [[FunctionKind]] internal slot of _F_ to _functionKind_.

14. Set the [[Prototype]] internal slot of _F_ to _functionPrototype_.

15. Set the [[Extensible]] internal slot of _F_ to TRUE.

16. Set the [[Realm]] internal slot of _F_ to the running execution
    context’s Realm.

17. Return _F_.

FunctionInitialize (F, kind, ParameterList, Body, Scope) 

The abstract operation FunctionInitialize requires the arguments: a
function object _F_, _kind_ which is one of (Normal, Method, Arrow), a
parameter list production specified by _ParameterList_, a body
production specified by _Body_, a Lexical Environment specified by
_Scope_. FunctionInitialize performs the following steps:

1.  Assert: _F_ is an extensible object that does not have a LENGTH own
    property.

2.  Let _len_ be the ExpectedArgumentCount of _ParameterList_.

3.  4.  Let _status_ be DefinePropertyOrThrow(_F_, "LENGTH",
    PropertyDescriptor{[[Value]]: _len_, [[Writable]]: FALSE,
    [[Enumerable]]: FALSE, [[Configurable]]: TRUE}).

5.  Assert: _status_ is not an abrupt completion.

6.  Let _Strict_ be the value of the [[Strict]] internal slot of _F_.

7.  Set the [[Environment]] internal slot of _F_ to the value of
    _Scope_.

8.  Set the [[FormalParameters]] internal slot of _F_ to _ParameterList
    .

9.  Set the [[ECMAScriptCode]] internal slot of _F_ to _Body_.

10. If _kind_ is Arrow, set the [[ThisMode]] internal slot of _F_ to
    lexical.

11. Else if _Strict_ is TRUE, set the [[ThisMode]] internal slot of _F
    to strict.

12. Else set the [[ThisMode]] internal slot of _F_ to global.

13. Return _F_.

FunctionCreate (kind, ParameterList, Body, Scope, Strict, prototype)

The abstract operation FunctionCreate requires the arguments: _kind_
which is one of (Normal, Method, Arrow), a parameter list production
specified by _ParameterList_, a body production specified by _Body_, a
Lexical Environment specified by _Scope_, a Boolean flag _Strict_, and
optionally, an object _prototype_. FunctionCreate performs the following
steps:

1.  If the _prototype_ argument was not passed, then

    a.  Let _prototype_ be the intrinsic object %FunctionPrototype%.

2.  If _kind_ is not Normal, let _allocKind_ be "NON-CONSTRUCTOR".

3.  Else let _allocKind_ be "NORMAL".

4.  Let _F_ be FunctionAllocate(_prototype_, _Strict_, _allocKind_).

5.  Return FunctionInitialize(_F_, _kind_, _ParameterList_, _Body_,
    _Scope_).

GeneratorFunctionCreate (kind, ParameterList, Body, Scope, Strict)

The abstract operation GeneratorFunctionCreate requires the arguments:
_kind_ which is one of (Normal, Method), a parameter list production
specified by _ParameterList_, a body production specified by _Body_, a
Lexical Environment specified by _Scope_, and a Boolean flag _Strict_.
GeneratorFunctionCreate performs the following steps:

1.  Let _functionPrototype_ be the intrinsic object %Generator%.

2.  Let _F_ be FunctionAllocate(_functionPrototype_, _Strict_,
    "GENERATOR").

3.  Return FunctionInitialize(_F_, _kind_, _ParameterList_, _Body_,
    _Scope_).

AddRestrictedFunctionProperties ( F, realm )

The abstract operation AddRestrictedFunctionProperties is called with a
function object _F_ and Realm Record _realm_ as its argument. It
performs the following steps:

1.  Assert: _realm_.[[intrinsics]].[[%ThrowTypeError%]] exists and has
    been initialized.

2.  Let _thrower_ be _realm_.[[intrinsics]].[[%ThrowTypeError%]].

3.  Let _status_ be DefinePropertyOrThrow(_F_, "CALLER",
    PropertyDescriptor {[[Get]]: _thrower_, [[Set]]: _thrower_,
    [[Enumerable]]: FALSE, [[Configurable]]: TRUE}).

4.  Assert: _status_ is not an abrupt completion.

5.  Return DefinePropertyOrThrow(_F_ , "ARGUMENTS", PropertyDescriptor
    {[[Get]]: _thrower_, [[Set]]: _thrower_, [[Enumerable]]: FALSE,
    [[Configurable]]: TRUE}).

6.  Assert: The above returned value is not an abrupt completion.

%ThrowTypeError% ( )

The %ThrowTypeError% intrinsic is an anonymous built-in function object
that is defined once for each Realm. When %ThrowTypeError% is called it
performs the following steps:

1.  Throw a TYPEERROR exception.

The value of the [[Extensible]] internal slot of a %ThrowTypeError%
function is FALSE.

The LENGTH property of a %ThrowTypeError% function has the attributes
{ [[Writable]]: FALSE, [[Enumerable]]: FALSE, [[Configurable]]: FALSE }.

MakeConstructor (F, writablePrototype, prototype)

The abstract operation MakeConstructor requires a Function argument _F_
and optionally, a Boolean _writablePrototype_ and an object _prototype_.
If _prototype_ is provided it is assumed to already contain, if needed,
a "CONSTRUCTOR" property whose value is _F_. This operation converts _F_
into a constructor by performing the following steps:

1.  Assert: _F_ is an ECMAScript function object.

2.  Assert: _F_ has a [[Construct]] internal method.

3.  Assert: _F_ is an extensible object that does not have a PROTOTYPE
    own property.

4.  If the _writablePrototype_ argument was not provided, let
    _writablePrototype_ be TRUE.

5.  6.  If the _prototype_ argument was not provided, then

    a.  b.  Let _prototype_ be ObjectCreate(%ObjectPrototype%).

7.  a.  

8.  a.  Let _status_ be DefinePropertyOrThrow(_prototype_,
        "CONSTRUCTOR", PropertyDescriptor{[[Value]]: _F_, [[Writable]]:
        _writablePrototype_, [[Enumerable]]: FALSE, [[Configurable]]:
        TRUE }).

    b.  Assert: _status_ is not an abrupt completion.

9.  Let _status_ be DefinePropertyOrThrow(_F_, "PROTOTYPE",
    PropertyDescriptor{[[Value]]: _prototype_, [[Writable]]:
    _writablePrototype_, [[Enumerable]]: FALSE, [[Configurable]]:
    FALSE}).

10. Assert: _status_ is not an abrupt completion.

11. Return NormalCompletion(UNDEFINED).

MakeClassConstructor ( F)

The abstract operation MakeClassConstructor with argument _F_ performs
the following steps:

1.  Assert: _F_ is an ECMAScript function object.

2.  Assert: _F_’s [[FunctionKind]] internal slot is "NORMAL".

3.  Set _F_’s [[FunctionKind]] internal slot to "CLASSCONSTRUCTOR".

4.  Return NormalCompletion(UNDEFINED).

MakeMethod ( F, homeObject)

The abstract operation MakeMethod with arguments _F_ and _homeObject_
configures _F_ as a method by performing the following steps:

1.  Assert: _F_ is an ECMAScript function object.

2.  Assert: Type(_homeObject_ ) is Object.

3.  Set the [[HomeObject]] internal slot of _F_ to _homeObject_.

4.  Return NormalCompletion(UNDEFINED).

SetFunctionName (F, name, prefix)

The abstract operation SetFunctionName requires a Function argument _F_,
a String or Symbol argument _name_ and optionally a String argument
_prefix_. This operation adds a NAME property to _F_ by performing the
following steps:

1.  Assert: _F_ is an extensible object that does not have a NAME own
    property.

2.  Assert: Type(_name_) is either Symbol or String.

3.  Assert: If _prefix_ was passed then Type(_prefix_) is String.

4.  If Type(_name_) is Symbol, then

    a.  Let _description_ be _name_’s [[Description]] value.

    b.  If _description_ is UNDEFINED, let _name_ be the empty String.

    c.  Else, let _name_ be the concatenation of "[", _description_, and
        "]".

5.  If _prefix_ was passed, then

    a.  Let _name_ be the concatenation of _prefix_, code unit 0x0020
        (SPACE), and _name_.

6.  Return DefinePropertyOrThrow(_F_, "NAME",
    PropertyDescriptor{[[Value]]: _name_, [[Writable]]: FALSE,
    [[Enumerable]]: FALSE, [[Configurable]]: TRUE}).

7.  Assert: the result is never an abrupt completion.

 FunctionDeclarationInstantiation(func, argumentsList)

NOTE When an execution context is established for evaluating an
ECMAScript function a new function Environment Record is created and
bindings for each formal parameter are instantiated in that Environment
Record. Each declaration in the function body is also instantiated. If
the function’s formal parameters do not include any default value
initializers then the body declarations are instantiated in the same
Environment Record as the parameters. If default value parameter
initializers exist, a second Environment Record is created for the body
declarations. Formal parameters and functions are initialized as part of
FunctionDeclarationInstantiation. All other bindings are initialized
during evaluation of the function body.

FunctionDeclarationInstantiation is performed as follows using arguments
_func_ and _argumentsList_. _func_ is the function object for which the
execution context is being established.

1.  Let _calleeContext_ be the running execution context.

2.  Let _env_ be the LexicalEnvironment of _calleeContext_.

3.  Let _envRec_ be _env_’s EnvironmentRecord.

4.  Let _code_ be the value of the [[ECMAScriptCode]] internal slot of
    _func_.

5.  Let _strict_ be the value of the [[Strict]] internal slot of _func_.

6.  Let _formals_ be the value of the [[FormalParameters]] internal slot
    of _func_.

7.  Let _parameterNames_ be the BoundNames of _formals_.

8.  If _parameterNames_ has any duplicate entries, let _hasDuplicates
    be TRUE. Otherwise, let _hasDuplicates_ be FALSE.

9.  Let _simpleParameterList_ be IsSimpleParameterList of _formals_.

10. Let _hasParameterExpressions_ be ContainsExpression of _formals.

11. Let _varNames_ be the VarDeclaredNames of _code_.

12. Let _varDeclarations_ be the VarScopedDeclarations of _code_.

13. Let _lexicalNames_ be the LexicallyDeclaredNames of _code_.

14. Let _functionNames_ be an empty List.

15. Let _functionsToInitialize_ be an empty List.

16. For each _d_ in _varDeclarations_, in reverse list order do

    a.  If _d_ is neither a _VariableDeclaration_ or a _ForBinding_,
        then

        i.  Assert: _d_ is either a _FunctionDeclaration_ or a
            _GeneratorDeclaration_.

        ii. Let _fn_ be the sole element of the BoundNames of _d._

        iii. If _fn_ is not an element of _functionNames_, then

            1.  Insert _fn_ as the first element of _functionNames_.

            2.  NOTE If there are multiple _FunctionDeclarations_ or
                _GeneratorDeclarations_ for the same name, the last
                declaration is used.

            3.  Insert _d_ as the first element of
                _functionsToInitialize_.

17. Let _argumentsObjectNeeded_ be TRUE.

18. If the value of the [[ThisMode]] internal slot of _func_ is lexical,
    then

    a.  NOTE Arrow functions never have an arguments objects.

    b.  Let _argumentsObjectNeeded_ be FALSE.

19. Else if "ARGUMENTS" is an element of _parameterNames_, then

    a.  Let _argumentsObjectNeeded_ be FALSE.

20. Else if _hasParameterExpressions_ is FALSE, then

    a.  If "ARGUMENTS" is an element of _functionNames_ or if
        "ARGUMENTS" is an element of _lexicalNames_, then

        i.  Let _argumentsObjectNeeded_ be FALSE.

21. For each String _paramName_ in _parameterNames_, do

    a.  Let _alreadyDeclared_ be _envRec_.HasBinding(_paramName_).

    b.  NOTE Early errors ensure that duplicate parameter names can only
        occur in non-strict functions that do not have parameter default
        values or rest parameters.

    c.  If _alreadyDeclared_ is FALSE, then

        i.  Let _status_ be _envRec_.CreateMutableBinding(_paramName_).

        ii. If _hasDuplicates_ is TRUE, then

            1.  Let _status_ be _envRec_.InitializeBinding(_paramName_,
                UNDEFINED).

        iii. Assert: _status_ is never an abrupt completion for either
            of the above operations.

22. If _argumentsObjectNeeded_ is TRUE, then

    a.  If _strict_ is TRUE or if _simpleParameterList_ is FALSE, then

        i.  Let _ao_ be
            CreateUnmappedArgumentsObject(_argumentsList_)_._

    b.  Else,

        i.  NOTE mapped argument object is only provided for non-strict
            functions that don’t have a rest parameter, any parameter
            default value initializers, or any destructured parameters .

        ii. Let _ao_ be CreateMappedArgumentsObject(_func_, _formals_,
            _argumentsList_, _env_).

    c.  ReturnIfAbrupt(_ao_).

    d.  If _strict_ is TRUE, then

        i.  Let _status_ be
            _envRec_.CreateImmutableBinding("ARGUMENTS").

    e.  Else,

        i.  Let _status_ be _envRec_.CreateMutableBinding("ARGUMENTS").

    f.  Assert: _status_ is never an abrupt completion.

    g.  Call _envRec_.InitializeBinding("ARGUMENTS", _ao_).

    h.  Append "ARGUMENTS" to _parameterNames_.

23. Let _iteratorRecord_ be Record {[[iterator]]:
    CreateListIterator(_argumentsList_), [[done]]: FALSE}.

24. If _hasDuplicates_ is TRUE, then

    a.  Let _formalStatus_ be IteratorBindingInitialization for
        _formals_ with _iteratorRecord_ and UNDEFINED as arguments.

25. Else,

    a.  Let _formalStatus_ be IteratorBindingInitialization for
        _formals_ with _iteratorRecord_ and _env_ as arguments.

26. ReturnIfAbrupt(_formalStatus_).

27. If _hasParameterExpressions_ is FALSE, then

    a.  NOTE Only a single lexical environment is needed for the
        parameters and top-level vars.

    b.  Let _instantiatedVarNames_ be a copy of the List
        _parameterNames_.

    c.  For each _n_ in _varNames_, do

        i.  If _n_ is not an element of _instantiatedVarNames_, then

            1.  Append _n_ to _instantiatedVarNames_.

            2.  Let _status_ be _envRec_.CreateMutableBinding(_n_).

            3.  Assert: _status_ is never an abrupt completion.

            4.  Call _envRec_.InitializeBinding(_n_, UNDEFINED).

    d.  Let _varEnv_ be _env_.

    e.  Let _varEnvRec_ be _envRec_.

28. Else,

    a.  NOTE A separate Environment Record is needed to ensure that
        closures created by expressions in the formal parameter list do
        not have visibility of declarations in the function body.

    b.  Let _varEnv_ be NewDeclarativeEnvironment(_env_).

    c.  Let _varEnvRec_ be _varEnv_’s EnvironmentRecord.

    d.  Set the VariableEnvironment of _calleeContext_ to _varEnv_.

    e.  Let _instantiatedVarNames_ be a new empty List.

    f.  For each _n_ in _varNames_, do

        i.  If _n_ is not an element of _instantiatedVarNames_, then

            1.  Append _n_ to _instantiatedVarNames_.

            2.  Let _status_ be _varEnvRec_.CreateMutableBinding(_n_).

            3.  Assert: _status_ is never an abrupt completion.

            4.  If _n_ is not an element of _parameterNames_ or if _n_
                is an element of _functionNames_, let _initialValue_ be
                UNDEFINED.

            5.  else,

                a.  Let _initialValue_ be _envRec._GetBindingValue(_n_,
                    FALSE).

                b.  ReturnIfAbrupt(_initialValue_).

            6.  Call _varEnvRec_.InitializeBinding(_n_, _initialValue_).

            7.  NOTE vars whose names are the same as a formal
                parameter, initially have the same value as the
                corresponding initialized parameter.

29. NOTE: Annex B.3.3 adds additional steps at this point.

30. If _strict_ is FALSE, then

    a.  Let _lexEnv_ be NewDeclarativeEnvironment(_varEnv_).

    b.  NOTE: Non-strict functions use a separate lexical Environment
        Record for top-level lexical declarations so that a direct EVAL
        (see 12.3.4.1) can determine whether any var scoped declarations
        introduced by the eval code conflict with pre-existing top-level
        lexically scoped declarations. This is not needed for strict
        functions because a strict direct EVAL always places all
        declarations into a new Environment Record.

31. Else, let _lexEnv_ be _varEnv_.

32. Let _lexEnvRec_ be _lexEnv_’s EnvironmentRecord.

33. Set the LexicalEnvironment of _calleeContext_ to _lexEnv_.

34. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _code_.

35. For each element _d_ in _lexDeclarations_ do

    a.  NOTE A lexically declared name cannot be the same as a
        function/generator declaration, formal parameter, or a var name.
        Lexically declared names are only instantiated here but not
        initialized.

    b.  For each element _dn_ of the BoundNames of _d_ do

        i.  If IsConstantDeclaration of _d_ is TRUE, then

            1.  Let _status_ be _lexEnvRec_.CreateImmutableBinding(_dn_,
                TRUE).

        ii. Else,

            1.  Let _status_ be _lexEnvRec_.CreateMutableBinding(_dn_,
                FALSE).

    c.  Assert: _status_ is never an abrupt completion.

36. For each parsed grammar phrase _f_ in _functionsToInitialize_, do

    a.  Let _fn_ be the sole element of the BoundNames of _f._

    b.  Let _fo_ be the result of performing InstantiateFunctionObject
        for _f_ with argument _lexEnv_.

    c.  Let _status_ be _varEnvRec_.SetMutableBinding(_fn_, _fo_,
        FALSE).

    d.  Assert: _status_ is never an abrupt completion.

37. Return NormalCompletion(empty).

NOTE 1 B.3.3 provides an extension to the above algorithm that is
necessary for backwards compatibility with web browser implementations
of ECMAScript that predate ECMAScript 2015.

NOTE 2 Parameter _Initializers_ may contain direct eval expressions
(12.3.4.1). Any top level declarations of such evals are only visible to
the eval code (10.2). The creation of the environment for such
declarations is described in 14.1.18.


Built-in Function Objects

The built-in function objects defined in this specification may be
implemented as either ECMAScript function objects (9.2) whose behaviour
is provided using ECMAScript code or as implementation provided exotic
function objects whose behaviour is provided in some other manner. In
either case, the effect of calling such functions must conform to their
specifications. An implementation may also provide additional built-in
function objects that are not defined in this specification.

If a built-in function object is implemented as an exotic object it must
have the ordinary object behaviour specified in 9.1. All such exotic
function objects also have [[Prototype]], [[Extensible]], and [[Realm]]
internal slots.

Unless otherwise specified every built-in function object has the
%FunctionPrototype% object (19.2.3) as the initial value of its
[[Prototype]] internal slot.

The behaviour specified for each built-in function via algorithm steps
or other means is the specification of the function body behaviour for
both [[Call]] and [[Construct]] invocations of the function. However,
[[Construct]] invocation is not supported by all built-in functions. For
each built-in function, when invoked with [[Call]], the [[Call]]
_thisArgument_ provides the THIS value, the [[Call]] _argumentsList
provides the named parameters, and the NewTarget value is UNDEFINED.
When invoked with [[Construct]], the THIS value is uninitialized, the
[[Construct]] _argumentsList_ provides the named parameters, and the
[[Construct]] _newTarget_ parameter provides the NewTarget value. If the
built-in function is implemented as an ECMAScript function object then
this specified behaviour must be implemented by the ECMAScript code that
is the body of the function. Built-in functions that are ECMAScript
function objects must be strict mode functions. If a built-in
constructor has any [[Call]] behaviour other than throwing a TYPEERROR
exception, an ECMAScript implementation of the function must be done in
a manner that does not cause the function’s [[FunctionKind]] internal
slot to have the value "CLASSCONSTRUCTOR".

Built-in function objects that are not identified as constructors do not
implement the [[Construct]] internal method unless otherwise specified
in the description of a particular function. When a built-in constructor
is called as part of a NEW expression the _argumentsList_ parameter of
the invoked [[Construct]] internal method provides the values for the
built-in constructor’s named parameters.

Built-in functions that are not constructors do not have a PROTOTYPE
property unless otherwise specified in the description of a particular
function.

If a built-in function object is not implemented as an ECMAScript
function it must provide [[Call]] and [[Construct]] internal methods
that conform to the following definitions:

[[Call]] ( thisArgument, argumentsList) 

The [[Call]] internal method for a built-in function object _F_ is
called with parameters _thisArgument_ and _argumentsList_, a List of
ECMAScript language values. The following steps are taken:

1.  Let _callerContext_ be the running execution context.

2.  If _callerContext_ is not already suspended, Suspend
    _callerContext_.

3.  Let _calleeContext_ be a new ECMAScript code execution context.

4.  Set the Function of _calleeContext_ to _F_.

5.  Let _calleeRealm_ be the value of _F’s_ [[Realm]] internal slot.

6.  Set the Realm of _calleeContext_ to _calleeRealm_.

7.  Perform any necessary implementation defined initialization of
    _calleeContext_.

8.  Push _calleeContext_ onto the execution context stack;
    _calleeContext_ is now the running execution context.

9.  Let _result_ be the Completion Record that is the result of
    evaluating _F_ in an implementation defined manner that conforms to
    the specification of _F_. _thisArgument_ is the THIS value,
    _argumentsList_ provides the named parameters, and the NewTarget
    value is UNDEFINED.

10. Remove _calleeContext_ from the execution context stack and restore
    _callerContext_ as the running execution context.

11. Return _result_.

NOTE 1 When _calleeContext_ is removed from the execution context stack
it must not be destroyed if it has been suspended and retained by an
accessible generator object for later resumption_._

[[Construct]] (argumentsList, newTarget)

The [[Construct]] internal method for built-in function object _F_ is
called with parameters _argumentsList_ and _newTarget_. The steps
performed are the same as [[Call]] (see 9.3.1) except that step 9 is
replaced by:

9.  Let _result_ be the Completion Record that is the result of
    evaluating _F_ in an implementation defined manner that conforms to
    the specification of _F_. The THIS value is uninitialized,
    _argumentsList_ provides the named parameters, and _newTarget_
    provides the NewTarget value.

CreateBuiltinFunction(realm, steps, prototype, internalSlotsList)

The abstract operation CreateBuiltinFunction takes arguments _realm_,
_prototype_, and _steps_. The optional argument _internalSlotsList_ is a
List of the names of additional internal slots that must be defined as
part of the object. If the list is not provided, an empty List is used.
CreateBuiltinFunction returns a built-in function object created by the
following steps:

1.  Assert: _realm_ is a Realm Record.

2.  Assert: _steps_ is either a set of algorithm steps or other
    definition of a functions behaviour provided in this specification.

3.  Let _func_ be a new built-in function object that when called
    performs the action described by _steps_. The new function object
    has internal slots whose names are the elements of
    _internalSlotsList_. The initial value of each of those internal
    slots is UNDEFINED_._

4.  Set the [[Realm]] internal slot of _func_ to _realm_.

5.  Set the [[Prototype]] internal slot of _func_ to _prototype_.

6.  Return _func_.

Each built-in function defined in this specification is created as if by
calling the CreateBuiltinFunction abstract operation, unless otherwise
specified.


Built-in Exotic Object Internal Methods and Slots

This specification defines several kinds of built-in exotic objects.
These objects generally behave similar to ordinary objects except for a
few specific situations. The following exotic objects use the ordinary
object internal methods except where it is explicitly specified
otherwise below:

Bound Function Exotic Objects

A _bound function_ is an exotic object that wraps another function
object. A bound function is callable (it has a [[Call]] internal method
and may have a [[Construct]] internal method). Calling a bound function
generally results in a call of its wrapped function.

Bound function objects do not have the internal slots of ECMAScript
function objects defined in Table 27. Instead they have the internal
slots defined in Table 28.

Table 28 — Internal Slots of Exotic Bound Function Objects

  _INTERNAL SLOT_           _TYPE_            _DESCRIPTION_
  ------------------------- ----------------- ------------------------------------------------------------------------------------------------------
  [[BoundTargetFunction]]   Callable Object   The wrapped function object.
  [[BoundThis]]             Any               The value that is always passed as the THIS value when calling the wrapped function.
  [[BoundArguments]]        List of Any       A list of values whose elements are used as the first arguments to any call to the wrapped function.

Unlike ECMAScript function objects, bound function objects do not use an
alternative definition of the [[GetOwnProperty]] internal methods. Bound
function objects provide all of the essential internal methods as
specified in 9.1. However, they use the following definitions for the
essential internal methods of function objects.

[[Call]] ( thisArgument, argumentsList)

When the [[Call]] internal method of an exotic bound function object,
_F_, which was created using the bind function is called with parameters
_thisArgument_ and _argumentsList_, a List of ECMAScript language
values, the following steps are taken:

1.  Let _target_ be the value of _F’s_ [[BoundTargetFunction]] internal
    slot.

2.  Let _boundThis_ be the value of _F’s_ [[BoundThis]] internal slot.

3.  Let _boundArgs_ be the value of _F’s_ [[BoundArguments]] internal
    slot.

4.  Let _args_ be a new list containing the same values as the list
    _boundArgs_ in the same order followed by the same values as the
    list _argumentsList_ in the same order.

5.  Return Call(_target_, _boundThis_, _args_).

[[Construct]] (argumentsList, newTarget)

When the [[Construct]] internal method of an exotic bound function
object, _F_ that was created using the bind function is called with a
list of arguments _argumentsList_ and _newTarget_, the following steps
are taken:

1.  Let _target_ be the value of _F’s_ [[BoundTargetFunction]] internal
    slot.

2.  Assert: _target_ has a [[Construct]] internal method.

3.  Let _boundArgs_ be the value of _F’s_ [[BoundArguments]] internal
    slot.

4.  Let _args_ be a new list containing the same values as the list
    _boundArgs_ in the same order followed by the same values as the
    list _argumentsList_ in the same order.

5.  If SameValue(_F_, _newTarget_) is TRUE, let _newTarget_ be _target_.

6.  Return Construct(_target_, _args_, _newTarget_).

BoundFunctionCreate (targetFunction, boundThis, boundArgs)

The abstract operation BoundFunctionCreate with arguments
_targetFunction_, _boundThis_ and _boundArgs_ is used to specify the
creation of new Bound Function exotic objects. It performs the following
steps:

1.  Assert: Type(_targetFunction_) is Object.

2.  Let _proto_ be _targetFunction_.[[GetPrototypeOf]]().

3.  ReturnIfAbrupt(_proto_).

4.  Let _obj_ be a newly created object.

5.  Set _obj_’s essential internal methods to the default ordinary
    object definitions specified in 9.1.

6.  Set the [[Call]] internal method of _obj_ as described in 9.4.1.1.

7.  If _targetFunction_ has a [[Construct]] internal method, then

    a.  Set the [[Construct]] internal method of _obj_ as described in
        9.4.1.2.

8.  Set the [[Prototype]] internal slot of _obj_ to _proto_.

9.  Set the [[Extensible]] internal slot of _obj_ to TRUE.

10. Set the [[BoundTargetFunction]] internal slot of _obj_ to
    _targetFunction_.

11. Set the [[BoundThis]] internal slot of _obj_ to the value of
    _boundThis_.

12. Set the [[BoundArguments]] internal slot of _obj_ to _boundArgs_.

13. Return _obj_.

Array Exotic Objects

An _Array object_ is an exotic object that gives special treatment to
array index property keys (see 6.1.7). A property whose property name is
an array index is also called an _element_. Every Array object has a
LENGTH property whose value is always a nonnegative integer less than
2^32^. The value of the LENGTH property is numerically greater than the
name of every own property whose name is an array index; whenever an own
property of an Array object is created or changed, other properties are
adjusted as necessary to maintain this invariant. Specifically, whenever
an own property is added whose name is an array index, the value of the
LENGTH property is changed, if necessary, to be one more than the
numeric value of that array index; and whenever the value of the LENGTH
property is changed, every own property whose name is an array index
whose value is not smaller than the new length is deleted. This
constraint applies only to own properties of an Array object and is
unaffected by LENGTH or array index properties that may be inherited
from its prototypes.

NOTE A String property name _P_ is an _array index_ if and only if
ToString(ToUint32(_P_)) is equal to _P_ and ToUint32(_P_) is not equal
to 2^32^−1.

Array exotic objects always have a non-configurable property named
"LENGTH".

Array exotic objects provide an alternative definition for the
[[DefineOwnProperty]] internal method. Except for that internal method,
Array exotic objects provide all of the other essential internal methods
as specified in 9.1.

[[DefineOwnProperty]] ( P, Desc)

When the [[DefineOwnProperty]] internal method of an Array exotic object
_A_ is called with property key _P_, and Property Descriptor _Desc_ the
following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  If _P_ is "LENGTH", then

    a.  Return ArraySetLength(_A_, _Desc_).

3.  Else if _P_ is an array index, then

    a.  Let _oldLenDesc_ be OrdinaryGetOwnProperty(_A_, "LENGTH").

    b.  Assert: _oldLenDesc_ will never be UNDEFINED or an accessor
        descriptor because Array objects are created with a length data
        property that cannot be deleted or reconfigured.

    c.  Let _oldLen_ be _oldLenDesc_.[[Value]].

    d.  Let _index_ be ToUint32(_P_).

    e.  Assert: _index_ will never be an abrupt completion.

    f.  If _index_ ≥ _oldLen_ and _oldLenDesc_.[[Writable]] is FALSE,
        return FALSE.

    g.  Let _succeeded_ be OrdinaryDefineOwnProperty(_A_, _P_, _Desc_).

    h.  Assert: _succeeded_ is not an abrupt completion.

    i.  If _succeeded_ is FALSE, return FALSE.

    j.  If _index_ ≥ _oldLen_

        i.  Set _oldLenDesc_.[[Value]] to _index_ + 1.

        ii. Let _succeeded_ be OrdinaryDefineOwnProperty(_A_, "LENGTH",
            _oldLenDesc_).

        iii. Assert: _succeeded_ is TRUE.

    k.  Return TRUE.

4.  Return OrdinaryDefineOwnProperty(_A_, _P_, _Desc_).

ArrayCreate(length, proto)

The abstract operation ArrayCreate with argument _length_ (a positive
integer) and optional argument _proto_ is used to specify the creation
of new Array exotic objects. It performs the following steps:

1.  Assert: _length_ is an integer Number ≥ 0.

2.  If _length_ is −0, let _length_ be +0.

3.  If _length_>2^32^-1, throw a RANGEERROR exception.

4.  If the _proto_ argument was not passed, let _proto_ be the intrinsic
    object %ArrayPrototype%.

5.  Let _A_ be a newly created Array exotic object.

6.  Set _A_’s essential internal methods except for
    [[DefineOwnProperty]] to the default ordinary object definitions
    specified in 9.1.

7.  Set the [[DefineOwnProperty]] internal method of _A_ as specified in
    9.4.2.1.

8.  Set the [[Prototype]] internal slot of _A_ to _proto_.

9.  Set the [[Extensible]] internal slot of _A_ to TRUE.

10. Perform OrdinaryDefineOwnProperty(_A_, "LENGTH",
    PropertyDescriptor{[[Value]]: _length_, [[Writable]]: TRUE,
    [[Enumerable]]: FALSE, [[Configurable]]: FALSE}).

11. Assert: the preceding step never produces an abrupt completion.

12. Return _A_.

ArraySpeciesCreate(originalArray, length)

The abstract operation ArraySpeciesCreate with arguments _originalArray_
and _length_ is used to specify the creation of a new Array object using
a constructor function that is derived from _originalArray_. It performs
the following steps:

1.  Assert: _length_ is an integer Number ≥ 0.

2.  If _length_ is −0, let _length_ be +0.

3.  Let _C_ be UNDEFINED.

4.  Let _isArray_ be IsArray(_originalArray_).

5.  ReturnIfAbrupt(_isArray_).

6.  If _isArray_ is TRUE, then

    a.  Let _C_ be Get(_originalArray_, "CONSTRUCTOR").

    b.  ReturnIfAbrupt(_C_).

    c.  If IsConstructor(_C_) is TRUE, then

        i.  Let _thisRealm_ be the running execution context’s Realm.

        ii. Let _realmC_ be GetFunctionRealm(_C_).

        iii. ReturnIfAbrupt(_realmC_).

        iv. If _thisRealm_ and _realmC_ are not the same Realm Record,
            then

            1.  If SameValue(_C_, _realmC_.[[intrinsics]].[[%Array%]])
                is TRUE, let _C_ be UNDEFINED.

    d.  If Type(_C_) is Object, then

        i.  Let _C_ be Get(_C_, @@species).

        ii. ReturnIfAbrupt(_C_).

        iii. If _C_ is NULL, let _C_ be UNDEFINED.

7.  If _C_ is UNDEFINED, return ArrayCreate(_length_).

8.  If IsConstructor(_C_) is FALSE, throw a TYPEERROR exception_.

9.  Return Construct(_C_, «_length_»).

NOTE If _originalArray_ was created using the standard built-in Array
constructor for a Realm that is not the Realm of the running execution
context, then a new Array is created using the Realm of the running
execution context. This maintains compatibility with Web browsers that
have historically had that behaviour for the Array.prototype methods
that now are defined using ArraySpeciesCreate.

ArraySetLength(A, Desc)

When the abstract operation ArraySetLength is called with an Array
exotic object _A_, and Property Descriptor _Desc_ the following steps
are taken:

1.  If the [[Value]] field of _Desc_ is absent, then

    a.  Return OrdinaryDefineOwnProperty(_A_, "LENGTH", _Desc_).

2.  Let _newLenDesc_ be a copy of _Desc_.

3.  Let _newLen_ be ToUint32(_Desc_.[[Value]]).

4.  ReturnIfAbrupt(_newLen_).

5.  Let _numberLen_ be ToNumber(_Desc_.[[Value]]).

6.  ReturnIfAbrupt(_newLen_).

7.  If _newLen_ ≠ _numberLen_, throw a RANGEERROR exception.

8.  Set _newLenDesc_.[[Value]] to _newLen_.

9.  Let _oldLenDesc_ be OrdinaryGetOwnProperty(_A_, "LENGTH").

10. Assert: _oldLenDesc_ will never be UNDEFINED or an accessor
    descriptor because Array objects are created with a length data
    property that cannot be deleted or reconfigured.

11. Let _oldLen_ be _oldLenDesc_.[[Value]].

12. If _newLen_ ≥_oldLen_, then

    a.  Return OrdinaryDefineOwnProperty(_A_, "LENGTH", _newLenDesc_).

13. If _oldLenDesc_.[[Writable]] is FALSE, return FALSE.

14. If _newLenDesc_.[[Writable]] is absent or has the value TRUE, let
    _newWritable_ be TRUE.

15. Else,

    a.  Need to defer setting the [[Writable]] attribute to FALSE in
        case any elements cannot be deleted.

    b.  Let _newWritable_ be FALSE.

    c.  Set _newLenDesc_.[[Writable]] to TRUE.

16. Let _succeeded_ be OrdinaryDefineOwnProperty(_A_, "LENGTH",
    _newLenDesc_).

17. Assert: _succeeded_ is not an abrupt completion.

18. If _succeeded_ is FALSE, return FALSE.

19. While _newLen_ < _oldLen_ repeat,

    a.  Set _oldLen_ to _oldLen_ – 1.

    b.  Let _deleteSucceeded_ be _A_.[[Delete]](ToString(_oldLen_)).

    c.  Assert: _deleteSucceeded_ is not an abrupt completion.

    d.  If _deleteSucceeded_ is FALSE, then

        i.  Set _newLenDesc_.[[Value]] to _oldLen_ _+_ 1.

        ii. If _newWritable_ is FALSE, set _newLenDesc_.[[Writable]] to
            FALSE.

        iii. Let _succeeded_ be OrdinaryDefineOwnProperty(_A_, "LENGTH",
            _newLenDesc_).

        iv. Assert: _succeeded_ is not an abrupt completion.

        v.  Return FALSE.

20. If _newWritable_ is FALSE, then

    a.  Return OrdinaryDefineOwnProperty(_A_, "LENGTH",
        PropertyDescriptor{[[Writable]]: FALSE}). This call will always
        return TRUE.

21. Return TRUE.

NOTE In steps 3 and 4, if _Desc_.[[Value]] is an object then its VALUEOF
method is called twice. This is legacy behaviour that was specified with
this effect starting with the 2^nd^ Edition of this specification.

String Exotic Objects

A _String object_ is an exotic object that encapsulates a String value
and exposes virtual integer indexed data properties corresponding to the
individual code unit elements of the string value. Exotic String objects
always have a data property named "LENGTH" whose value is the number of
code unit elements in the encapsulated String value. Both the code unit
data properties and the "LENGTH" property are non-writable and
non-configurable.

Exotic String objects have the same internal slots as ordinary objects.
They also have a [[StringData]] internal slot.

Exotic String objects provide alternative definitions for the following
internal methods. All of the other exotic String object essential
internal methods that are not defined below are as specified in 9.1.

 [[GetOwnProperty]] ( P )

When the [[GetOwnProperty]] internal method of an exotic String object
_S_ is called with property key _P_ the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _desc_ be OrdinaryGetOwnProperty(_S_, _P_).

3.  If _desc_ is not UNDEFINED return _desc_.

4.  Return StringGetIndexProperty(_S_, _P_).

StringGetIndexProperty (S, P)

When the abstract operation StringGetIndexProperty is called with an
exotic String object _S_ and with property key _P_, the following steps
are taken:

1.  If Type(_P_) is not String, return UNDEFINED.

2.  Let _index_ be CanonicalNumericIndexString (_P_).

3.  Assert: _index_ is not an abrupt completion.

4.  If _index_ is UNDEFINED, return UNDEFINED.

5.  If IsInteger(_index_) is FALSE, return UNDEFINED.

6.  If _index_ = −0, return UNDEFINED.

7.  Let _str_ be the String value of the [[StringData]] internal slot of
    _S_.

8.  Let _len_ be the number of elements in _str_.

9.  If _index_ < 0 or _len_ ≤ _index_, return UNDEFINED.

10. Let _resultStr_ be a String value of length 1, containing one code
    unit from _str_, specifically the code unit at index _index_.

11. Return a PropertyDescriptor{ [[Value]]: _resultStr_, [[Enumerable]]:
    TRUE, [[Writable]]: FALSE, [[Configurable]]: FALSE }.

[[HasProperty]](P)

When the [[HasProperty]] internal method of an exotic String object _S_
is called with property key _P_, the following steps are taken:

1.  Let _elementDesc_ be StringGetIndexProperty(_S_, _P_).

2.  3.  If _elementDesc_ is not UNDEFINED, return TRUE.

4.  Return OrdinaryHasProperty(_S_, _P_)..

5.  

1.  

2.  3.  4.  a.  

5.  6.  7.  

[[OwnPropertyKeys]] ( )

When the [[OwnPropertyKeys]] internal method of a String exotic object
_O_ is called the following steps are taken:

1.  Let _keys_ be a new empty List.

2.  Let _str_ be the String value of the [[StringData]] internal slot of
    _O_.

3.  Let _len_ be the number of elements in _str_.

4.  For each integer _i_ starting with 0 such that _i_ < _len_, in
    ascending order,

    a.  Add ToString(_i_) as the last element of _keys_

5.  For each own property key _P_ of _O_ such that _P_ is an integer
    index and ToInteger(_P_) ≥ _len_, in ascending numeric index order,

    a.  Add _P_ as the last element of _keys_.

6.  For each own property key _P_ of _O_ such that Type(_P_) is String
    and _P_ is not an integer index, in property creation order,

    a.  Add _P_ as the last element of _keys_.

7.  For each own property key _P_ of _O_ such that Type(_P_) is Symbol,
    in property creation order,

    a.  Add _P_ as the last element of _keys_.

8.  Return _keys_.

StringCreate( value, prototype) 

The abstract operation StringCreate with arguments _value_ and
_prototype_ is used to specify the creation of new exotic String
objects. It performs the following steps:

1.  ReturnIfAbrupt(_prototype_).

2.  Assert: Type(_value_) is String.

3.  Let _S_ be a newly created String exotic object.

4.  Set the [[StringData]] internal slot of _S_ to _value_.

5.  Set _S_’s essential internal methods to the default ordinary object
    definitions specified in 9.1.

6.  Set the [[GetOwnProperty]] internal method of _S_ as specified in
    9.4.3.1.

7.  Set the [[HasProperty]] internal method of _S_ as specified in
    9.4.3.2.

8.  9.  Set the [[OwnPropertyKeys]] internal method of _S_ as specified
    in 9.4.3.3.

10. Set the [[Prototype]] internal slot of _S_ to _prototype_.

11. Set the [[Extensible]] internal slot of _S_ to TRUE.

12. Let _length_ be the number of code unit elements in _value.

13. Let _status_ be DefinePropertyOrThrow(_S_, "LENGTH",
    PropertyDescriptor{[[Value]]: _length_, [[Writable]]: FALSE,
    [[Enumerable]]: FALSE, [[Configurable]]: FALSE }).

14. Assert: _status_ is not an abrupt completion.

15. Return _S_.

Arguments Exotic Objects

Most ECMAScript functions make an arguments objects available to their
code. Depending upon the characteristics of the function definition, its
argument object is either an ordinary object or an _arguments exotic
object_. An arguments exotic object is an exotic object whose array
index properties map to the formal parameters bindings of an invocation
of its associated ECMAScript function.

Arguments exotic objects have the same internal slots as ordinary
objects. They also have a [[ParameterMap]] internal slot. Ordinary
arguments objects also have a [[ParameterMap]] internal slot whose value
is always undefined. For ordinary argument objects the [[ParameterMap]]
internal slot is only used by OBJECT.PROTOTYPE.TOSTRING (19.1.3.6) to
identify them as such.

Arguments exotic objects provide alternative definitions for the
following internal methods. All of the other exotic arguments object
essential internal methods that are not defined below are as specified
in 9.1

NOTE 1 For non-strict functions the integer indexed data properties of
an arguments object whose numeric name values are less than the number
of formal parameters of the corresponding function object initially
share their values with the corresponding argument bindings in the
function’s execution context. This means that changing the property
changes the corresponding value of the argument binding and vice-versa.
This correspondence is broken if such a property is deleted and then
redefined or if the property is changed into an accessor property. For
strict mode functions, the values of the arguments object’s properties
are simply a copy of the arguments passed to the function and there is
no dynamic linkage between the property values and the formal parameter
values.

NOTE 2 The ParameterMap object and its property values are used as a
device for specifying the arguments object correspondence to argument
bindings. The ParameterMap object and the objects that are the values of
its properties are not directly observable from ECMAScript code. An
ECMAScript implementation does not need to actually create or use such
objects to implement the specified semantics.

NOTE 3 Arguments objects for strict mode functions define
non-configurable accessor properties named "CALLER" and "CALLEE" which
throw a TYPEERROR exception on access. The "CALLEE" property has a more
specific meaning for non-strict functions and a "CALLER" property has
historically been provided as an implementation-defined extension by
some ECMAScript implementations. The strict mode definition of these
properties exists to ensure that neither of them is defined in any other
manner by conforming ECMAScript implementations.

 [[GetOwnProperty]] (P)

The [[GetOwnProperty]] internal method of an arguments exotic object
when called with a property key _P_ performs the following steps:

1.  Let _args_ be the arguments object.

2.  Let _desc_ be OrdinaryGetOwnProperty(_args_, _P_).

3.  If _desc_ is UNDEFINED, return _desc_.

4.  Let _map_ be the value of the [[ParameterMap]] internal slot of the
    arguments object.

5.  Let _isMapped_ be HasOwnProperty(_map_, _P_).

6.  Assert: _isMapped_ is never an abrupt completion.

7.  If the value of _isMapped_ is TRUE, then

    a.  Set _desc_.[[Value]] to Get(_map_, _P_).

1.  If IsDataDescriptor(_desc_) is TRUE and _P_ is "CALLER" and
    _desc_.[[Value]] is a strict mode Function object, throw a TYPEERROR
    exception.

1.  Return _desc_.

If an implementation does not provide a built-in CALLER property for
argument exotic objects then step 8 of this algorithm is must be
skipped.

[[DefineOwnProperty]] (P, Desc)

The [[DefineOwnProperty]] internal method of an arguments exotic object
when called with a property key _P_ and Property Descriptor _Desc_
performs the following steps:

1.  Let _args_ be the arguments object.

2.  Let _map_ be the value of the [[ParameterMap]] internal slot of the
    arguments object.

3.  Let _isMapped_ be HasOwnProperty(_map_, _P_).

4.  Let _allowed_ be OrdinaryDefineOwnProperty(_args_, _P_, _Desc_).

5.  ReturnIfAbrupt(_allowed_).

6.  If _allowed_ is FALSE, return FALSE.

7.  If the value of _isMapped_ is TRUE, then

    a.  If IsAccessorDescriptor(_Desc_) is TRUE, then

        i.  Call _map_.[[Delete]](_P_).

    b.  Else

        i.  If _Desc_.[[Value]] is present, then

            1.  Let _setStatus_ be Set(_map_, _P_, _Desc_.[[Value]],
                FALSE).

            2.  Assert: _setStatus_ is TRUE because formal parameters
                mapped by argument objects are always writable.

        ii. If _Desc_.[[Writable]] is present and its value is FALSE,
            then

            1.  Call _map_.[[Delete]](_P_).

8.  Return TRUE.

[[Get]] (P, Receiver)

The [[Get]] internal method of an arguments exotic object when called
with a property key _P_ and ECMAScript language value _Receiver_
performs the following steps:

1.  Let _args_ be the arguments object.

2.  Let _map_ be the value of the [[ParameterMap]] internal slot of the
    arguments object.

3.  Let _isMapped_ be HasOwnProperty(_map_, _P_).

4.  Assert: _isMapped_ is not an abrupt completion.

5.  If the value of _isMapped_ is FALSE, then

    a.  Return the result of calling the default ordinary object [[Get]]
        internal method (9.1.8) on _args_ passing _P_ and _Receiver_ as
        the arguments.

6.  Else _map_ contains a formal parameter mapping for _P_,

    a.  Return Get(_map_, _P_).

7.  8.  

[[Set]] ( P, V, Receiver)

The [[Set]] internal method of an arguments exotic object when called
with property key _P_, value _V_, and ECMAScript language value
_Receiver_ performs the following steps:

1.  Let _args_ be the arguments object.

2.  If SameValue(_args_, _Receiver_) is FALSE, then

    a.  Let _isMapped_ be FALSE.

3.  Else,

    a.  Let _map_ be the value of the [[ParameterMap]] internal slot of
        the arguments object.

    b.  Let _isMapped_ be HasOwnProperty(_map_, _P_).

    c.  Assert: _isMapped_ is not an abrupt completion.

4.  If _isMapped_ is TRUE, then

    a.  

5.  a.  Let _setStatus_ be Set(_map_, _P_, _V_, FALSE).

    b.  Assert: _setStatus_ is TRUE because formal parameters mapped by
        argument objects are always writable.

6.  Return the result of calling the default ordinary object [[Set]]
    internal method (9.1.9) on _args_ passing _P_, _V_ and _Receiver_ as
    the arguments.

    a.  

[[Delete]] (P)

The [[Delete]] internal method of an arguments exotic object when called
with a property key _P_ performs the following steps:

1.  Let _map_ be the value of the [[ParameterMap]] internal slot of the
    arguments object.

2.  Let _isMapped_ be HasOwnProperty(_map_, _P_).

3.  Assert: _isMapped_ is not an abrupt completion.

4.  Let _result_ be the result of calling the default [[Delete]]
    internal method for ordinary objects (9.1.10) on the arguments
    object passing _P_ as the argument.

5.  ReturnIfAbrupt(_result_).

6.  If _result_ is TRUE and the value of _isMapped_ is TRUE, then

    a.  Call _map_.[[Delete]](_P_).

7.  Return _result_.

CreateUnmappedArgumentsObject(argumentsList)

The abstract operation CreateUnmappedArgumentsObject called with an
argument _argumentsList_ performs the following steps:

1.  Let _len_ be the number of elements in _argumentsList_.

2.  Let _obj_ be ObjectCreate(%ObjectPrototype%, «‍[[ParameterMap]]»).

3.  Set _obj_’s [[ParameterMap]] internal slot to UNDEFINED.

4.  Perform DefinePropertyOrThrow(_obj_, "LENGTH",
    PropertyDescriptor{[[Value]]: _len_, [[Writable]]: TRUE,
    [[Enumerable]]: FALSE, [[Configurable]]: TRUE}).

5.  Let _index_ be 0.

6.  Repeat while _index_ < _len_,

    a.  Let _val_ be _argumentsList_[_index_].

    b.  Perform CreateDataProperty(_obj_, ToString(_index_), _val_).

    c.  Let _index_ be _index_ + 1

1.  Perform DefinePropertyOrThrow(_obj_, @@iterator, PropertyDescriptor
    {[[Value]]:%ArrayProto_values%, [[Writable]]: TRUE, [[Enumerable]]:
    FALSE, [[Configurable]]: TRUE}).

2.  Perform DefinePropertyOrThrow(_obj_, "CALLER", PropertyDescriptor
    {[[Get]]: %ThrowTypeError%, [[Set]]: %ThrowTypeError%,
    [[Enumerable]]: FALSE, [[Configurable]]: FALSE}).

3.  Perform DefinePropertyOrThrow(_obj_, "CALLEE", PropertyDescriptor
    {[[Get]]: %ThrowTypeError%, [[Set]]: %ThrowTypeError%,
    [[Enumerable]]: FALSE, [[Configurable]]: FALSE}).

4.  Assert: the above property definitions will not produce an abrupt
    completion.

5.  Return _obj

CreateMappedArgumentsObject ( func, formals, argumentsList, env )

The abstract operation CreateMappedArgumentsObject is called with object
_func_, parsed grammar phrase _formals_, List _argumentsList_, and
Environment Record _env_. The following steps are performed:

1.  Assert: _formals_ does not contain a rest parameter, any binding
    patterns, or any initializers. It may contain duplicate identifiers.

2.  Let _len_ be the number of elements in _argumentsList_.

3.  Let _obj_ be a newly created arguments exotic object with a
    [[ParameterMap]] internal slot.

4.  Set the [[GetOwnProperty]] internal method of _obj_ as specified in
    9.4.4.1.

5.  Set the [[DefineOwnProperty]] internal method of _obj_ as specified
    in 9.4.4.2.

6.  Set the [[Get]] internal method of _obj_ as specified in 9.4.4.3.

7.  Set the [[Set]] internal method of _obj_ as specified in 9.4.4.4.

8.  Set the [[Delete]] internal method of _obj_ as specified in 9.4.4.5.

9.  Set the remainder of _obj_’s essential internal methods to the
    default ordinary object definitions specified in 9.1.

10. Set the [[Prototype]] internal slot of _obj_ to %ObjectPrototype%.

11. Set the [[Extensible]] internal slot of _obj_ to TRUE.

12. Let _parameterNames_ be the BoundNames of _formals_.

13. Let _numberOfParameters_ be the number of elements in
    _parameterNames_

14. Let _index_ be 0.

15. Repeat while _index_ < _len_ ,

    a.  Let _val_ be _argumentsList_[_index_].

    b.  Perform CreateDataProperty(_obj_, ToString(_index_), _val_).

    c.  Let _index_ be _index_ + 1

16. Perform DefinePropertyOrThrow(_obj_, "LENGTH",
    PropertyDescriptor{[[Value]]: _len_, [[Writable]]: TRUE,
    [[Enumerable]]: FALSE, [[Configurable]]: TRUE}).

17. Let _map_ be ObjectCreate(NULL).

18. Let _mappedNames_ be an empty List.

19. Let _index_ be _numberOfParameters_ − 1.

20. Repeat while _index_ ≥ 0 ,

    a.  Let _name_ be _parameterNames_[_index_].

    b.  If _name_ is not an element of _mappedNames_, then

        i.  Add _name_ as an element of the list _mappedNames_.

        ii. If _index_ < _len_, then

            1.  Let _g_ be MakeArgGetter(_name_, _env_).

            2.  Let _p_ be MakeArgSetter(_name_, _env_).

            3.  Call _map_.[[DefineOwnProperty]](ToString(_index_),
                PropertyDescriptor{[[Set]]: _p_, [[Get]]: _g,_
                [[Enumerable]]: FALSE, [[Configurable]]: TRUE}).

    c.  Let _index_ be _index_ − 1

21. Set the [[ParameterMap]] internal slot of _obj_ to _map_.

22. Perform DefinePropertyOrThrow(_obj_, @@iterator, PropertyDescriptor
    {[[Value]]:%ArrayProto_values%, [[Writable]]: TRUE, [[Enumerable]]:
    FALSE, [[Configurable]]: TRUE}).

23. Perform DefinePropertyOrThrow(_obj_, "CALLEE", PropertyDescriptor
    {[[Value]]: _func_, [[Writable]]: TRUE, [[Enumerable]]: FALSE,
    [[Configurable]]: TRUE}).

24. Assert: the above property definitions will not produce an abrupt
    completion.

25. Return _obj

MakeArgGetter ( name, env)

The abstract operation MakeArgGetter called with String _name_ and
Environment Record _env_ creates a built-in function object that when
executed returns the value bound for _name_ in _env_. It performs the
following steps:

1.  Let _realm_ be the current Realm.

2.  Let _steps_ be the steps of an ArgGetter function as specified
    below.

3.  Let _getter_ be CreateBuiltinFunction(_realm_, _steps_,
    %FunctionPrototype%, «‍[[name]], [[env]]» ).

4.  Set _getter’s_ [[name]] internal slot to _name_.

5.  Set _getter’s_ [[env]] internal slot to _env_.

6.  Return _getter_.

An ArgGetter function is an anonymous built-in function with [[name]]
and [[env]] internal slots. When an ArgGetter function _f_ that expects
no arguments is called it performs the following steps:

1.  Let _name_ be the value of _f’s_ [[name]] internal slot.

2.  Let _env_ be the value of _f’s_ [[env]] internal slot

3.  Return _env_.GetBindingValue(_name_, FALSE).

NOTE ArgGetter functions are never directly accessible to ECMAScript
code.

MakeArgSetter ( name, env)

The abstract operation MakeArgSetter called with String _name_ and
Environment Record _env_ creates a built-in function object that when
executed sets the value bound for _name_ in _env_. It performs the
following steps:

1.  Let _realm_ be the current Realm.

2.  Let _steps_ be the steps of an ArgSetter function as specified
    below.

3.  Let _setter_ be CreateBuiltinFunction(_realm_, _steps_,
    %FunctionPrototype%, «‍[[name]], [[env]]» ).

4.  Set _setter’s_ [[name]] internal slot to _name_.

5.  Set _setter’s_ [[env]] internal slot to _env_.

6.  Return _setter_.

An ArgSetter function is an anonymous built-in function with [[name]]
and [[env]] internal slots. When an ArgSetter function _f_ is called
with argument _value_ it performs the following steps:

1.  Let _name_ be the value of _f’s_ [[name]] internal slot.

2.  Let _env_ be the value of _f’s_ [[env]] internal slot

3.  Return _env_.SetMutableBinding(_name_, _value_, FALSE).

NOTE ArgSetter functions are never directly accessible to ECMAScript
code.

Integer Indexed Exotic Objects

An _Integer Indexed object_ is an exotic object that performs special
handling of integer index property keys.

Integer Indexed exotic objects have the same internal slots as ordinary
objects additionally [[ViewedArrayBuffer]], [[ArrayLength]],
[[ByteOffset]], and [[TypedArrayName]] internal slots.

Integer Indexed Exotic objects provide alternative definitions for the
following internal methods. All of the other Integer Indexed exotic
object essential internal methods that are not defined below are as
specified in 9.1.

[[GetOwnProperty]] ( P )

When the [[GetOwnProperty]] internal method of an Integer Indexed exotic
object _O_ is called with property key _P_ the following steps are
taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Assert: _O_ is an Object that has a [[ViewedArrayBuffer]] internal
    slot.

3.  If Type(_P_) is String, then

    a.  Let _numericIndex_ be CanonicalNumericIndexString(_P_).

    b.  Assert: _numericIndex_ is not an abrupt completion.

    c.  If _numericIndex_ is not UNDEFINED, then

        i.  Let _value_ be IntegerIndexedElementGet (_O_,
            _numericIndex_).

        ii. ReturnIfAbrupt(_value_).

        iii. If _value_ is UNDEFINED, return UNDEFINED.

        iv. Return a PropertyDescriptor{ [[Value]]: _value_,
            [[Enumerable]]: TRUE, [[Writable]]: TRUE, [[Configurable]]:
            FALSE }.

4.  Return OrdinaryGetOwnProperty(_O_, _P_).

[[HasProperty]](P)

When the [[HasProperty]] internal method of an Integer Indexed exotic
object _O_ is called with property key _P_, the following steps are
taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Assert: _O_ is an Object that has a [[ViewedArrayBuffer]] internal
    slot.

3.  If Type(_P_) is String, then

    a.  Let _numericIndex_ be CanonicalNumericIndexString(_P_).

    b.  Assert: _numericIndex_ is not an abrupt completion.

    c.  If _numericIndex_ is not UNDEFINED, then

        i.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]]
            internal slot.

        ii. If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR
            exception.

        iii. If IsInteger(_numericIndex_) is FALSE, return FALSE

        iv. If _numericIndex_ = −0, return FALSE.

        v.  If _numericIndex_ < 0, return FALSE.

        vi. If _numericIndex_ ≥ the value of _O_’s [[ArrayLength]]
            internal slot, return FALSE.

        vii. Return TRUE.

4.  Return OrdinaryHasProperty(_O_, _P_).

[[DefineOwnProperty]] ( P, Desc)

When the [[DefineOwnProperty]] internal method of an Integer Indexed
exotic object _O_ is called with property key _P_, and Property
Descriptor _Desc_ the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Assert: _O_ is an Object that has a [[ViewedArrayBuffer]] internal
    slot.

3.  If Type(_P_) is String, then

    a.  Let _numericIndex_ be CanonicalNumericIndexString (_P_).

    b.  Assert: _numericIndex_ is not an abrupt completion.

    c.  If _numericIndex_ is not UNDEFINED, then

        i.  If IsInteger(_numericIndex_) is FALSE, return FALSE

        ii. Let _intIndex_ be _numericIndex_.

        iii. If _intIndex_ = −0, return FALSE.

        iv. If _intIndex_ < 0, return FALSE.

        v.  Let _length_ be the value of _O_’s [[ArrayLength]] internal
            slot.

        vi. If _intIndex_ ≥ _length_, return FALSE.

        vii. If IsAccessorDescriptor(_Desc_) is TRUE, return FALSE.

        viii. If _Desc_ has a [[Configurable]] field and if
            _Desc_.[[Configurable]] is TRUE, return FALSE_._

        ix. If _Desc_ has an [[Enumerable]] field and if
            _Desc_.[[Enumerable]] is FALSE, return FALSE_._

        x.  If _Desc_ has a [[Writable]] field and if
            _Desc_.[[Writable]] is FALSE, return FALSE.

        xi. If _Desc_ has a [[Value]] field, then

            1.  Let _value_ be _Desc_.[[Value]].

            2.  Return IntegerIndexedElementSet (_O_, _intIndex_,
                _value_).

            3.  

        xii. Return TRUE.

4.  Return OrdinaryDefineOwnProperty(_O_, _P_, _Desc_).

[[Get]] (P, Receiver)

When the [[Get]] internal method of an Integer Indexed exotic object _O_
is called with property key _P_ and ECMAScript language value _Receiver_
the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  If Type(_P_) is String and if SameValue(_O_, _Receiver_) is TRUE,
    then

    a.  Let _numericIndex_ be CanonicalNumericIndexString (_P_).

    b.  Assert: _numericIndex_ is not an abrupt completion.

    c.  If _numericIndex_ is not UNDEFINED, then

        i.  Return IntegerIndexedElementGet (_O_, _numericIndex_).

3.  Return the result of calling the default ordinary object [[Get]]
    internal method (9.1.8) on _O_ passing _P_ and _Receiver_ as
    arguments.

[[Set]] ( P, V, Receiver)

When the [[Set]] internal method of an Integer Indexed exotic object _O_
is called with property key _P_, value _V_, and ECMAScript language
value _Receiver_, the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  If Type(_P_) is String and if SameValue(_O_, _Receiver_) is TRUE,
    then

    a.  Let _numericIndex_ be CanonicalNumericIndexString (_P_).

    b.  Assert: _numericIndex_ is not an abrupt completion.

    c.  If _numericIndex_ is not UNDEFINED, then

        i.  Return IntegerIndexedElementSet (_O_, _numericIndex_, _V_).

3.  Return the result of calling the default ordinary object [[Set]]
    internal method (9.1.8) on _O_ passing _P_, _V_, and _Receiver_ as
    arguments.

 

1.  2.  3.  4.  a.  

5.  6.  7.  

[[OwnPropertyKeys]] ()

When the [[OwnPropertyKeys]] internal method of an Integer Indexed
exotic object _O_ is called the following steps are taken:

1.  Let _keys_ be a new empty List.

2.  Assert: _O_ is an Object that has [[ViewedArrayBuffer]],
    [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal
    slots.

3.  Let _len_ be the value of _O_’s [[ArrayLength]] internal slot.

4.  For each integer _i_ starting with 0 such that _i_ < _len_, in
    ascending order,

    a.  Add ToString(_i_) as the last element of _keys_.

5.  For each own property key _P_ of _O_ such that Type(_P_) is String
    and _P_ is not an integer index, in property creation order

    a.  Add _P_ as the last element of _keys_.

6.  For each own property key _P_ of _O_ such that Type(_P_) is Symbol,
    in property creation order

    a.  Add _P_ as the last element of _keys_.

7.  Return _keys_.

IntegerIndexedObjectCreate (prototype, internalSlotsList)

The abstract operation IntegerIndexedObjectCreate with arguments
_prototype_ and _internalSlotsList_ is used to specify the creation of
new Integer Indexed exotic objects. The argument _internalSlotsList_ is
a List of the names of additional internal slots that must be defined as
part of the object. IntegerIndexedObjectCreate performs the following
steps:

1.  Let _A_ be a newly created object with an internal slot for each
    name in _internalSlotsList_.

2.  Set _A_’s essential internal methods to the default ordinary object
    definitions specified in 9.1.

3.  Set the [[GetOwnProperty]] internal method of _A_ as specified in
    9.4.5.1.

4.  Set the [[HasProperty]] internal method of _A_ as specified in
    9.4.5.2.

5.  Set the [[DefineOwnProperty]] internal method of _A_ as specified in
    9.4.5.3.

6.  Set the [[Get]] internal method of _A_ as specified in 9.4.5.4.

7.  Set the [[Set]] internal method of _A_ as specified in 9.4.5.5.

8.  9.  Set the [[OwnPropertyKeys]] internal method of _A_ as specified
    in 9.4.5.6.

10. Set the [[Prototype]] internal slot of _A_ to _prototype_.

11. Set the [[Extensible]] internal slot of _A_ to TRUE.

12. Return _A_.

IntegerIndexedElementGet ( O, index )

The abstract operation IntegerIndexedElementGet with arguments _O_ and
_index_ performs the following steps:

1.  Assert: Type(_index_) is Number.

2.  Assert: _O_ is an Object that has [[ViewedArrayBuffer]],
    [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal
    slots.

3.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

4.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

5.  If IsInteger(_index_) is FALSE, return UNDEFINED

6.  If _index_ = −0, return UNDEFINED.

7.  Let _length_ be the value of _O_’s [[ArrayLength]] internal slot.

8.  If _index_ < 0 or _index_ ≥ _length_, return UNDEFINED.

9.  Let _offset_ be the value of _O_’s [[ByteOffset]] internal slot.

10. Let _arrayTypeName_ be the string value of _O_’s [[TypedArrayName]]
    internal slot.

11. Let _elementSize_ be the Number value of the Element Size value
    specified in Table 49 for _arrayTypeName_.

12. Let _indexedPosition_ = (_index_ × _elementSize_) + _offset_.

13. Let _elementType_ be the string value of the Element Type value in
    Table 49 for _arrayTypeName_.

14. Return GetValueFromBuffer(_buffer_, _indexedPosition_,
    _elementType_).

IntegerIndexedElementSet ( O, index, value )

The abstract operation IntegerIndexedElementSet with arguments _O_,
_index_, and _value_ performs the following steps:

1.  Assert: Type(_index_) is Number.

2.  Assert: _O_ is an Object that has [[ViewedArrayBuffer]],
    [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal
    slots.

3.  Let _numValue_ be ToNumber(_value_).

4.  ReturnIfAbrupt(_numValue_).

5.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

6.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

7.  If IsInteger(_index_) is FALSE, return FALSE

8.  If _index_ = −0, return FALSE.

9.  Let _length_ be the value of _O_’s [[ArrayLength]] internal slot.

10. If _index_ < 0 or _index_ ≥ _length_, return FALSE.

11. Let _offset_ be the value of _O_’s [[ByteOffset]] internal slot.

12. Let _arrayTypeName_ be the string value of _O_’s [[TypedArrayName]]
    internal slot.

13. Let _elementSize_ be the Number value of the Element Size value
    specified in Table 49 for _arrayTypeName_.

14. Let _indexedPosition_ = (_index_ × _elementSize_) + _offset_.

15. Let _elementType_ be the string value of the Element Type value in
    Table 49 for _arrayTypeName_.

16. Let _status_ be SetValueInBuffer(_buffer_, _indexedPosition_,
    _elementType_, _numValue_).

17. ReturnIfAbrupt(_status_).

18. Return TRUE.

Module Namespace Exotic Objects

A _module namespace object_ is an exotic object that exposes the
bindings exported from an ECMAScript _Module_ (See 15.2.3). There is a
one-to-one correspondence between the String-keyed own properties of a
module namespace exotic object and the binding names exported by the
_Module_. The exported bindings include any bindings that are indirectly
exported using export * export items. Each String-valued own property
key is the StringValue of the corresponding exported binding name. These
are the only String-keyed properties of a module namespace exotic
object. Each such property has the attributes {[[Configurable]]: FALSE,
[[Enumerable]]: TRUE}. Module namespace objects are not extensible.

Module namespace objects have the internal slots defined in Table 29.

Table 29 — Internal Slots of Module Namespace Exotic Objects

  _INTERNAL SLOT_   _TYPE_           _DESCRIPTION_
  ----------------- ---------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[Module]]        Module Record    The Module Record whose exports this namespace exposes.
  [[Exports]]       List of String   A List containing the String values of the exported names exposed as own properties of this object. The list is ordered as if an Array of those string values had been sorted using ARRAY.PROTOTYPE.SORT using SortCompare as _comparefn._

Module namespace exotic objects provide alternative definitions for all
of the internal methods.

[[GetPrototypeOf]] ( )

When the [[GetPrototypeOf]] internal method of a module namespace exotic
object _O_ is called the following steps are taken:

1.  Return NULL.

[[SetPrototypeOf]] (V)

When the [[SetPrototypeOf]] internal method of a module namespace exotic
object _O_ is called with argument _V_ the following steps are taken:

1.  Assert: Either Type(_V_) is Object or Type(_V_) is Null.

2.  Return FALSE.

[[IsExtensible]] ( )

When the [[IsExtensible]] internal method of a module namespace exotic
object _O_ is called the following steps are taken:

1.  Return FALSE.

[[PreventExtensions]] ( )

When the [[PreventExtensions]] internal method of a module namespace
exotic object _O_ is called the following steps are taken:

1.  Return TRUE.

[[GetOwnProperty]] (P)

When the [[GetOwnProperty]] internal method of a module namespace exotic
object _O_ is called with property key _P_, the following steps are
taken:

1.  If Type(_P_) is Symbol, return OrdinaryGetOwnProperty(_O_, _P_).

2.  Let _exports_ be the value of _O_’s [[Exports]] internal slot.

3.  If _P_ is not an element of _exports_, return UNDEFINED.

4.  Let _value_ be _O_.[[Get]](_P_, _O_).

5.  ReturnIfAbrupt(value).

6.  Return PropertyDescriptor{[[Value]]: _value_, [[Writable]]: TRUE,
    [[Enumerable]]: TRUE, [[Configurable]]: FALSE }.

[[DefineOwnProperty]] (P, Desc)

When the [[DefineOwnProperty]] internal method of a module namespace
exotic object _O_ is called with property key _P_ and Property
Descriptor _Desc_, the following steps are taken:

1.  Return FALSE.

[[HasProperty]] (P)

When the [[HasProperty]] internal method of a module namespace exotic
object _O_ is called with property key _P_, the following steps are
taken:

1.  If Type(_P_) is Symbol, return OrdinaryHasProperty(_O_, _P_).

2.  Let _exports_ be the value of _O_’s [[Exports]] internal slot.

3.  If _P_ is an element of _exports_, return TRUE.

4.  Return FALSE.

 [[Get]] (P, Receiver)

When the [[Get]] internal method of a module namespace exotic object _O_
is called with property key _P_ and ECMAScript language value _Receiver_
the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  If Type(_P_) is Symbol, then

    a.  Return the result of calling the default ordinary object [[Get]]
        internal method (9.1.8) on _O_ passing _P_ and _Receiver_ as
        arguments.

3.  Let _exports_ be the value of _O_’s [[Exports]] internal slot.

4.  If _P_ is not an element of _exports_, return UNDEFINED.

5.  Let _m_ be the value of _O_’s [[Module]] internal slot.

6.  Let _binding_ be _m_.ResolveExport(_P_, «», «»).

7.  ReturnIfAbrupt(_binding_).

8.  Assert: _binding_ is neither NULL nor "AMBIGUOUS".

9.  Let _targetModule_ be _binding_.[[module]],

10. Assert: _targetModule_ is not UNDEFINED.

11. Let _targetEnv_ be _targetModule_.[[Environment]].

12. If _targetEnv_ is UNDEFINED, throw a REFERENCEERROR exception.

13. Let _targetEnvRec_ be _targetEnv_’s EnvironmentRecord.

14. Return _targetEnvRec_.GetBindingValue(_binding._[[bindingName]],
    TRUE).

NOTE ResolveExport is idempotent and side-effect free. An implementation
might choose to pre-compute or cache the ResolveExport results for the
[[Exports]] of each module namespace exotic object.

[[Set]] ( P, V, Receiver)

When the [[Set]] internal method of a module namespace exotic object _O_
is called with property key _P_, value _V_, and ECMAScript language
value _Receiver_, the following steps are taken:

1.  Return FALSE.

[[Delete]] (P)

When the [[Delete]] internal method of a module namespace exotic object
_O_ is called with property key _P_ the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _exports_ be the value of _O_’s [[Exports]] internal slot.

3.  If _P_ is an element of _exports_, return FALSE.

4.  Return TRUE.

[[Enumerate]] ()

When the [[Enumerate]] internal method of a module namespace exotic
object _O_ is called the following steps are taken:

1.  Let _exports_ be the value of _O_’s [[Exports]] internal slot.

2.  Return CreateListIterator(_exports_).

[[OwnPropertyKeys]] ( )

When the [[OwnPropertyKeys]] internal method of a module namespace
exotic object _O_ is called the following steps are taken:

1.  Let _exports_ be a copy of the value of _O_’s [[Exports]] internal
    slot.

2.  Let _symbolKeys_ be the result of calling the default ordinary
    object [[OwnPropertyKeys]] internal method (9.1.12) on _O_ passing
    no arguments.

3.  Append all the entries of _symbolKeys_ to the end of _exports_.

4.  Return _exports_.

ModuleNamespaceCreate (module, exports)

The abstract operation ModuleNamespaceCreate with arguments _module_,
and _exports_ is used to specify the creation of new module namespace
exotic objects. It performs the following steps:

1.  Assert: _module_ is a Module Record (see 15.2.1.14).

2.  Assert: _module_.[[Namespace]] is UNDEFINED.

3.  Assert: _exports_ is a List of string values.

4.  Let _M_ be a newly created object.

5.  Set _M_’s essential internal methods to the definitions specified in
    9.4.6.

6.  Set _M_’s [[Module]] internal slot to _module_.

7.  Set _M_’s [[Exports]] internal slot to _exports_.

8.  Create own properties of _M_ corresponding to the definitions in
    26.3.

9.  Set _module_.[[Namespace]] to _M_.

10. Return _M_.


Proxy Object Internal Methods and Internal Slots

A proxy object is an exotic object whose essential internal methods are
partially implemented using ECMAScript code. Every proxy objects has an
internal slot called [[ProxyHandler]]. The value of [[ProxyHandler]] is
an object, called the proxy’s _handler object_, or NULL. Methods (see
Table 30) of a handler object may be used to augment the implementation
for one or more of the proxy object’s internal methods. Every proxy
object also has an internal slot called [[ProxyTarget]] whose value is
either an object or the NULL value. This object is called the proxy’s
_target object_.

Table 30 — Proxy Handler Methods

  _INTERNAL METHOD_       _HANDLER METHOD_
  ----------------------- --------------------------
  [[GetPrototypeOf]]      GETPROTOTYPEOF
  [[SetPrototypeOf]]      SETPROTOTYPEOF
  [[IsExtensible]]        ISEXTENSIBLE
  [[PreventExtensions]]   PREVENTEXTENSIONS
  [[GetOwnProperty]]      GETOWNPROPERTYDESCRIPTOR
  [[HasProperty]]         HAS
  [[Get]]                 GET
  [[Set]]                 SET
  [[Delete]]              DELETEPROPERTY
  [[DefineOwnProperty]]   DEFINEPROPERTY
  [[Enumerate]]           ENUMERATE
  [[OwnPropertyKeys]]     OWNKEYS
  [[Call]]                APPLY
  [[Construct]]           CONSTRUCT

When a handler method is called to provide the implementation of a proxy
object internal method, the handler method is passed the proxy’s target
object as a parameter. A proxy’s handler object does not necessarily
have a method corresponding to every essential internal method. Invoking
an internal method on the proxy results in the invocation of the
corresponding internal method on the proxy’s target object if the
handler object does not have a method corresponding to the internal
trap.

The [[ProxyHandler]] and [[ProxyTarget]] internal slots of a proxy
object are always initialized when the object is created and typically
may not be modified. Some proxy objects are created in a manner that
permits them to be subsequently _revoked_. When a proxy is revoked, its
[[ProxyHander]] and [[ProxyTarget]] internal slots are set to NULL
causing subsequent invocations of internal methods on that proxy object
to throw a TYPEERROR exception.

Because proxy objects permit the implementation of internal methods to
be provided by arbitrary ECMAScript code, it is possible to define a
proxy object whose handler methods violates the invariants defined in
6.1.7.3. Some of the internal method invariants defined in 6.1.7.3 are
essential integrity invariants. These invariants are explicitly enforced
by the proxy object internal methods specified in this section. An
ECMAScript implementation must be robust in the presence of all possible
invariant violations.

In the following algorithm descriptions, assume _O_ is an ECMAScript
proxy object, _P_ is a property key value, _V_ is any ECMAScript
language value and Desc is a Property Descriptor record.

[[GetPrototypeOf]] ( )

When the [[GetPrototypeOf]] internal method of a Proxy exotic object _O_
is called the following steps are taken:

1.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

2.  If _handler_ is NULL, throw a TYPEERROR exception.

3.  Assert: Type(_handler_) is Object.

4.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

5.  Let _trap_ be GetMethod(_handler_, "GETPROTOTYPEOF").

6.  ReturnIfAbrupt(_trap_).

7.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[GetPrototypeOf]]().

8.  Let _handlerProto_ be Call(_trap_, _handler_, «_target_»).

9.  ReturnIfAbrupt(_handlerProto_).

10. If Type(_handlerProto_) is neither Object nor Null, throw a
    TYPEERROR exception.

11. Let _extensibleTarget_ be IsExtensible(_target_).

12. ReturnIfAbrupt(_extensibleTarget_).

13. If _extensibleTarget_ is TRUE, return _handlerProto_.

14. Let _targetProto_ be _target_.[[GetPrototypeOf]]().

15. ReturnIfAbrupt(_targetProto_).

16. If SameValue(_handlerProto_, _targetProto_) is FALSE, throw a
    TYPEERROR exception.

17. Return _handlerProto_.

NOTE [[GetPrototypeOf]] for proxy objects enforces the following
invariant:

-   The result of [[GetPrototypeOf]] must be either an Object or NULL.

-   If the target object is not extensible, [[GetPrototypeOf]] applied
    to the proxy object must return the same value as [[GetPrototypeOf]]
    applied to the proxy object’s target object.

[[SetPrototypeOf]] (V)

When the [[SetPrototypeOf]] internal method of a Proxy exotic object _O_
is called with argument _V_ the following steps are taken:

1.  Assert: Either Type(_V_) is Object or Type(_V_) is Null.

2.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

3.  If _handler_ is NULL, throw a TYPEERROR exception.

4.  Assert: Type(_handler_) is Object.

5.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

6.  Let _trap_ be GetMethod(_handler_, "SETPROTOTYPEOF").

7.  ReturnIfAbrupt(_trap_).

8.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[SetPrototypeOf]](_V_).

9.  Let _booleanTrapResult_ be ToBoolean(Call(_trap_, _handler_,
    «_target_, _V_»)).

10. ReturnIfAbrupt(_booleanTrapResult_).

11. Let _extensibleTarget_ be IsExtensible(_target_).

12. ReturnIfAbrupt(_extensibleTarget_).

13. If _extensibleTarget_ is TRUE, return _booleanTrapResult_.

14. Let _targetProto_ be _target_.[[GetPrototypeOf]]().

15. ReturnIfAbrupt(_targetProto_).

16. If _booleanTrapResult_ is TRUE and SameValue(_V_, _targetProto_) is
    FALSE, throw a TYPEERROR exception.

17. Return _booleanTrapResult_.

NOTE [[SetPrototypeOf]] for proxy objects enforces the following
invariant:

-   The result of [[SetPrototypeOf]] is a Boolean value.

-   If the target object is not extensible, the argument value must be
    the same as the result of [[GetPrototypeOf]] applied to target
    object.

[[IsExtensible]] ( )

When the [[IsExtensible]] internal method of a Proxy exotic object _O_
is called the following steps are taken:

1.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

2.  If _handler_ is NULL, throw a TYPEERROR exception.

3.  Assert: Type(_handler_) is Object.

4.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

5.  Let _trap_ be GetMethod(_handler_, "ISEXTENSIBLE").

6.  ReturnIfAbrupt(_trap_).

7.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[IsExtensible]]().

8.  Let _booleanTrapResult_ be ToBoolean(Call(_trap_, _handler_,
    «_target_»)).

9.  ReturnIfAbrupt(_booleanTrapResult_).

10. Let _targetResult_ be _target_.[[IsExtensible]]().

11. ReturnIfAbrupt(_targetResult_).

12. If SameValue(_booleanTrapResult_, _targetResult_) is FALSE, throw a
    TYPEERROR exception.

13. Return _booleanTrapResult_.

NOTE [[IsExtensible]] for proxy objects enforces the following
invariant:

-   The result of [[IsExtensible]] is a Boolean value.

-   [[IsExtensible]] applied to the proxy object must return the same
    value as [[IsExtensible]] applied to the proxy object’s target
    object with the same argument.

[[PreventExtensions]] ( )

When the [[PreventExtensions]] internal method of a Proxy exotic object
_O_ is called the following steps are taken:

1.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

2.  If _handler_ is NULL, throw a TYPEERROR exception.

3.  Assert: Type(_handler_) is Object.

4.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

5.  Let _trap_ be GetMethod(_handler_, "PREVENTEXTENSIONS").

6.  ReturnIfAbrupt(_trap_).

7.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[PreventExtensions]]().

8.  Let _booleanTrapResult_ be ToBoolean(Call(_trap_, _handler_,
    «_target_»)).

9.  ReturnIfAbrupt(_booleanTrapResult_).

10. If _booleanTrapResult_ is TRUE, then

    a.  Let _targetIsExtensible_ be _target_.[[IsExtensible]]().

    b.  ReturnIfAbrupt(_targetIsExtensible_).

    c.  If _targetIsExtensible_ is TRUE, throw a TYPEERROR exception.

11. Return _booleanTrapResult_.

NOTE [[PreventExtensions]] for proxy objects enforces the following
invariant:

-   The result of [[PreventExtensions]] is a Boolean value.

-   [[PreventExtensions]] applied to the proxy object only returns TRUE
    if [[IsExtensible]] applied to the proxy object’s target object is
    FALSE.

 [[GetOwnProperty]] (P)

When the [[GetOwnProperty]] internal method of a Proxy exotic object _O_
is called with property key _P_, the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

3.  If _handler_ is NULL, throw a TYPEERROR exception.

4.  Assert: Type(_handler_) is Object.

5.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

6.  Let _trap_ be GetMethod(_handler_, "GETOWNPROPERTYDESCRIPTOR").

7.  ReturnIfAbrupt(_trap_).

8.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[GetOwnProperty]](_P_).

9.  Let _trapResultObj_ be Call(_trap_, _handler_, «_target_, _P_»).

10. ReturnIfAbrupt(_trapResultObj_).

11. If Type(_trapResultObj_) is neither Object nor Undefined, throw a
    TYPEERROR exception.

12. Let _targetDesc_ be _target_.[[GetOwnProperty]](_P_).

13. ReturnIfAbrupt(_targetDesc_).

14. If _trapResultObj_ is UNDEFINED, then

    a.  If _targetDesc_ is UNDEFINED, return UNDEFINED.

    b.  If _targetDesc_.[[Configurable]] is FALSE, throw a TYPEERROR
        exception.

    c.  Let _extensibleTarget_ be IsExtensible(_target_).

    d.  ReturnIfAbrupt(_extensibleTarget_).

    e.  If ToBoolean(_extensibleTarget_) is FALSE, throw a TYPEERROR
        exception.

    f.  Return UNDEFINED.

15. Let _extensibleTarget_ be IsExtensible(_target_).

16. ReturnIfAbrupt(_extensibleTarget_).

17. Let _resultDesc_ be ToPropertyDescriptor(_trapResultObj_).

18. ReturnIfAbrupt(_resultDesc_).

19. Call CompletePropertyDescriptor(_resultDesc_).

20. Let _valid_ be IsCompatiblePropertyDescriptor (_extensibleTarget_,
    _resultDesc_, _targetDesc_).

21. If _valid_ is FALSE, throw a TYPEERROR exception.

22. If _resultDesc_.[[Configurable]] is FALSE, then

    a.  If _targetDesc_ is UNDEFINED or _targetDesc_.[[Configurable]] is
        TRUE_,_ then

        i.  Throw a TYPEERROR exception.

23. Return _resultDesc_.

NOTE [[GetOwnProperty]] for proxy objects enforces the following
invariants:

-   The result of [[GetOwnProperty]] must be either an Object or
    UNDEFINED.

-   A property cannot be reported as non-existent, if it exists as a
    non-configurable own property of the target object.

-   A property cannot be reported as non-existent, if it exists as an
    own property of the target object and the target object is not
    extensible.

-   A property cannot be reported as existent, if it does not exists as
    an own property of the target object and the target object is not
    extensible.

-   A property cannot be reported as non-configurable, if it does not
    exists as an own property of the target object or if it exists as a
    configurable own property of the target object.

 [[DefineOwnProperty]] (P, Desc)

When the [[DefineOwnProperty]] internal method of a Proxy exotic object
_O_ is called with property key _P_ and Property Descriptor _Desc_, the
following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

3.  If _handler_ is NULL, throw a TYPEERROR exception.

4.  Assert: Type(_handler_) is Object.

5.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

6.  Let _trap_ be GetMethod(_handler_, "DEFINEPROPERTY").

7.  ReturnIfAbrupt(_trap_).

8.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[DefineOwnProperty]](_P_, _Desc_).

9.  Let _descObj_ be FromPropertyDescriptor(_Desc_).

10. Let _booleanTrapResult_ be ToBoolean(Call(_trap_, _handler_,
    «_target_, _P_, _descObj_»)).

11. ReturnIfAbrupt(_booleanTrapResult_).

12. If _booleanTrapResult_ is FALSE, return FALSE.

13. Let _targetDesc_ be _target_.[[GetOwnProperty]](_P_).

14. ReturnIfAbrupt(_targetDesc_).

15. Let _extensibleTarget_ be IsExtensible(_target_).

16. ReturnIfAbrupt(_extensibleTarget_).

17. If _Desc_ has a [[Configurable]] field and if
    _Desc_.[[Configurable]] is FALSE, then

    a.  Let _settingConfigFalse_ be TRUE.

18. Else let _settingConfigFalse_ be FALSE.

19. If _targetDesc_ is UNDEFINED, then

    a.  If _extensibleTarget_ is FALSE, throw a TYPEERROR exception.

    b.  If _settingConfigFalse_ is TRUE, throw a TYPEERROR exception.

20. Else _targetDesc_ is not UNDEFINED_,

    a.  If IsCompatiblePropertyDescriptor(_extensibleTarget_, _Desc_ ,
        _targetDesc_) is FALSE, throw a TYPEERROR exception.

    b.  If _settingConfigFalse_ is TRUE and
        _targetDesc_.[[Configurable]] is TRUE, throw a TYPEERROR
        exception.

21. Return TRUE.

NOTE [[DefineOwnProperty]] for proxy objects enforces the following
invariants:

-   The result of [[DefineOwnProperty]] is a Boolean value.

-   A property cannot be added, if the target object is not extensible.

-   A property cannot be non-configurable, unless there exists a
    corresponding non-configurable own property of the target object.

-   If a property has a corresponding target object property then
    applying the Property Descriptor of the property to the target
    object using [[DefineOwnProperty]] will not throw an exception.

[[HasProperty]] (P)

When the [[HasProperty]] internal method of a Proxy exotic object _O_ is
called with property key _P_, the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

3.  If _handler_ is NULL, throw a TYPEERROR exception.

4.  Assert: Type(_handler_) is Object.

5.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

6.  Let _trap_ be GetMethod(_handler_, "HAS").

7.  ReturnIfAbrupt(_trap_).

8.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[HasProperty]](_P_).

9.  Let _booleanTrapResult_ be ToBoolean(Call(_trap_, _handler_,
    «_target_, _P_»)).

10. ReturnIfAbrupt(_booleanTrapResult_).

11. If _booleanTrapResult_ is FALSE, then

    a.  Let _targetDesc_ be _target_.[[GetOwnProperty]](_P_).

    b.  ReturnIfAbrupt(_targetDesc_).

    c.  If _targetDesc_ is not UNDEFINED, then

        i.  If _targetDesc_.[[Configurable]] is FALSE, throw a TYPEERROR
            exception.

        ii. Let _extensibleTarget_ be IsExtensible(_target_).

        iii. ReturnIfAbrupt(_extensibleTarget_).

        iv. If _extensibleTarget_ is FALSE, throw a TYPEERROR exception.

12. Return _booleanTrapResult_.

NOTE [[HasProperty]] for proxy objects enforces the following
invariants:

-   The result of [[HasProperty]] is a Boolean value.

-   A property cannot be reported as non-existent, if it exists as a
    non-configurable own property of the target object.

-   A property cannot be reported as non-existent, if it exists as an
    own property of the target object and the target object is not
    extensible.

[[Get]] (P, Receiver)

When the [[Get]] internal method of a Proxy exotic object _O_ is called
with property key _P_ and ECMAScript language value _Receiver_ the
following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

3.  If _handler_ is NULL, throw a TYPEERROR exception.

4.  Assert: Type(_handler_) is Object.

5.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

6.  Let _trap_ be GetMethod(_handler_, "GET").

7.  ReturnIfAbrupt(_trap_).

8.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[Get]](_P_, _Receiver_).

9.  Let _trapResult_ be Call(_trap_, _handler_, «_target_, _P_,
    _Receiver_»).

10. ReturnIfAbrupt(_trapResult_).

11. Let _targetDesc_ be _target_.[[GetOwnProperty]](_P_).

12. ReturnIfAbrupt(_targetDesc_).

13. If _targetDesc_ is not UNDEFINED, then

    a.  If IsDataDescriptor(_targetDesc_) and
        _targetDesc_.[[Configurable]] is FALSE and
        _targetDesc_.[[Writable]] is FALSE, then

        i.  If SameValue(_trapResult_, _targetDesc_.[[Value]]) is FALSE,
            throw a TYPEERROR exception.

    b.  If IsAccessorDescriptor(_targetDesc_) and
        _targetDesc_.[[Configurable]] is FALSE and _targetDesc_.[[Get]]
        is UNDEFINED, then

        i.  If _trapResult_ is not UNDEFINED, throw a TYPEERROR
            exception.

14. Return _trapResult_.

NOTE [[Get]] for proxy objects enforces the following invariants:

-   The value reported for a property must be the same as the value of
    the corresponding target object property if the target object
    property is a non-writable, non-configurable own data property.

-   The value reported for a property must be UNDEFINED if the
    corresponding target object property is a non-configurable own
    accessor property that has UNDEFINED as its [[Get]] attribute.

[[Set]] ( P, V, Receiver)

When the [[Set]] internal method of a Proxy exotic object _O_ is called
with property key _P_, value _V_, and ECMAScript language value
_Receiver_, the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

3.  If _handler_ is NULL, throw a TYPEERROR exception.

4.  Assert: Type(_handler_) is Object.

5.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

6.  Let _trap_ be GetMethod(_handler_, "SET").

7.  ReturnIfAbrupt(_trap_).

8.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[Set]](_P_, _V_, _Receiver_).

9.  Let _booleanTrapResult_ be ToBoolean(Call(_trap_, _handler_,
    «_target_, _P_, _V_, _Receiver_»)).

10. ReturnIfAbrupt(_booleanTrapResult_).

11. If _booleanTrapResult_ is FALSE, return FALSE.

12. Let _targetDesc_ be _target_.[[GetOwnProperty]](_P_).

13. ReturnIfAbrupt(_targetDesc_).

14. If _targetDesc_ is not UNDEFINED, then

    a.  If IsDataDescriptor(_targetDesc_) and
        _targetDesc_.[[Configurable]] is FALSE and
        _targetDesc_.[[Writable]] is FALSE, then

        i.  If SameValue(_V_, _targetDesc_.[[Value]]) is FALSE, throw a
            TYPEERROR exception.

    b.  If IsAccessorDescriptor(_targetDesc_) and
        _targetDesc_.[[Configurable]] is FALSE, then

        i.  If _targetDesc_.[[Set]] is UNDEFINED, throw a TYPEERROR
            exception.

15. Return TRUE.

NOTE [[Set]] for proxy objects enforces the following invariants:

-   The result of [[Set]] is a Boolean value.

-   Cannot change the value of a property to be different from the value
    of the corresponding target object property if the corresponding
    target object property is a non-writable, non-configurable own data
    property.

-   Cannot set the value of a property if the corresponding target
    object property is a non-configurable own accessor property that has
    UNDEFINED as its [[Set]] attribute.

 [[Delete]] (P)

When the [[Delete]] internal method of a Proxy exotic object _O_ is
called with property key _P_ the following steps are taken:

1.  Assert: IsPropertyKey(_P_) is TRUE.

2.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

3.  If _handler_ is NULL, throw a TYPEERROR exception.

4.  Assert: Type(_handler_) is Object.

5.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

6.  Let _trap_ be GetMethod(_handler_, "DELETEPROPERTY").

7.  ReturnIfAbrupt(_trap_).

8.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[Delete]](_P_).

9.  Let _booleanTrapResult_ be ToBoolean(Call(_trap_, _handler_,
    «_target_, _P_»)).

10. ReturnIfAbrupt(_booleanTrapResult_).

11. If _booleanTrapResult_ is FALSE, return FALSE.

12. Let _targetDesc_ be _target_.[[GetOwnProperty]](_P_).

13. ReturnIfAbrupt(_targetDesc_).

14. If _targetDesc_ is UNDEFINED, return TRUE.

15. If _targetDesc_.[[Configurable]] is FALSE, throw a TYPEERROR
    exception.

16. Return TRUE.

NOTE [[Delete]] for proxy objects enforces the following invariant:

-   The result of [[Delete]] is a Boolean value.

-   A property cannot be reported as deleted, if it exists as a
    non-configurable own property of the target object.

[[Enumerate]] ()

When the [[Enumerate]] internal method of a Proxy exotic object _O_ is
called the following steps are taken:

1.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

2.  If _handler_ is NULL, throw a TYPEERROR exception.

3.  Assert: Type(_handler_) is Object.

4.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

5.  Let _trap_ be GetMethod(_handler_, "ENUMERATE").

6.  ReturnIfAbrupt(_trap_).

7.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[Enumerate]]().

8.  Let _trapResult_ be Call(_trap_, _handler_, «_target_»).

9.  ReturnIfAbrupt(_trapResult_).

10. If Type(_trapResult_) is not Object, throw a TYPEERROR exception.

11. Return _trapResult_.

NOTE [[Enumerate]] for proxy objects enforces the following invariants:

-   The result of [[Enumerate]] must be an Object.

[[OwnPropertyKeys]] ( )

When the [[OwnPropertyKeys]] internal method of a Proxy exotic object
_O_ is called the following steps are taken:

1.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

2.  If _handler_ is NULL, throw a TYPEERROR exception.

3.  Assert: Type(_handler_) is Object.

4.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

5.  Let _trap_ be GetMethod(_handler_, "OWNKEYS").

6.  ReturnIfAbrupt(_trap_).

7.  If _trap_ is UNDEFINED, then

    a.  Return _target_.[[OwnPropertyKeys]]().

8.  Let _trapResultArray_ be Call(_trap_, _handler_, «_target_»).

9.  Let _trapResult_ be CreateListFromArrayLike(_trapResultArray_,
    «‍String, Symbol»).

10. ReturnIfAbrupt(_trapResult_).

11. Let _extensibleTarget_ be IsExtensible(_target_).

12. ReturnIfAbrupt(_extensibleTarget_).

13. Let _targetKeys_ be _target_.[[OwnPropertyKeys]]().

14. ReturnIfAbrupt(_targetKeys_).

15. Assert: _targetKeys_ is a List containing only String and Symbol
    values.

16. Let _targetConfigurableKeys_ be an empty List.

17. Let _targetNonconfigurableKeys_ be an empty List.

18. Repeat, for each element _key_ of _targetKeys_,

    a.  Let _desc_ be _target_.[[GetOwnProperty]](_key_).

    b.  ReturnIfAbrupt(_desc_).

    c.  If _desc_ is not UNDEFINED and _desc._[[Configurable]] is FALSE,
        then

        i.  Append _key_ as an element of _targetNonconfigurableKeys_.

    d.  Else,

        i.  Append _key_ as an element of _targetConfigurableKeys_.

19. If _extensibleTarget_ is TRUE and _targetNonconfigurableKeys_ is
    empty, then

    a.  Return _trapResult_.

20. Let _uncheckedResultKeys_ be a new List which is a copy of
    _trapResult_.

21. Repeat, for each _key_ that is an element of
    _targetNonconfigurableKeys_,

    a.  If _key_ is not an element of _uncheckedResultKeys_, throw a
        TYPEERROR exception.

    b.  Remove _key_ from _uncheckedResultKeys_

22. If _extensibleTarget_ is TRUE, return _trapResult_.

23. Repeat, for each _key_ that is an element of
    _targetConfigurableKeys_,

    a.  If _key_ is not an element of _uncheckedResultKeys_, throw a
        TYPEERROR exception.

    b.  Remove _key_ from _uncheckedResultKeys_

24. If _uncheckedResultKeys_ is not empty, throw a TYPEERROR exception.

25. Return _trapResult_.

NOTE [[OwnPropertyKeys]] for proxy objects enforces the following
invariants:

-   The result of [[OwnPropertyKeys]] is a List.

-   The Type of each result List element is either String or Symbol.

-   The result List must contain the keys of all non-configurable own
    properties of the target object.

-   If the target object is not extensible, then the result List must
    contain all the keys of the own properties of the target object and
    no other values.

[[Call]] (thisArgument, argumentsList) 

The [[Call]] internal method of a Proxy exotic object _O_ is called with
parameters _thisArgument_ and _argumentsList_, a List of ECMAScript
language values. The following steps are taken:

1.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

2.  If _handler_ is NULL, throw a TYPEERROR exception.

3.  Assert: Type(_handler_) is Object.

4.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

5.  Let _trap_ be GetMethod(_handler_, "APPLY").

6.  ReturnIfAbrupt(_trap_).

7.  If _trap_ is UNDEFINED, then

    a.  Return Call(_target_, _thisArgument_, _argumentsList_).

8.  Let _argArray_ be CreateArrayFromList(_argumentsList_).

9.  Return Call(_trap_, _handler_, «_target_, _thisArgument_,
    _argArray_»).

NOTE A Proxy exotic object only has a [[Call]] internal method if the
initial value of its [[ProxyTarget]] internal slot is an object that has
a [[Call]] internal method.

[[Construct]] ( argumentsList, newTarget)

The [[Construct]] internal method of a Proxy exotic object _O_ is called
with parameters _argumentsList_ which is a possibly empty List of
ECMAScript language values and _newTarget_. The following steps are
taken:

1.  Let _handler_ be the value of the [[ProxyHandler]] internal slot of
    _O_.

2.  If _handler_ is NULL, throw a TYPEERROR exception.

3.  Assert: Type(_handler_) is Object.

4.  Let _target_ be the value of the [[ProxyTarget]] internal slot of
    _O_.

5.  Let _trap_ be GetMethod(_handler_, "CONSTRUCT").

6.  ReturnIfAbrupt(_trap_).

7.  If _trap_ is UNDEFINED, then

    a.  Assert: _target_ has a [[Construct]] internal method.

    b.  Return Construct(_target_, _argumentsList_, _newTarget_).

8.  Let _argArray_ be CreateArrayFromList(_argumentsList_).

9.  Let _newObj_ be Call(_trap_, _handler_, «_target_, _argArray_,
    _newTarget_ »).

10. ReturnIfAbrupt(_newObj_).

11. If Type(_newObj_) is not Object, throw a TYPEERROR exception.

12. Return _newObj_.

NOTE 1 A Proxy exotic object only has a [[Construct]] internal method if
the initial value of its [[ProxyTarget]] internal slot is an object that
has a [[Construct]] internal method.

NOTE 2 [[Construct]] for proxy objects enforces the following
invariants:

-   The result of [[Construct]] must be an Object.

ProxyCreate(target, handler)

The abstract operation ProxyCreate with arguments _target_ and _handler_
is used to specify the creation of new Proxy exotic objects. It performs
the following steps:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  If _target_ is a Proxy exotic object and the value of the
    [[ProxyHandler]] internal slot of _target_ is NULL, throw a
    TYPEERROR exception.

3.  If Type(_handler_) is not Object, throw a TYPEERROR exception.

4.  If _handler_ is a Proxy exotic object and the value of the
    [[ProxyHandler]] internal slot of _handler_ is NULL, throw a
    TYPEERROR exception.

5.  Let _P_ be a newly created object.

6.  Set _P_’s essential internal methods (except for [[Call]] and
    [[Construct]]) to the definitions specified in 9.5.

7.  If IsCallable(_target_) is TRUE, then

    a.  Set the [[Call]] internal method of _P_ as specified in 9.5.13.

    b.  If _target_ has a [[Construct]] internal method, then

        i.  Set the [[Construct]] internal method of _P_ as specified in
            9.5.14.

8.  Set the [[ProxyTarget]] internal slot of _P_ to _target_.

9.  Set the [[ProxyHandler]] internal slot of _P_ to _handler_.

10. Return _P_.



ECMASCRIPT LANGUAGE: SOURCE CODE


Source Text

Syntax

SourceCharacter ::

  any Unicode code point

ECMAScript code is expressed using Unicode, version 5.1 or later.
ECMAScript source text is a sequence of code points. All Unicode code
point values from U+0000 to U+10FFFF, including surrogate code points,
may occur in source text where permitted by the ECMAScript grammars. The
actual encodings used to store and interchange ECMAScript source text is
not relevant to this specification. Regardless of the external source
text encoding, a conforming ECMAScript implementation processes the
source text as if it was an equivalent sequence of _SourceCharacter_
values. Each _SourceCharacter_ being a Unicode code point. Conforming
ECMAScript implementations are not required to perform any normalization
of source text, or behave as though they were performing normalization
of source text.

The components of a combining character sequence are treated as
individual Unicode code points even though a user might think of the
whole sequence as a single character.

NOTE In string literals, regular expression literals, template literals
and identifiers, any Unicode code point may also be expressed using
Unicode escape sequences that explicitly express a code point’s numeric
value. Within a comment, such an escape sequence is effectively ignored
as part of the comment.

ECMAScript differs from the Java programming language in the behaviour
of Unicode escape sequences. In a Java program, if the Unicode escape
sequence \U000A, for example, occurs within a single-line comment, it is
interpreted as a line terminator (Unicode code point U+000A is line feed
(lf)) and therefore the next code point is not part of the comment.
Similarly, if the Unicode escape sequence \U000A occurs within a string
literal in a Java program, it is likewise interpreted as a line
terminator, which is not allowed within a string literal—one must write
\N instead of \U000A to cause a line feed (lf) to be part of the string
value of a string literal. In an ECMAScript program, a Unicode escape
sequence occurring within a comment is never interpreted and therefore
cannot contribute to termination of the comment. Similarly, a Unicode
escape sequence occurring within a string literal in an ECMAScript
program always contributes to the literal and is never interpreted as a
line terminator or as a code point that might terminate the string
literal.

Static Semantics: UTF16Encoding ( cp )

The UTF16Encoding of a numeric code point value, _cp_, is determined as
follows:

1.  Assert: 0 ≤ _cp_ ≤ 0x10FFFF.

2.  If _cp_ ≤ 65535, return _cp_.

3.  Let _cu1_ be floor((_cp_ – 65536) / 1024) + 0xD800.

4.  Let _cu2_ be ((_cp_ – 65536) modulo 1024) + 0xDC00.

5.  Return the code unit sequence consisting of _cu1_ followed by _cu2_.

Static Semantics: UTF16Decode( lead, trail )

Two code units, _lead_ and _trail_, that form a UTF-16 surrogate pair
are converted to a code point by performing the following steps:

1.  Assert: 0xD800 ≤ _lead_ ≤ 0xDBFF and 0xDC00 ≤ _trail_ ≤ 0xDFFF.

2.  Let _cp_ be (_lead_ – 0xD800) × 1024 + (_trail_ – 0xDC00) + 0x10000.

3.  Return the code point _cp_.


Types of Source Code

There are four types of ECMAScript code:

-   _Global code_ is source text that is treated as an ECMAScript
      _Script_. The global code of a particular _Script_ does not
      include any source text that is parsed as part of a
      _FunctionDeclaration_, _FunctionExpression_,
      _GeneratorDeclaration_, _GeneratorExpression_, _MethodDefinition_,
      _ArrowFunction, ClassDeclaration_, or _ClassExpression_.

-   _Eval code_ is the source text supplied to the built-in EVAL
      function. More precisely, if the parameter to the built-in EVAL
      function is a String, it is treated as an ECMAScript _Script_. The
      eval code for a particular invocation of EVAL is the global code
      portion of that _Script_.

-   _Function code_ is source text that is parsed to supply the value of
      the [[ECMAScriptCode]] and [[FormalParameters]] internal slots
      (see 9.2) of an ECMAScript function object. The function code of a
      particular ECMAScript function does not include any source text
      that is parsed as the function code of a nested
      _FunctionDeclaration_, _FunctionExpression_,
      _GeneratorDeclaration_, _GeneratorExpression_, _MethodDefinition_,
      _ArrowFunction, ClassDeclaration_, or _ClassExpression_.

-   _Module code_ is source text that is code that is provided as a
      _ModuleBody_. It is the code that is directly evaluated when a
      module is initialized. The module code of a particular module does
      not include any source text that is parsed as part of a nested
      _FunctionDeclaration_, _FunctionExpression_,
      _GeneratorDeclaration_, _GeneratorExpression_, _MethodDefinition_,
      _ArrowFunction, ClassDeclaration_, or _ClassExpression_.

NOTE Function code is generally provided as the bodies of Function
Definitions (14.1), Arrow Function Definitions (14.2), Method
Definitions (14.3) and Generator Definitions (14.4). Function code is
also derived from the arguments to the FUNCTION constructor (19.2.1.1)
and the GeneratorFunction constructor (25.2.1.1).

Strict Mode Code

An ECMAScript _Script_ syntactic unit may be processed using either
unrestricted or strict mode syntax and semantics. Code is interpreted as
_strict mode code_ in the following situations:

-   Global code is strict mode code if it begins with a Directive
      Prologue that contains a Use Strict Directive (see 14.1.1).

-   Module code is always strict mode code.

-   All parts of a _ClassDeclaration_ or a _ClassExpression_ are strict
      mode code.

-   Eval code is strict mode code if it begins with a Directive Prologue
      that contains a Use Strict Directive or if the call to eval is a
      direct eval (see 12.3.4.1) that is contained in strict mode code.

-   Function code is strict mode code if the associated
      _FunctionDeclaration_, _FunctionExpression_,
      _GeneratorDeclaration_, _GeneratorExpression_, _MethodDefinition_,
      or _ArrowFunction_ is contained in strict mode code or if the code
      that produces the value of the function’s [[ECMAScriptCode]]
      internal slot begins with a Directive Prologue that contains a Use
      Strict Directive.

-   Function code that is supplied as the arguments to the built-in
      FUNCTION and GENERATOR constructors is strict mode code if the
      last argument is a String that when processed is a _FunctionBody_
      that begins with a Directive Prologue that contains a Use Strict
      Directive.

ECMAScript code that is not strict mode code is called _non-strict
code_.

Non-ECMAScript Functions

An ECMAScript implementation may support the evaluation of exotic
function objects whose evaluative behaviour is expressed in some
implementation defined form of executable code other than via ECMAScript
code. Whether a function object is an ECMAScript code function or a
non-ECMAScript function is not semantically observable from the
perspective of an ECMAScript code function that calls or is called by
such a non-ECMAScript function.



ECMASCRIPT LANGUAGE: LEXICAL GRAMMAR


The source text of an ECMAScript _Script_ or _Module_ is first converted
into a sequence of input elements, which are tokens, line terminators,
comments, or white space. The source text is scanned from left to right,
repeatedly taking the longest possible sequence of code points as the
next input element.

There are several situations where the identification of lexical input
elements is sensitive to the syntactic grammar context that is consuming
the input elements. This requires multiple goal symbols for the lexical
grammar. The _InputElementRegExpOrTemplateTail_ goal is used in
syntactic grammar contexts where a _RegularExpressionLiteral_, a
_TemplateMiddle_, or a _TemplateTail_ is permitted. The
_InputElementRegExp_ goal symbol is used in all syntactic grammar
contexts where a _RegularExpressionLiteral_ is permitted but neither a
_TemplateMiddle_, nor a _TemplateTail_ is permitted. The
_InputElementTemplateTail_ goal is used in all syntactic grammar
contexts where a _TemplateMiddle_ or a _TemplateTail_ is permitted but a
_RegularExpressionLiteral_ is not permitted. In all other contexts,
_InputElementDiv_ is used as the lexical goal symbol.

NOTE The use of multiple lexical goals ensures that there are no lexical
ambiguities that would affect automatic semicolon insertion. For
example, there are no syntactic grammar contexts where both a leading
division or division-assignment, and a leading
_RegularExpressionLiteral_ are permitted. This is not affected by
semicolon insertion (see 11.9); in examples such as the following:

  A = B
  /HI/G.EXEC(C).MAP(D);

where the first non-whitespace, non-comment code point after a
_LineTerminator_ is U+002F (SOLIDUS) and the syntactic context allows
division or division-assignment, no semicolon is inserted at the
_LineTerminator_. That is, the above example is interpreted in the same
way as:

  A = B / HI / G.EXEC(C).MAP(D);

Syntax

InputElementDiv ::

WhiteSpace
LineTerminator
Comment
CommonToken
DivPunctuator
RightBracePunctuator

InputElementRegExp ::

WhiteSpace
LineTerminator
Comment
CommonToken
RightBracePunctuator
RegularExpressionLiteral

InputElementRegExpOrTemplateTail ::

WhiteSpace
LineTerminator
Comment
CommonToken
RegularExpressionLiteral
TemplateSubstitutionTail

InputElementTemplateTail ::

WhiteSpace
LineTerminator
Comment
CommonToken
DivPunctuator
TemplateSubstitutionTail


Unicode Format-Control Characters

The Unicode format-control characters (i.e., the characters in category
“Cf” in the Unicode Character Database such as left-to-right mark or
right-to-left mark) are control codes used to control the formatting of
a range of text in the absence of higher-level protocols for this (such
as mark-up languages).

It is useful to allow format-control characters in source text to
facilitate editing and display. All format control characters may be
used within comments, and within string literals, template literals, and
regular expression literals.

U+200C (Zero width non-joiner) and U+200D (Zero width joiner) are
format-control characters that are used to make necessary distinctions
when forming words or phrases in certain languages. In ECMAScript source
text these code points may also be used in an _IdentifierName_ (see
11.6.1) after the first character.

U+FEFF (Zero Width no-break space) is a format-control character used
primarily at the start of a text to mark it as Unicode and to allow
detection of the text's encoding and byte order. <ZWNBSP> characters
intended for this purpose can sometimes also appear after the start of a
text, for example as a result of concatenating files. In ECMAScript
source text <ZWNBSP> code points are treated as white space characters
(see 11.2).

The special treatment of certain format-control characters outside of
comments, string literals, and regular expression literals is summarized
in Table 31.

Table 31 — Format-Control Code Point Usage

  --------------- --------------------------- ---------------- ------------------
  _CODE POINT _   _NAME_                      _ABBREVIATION_   _USAGE_
  U+200C          Zero width non-joiner       <ZWNJ>           _IdentifierPart_
  U+200D          Zero width joiner           <ZWJ>            _IdentifierPart_
  U+FEFF          ZERO WIDTH NO-BREAK SPACE   <ZWNBSP>         _WhiteSpace_
  --------------- --------------------------- ---------------- ------------------


White Space

White space code points are used to improve source text readability and
to separate tokens (indivisible lexical units) from each other, but are
otherwise insignificant. White space code points may occur between any
two tokens and at the start or end of input. White space code points may
occur within a _StringLiteral_, a _RegularExpressionLiteral_, a
_Template_, or a _TemplateSubstitutionTail_ where they are considered
significant code points forming part of a literal value. They may also
occur within a _Comment_, but cannot appear within any other kind of
token.

The ECMAScript white space code points are listed in Table 32.

Table 32 — White Space Code Points

  --------------------- ------------------------------------------------- ----------------
  _CODE POINT _         _NAME_                                            _ABBREVIATION_
  U+0009                Character Tabulation                              <TAB>
  U+000B                LINE TABULATION                                   <VT>
  U+000C                Form Feed (ff)                                    <FF>
  U+0020                Space                                             <SP>
  U+00A0                No-break space                                    <NBSP>
  U+FEFF                ZERO wIDTH nO-bREAK SPACE                         <ZWNBSP>
  Other category “Zs”   Any other Unicode “Separator, space” code point   <USP>
  --------------------- ------------------------------------------------- ----------------

ECMAScript implementations must recognize as _WhiteSpace_ code points
listed in the “Separator, space” (Zs) category by Unicode 5.1.
ECMAScript implementations may also recognize as _WhiteSpace_ additional
category Zs code points from subsequent editions of the Unicode
Standard.

NOTE Other than for the code points listed in Table 32, ECMAScript
_WhiteSpace_ intentionally excludes all code points that have the
Unicode “White_Space” property but which are not classified in category
“Zs”.

Syntax

WhiteSpace ::

<TAB>
<VT>
<FF>
<SP>
<NBSP>
<zwnbsp>
<USP>


Line Terminators

Like white space code points, line terminator code points are used to
improve source text readability and to separate tokens (indivisible
lexical units) from each other. However, unlike white space code points,
line terminators have some influence over the behaviour of the syntactic
grammar. In general, line terminators may occur between any two tokens,
but there are a few places where they are forbidden by the syntactic
grammar. Line terminators also affect the process of automatic semicolon
insertion (11.9). A line terminator cannot occur within any token except
a _StringLiteral_, _Template_, or _TemplateSubstitutionTail_. Line
terminators may only occur within a _StringLiteral_ token as part of a
_LineContinuation_.

A line terminator can occur within a _MultiLineComment_ (11.4) but
cannot occur within a _SingleLineComment_.

Line terminators are included in the set of white space code points that
are matched by the \S class in regular expressions.

The ECMAScript line terminator code points are listed in Table 33.

Table 33 — Line Terminator Code Points

  --------------- ---------------------- ----------------
  _CODE POINT _   _UNICODE NAME_         _ABBREVIATION_
  U+000A          Line Feed (LF)         <LF>
  U+000D          Carriage Return (CR)   <CR>
  U+2028          Line separator         <LS>
  U+2029          Paragraph separator    <PS>
  --------------- ---------------------- ----------------

Only the Unicode code points in Table 33 are treated as line
terminators. Other new line or line breaking Unicode code points are not
treated as line terminators but are treated as white space if they meet
the requirements listed in Table 32. The sequence <CR><LF> is commonly
used as a line terminator. It should be considered a single
_SourceCharacter_ for the purpose of reporting line numbers.

Syntax

LineTerminator ::

<LF>
<CR>
<LS>
<PS>

LineTerminatorSequence ::

<LF>
<CR> [lookahead ≠ <LF> ]
<LS>
<PS>
<CR> <LF>


Comments

Comments can be either single or multi-line. Multi-line comments cannot
nest.

Because a single-line comment can contain any Unicode code point except
a _LineTerminator_ code point, and because of the general rule that a
token is always as long as possible, a single-line comment always
consists of all code points from the // marker to the end of the line.
However, the _LineTerminator_ at the end of the line is not considered
to be part of the single-line comment; it is recognized separately by
the lexical grammar and becomes part of the stream of input elements for
the syntactic grammar. This point is very important, because it implies
that the presence or absence of single-line comments does not affect the
process of automatic semicolon insertion (see 11.9).

Comments behave like white space and are discarded except that, if a
_MultiLineComment_ contains a line terminator code point, then the
entire comment is considered to be a _LineTerminator_ for purposes of
parsing by the syntactic grammar.

Syntax

Comment ::

MultiLineComment
SingleLineComment

MultiLineComment ::

/* MultiLineCommentChars~opt~ */

MultiLineCommentChars ::

MultiLineNotAsteriskChar MultiLineCommentChars~opt~
* PostAsteriskCommentChars~opt~

PostAsteriskCommentChars ::

MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars~opt~
* PostAsteriskCommentChars~opt~

MultiLineNotAsteriskChar ::

SourceCharacter BUT NOT *

MultiLineNotForwardSlashOrAsteriskChar ::

SourceCharacter BUT NOT ONE OF / OR *

SingleLineComment ::

// SingleLineCommentChars~opt~

SingleLineCommentChars ::

SingleLineCommentChar SingleLineCommentChars~opt~

SingleLineCommentChar ::

SourceCharacter BUT NOT LineTerminator


Tokens

Syntax

CommonToken ::

IdentifierName
Punctuator
NumericLiteral
StringLiteral
Template

NOTE The _DivPunctuator_, _RegularExpressionLiteral_,
_RightBracePunctuator,_ and _TemplateSubstitutionTail_ productions
derive additional tokens that are not included in the _CommonToken_
production.


Names and Keywords

_IdentifierName_ and _ReservedWord_ are tokens that are interpreted
according to the Default Identifier Syntax given in Unicode Standard
Annex #31, Identifier and Pattern Syntax, with some small modifications.
_ReservedWord_ is an enumerated subset of _IdentifierName_. The
syntactic grammar defines _Identifier_ as an _IdentifierName_ that is
not a _ReservedWord_ (see 11.6.2). The Unicode identifier grammar is
based on character properties specified by the Unicode Standard. The
Unicode code points in the specified categories in version 5.1.0 of the
Unicode standard must be treated as in those categories by all
conforming ECMAScript implementations. ECMAScript implementations may
recognize identifier code points defined in later editions of the
Unicode Standard.

NOTE This standard specifies specific code point additions: U+0024
(dollar sign) and U+005F (LOW LINE) are permitted anywhere in an
_IdentifierName_, and the code points U+200C (zero-width non-joiner) and
U+200D (zero-width joiner) are permitted anywhere after the first code
point of an _IdentifierName_.

Unicode escape sequences are permitted in an _IdentifierName_, where
they contribute a single Unicode code point to the _IdentifierName_. The
code point is expressed by the _HexDigits_ of the
_UnicodeEscapeSequence_ (see 11.8.4). The \ preceding the
_UnicodeEscapeSequence_ and the U and { } code units, if they appear, do
not contribute code points to the _IdentifierName_. A
_UnicodeEscapeSequence_ cannot be used to put a code point into an
_IdentifierName_ that would otherwise be illegal. In other words, if a \
_UnicodeEscapeSequence_ sequence were replaced by the _SourceCharacter
it contributes, the result must still be a valid _IdentifierName_ that
has the exact same sequence of _SourceCharacter_ elements as the
original _IdentifierName_. All interpretations of _IdentifierName_
within this specification are based upon their actual code points
regardless of whether or not an escape sequence was used to contribute
any particular code point.

Two _IdentifierName_ that are canonically equivalent according to the
Unicode standard are _not_ equal unless, after replacement of each
_UnicodeEscapeSequence_, they are represented by the exact same sequence
of code points.

Syntax

IdentifierName ::

IdentifierStart
IdentifierName IdentifierPart

IdentifierStart ::

UnicodeIDStart
$
_
\ UnicodeEscapeSequence

IdentifierPart ::

UnicodeIDContinue
$
_
\ UnicodeEscapeSequence
<ZWNJ>
<ZWJ>

UnicodeIDStart ::

any Unicode code point with the Unicode property “ID_Start”

UnicodeIDContinue ::

  any Unicode code point with the Unicode property “ID_Continue”

The definitions of the nonterminal _UnicodeEscapeSequence_ is given in
11.8.4.

NOTE The sets of code points with Unicode properties “ID_Start” and
“ID_Continue” include, respectively, the code points with Unicode
properties “Other_ID_Start” and “Other_ID_Continue”.

Identifier Names

Static Semantics: Early Errors

_IdentifierStart_ :: \ _UnicodeEscapeSequence

-   It is a Syntax Error if SV(_UnicodeEscapeSequence_) is none of "$",
    or "_", or the UTF16Encoding (10.1.1) of a code point that would be
    matched by the _UnicodeIDStart_ lexical grammar production.

_IdentifierPart_ :: \ _UnicodeEscapeSequence

-   It is a Syntax Error if SV(_UnicodeEscapeSequence_) is none of "$",
    or "_", or the UTF16Encoding (10.1.1) of either <ZWNJ> or <ZWJ>, or
    the UTF16Encoding of a Unicode code point that would be matched by
    the _UnicodeIDContinue_ lexical grammar production.

Static Semantics: StringValue

See also: 11.8.4.2, 12.1.4.

IdentifierName ::

IdentifierStart
IdentifierName IdentifierPart

1.  Return the String value consisting of the sequence of code units
    corresponding to _IdentifierName_. In determining the sequence any
    occurrences of \ _UnicodeEscapeSequence_ are first replaced with the
    code point represented by the _UnicodeEscapeSequence_ and then the
    code points of the entire _IdentifierName_ are converted to code
    units by UTF16Encoding (10.1.1) each code point.

Reserved Words

A reserved word is an _IdentifierName_ that cannot be used as an
_Identifier_.

Syntax

ReservedWord ::

Keyword
FutureReservedWord
NullLiteral
BooleanLiteral

NOTE The _ReservedWord_ definitions are specified as literal sequences
of specific _SourceCharacter_ elements. A code point in a _ReservedWord_
cannot be expressed by a \ _UnicodeEscapeSequence_.

Keywords

The following tokens are ECMAScript keywords and may not be used as
_Identifiers_ in ECMAScript programs.

Syntax

Keyword :: ONE OF

  ---------- ---------- ------------ --------
  break      do         in           typeof
  case       else       instanceof   var
  catch      export     new          void
  class      extends    return       while
  const      finally    super        with
  continue   for        switch       yield
  debugger   function   this         
  default    if         throw        
  delete     import     try          
  ---------- ---------- ------------ --------

NOTE In some contexts YIELD is given the semantics of an _Identifier_.
See 12.1.1. In strict mode code, LET and STATIC are treated as reserved
keywords through static semantic restrictions (see 12.1.1, 13.2.1.1,
13.6.4.1, and 14.5.1) rather than the lexical grammar.

Future Reserved Words

The following tokens are reserved for used as keywords in future
language extensions.

Syntax

FutureReservedWord ::

  ------- -- -- --
  enum          
  await         
  ------- -- -- --

AWAIT is only treated as a _FutureReservedWord_ when _Module_ is the
goal symbol of the syntactic grammar.

NOTE Use of the following tokens within strict mode code (see 10.2.1) is
also reserved. That usage is restricted using static semantic
restrictions (see 12.1.1) rather than the lexical grammar:

  ------------ --------- ----------- --
  implements   package   protected   
  interface    private   public      
  ------------ --------- ----------- --


Punctuators

Syntax

Punctuator :: ONE OF

  ----- ------ ----- ----- ----- -----
  {     (      )     [     ]     .
  ...   ;      ,     <     >     <=
  >=    ==     !=    ===   !==   
  +     -      *     %     ++    --
  <<    >>     >>>   &     |     ^
  !     ~      &&    ||    ?     :
  =     +=     -=    *=    %=    <<=
  >>=   >>>=   &=    |=    ^=    =>
  ----- ------ ----- ----- ----- -----

DivPunctuator :: ONE OF

  --- ---- -- -- -- --
  /   /=            
  --- ---- -- -- -- --

RightBracePunctuator ::

  --- -- -- -- -- --
  }               
  --- -- -- -- -- --


Literals

Null Literals

Syntax

NullLiteral ::

NULL

Boolean Literals

Syntax

BooleanLiteral ::

TRUE
FALSE

Numeric Literals

Syntax

NumericLiteral ::

DecimalLiteral
BinaryIntegerLiteral
OctalIntegerLiteral
HexIntegerLiteral

DecimalLiteral ::

DecimalIntegerLiteral . DecimalDigits~opt~ ExponentPart~opt~
. DecimalDigits ExponentPart~opt~
DecimalIntegerLiteral ExponentPart~opt~

DecimalIntegerLiteral ::

0
NonZeroDigit DecimalDigits~opt~

DecimalDigits ::

DecimalDigit
DecimalDigits DecimalDigit

DecimalDigit :: ONE OF

0 1 2 3 4 5 6 7 8 

NonZeroDigit :: ONE OF

1 2 3 4 5 6 7 8 

ExponentPart ::

ExponentIndicator SignedInteger

ExponentIndicator :: ONE OF

E E

SignedInteger ::

DecimalDigits
+ DecimalDigits
- DecimalDigits

BinaryIntegerLiteral ::

0B BinaryDigits
0B BinaryDigits

BinaryDigits ::

BinaryDigit
BinaryDigits BinaryDigit

BinaryDigit :: ONE OF

0 

OctalIntegerLiteral ::

0O OctalDigits
0O OctalDigits

OctalDigits ::

OctalDigit
OctalDigits OctalDigit

OctalDigit :: ONE OF

0 1 2 3 4 5 6 

HexIntegerLiteral ::

0X HexDigits
0X HexDigits

HexDigits ::

HexDigit
HexDigits HexDigit

HexDigit :: ONE OF

0 1 2 3 4 5 6 7 8 9 A B C D E F A B C D E F

The _SourceCharacter_ immediately following a _NumericLiteral_ must not
be an _IdentifierStart_ or _DecimalDigit_.

NOTE For example:

  3in

is an error and not the two input elements 3 and IN.

A conforming implementation, when processing strict mode code (see
10.2.1), must not extend, as described in B.1.1, the syntax of
_NumericLiteral_ to include _LegacyOctalIntegerLiteral_, nor extend the
syntax of _DecimalIntegerLiteral_ to include
_NonOctalDecimalIntegerLiteral_.

Static Semantics: MV’s

A numeric literal stands for a value of the Number type. This value is
determined in two steps: first, a mathematical value (MV) is derived
from the literal; second, this mathematical value is rounded as
described below.

-   The MV of _NumericLiteral_ :: _DecimalLiteral_ is the MV of
    _DecimalLiteral_.

-   The MV of _NumericLiteral_ :: _BinaryIntegerLiteral_ is the MV of
    _BinaryIntegerLiteral_.

-   The MV of _NumericLiteral_ :: _OctalIntegerLiteral_ is the MV of
    _OctalIntegerLiteral_.

-   The MV of _NumericLiteral_ :: _HexIntegerLiteral_ is the MV of
    _HexIntegerLiteral_.

-   The MV of _DecimalLiteral_ :: _DecimalIntegerLiteral_ . is the MV of
    _DecimalIntegerLiteral_.

-   The MV of _DecimalLiteral_ :: _DecimalIntegerLiteral_ .
    _DecimalDigits_ is the MV of _DecimalIntegerLiteral_ plus (the MV of
    _DecimalDigits_ × 10^–_n_^), where _n_ is the number of code points
    in _DecimalDigits_.

-   The MV of _DecimalLiteral_ :: _DecimalIntegerLiteral_ .
    _ExponentPart_ is the MV of _DecimalIntegerLiteral_ × 10_^e^_, where
    _e_ is the MV of _ExponentPart_.

-   The MV of _DecimalLiteral_ :: _DecimalIntegerLiteral_ .
    _DecimalDigits ExponentPart_ is (the MV of _DecimalIntegerLiteral_
    plus (the MV of _DecimalDigits_ × 10^–_n_^)) × 10_^e^_, where _n_ is
    the number of code points in _DecimalDigits_ and _e_ is the MV of
    _ExponentPart_.

-   The MV of _DecimalLiteral_ ::. _DecimalDigits_ is the MV of
    _DecimalDigits_ × 10^–_n_^, where _n_ is the number of code points
    in _DecimalDigits_.

-   The MV of _DecimalLiteral_ ::. _DecimalDigits ExponentPart_ is the
    MV of _DecimalDigits_ × 10^_e_–_n_^, where _n_ is the number of code
    points in _DecimalDigits_ and _e_ is the MV of _ExponentPart_.

-   The MV of _DecimalLiteral_ :: _DecimalIntegerLiteral_ is the MV of
    _DecimalIntegerLiteral_.

-   The MV of _DecimalLiteral_ :: _DecimalIntegerLiteral ExponentPart_
    is the MV of _DecimalIntegerLiteral_ × 10_^e^_, where _e_ is the MV
    of _ExponentPart_.

-   The MV of _DecimalIntegerLiteral_ :: 0 is 0.

-   The MV of _DecimalIntegerLiteral_ :: _NonZeroDigit_ is the MV of
    _NonZeroDigit._

-   The MV of _DecimalIntegerLiteral_ :: _NonZeroDigit_ _DecimalDigits_
    is (the MV of _NonZeroDigit_ × 10_^n^_) plus the MV of
    _DecimalDigits_, where _n_ is the number of code points in
    _DecimalDigits_.

-   The MV of _DecimalDigits_ :: _DecimalDigit_ is the MV of
    _DecimalDigit_.

-   The MV of _DecimalDigits_ :: _DecimalDigits_ _DecimalDigit_ is (the
    MV of _DecimalDigits_ × 10) plus the MV of _DecimalDigit_.

-   The MV of _ExponentPart_ :: _ExponentIndicator SignedInteger_ is the
    MV of _SignedInteger_.

-   The MV of _SignedInteger_ :: _DecimalDigits_ is the MV of
    _DecimalDigits_.

-   The MV of _SignedInteger_ :: + _DecimalDigits_ is the MV of
    _DecimalDigits_.

-   The MV of _SignedInteger_ :: - _DecimalDigits_ is the negative of
    the MV of _DecimalDigits_.

-   The MV of _DecimalDigit_ :: 0 or of _HexDigit_ :: 0 or of
    _OctalDigit_ :: 0 or of _BinaryDigit_ :: 0 is 0.

-   The MV of _DecimalDigit_ :: 1 or of _NonZeroDigit_ :: 1 or of
    _HexDigit_ :: 1 or of _OctalDigit_ :: 1 or
    of _BinaryDigit_ :: 1 is 1.

-   The MV of _DecimalDigit_ :: 2 or of _NonZeroDigit_ :: 2 or of
    _HexDigit_ :: 2 or of _OctalDigit_ :: 2 is 2.

-   The MV of _DecimalDigit_ :: 3 or of _NonZeroDigit_ :: 3 or of
    _HexDigit_ :: 3 or of _OctalDigit_ :: 3 is 3.

-   The MV of _DecimalDigit_ :: 4 or of _NonZeroDigit_ :: 4 or of
    _HexDigit_ :: 4 or of _OctalDigit_ :: 4 is 4.

-   The MV of _DecimalDigit_ :: 5 or of _NonZeroDigit_ :: 5 or of
    _HexDigit_ :: 5 or of _OctalDigit_ :: 5 is 5.

-   The MV of _DecimalDigit_ :: 6 or of _NonZeroDigit_ :: 6 or of
    _HexDigit_ :: 6 or of _OctalDigit_ :: 6 is 6.

-   The MV of _DecimalDigit_ :: 7 or of _NonZeroDigit_ :: 7 or of
    _HexDigit_ :: 7 or of _OctalDigit_ :: 7 is 7.

-   The MV of _DecimalDigit_ :: 8 or of _NonZeroDigit_ :: 8 or of
    _HexDigit_ :: 8 is 8.

-   The MV of _DecimalDigit_ :: 9 or of _NonZeroDigit_ :: 9 or of
    _HexDigit_ :: 9 is 9.

-   The MV of _HexDigit_ :: A or of _HexDigit_ :: A is 10.

-   The MV of _HexDigit_ :: B or of _HexDigit_ :: B is 11.

-   The MV of _HexDigit_ :: C or of _HexDigit_ :: C is 12.

-   The MV of _HexDigit_ :: D or of _HexDigit_ :: D is 13.

-   The MV of _HexDigit_ :: E or of _HexDigit_ :: E is 14.

-   The MV of _HexDigit_ :: F or of _HexDigit_ :: F is 15.

-   The MV of _BinaryIntegerLiteral_ :: 0B _BinaryDigits_ is the MV of
    _BinaryDigits_.

-   The MV of _BinaryIntegerLiteral_ :: 0B _BinaryDigits_ is the MV of
    _BinaryDigits_.

-   The MV of _BinaryDigits_ :: _BinaryDigit_ is the MV of
    _BinaryDigit_.

-   The MV of _BinaryDigits_ :: _BinaryDigits_ _BinaryDigit_ is (the MV
    of _BinaryDigits_ × 2) plus the MV of _BinaryDigit_.

-   The MV of _OctalIntegerLiteral_ :: 0O _OctalDigits_ is the MV of
    _OctalDigits_.

-   The MV of _OctalIntegerLiteral_ :: 0O _OctalDigits_ is the MV of
    _OctalDigits_.

-   The MV of _OctalDigits_ :: _OctalDigit_ is the MV of _OctalDigit_.

-   The MV of _OctalDigits_ :: _OctalDigits_ _OctalDigit_ is (the MV of
    _OctalDigits_ × 8) plus the MV of _OctalDigit_.

-   The MV of _HexIntegerLiteral_ :: 0X _HexDigits_ is the MV of
    _HexDigits_.

-   The MV of _HexIntegerLiteral_ :: 0X _HexDigits_ is the MV of
    _HexDigits_.

-   The MV of _HexDigits_ :: _HexDigit_ is the MV of _HexDigit_.

-   The MV of _HexDigits_ :: _HexDigits_ _HexDigit_ is (the MV of
    _HexDigits_ × 16) plus the MV of _HexDigit_.

Once the exact MV for a numeric literal has been determined, it is then
rounded to a value of the Number type. If the MV is 0, then the rounded
value is +0; otherwise, the rounded value must be the Number value for
the MV (as specified in 6.1.6), unless the literal is a _DecimalLiteral_
and the literal has more than 20 significant digits, in which case the
Number value may be either the Number value for the MV of a literal
produced by replacing each significant digit after the 20th with a 0
digit or the Number value for the MV of a literal produced by replacing
each significant digit after the 20th with a 0 digit and then
incrementing the literal at the 20th significant digit position. A digit
is _significant_ if it is not part of an _ExponentPart_ and

-   it is not 0; or

-   there is a nonzero digit to its left and there is a nonzero digit,
      not in the _ExponentPart_, to its right.

String Literals

NOTE A string literal is zero or more Unicode code points enclosed in
single or double quotes. Unicode code points may also be represented by
an escape sequence. All code points may appear literally in a string
literal except for the closing quote code points, U+005C (REVERSE
SOLIDUS), U+000D (carriage return), U+2028 (line separator), U+2029
(paragraph separator), and U+000A (line feed). Any code points may
appear in the form of an escape sequence. String literals evaluate to
ECMAScript String values. When generating these string values Unicode
code points are UTF-16 encoded as defined in 10.1.1. Code points
belonging to the Basic Multilingual Plane are encoded as a single code
unit element of the string. All other code points are encoded as two
code unit elements of the string.

Syntax

StringLiteral ::

" DoubleStringCharacters~opt~ "
' SingleStringCharacters~opt~ '

DoubleStringCharacters ::

DoubleStringCharacter DoubleStringCharacters~opt~

SingleStringCharacters ::

SingleStringCharacter SingleStringCharacters~opt~

DoubleStringCharacter ::

SourceCharacter BUT NOT ONE OF " OR \ OR LineTerminator
\ EscapeSequence
LineContinuation

SingleStringCharacter ::

SourceCharacter BUT NOT ONE OF ' OR \ OR LineTerminator
\ EscapeSequence
LineContinuation

LineContinuation ::

\ LineTerminatorSequence

EscapeSequence ::

CharacterEscapeSequence
0 [lookahead ∉ DecimalDigit]
HexEscapeSequence
UnicodeEscapeSequence

A conforming implementation, when processing strict mode code (see
10.2.1), must not extend the syntax of _EscapeSequence_ to include
_LegacyOctalEscapeSequence_ as described in B.1.2.

CharacterEscapeSequence ::

SingleEscapeCharacter
NonEscapeCharacter

SingleEscapeCharacter :: ONE OF

' " \ B F N R T V

NonEscapeCharacter ::

SourceCharacter BUT NOT ONE OF EscapeCharacter OR LineTerminator

EscapeCharacter ::

SingleEscapeCharacter
DecimalDigit
X
U

HexEscapeSequence ::

X HexDigit HexDigit

UnicodeEscapeSequence ::

U Hex4Digits
U{ HexDigits }

Hex4Digits ::

HexDigit HexDigit HexDigit HexDigit

The definition of the nonterminal _HexDigit_ is given in 11.8.3.
_SourceCharacter_ is defined in 10.1.

NOTE A line terminator code point cannot appear in a string literal,
except as part of a _LineContinuation_ to produce the empty code points
sequence. The proper way to cause a line terminator code point to be
part of the String value of a string literal is to use an escape
sequence such as \N or \U000A.

Static Semantics: Early Errors

_UnicodeEscapeSequence_ :: U{ _HexDigits_ }

-   It is a Syntax Error if the MV of _HexDigits_ > 1114111_._

Static Semantics: StringValue

See also: 11.6.1.2, 12.1.4.

StringLiteral ::

" DoubleStringCharacters~opt~ "
' SingleStringCharacters~opt~ '

1.  Return the String value whose elements are the SV of this
    _StringLiteral_.

Static Semantics: SV’s

A string literal stands for a value of the String type. The String value
(SV) of the literal is described in terms of code unit values
contributed by the various parts of the string literal. As part of this
process, some Unicode code points within the string literal are
interpreted as having a mathematical value (MV), as described below or
in 11.8.3.

-   The SV of _StringLiteral_ :: "" is the empty code unit sequence.

-   The SV of _StringLiteral_ :: '' is the empty code unit sequence.

-   The SV of _StringLiteral_ :: " _DoubleStringCharacters_ " is the SV
    of _DoubleStringCharacters_.

-   The SV of _StringLiteral_ :: ' _SingleStringCharacters_ ' is the SV
    of _SingleStringCharacters_.

-   The SV of _DoubleStringCharacters_ :: _DoubleStringCharacter_ is a
    sequence of one or two code units that is the SV of
    _DoubleStringCharacter_.

-   The SV of _DoubleStringCharacters_ :: _DoubleStringCharacter_
    _DoubleStringCharacters_ is a sequence of one or two code units that
    is the SV of _DoubleStringCharacter_ followed by all the code units
    in the SV of _DoubleStringCharacters_ in order.

-   The SV of _SingleStringCharacters_ :: _SingleStringCharacter_ is a
    sequence of one or two code units that is the SV of
    _SingleStringCharacter_.

-   The SV of _SingleStringCharacters_ :: _SingleStringCharacter_
    _SingleStringCharacters_ is a sequence of one or two code units that
    is the SV of _SingleStringCharacter_ followed by all the code units
    in the SV of _SingleStringCharacters_ in order.

-   The SV of _DoubleStringCharacter_ :: _SourceCharacter_ BUT NOT ONE
    OF " OR \ OR _LineTerminator_ is the UTF16Encoding (10.1.1) of the
    code point value of _SourceCharacter_.

-   The SV of _DoubleStringCharacter_ :: \ _EscapeSequence_ is the SV of
    the _EscapeSequence_.

-   The SV of _DoubleStringCharacter_ :: _LineContinuation_ is the empty
    code unit sequence.

-   The SV of _SingleStringCharacter_ :: _SourceCharacter_ BUT NOT ONE
    OF ' OR \ OR _LineTerminator_ is the UTF16Encoding (10.1.1) of the
    code point value of _SourceCharacter_.

-   The SV of _SingleStringCharacter_ :: \ _EscapeSequence_ is the SV of
    the _EscapeSequence_.

-   The SV of _SingleStringCharacter_ :: _LineContinuation_ is the empty
    code unit sequence.

-   The SV of _EscapeSequence_ :: _CharacterEscapeSequence_ is the SV of
    the _CharacterEscapeSequence_.

-   The SV of _EscapeSequence_ :: 0 is the code unit value 0.

-   The SV of _EscapeSequence_ :: _HexEscapeSequence_ is the SV of the
    _HexEscapeSequence_.

-   The SV of _EscapeSequence_ :: _UnicodeEscapeSequence_ is the SV of
    the _UnicodeEscapeSequence_.

-   The SV of _CharacterEscapeSequence_ :: _SingleEscapeCharacter_ is
    the code unit whose value is determined by the
    _SingleEscapeCharacter_ according to Table 34.

Table 34 — String Single Character Escape Sequences

  ------------------- ------------------- -------------------------- ----------
  _ESCAPE SEQUENCE_   _CODE UNIT VALUE_   _UNICODE CHARACTER NAME_   _SYMBOL_
  \B                  0X0008              BACKSPACE                  <BS>
  \T                  0X0009              CHARACTER TABULATION       <HT>
  \N                  0X000A              line feed (lf)             <LF>
  \V                  0X000B              LINE TABULATION            <VT>
  \F                  0X000C              form feed (ff)             <FF>
  \R                  0X000D              carriage return (cr)       <CR>
  \"                  0X0022              quotation Mark             "
  \'                  0X0027              apostrophe                 '
  \\                  0X005C              REverse Solidus            \
  ------------------- ------------------- -------------------------- ----------

-   The SV of _CharacterEscapeSequence_ :: _NonEscapeCharacter_ is the
    SV of the _NonEscapeCharacter_.

-   The SV of _NonEscapeCharacter_ :: _SourceCharacter_ BUT NOT ONE OF
    _EscapeCharacter_ OR _LineTerminator_ is the UTF16Encoding (10.1.1)
    of the code point value of _SourceCharacter_.

-   The SV of _HexEscapeSequence_ :: X _HexDigit_ _HexDigit_ is the code
    unit value that is (16 times the MV of the first _HexDigit_) plus
    the MV of the second _HexDigit_.

-   The SV of _UnicodeEscapeSequence_ :: U _Hex4Digits_ is the SV of
    _Hex4Digits_.

-   The SV of _Hex4Digits_ :: _HexDigit_ _HexDigit_ _HexDigit_
    _HexDigit_ is the code unit value that is (4096 times the MV of the
    first _HexDigit_) plus (256 times the MV of the second _HexDigit_)
    plus (16 times the MV of the third _HexDigit_) plus the MV of the
    fourth _HexDigit_.

-   The SV of _UnicodeEscapeSequence_ :: U{ _HexDigits_ } is the
    UTF16Encoding (10.1.1) of the MV of _HexDigits_.

Regular Expression Literals

NOTE A regular expression literal is an input element that is converted
to a RegExp object (see 21.2) each time the literal is evaluated. Two
regular expression literals in a program evaluate to regular expression
objects that never compare as === to each other even if the two
literals' contents are identical. A RegExp object may also be created at
runtime by NEW REGEXP or calling the REGEXP constructor as a function
(see 21.2.3).

The productions below describe the syntax for a regular expression
literal and are used by the input element scanner to find the end of the
regular expression literal. The source text comprising the
_RegularExpressionBody_ and the _RegularExpressionFlags_ are
subsequently parsed again using the more stringent ECMAScript Regular
Expression grammar (21.2.1).

An implementation may extend the ECMAScript Regular Expression grammar
defined in 21.2.1, but it must not extend the _RegularExpressionBody_
and _RegularExpressionFlags_ productions defined below or the
productions used by these productions.

Syntax

RegularExpressionLiteral ::

/ RegularExpressionBody / RegularExpressionFlags

RegularExpressionBody ::

RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChars ::

[empty]
RegularExpressionChars RegularExpressionChar

RegularExpressionFirstChar ::

RegularExpressionNonTerminator BUT NOT ONE OF * OR \ OR / OR [
RegularExpressionBackslashSequence
RegularExpressionClass

RegularExpressionChar ::

RegularExpressionNonTerminator BUT NOT ONE OF \ OR / OR [
RegularExpressionBackslashSequence
RegularExpressionClass

RegularExpressionBackslashSequence ::

\ RegularExpressionNonTerminator

RegularExpressionNonTerminator ::

SourceCharacter BUT NOT LineTerminator

RegularExpressionClass ::

[ RegularExpressionClassChars ]

RegularExpressionClassChars ::

[empty]
RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionClassChar ::

RegularExpressionNonTerminator BUT NOT ONE OF ] OR \
RegularExpressionBackslashSequence

RegularExpressionFlags ::

[empty]
RegularExpressionFlags IdentifierPart

NOTE Regular expression literals may not be empty; instead of
representing an empty regular expression literal, the code unit sequence
// starts a single-line comment. To specify an empty regular expression,
use: /(?:)/.

Static Semantics: Early Errors

_RegularExpressionFlags_ :: _RegularExpressionFlags IdentifierPart

-   It is a Syntax Error if _IdentifierPart_ contains a Unicode escape
    sequence_._

Static Semantics: BodyText

_RegularExpressionLiteral_ :: / _RegularExpressionBody_ /
_RegularExpressionFlags

1.  Return the source text that was recognized as
    _RegularExpressionBody_.

Static Semantics: FlagText

_RegularExpressionLiteral_ :: / _RegularExpressionBody_ /
_RegularExpressionFlags

1.  Return the source text that was recognized as
    _RegularExpressionFlags_.

Template Literal Lexical Components

Syntax

Template ::

NoSubstitutionTemplate
TemplateHead

NoSubstitutionTemplate ::

` TemplateCharacters~opt~ `

TemplateHead ::

` TemplateCharacters~opt~ ${

TemplateSubstitutionTail ::

TemplateMiddle
TemplateTail

TemplateMiddle ::

} TemplateCharacters~opt~ ${

TemplateTail ::

} TemplateCharacters~opt~ `

TemplateCharacters ::

TemplateCharacter TemplateCharacters~opt~

TemplateCharacter ::

$ [lookahead ≠ { ]
\ EscapeSequence
LineContinuation
LineTerminatorSequence
SourceCharacter BUT NOT ONE OF ` OR \ OR $ OR LineTerminator

A conforming implementation must not use the extended definition of
_EscapeSequence_ described in B.1.2 when parsing a _TemplateCharacter_.

NOTE _TemplateSubstitutionTail_ is used by the
_InputElementTemplateTail_ alternative lexical goal.

Static Semantics: TV’s and TRV’s

A template literal component is interpreted as a sequence of Unicode
code points. The Template Value (TV) of a literal component is described
in terms of code unit values (SV, 11.8.4) contributed by the various
parts of the template literal component. As part of this process, some
Unicode code points within the template component are interpreted as
having a mathematical value (MV, 11.8.3). In determining a TV, escape
sequences are replaced by the UTF-16 code unit(s) of the Unicode code
point represented by the escape sequence. The Template Raw Value (TRV)
is similar to a Template Value with the difference that in TRVs escape
sequences are interpreted literally.

-   The TV and TRV of _NoSubstitutionTemplate_ :: `` is the empty code
    unit sequence.

-   The TV and TRV of _TemplateHead_ :: `${ is the empty code unit
    sequence.

-   The TV and TRV of _TemplateMiddle_ :: }${ is the empty code unit
    sequence.

-   The TV and TRV of _TemplateTail_ :: }` is the empty code unit
    sequence.

-   The TV of _NoSubstitutionTemplate_ :: ` _TemplateCharacters_ ` is
    the TV of _TemplateCharacters_.

-   The TV of _TemplateHead_ :: ` _TemplateCharacters_ ${ is the TV of
    _TemplateCharacters_.

-   The TV of _TemplateMiddle_ :: } _TemplateCharacters_ ${ is the TV of
    _TemplateCharacters_.

-   The TV of _TemplateTail_ :: } _TemplateCharacters_ ` is the TV of
    _TemplateCharacters_.

-   The TV of _TemplateCharacters_ :: _TemplateCharacter_ is the TV of
    _TemplateCharacter_.

-   The TV of _TemplateCharacters_ :: _TemplateCharacter_
    _TemplateCharacters_ is a sequence consisting of the code units in
    the TV of _TemplateCharacter_ followed by all the code units in the
    TV of _TemplateCharacters_ in order.

-   The TV of _TemplateCharacter_ :: _SourceCharacter_ BUT NOT ONE OF `
    OR \ OR $ OR _LineTerminator_ is the UTF16Encoding (10.1.1) of the
    code point value of _SourceCharacter_.

-   The TV of _TemplateCharacter_ :: $ is the code unit value 0x0024.

-   The TV of _TemplateCharacter_ :: \ _EscapeSequence_ is the SV of
    _EscapeSequence_.

-   The TV of _TemplateCharacter_ :: _LineContinuation_ is the TV of
    _LineContinuation_.

-   The TV of _TemplateCharacter_ :: _LineTerminatorSequence_ is the TRV
    of _LineTerminatorSequence_.

-   The TV of _LineContinuation_ :: \ _LineTerminatorSequence_ is the
    empty code unit sequence.

-   The TRV of _NoSubstitutionTemplate_ :: ` _TemplateCharacters_ ` is
    the TRV of _TemplateCharacters_.

-   The TRV of _TemplateHead_ :: ` _TemplateCharacters_ ${ is the TRV of
    _TemplateCharacters_.

-   The TRV of _TemplateMiddle_ :: } _TemplateCharacters_ ${ is the TRV
    of _TemplateCharacters_.

-   The TRV of _TemplateTail_ :: } _TemplateCharacters_ ` is the TRV of
    _TemplateCharacters_.

-   The TRV of _TemplateCharacters_ :: _TemplateCharacter_ is the TRV of
    _TemplateCharacter_.

-   The TRV of _TemplateCharacters_ :: _TemplateCharacter_
    _TemplateCharacters_ is a sequence consisting of the code units in
    the TRV of _TemplateCharacter_ followed by all the code units in the
    TRV of _TemplateCharacters,_ in order.

-   The TRV of _TemplateCharacter_ :: _SourceCharacter_ BUT NOT ONE OF `
    OR \ OR $ OR _LineTerminator_ is the UTF16Encoding (10.1.1) of the
    code point value of _SourceCharacter_.

-   The TRV of _TemplateCharacter_ :: $ is the code unit value 0x0024.

-   The TRV of _TemplateCharacter_ :: \ _EscapeSequence_ is the sequence
    consisting of the code unit value 0x005C followed by the code units
    of TRV of _EscapeSequence_.

-   The TRV of _TemplateCharacter_ :: _LineContinuation_ is the TRV of
    _LineContinuation_.

-   The TRV of _TemplateCharacter_ :: _LineTerminatorSequence_ is the
    TRV of _LineTerminatorSequence_.

-   The TRV of _EscapeSequence_ :: _CharacterEscapeSequence_ is the TRV
    of the _CharacterEscapeSequence_.

-   The TRV of _EscapeSequence_ :: 0 is the code unit value 0x0030.

-   The TRV of _EscapeSequence_ :: _HexEscapeSequence_ is the TRV of the
    _HexEscapeSequence_.

-   The TRV of _EscapeSequence_ :: _UnicodeEscapeSequence_ is the TRV of
    the _UnicodeEscapeSequence_.

-   The TRV of _CharacterEscapeSequence_ :: _SingleEscapeCharacter_ is
    the TRV of the _SingleEscapeCharacter_.

-   The TRV of _CharacterEscapeSequence_ :: _NonEscapeCharacter_ is the
    SV of the _NonEscapeCharacter_.

-   The TRV of _SingleEscapeCharacter_ :: ONE OF ' " \ B F N R T V is
    the SV of the _SourceCharacter_ that is that single code point.

-   The TRV of _HexEscapeSequence_ :: X _HexDigit HexDigit_ is the
    sequence consisting of code unit value 0x0078 followed by TRV of the
    first _HexDigit_ followed by the TRV of the second _HexDigit_.

-   The TRV of _UnicodeEscapeSequence_ :: U _Hex4Digits_ is the sequence
    consisting of code unit value 0x0075 followed by TRV of
    _Hex4Digits_.

-   The TRV of _UnicodeEscapeSequence_ :: U{ _HexDigits_ } is the
    sequence consisting of code unit value 0x0075 followed by code unit
    value 0x007B followed by TRV of _HexDigits_ followed by code unit
    value 0x007D.

-   The TRV of _Hex4Digits_ :: _HexDigit_ _HexDigit_ _HexDigit_
    _HexDigit_ is the sequence consisting of the TRV of the first
    _HexDigit_ followed by the TRV of the second _HexDigit_ followed by
    the TRV of the third _HexDigit_ followed by the TRV of the fourth
    _HexDigit_.

-   The TRV of _HexDigits_ :: _HexDigit_ is the TRV of _HexDigit_.

-   The TRV of _HexDigits_ :: _HexDigits_ _HexDigit_ is the sequence
    consisting of TRV of _HexDigits_ followed by TRV of _HexDigit_.

-   The TRV of a _HexDigit_ is the SV of the _SourceCharacter_ that is
    that _HexDigit_.

-   The TRV of _LineContinuation_ :: \ _LineTerminatorSequence_ is the
    sequence consisting of the code unit value 0x005C followed by the
    code units of TRV of _LineTerminatorSequence_.

-   The TRV of _LineTerminatorSequence_ :: <LF> is the code unit value
    0x000A.

-   The TRV of _LineTerminatorSequence_ :: <CR> is the code unit value
    0x000A.

-   The TRV of _LineTerminatorSequence_ :: <LS> is the code unit value
    0x2028.

-   The TRV of _LineTerminatorSequence_ :: <PS> is the code unit value
    0x2029.

-   The TRV of _LineTerminatorSequence_ :: <CR><LF> is the sequence
    consisting of the code unit value 0x000A.

NOTE TV excludes the code units of _LineContinuation_ while TRV includes
them. <CR><LF> and <CR> _LineTerminatorSequences_ are normalized to <LF>
for both TV and TRV. An explicit _EscapeSequence_ is needed to include a
<CR> or <CR><LF> sequence.


Automatic Semicolon Insertion

Certain ECMAScript statements (empty statement, LET, CONST, IMPORT, and
EXPORT declarations, variable statement, expression statement, DEBUGGER
statement, CONTINUE statement, BREAK statement, RETURN statement, and
THROW statement) must be terminated with semicolons. Such semicolons may
always appear explicitly in the source text. For convenience, however,
such semicolons may be omitted from the source text in certain
situations. These situations are described by saying that semicolons are
automatically inserted into the source code token stream in those
situations.

Rules of Automatic Semicolon Insertion

In the following rules, “token” means the actual recognized lexical
token determined using the current lexical goal symbol as described in
clause 11.

There are three basic rules of semicolon insertion:

1.  When, as a _Script_ or _Module_ is parsed from left to right, a
    token (called the _offending token_) is encountered that is not
    allowed by any production of the grammar, then a semicolon is
    automatically inserted before the offending token if one or more of
    the following conditions is true:

-   The offending token is separated from the previous token by at least
      one _LineTerminator_.

-   The offending token is }.

-   The previous token is ) and the inserted semicolon would then be
      parsed as the terminating semicolon of a do-while statement
      (13.6.1).

    1.  When, as the _Script_ or _Module_ is parsed from left to right,
        the end of the input stream of tokens is encountered and the
        parser is unable to parse the input token stream as a single
        complete ECMAScript _Script_ or _Module_, then a semicolon is
        automatically inserted at the end of the input stream.

    2.  When, as the _Script_ or _Module_ is parsed from left to right,
        a token is encountered that is allowed by some production of the
        grammar, but the production is a _restricted production_ and the
        token would be the first token for a terminal or nonterminal
        immediately following the annotation “[no _LineTerminator_
        here]” within the restricted production (and therefore such a
        token is called a restricted token), and the restricted token is
        separated from the previous token by at least one
        _LineTerminator_, then a semicolon is automatically inserted
        before the restricted token.

However, there is an additional overriding condition on the preceding
rules: a semicolon is never inserted automatically if the semicolon
would then be parsed as an empty statement or if that semicolon would
become one of the two semicolons in the header of a FOR statement (see
13.6.3).

NOTE The following are the only restricted productions in the grammar:

PostfixExpression~[Yield]~ :

LeftHandSideExpression~[?Yield]~ [no LineTerminator here] ++
LeftHandSideExpression~[?Yield]~ [no LineTerminator here] --

ContinueStatement~[Yield]~ :

CONTINUE;
CONTINUE [no LineTerminator here] LabelIdentifier~[?Yield]~ ;

BreakStatement~[Yield]~ :

BREAK ;
BREAK [no LineTerminator here] LabelIdentifier~[?Yield]~ ;

ReturnStatement~[Yield]~ :

RETURN [no LineTerminator here] Expression ;
RETURN [no LineTerminator here] Expression~[In,\ ?Yield]~ ;

ThrowStatement~[Yield]~ :

THROW [no LineTerminator here] Expression~[In,\ ?Yield]~ ;

_ArrowFunction_~[In,\ Yield]~ :

_ArrowParameters_~[?Yield]~ [no LineTerminator here] =>
_ConciseBody_~[?In]~

YieldExpression~[In]~ :

YIELD [no LineTerminator here] * AssignmentExpression~[?In,\ Yield]~
YIELD [no LineTerminator here] AssignmentExpression~[?In,\ Yield]~

The practical effect of these restricted productions is as follows:

  When a ++ or -- token is encountered where the parser would treat it
  as a postfix operator, and at least one _LineTerminator_ occurred
  between the preceding token and the ++ or -- token, then a semicolon
  is automatically inserted before the ++ or -- token.

  When a CONTINUE, BREAK, RETURN, THROW, or YIELD token is encountered
  and a _LineTerminator_ is encountered before the next token, a
  semicolon is automatically inserted after the CONTINUE, BREAK, RETURN,
  THROW, or YIELD token.

The resulting practical advice to ECMAScript programmers is:

  A postfix ++ or -- operator should appear on the same line as its
  operand.

  An _Expression_ in a RETURN or THROW statement or an
  _AssignmentExpression_ in a YIELD expression should start on the same
  line as the RETURN, THROW, or YIELD token.

  An _IdentifierReference_ in a BREAK or CONTINUE statement should be on
  the same line as the BREAK or CONTINUE token.

Examples of Automatic Semicolon Insertion

The source

  { 1 2 } 3

is not a valid sentence in the ECMAScript grammar, even with the
automatic semicolon insertion rules. In contrast, the source

  { 1
  2 } 3

is also not a valid ECMAScript sentence, but is transformed by automatic
semicolon insertion into the following:

  { 1
  ;2 ;} 3;

which is a valid ECMAScript sentence.

The source

  for (a; b
  )

is not a valid ECMAScript sentence and is not altered by automatic
semicolon insertion because the semicolon is needed for the header of a
FOR statement. Automatic semicolon insertion never inserts one of the
two semicolons in the header of a FOR statement.

The source

  return
  a + b

is transformed by automatic semicolon insertion into the following:

  return;
  a + b;

NOTE The expression A + B is not treated as a value to be returned by
the RETURN statement, because a _LineTerminator_ separates it from the
token RETURN.

The source

  a = b
  ++c

is transformed by automatic semicolon insertion into the following:

  a = b;
  ++c;

NOTE The token ++ is not treated as a postfix operator applying to the
variable B, because a _LineTerminator_ occurs between B and ++.

The source

  if (a > b)
  else c = d

is not a valid ECMAScript sentence and is not altered by automatic
semicolon insertion before the ELSE token, even though no production of
the grammar applies at that point, because an automatically inserted
semicolon would then be parsed as an empty statement.

The source

  a = b + c
  (d + e).print()

is _not_ transformed by automatic semicolon insertion, because the
parenthesized expression that begins the second line can be interpreted
as an argument list for a function call:

a = b + c(d + e).print()

In the circumstance that an assignment statement must begin with a left
parenthesis, it is a good idea for the programmer to provide an explicit
semicolon at the end of the preceding statement rather than to rely on
automatic semicolon insertion.



ECMASCRIPT LANGUAGE: EXPRESSIONS 


Identifiers

SYNTAX

IdentifierReference~[Yield]~ :

Identifier
[~Yield] YIELD

_BindingIdentifier_~[Yield]~ :

  _Identifier
  _[~Yield] YIELD

LabelIdentifier~[Yield]~ :

_Identifier
[~Yield] YIELD

Identifier :

IdentifierName BUT NOT ReservedWord

Static Semantics: Early Errors

_BindingIdentifier_ : _Identifier

-   It is a Syntax Error if the code matched by this production is
    contained in strict mode code and the StringValue of _Identifier_ is
    "ARGUMENTS" or "EVAL".

_IdentifierReference_ : YIELD

_BindingIdentifier_ : YIELD

_LabelIdentifier_ : YIELD

-   -   It is a Syntax Error if the code matched by this production is
    contained in strict code_._

-   

_IdentifierReference_~[Yield]~ : _Identifier

_BindingIdentifier_~[Yield]~ : _Identifier

_LabelIdentifier_~[Yield]~ : _Identifier

-   It is a Syntax Error if this production has a ~[Yield]~ parameter
    and StringValue of _Identifier_ is "YIELD".

_Identifier_ : _IdentifierName_ BUT NOT _ReservedWord

-   It is a Syntax Error if this phrase is contained in strict mode code
    and the StringValue of _IdentifierName_ is: "IMPLEMENTS",
    "INTERFACE", "LET", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC",
    "STATIC", or "YIELD".

-   It is a Syntax Error if StringValue of _IdentifierName_ is the same
    string value as the StringValue of any _ReservedWord_ except for
    YIELD.

NOTE StringValue of _IdentifierName_ normalizes any Unicode escape
sequences in _IdentifierName_ hence such escapes cannot be used to write
an _Identifier_ whose code point sequence is the same as a
_ReservedWord_.

Static Semantics: BoundNames

See also: 13.2.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.1.3, 14.2.2,
14.4.2, 14.5.2, 15.2.2.2, 15.2.3.2.

_BindingIdentifier_ : _Identifier

1.  Return a new List containing the StringValue of _Identifier_.

_BindingIdentifier_ : YIELD

1.  Return a new List containing "YIELD".

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.2.0.5, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2, 12.7.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

_IdentifierReference_ _:_ _Identifier

1.  If this _IdentifierReference_ is contained in strict mode code and
    StringValue of _Identifier_ is "EVAL" or "ARGUMENTS", return FALSE.

2.  Return TRUE.

_IdentifierReference_ : YIELD

1.  Return TRUE.

Static Semantics: StringValue

See also: 11.6.1.2, 11.8.4.2.

_IdentifierReference_ : YIELD

_BindingIdentifier_ : YIELD

_LabelIdentifier_ : YIELD

1.  Return "YIELD".

_Identifier_ : _IdentifierName_ BUT NOT _ReservedWord

1.  Return the StringValue of _IdentifierName_.

Runtime Semantics: BindingInitialization

  With arguments _value_ and _environment_.

See also: 13.2.3.5, 13.6.4.9.

NOTE UNDEFINED is passed for _environment_ to indicate that a PutValue
operation should be used to assign the initialization value. This is the
case for VAR statements and formal parameter lists of some non-strict
functions (See 9.2.12). In those cases a lexical binding is hoisted and
preinitialized prior to evaluation of its initializer.

_BindingIdentifier_ _:_ _Identifier

1.  Let _name_ be StringValue of _Identifier_.

2.  Return InitializeBoundName( _name_, _value_, _environment_).

_BindingIdentifier_ : YIELD

1.  Return InitializeBoundName("YIELD", _value_, _environment_).

Runtime Semantics: InitializeBoundName(name, value, environment)

1.  Assert: Type(_name_) is String.

2.  If _environment_ is not UNDEFINED, then

    a.  Let _env_ be the EnvironmentRecord component of _environment_.

    b.  Perform _env_.InitializeBinding(_name_, _value_).

    c.  Return NormalCompletion(UNDEFINED).

3.  Else

    a.  Let _lhs_ be ResolveBinding(_name_).

    b.  Return PutValue(_lhs_, _value_).

Runtime Semantics: Evaluation

_IdentifierReference_ : _Identifier

1.  Return ResolveBinding(StringValue of _Identifier_).

_IdentifierReference_ : YIELD

1.  Return ResolveBinding("YIELD").

NOTE 1: The result of evaluating an _IdentifierReference_ is always a
value of type Reference.

NOTE 2: In non-strict code, the keyword YIELD may be used as an
identifier. Evaluating the _IdentifierReference_ production resolves the
binding of YIELD as if it was an _Identifier_. Early Error restriction
ensures that such an evaluation only can occur for non-strict code. See
13.2.1 for the handling of YIELD in binding creation contexts.


Primary Expression

Syntax

PrimaryExpression~[Yield]~ :

THIS
IdentifierReference~[?Yield]~
Literal
ArrayLiteral~[?Yield]~
ObjectLiteral~[?Yield]~
FunctionExpression
ClassExpression~[?Yield]~
GeneratorExpression
RegularExpressionLiteral
TemplateLiteral~[?Yield]~
CoverParenthesizedExpressionAndArrowParameterList~[?Yield]~

CoverParenthesizedExpressionAndArrowParameterList~[Yield]~ :

( Expression~[In,\ ?Yield]~ )
( )
( ... BindingIdentifier~[?Yield]~ )
( Expression~[In,\ ?Yield]~ , ... BindingIdentifier~[?Yield]~ )

Supplemental Syntax

When processing the production

_PrimaryExpression_~[Yield]~ :
_CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~
_the interpretation of
_CoverParenthesizedExpressionAndArrowParameterList_ is refined using the
following grammar:

_ParenthesizedExpression_~[Yield]~ :

( Expression~[In,\ ?Yield]~ )

Semantics

Static Semantics: CoveredParenthesizedExpression

CoverParenthesizedExpressionAndArrowParameterList~[Yield]~ : (
Expression~[In,\ ?Yield]~ )

1.  Return the result of parsing the lexical token stream matched by
    _CoverParenthesizedExpressionAndArrowParameterList_~[Yield]~ using
    either _ParenthesizedExpression_ or
    _ParenthesizedExpression_~[Yield]~ as the goal symbol depending upon
    whether the ~[Yield]~ grammar parameter was present when
    _CoverParenthesizedExpressionAndArrowParameterList_ was matched.

Static Semantics: HasName

See also: 14.1.8, 14.2.7, 14.4.7, 14.5.6.

_PrimaryExpression_ :
_CoverParenthesizedExpressionAndArrowParameterList

1.  Let _expr_ be CoveredParenthesizedExpression of
    _CoverParenthesizedExpressionAndA.rrowParameterList_.

2.  If IsFunctionDefinitionOf _expr_ is FALSE, return FALSE.

3.  Return HasName of _expr_.

Static Semantics: IsFunctionDefinition

See also: 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1, 12.8.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

PrimaryExpression :

THIS
IdentifierReference
Literal
ArrayLiteral
ObjectLiteral
RegularExpressionLiteral
TemplateLiteral

1.  Return FALSE.

_PrimaryExpression_ :
_CoverParenthesizedExpressionAndArrowParameterList

1.  Let _expr_ be CoveredParenthesizedExpression of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return IsFunctionDefinition of _expr_.

Static Semantics: IsIdentifierRef

See also: 12.3.1.4.

PrimaryExpression :

IdentifierReference

1.  Return TRUE.

PrimaryExpression :

THIS
Literal
ArrayLiteral
ObjectLiteral
FunctionExpression
ClassExpression
GeneratorExpression
RegularExpressionLiteral
TemplateLiteral
CoverParenthesizedExpressionAndArrowParameterList

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2, 12.7.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

PrimaryExpression :

THIS
Literal
ArrayLiteral
ObjectLiteral
FunctionExpression
ClassExpression
GeneratorExpression
RegularExpressionLiteral
TemplateLiteral

1.  Return FALSE.

_PrimaryExpression_ :
_CoverParenthesizedExpressionAndArrowParameterList

1.  Let _expr_ be CoveredParenthesizedExpression of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return IsValidSimpleAssignmentTarget of _expr_.

The this Keyword

Runtime Semantics: Evaluation

_PrimaryExpression_ : THIS

1.  Return ResolveThisBinding( ) .

Identifier Reference

See 12.1 for _IdentifierReference_.

Literals 

Syntax

Literal :

NullLiteral
BooleanLiteral
NumericLiteral
StringLiteral

Runtime Semantics: Evaluation

_Literal_ : _NullLiteral

1.  Return NULL.

_Literal_ : _BooleanLiteral

1.  Return FALSE if _BooleanLiteral_ is the token FALSE.

2.  Return TRUE if _BooleanLiteral_ is the token TRUE.

_Literal_ : _NumericLiteral

1.  Return the number whose value is MV of _NumericLiteral_ as defined
    in 11.8.3.

_Literal_ _: StringLiteral

1.  Return the StringValue of _StringLiteral_ as defined in 11.8.4.2.

Array Initializer

NOTE An _ArrayLiteral_ is an expression describing the initialization of
an Array object, using a list, of zero or more expressions each of which
represents an array element, enclosed in square brackets. The elements
need not be literals; they are evaluated each time the array initializer
is evaluated.

Array elements may be elided at the beginning, middle or end of the
element list. Whenever a comma in the element list is not preceded by an
_AssignmentExpression_ (i.e., a comma at the beginning or after another
comma), the missing array element contributes to the length of the Array
and increases the index of subsequent elements. Elided array elements
are not defined. If an element is elided at the end of an array, that
element does not contribute to the length of the Array.

Syntax

ArrayLiteral~[Yield]~ :

[ Elision~opt~ ]
[ ElementList~[?Yield]~ ]
[ ElementList~[?Yield]~ , Elision~opt~ ]

ElementList~[Yield]~ :

Elision~opt~ AssignmentExpression~[In,\ ?Yield]~
Elision~opt~ SpreadElement~[?Yield]~
ElementList~[?Yield]~ , Elision~opt~ AssignmentExpression~[In,\ ?Yield]~
ElementList~[?Yield]~ , Elision~opt~ SpreadElement~[?Yield]~

Elision :

,
Elision ,

SpreadElement~[Yield]~ :

... AssignmentExpression~[In,\ ?Yield]~

Static Semantics: ElisionWidth

_Elision_ : ,

1.  Return the numeric value 1.

_Elision_ : _Elision_ ,

1.  Let _preceding_ be the ElisionWidth of _Elision_.

2.  Return _preceding_+1.

Runtime Semantics: ArrayAccumulation

  With parameters _array_ and _nextIndex_.

_ElementList_ : _Elision_~opt~ _AssignmentExpression

1.  Let _padding_ be the ElisionWidth of _Elision_; if _Elision_ is not
    present, use the numeric value zero.

2.  Let _initResult_ be the result of evaluating _AssignmentExpression_.

3.  Let _initValue_ be GetValue(_initResult_).

4.  ReturnIfAbrupt(_initValue_).

5.  Let _created_ be CreateDataProperty(_array_,
    ToString(ToUint32(_nextIndex+padding_)), _initValue_).

6.  Assert: _created_ is TRUE_.

7.  Return _nextIndex+padding+_1.

_ElementList_ : _Elision_~opt~ _SpreadElement

1.  Let _padding_ be the ElisionWidth of _Elision_; if _Elision_ is not
    present, use the numeric value zero.

2.  Return the result of performing ArrayAccumulation for
    _SpreadElement_ with arguments _array_ and _nextIndex_+_padding_.

_ElementList_ : _ElementList_ , _Elision_~opt~ _AssignmentExpression

1.  Let _postIndex_ be the result of performing ArrayAccumulation for
    _ElementList_ with arguments _array_ and _nextIndex_.

2.  ReturnIfAbrupt(_postIndex_).

3.  Let _padding_ be the ElisionWidth of _Elision_; if _Elision_ is not
    present, use the numeric value zero.

4.  Let _initResult_ be the result of evaluating _AssignmentExpression_.

5.  Let _initValue_ be GetValue(_initResult_).

6.  ReturnIfAbrupt(_initValue_).

7.  Let _created_ be CreateDataProperty(_array_,
    ToString(ToUint32(_postIndex_+_padding_)), _initValue_).

8.  Assert: _created_ is TRUE.

9.  Return _postIndex_+_padding+_1.

_ElementList_ : _ElementList_ , _Elision_~opt~ _SpreadElement

1.  Let _postIndex_ be the result of performing ArrayAccumulation for
    _ElementList_ with arguments _array_ and _nextIndex_.

2.  ReturnIfAbrupt(_postIndex_).

3.  Let _padding_ be the ElisionWidth of _Elision_; if _Elision_ is not
    present, use the numeric value zero.

4.  Return the result of performing ArrayAccumulation for
    _SpreadElement_ with arguments _array_ and _postIndex_+_padding_.

_SpreadElement_ : ... _AssignmentExpression

1.  Let _spreadRef_ be the result of evaluating _AssignmentExpression_.

2.  Let _spreadObj_ be GetValue(_spreadRef_).

3.  Let _iterator_ be GetIterator(_spreadObj_).

4.  ReturnIfAbrupt(_iterator_).

5.  Repeat

    a.  Let _next_ be IteratorStep(_iterator_).

    b.  ReturnIfAbrupt(_next_).

    c.  If _next_ is FALSE, return _nextIndex_.

    d.  Let _nextValue_ be IteratorValue(_next_).

    e.  ReturnIfAbrupt(_nextValue_).

    f.  Let _status_ be CreateDataProperty(_array_,
        ToString(_nextIndex_), _nextValue_).

    g.  Assert: _status_ is TRUE .

    h.  Let _nextIndex_ be _nextIndex_ + 1.

NOTE CreateDataProperty is used to ensure that own properties are
defined for the array even if the standard built-in Array prototype
object has been modified in a manner that would preclude the creation of
new own properties using [[Set]].

Runtime Semantics: Evaluation

_ArrayLiteral_ : [ _Elision_~opt~ ]

1.  Let _array_ be ArrayCreate(0).

2.  Let _pad_ be the ElisionWidth of _Elision_; if _Elision_ is not
    present, use the numeric value zero.

3.  Perform Set(_array_, "LENGTH", _pad_, FALSE).

4.  NOTE: The above Set cannot fail because of the nature of the object
    returned by ArrayCreate.

5.  Return _array_.

_ArrayLiteral_ : [ _ElementList_ ]

1.  Let _array_ be ArrayCreate(0).

2.  Let _len_ be the result of performing ArrayAccumulation for
    _ElementList_ with arguments _array_ and 0.

3.  ReturnIfAbrupt(_len_).

4.  Perform Set(_array_, "LENGTH", _len_, FALSE).

5.  NOTE: The above Set cannot fail because of the nature of the object
    returned by ArrayCreate.

6.  Return _array_.

_ArrayLiteral_ : [ _ElementList_ , _Elision_~opt~ ]

1.  Let _array_ be ArrayCreate(0).

2.  Let _len_ be the result of performing ArrayAccumulation for
    _ElementList_ with arguments _array_ and 0.

3.  ReturnIfAbrupt(_len_).

4.  Let _padding_ be the ElisionWidth of _Elision_; if _Elision_ is not
    present, use the numeric value zero.

5.  Perform Set(_array_, "LENGTH", ToUint32(_padding_+_len_), FALSE).

6.  NOTE: The above Set cannot fail because of the nature of the object
    returned by ArrayCreate.

7.  Return _array_.

Object Initializer

NOTE 1 An object initializer is an expression describing the
initialization of an Object, written in a form resembling a literal. It
is a list of zero or more pairs of property keys and associated values,
enclosed in curly brackets. The values need not be literals; they are
evaluated each time the object initializer is evaluated.

Syntax

ObjectLiteral~[Yield]~ :

{ }
{ PropertyDefinitionList~[?Yield]~ }
{ PropertyDefinitionList~[?Yield]~ , }

PropertyDefinitionList~[Yield]~ :

PropertyDefinition~[?Yield]~
PropertyDefinitionList~[?Yield]~ , PropertyDefinition~[?Yield]~

PropertyDefinition~[Yield]~ :

IdentifierReference~[?Yield]~
CoverInitializedName~[?Yield]~
PropertyName~[?Yield]~ : AssignmentExpression~[In,\ ?Yield]~
MethodDefinition~[?Yield]~

PropertyName~[Yield,GeneratorParameter]~ :

LiteralPropertyName
[+GeneratorParameter] ComputedPropertyName
[~GeneratorParameter] ComputedPropertyName~[?Yield]~

LiteralPropertyName :

IdentifierName
StringLiteral
NumericLiteral

ComputedPropertyName~[Yield]~ :

[ AssignmentExpression~[In,\ ?Yield]~ ]

CoverInitializedName~[Yield]~ :

IdentifierReference~[?Yield]~ Initializer~[In,\ ?Yield]~

Initializer~[In,\ Yield]~ :

= AssignmentExpression~[?In,\ ?Yield]~

NOTE 2 _MethodDefinition_ is defined in 14.3.

NOTE 3 In certain contexts, _ObjectLiteral_ is used as a cover grammar
for a more restricted secondary grammar. The _CoverInitializedName_
production is necessary to fully cover these secondary grammars.
However, use of this production results in an early Syntax Error in
normal contexts where an actual _ObjectLiteral_ is expected.

Static Semantics: Early Errors

_PropertyDefinition_ : _MethodDefinition

-   It is a Syntax Error if HasDirectSuper of _MethodDefinition_ is
    TRUE.

In addition to describing an actual object initializer the
_ObjectLiteral_ productions are also used as a cover grammar for
_ObjectAssignmentPattern_ (12.14.5). and may be recognized as part of a
_CoverParenthesizedExpressionAndArrowParameterList_. When
_ObjectLiteral_ appears in a context where _ObjectAssignmentPattern_ is
required the following Early Error rules are NOT applied. In addition,
they are not applied when initially parsing a
_CoverParenthesizedExpressionAndArrowParameterList.

_PropertyDefinition_ : _CoverInitializedName

-   Always throw a Syntax Error if code matches this production.

NOTE This production exists so that _ObjectLiteral_ can serve as a cover
grammar for _ObjectAssignmentPattern_ (12.14.5). It cannot occur in an
actual object initializer.

Static Semantics: ComputedPropertyContains

  With parameter _symbol_.

See also: 14.3.2, 14.4.3, 14.5.5.

_PropertyName_ : _LiteralPropertyName

1.  Return FALSE.

_PropertyName_ : _ComputedPropertyName

1.  Return the result of _ComputedPropertyName_ Contains _symbol_.

Static Semantics: Contains

  With parameter _symbol_.

See also: 5.3, 12.3.1.1, 14.1.4, 14.2.3, 14.4.4, 14.5.4.

_PropertyDefinition_ : _MethodDefinition

1.  If _symbol_ is _MethodDefinition_, return TRUE.

2.  Return the result of ComputedPropertyContains for _MethodDefinition
    with argument _symbol_.

NOTE Static semantic rules that depend upon substructure generally do
not look into function definitions.

_LiteralPropertyName_ : _IdentifierName

1.  If _symbol_ is a _ReservedWord_, return FALSE.

2.  If _symbol_ is an _Identifier_ and StringValue of _symbol_ is the
    same value as the StringValue of _IdentifierName_, return TRUE;

3.  Return FALSE.

Static Semantics: HasComputedPropertyKey

See also: 14.3.4, 14.4.5

_PropertyDefinitionList_ : _PropertyDefinitionList_ ,
_PropertyDefinition

1.  If HasComputedPropertyKey of _PropertyDefinitionList_ is TRUE,
    return TRUE.

2.  Return HasComputedPropertyKey of _PropertyDefinition_.

_PropertyDefinition_ : _IdentifierReference

1.  Return FALSE.

_PropertyDefinition_ : _PropertyName_ : _AssignmentExpression

1.  Return IsComputedPropertyKey of _PropertyName_.

Static Semantics: IsComputedPropertyKey

_PropertyName_ : _LiteralPropertyName

1.  Return FALSE.

_PropertyName_ : _ComputedPropertyName

1.  Return TRUE.

Static Semantics: PropName

See also: 14.3.6, 14.4.10, 14.5.12

_PropertyDefinition_ : _IdentifierReference

1.  Return StringValue of _IdentifierReference_.

_PropertyDefinition_ : _PropertyName_ : _AssignmentExpression

1.  Return PropName of _PropertyName_.

_LiteralPropertyName_ : _IdentifierName

1.  Return StringValue of _IdentifierName_.

_LiteralPropertyName_ : _StringLiteral

1.  Return a String value whose code units are the SV of the
    _StringLiteral_.

_LiteralPropertyName_ : _NumericLiteral

1.  Let _nbr_ be the result of forming the value of the
    _NumericLiteral_.

2.  Return ToString(_nbr_).

_ComputedPropertyName_ : [ _AssignmentExpression_ ]

1.  Return empty.

Static Semantics: PropertyNameList

_PropertyDefinitionList_ : _PropertyDefinition

1.  If PropName of _PropertyDefinition_ is empty, return a new empty
    List.

2.  Return a new List containing PropName of _PropertyDefinition_.

_PropertyDefinitionList_ : _PropertyDefinitionList_ ,
_PropertyDefinition

1.  Let _list_ be PropertyNameList of _PropertyDefinitionList.

2.  If PropName of _PropertyDefinition_ is empty, return _list_.

3.  Append PropName of _PropertyDefinition_ to the end of _list_.

4.  Return _list_.

Runtime Semantics: Evaluation

_ObjectLiteral_ : { }

1.  Return ObjectCreate(%ObjectPrototype%).

_ObjectLiteral_ :
 { _PropertyDefinitionList_ }_
_ { _PropertyDefinitionList_ , }

1.  Let _obj_ be ObjectCreate(%ObjectPrototype%).

2.  Let _status_ be the result of performing
    PropertyDefinitionEvaluation of _PropertyDefinitionList_ with
    arguments _obj_ and TRUE.

3.  ReturnIfAbrupt(_status_).

4.  Return _obj_.

_LiteralPropertyName_ : _IdentifierName

1.  Return StringValue of _IdentifierName_.

_LiteralPropertyName_ : _StringLiteral

1.  Return a String value whose code units are the SV of the
    _StringLiteral_.

_LiteralPropertyName_ : _NumericLiteral

1.  Let _nbr_ be the result of forming the value of the
    _NumericLiteral_.

2.  Return ToString(_nbr_).

_ComputedPropertyName_ : [ _AssignmentExpression_ ]

1.  Let _exprValue_ be the result of evaluating _AssignmentExpression_.

2.  Let _propName_ be GetValue(_exprValue_).

3.  ReturnIfAbrupt(_propName_).

4.  Return ToPropertyKey(_propName_).

Runtime Semantics: PropertyDefinitionEvaluation

  With parameter _object_ and _enumerable_.

See also: 14.3.9, 14.4.13, B.3.1

_PropertyDefinitionList_ : _PropertyDefinitionList_ ,
_PropertyDefinition

1.  Let _status_ be the result of performing
    PropertyDefinitionEvaluation of _PropertyDefinitionList_ with
    arguments _object_ and _enumerable_.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing PropertyDefinitionEvaluation of
    _PropertyDefinition_ with arguments _object_ and _enumerable_.

_PropertyDefinition_ : _IdentifierReference

1.  Let _propName_ be StringValue of _IdentifierReference_.

2.  Let _exprValue_ be the result of evaluating _IdentifierReference_.

3.  ReturnIfAbrupt(_exprValue_).

4.  Let _propValue_ be GetValue(_exprValue_).

5.  ReturnIfAbrupt(_propValue_).

6.  Assert: _enumerable_ is TRUE.

7.  Return CreateDataPropertyOrThrow(_object_, _propName_, _propValue_).

_PropertyDefinition_ : _PropertyName_ : _AssignmentExpression

1.  Let _propKey_ be the result of evaluating _PropertyName_.

2.  ReturnIfAbrupt(_propKey_).

3.  Let _exprValueRef_ be the result of evaluating
    _AssignmentExpression_.

4.  Let _propValue_ be GetValue(_exprValueRef_).

5.  ReturnIfAbrupt(_propValue_).

6.  7.  If IsAnonymousFunctionDefinition(_AssignmentExpression_) is
    TRUE, then

    a.  Let _hasNameProperty_ be HasOwnProperty(_propValue_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform
        SetFunctionName(_propValue_, _propKey_).

8.  Assert: _enumerable_ is TRUE.

9.  Return CreateDataPropertyOrThrow(_object_, _propKey_, _propValue_).

_NOTE An alternative semantics for this production is given in B.3.1.

Function Defining Expressions

See 14.1 for _PrimaryExpression_ : _FunctionExpression_.

See 14.4 for _PrimaryExpression_ : _GeneratorExpression_.

See 14.5 for _PrimaryExpression_ : _ClassExpression_.

Regular Expression Literals

Syntax

See 11.8.4.

Static Semantics: Early Errors

_PrimaryExpression_ : _RegularExpressionLiteral

-   It is a Syntax Error if BodyText of _RegularExpressionLiteral_
    cannot be recognized using the goal symbol _Pattern_ of the
    ECMAScript RegExp grammar specified in 21.2.1_._

-   It is a Syntax Error if FlagText of _RegularExpressionLiteral_
    contains any code points other than "G", "I", "M", "U", or "Y", or
    if it contains the same code point more than once.

Runtime Semantics: Evaluation

_PrimaryExpression_ : _RegularExpressionLiteral

1.  Let _pattern_ be the string value consisting of the UTF16Encoding of
    each code point of BodyText of _RegularExpressionLiteral_.

2.  Let _flags_ be the string value consisting of the UTF16Encoding of
    each code point of FlagText of _RegularExpressionLiteral_.

3.  Return RegExpCreate(_pattern_, _flags_).

Template Literals 

Syntax

TemplateLiteral~[Yield]~ :

NoSubstitutionTemplate
TemplateHead _Expression_~[In,\ ?Yield]~ TemplateSpans~[?Yield]~

TemplateSpans~[Yield]~ :

TemplateTail
TemplateMiddleList~[?Yield]~ TemplateTail

TemplateMiddleList~[Yield]~ :

TemplateMiddle _Expression_~[In,\ ?Yield]~
TemplateMiddleList~[?Yield]~ TemplateMiddle _Expression_~[In,\ ?Yield]~

Static Semantics: TemplateStrings

  With parameter _raw_.

_TemplateLiteral_ : _NoSubstitutionTemplate

1.  If _raw_ is FALSE, then

    a.  Let _string_ be the TV of _NoSubstitutionTemplate_.

2.  Else,

    a.  Let _string_ be the TRV of _NoSubstitutionTemplate_.

3.  Return a List containing the single element, _string_.

_TemplateLiteral_ : _TemplateHead_ _Expression_ _TemplateSpans

1.  If _raw_ is FALSE, then

    a.  Let _head_ be the TV of _TemplateHead_.

2.  Else,

    a.  Let _head_ be the TRV of _TemplateHead_.

3.  Let _tail_ be TemplateStrings of _TemplateSpans_ with argument
    _raw_.

4.  Return a List containing _head_ followed by the element, in order of
    _tail_.

_TemplateSpans_ : _TemplateTail

1.  If _raw_ is FALSE, then

    a.  Let _tail_ be the TV of _TemplateTail_.

2.  Else,

    a.  Let _tail_ be the TRV of _TemplateTail_.

3.  Return a List containing the single element, _tail_.

_TemplateSpans_ : _TemplateMiddleList_ _TemplateTail

1.  Let _middle_ be TemplateStrings of _TemplateMiddleList_ with
    argument _raw_.

2.  If _raw_ is FALSE, then

    a.  Let _tail_ be the TV of _TemplateTail_.

3.  Else,

    a.  Let _tail_ be the TRV of _TemplateTail_.

4.  Return a List containing the elements, in order, of _middle
    followed by _tail_.

_TemplateMiddleList_ : _TemplateMiddle_ _Expression

1.  If _raw_ is FALSE, then

    a.  Let _string_ be the TV of _TemplateMiddle_.

2.  Else,

    a.  Let _string_ be the TRV of _TemplateMiddle_.

3.  Return a List containing the single element, _string_.

_TemplateMiddleList_ : _TemplateMiddleList_ _TemplateMiddle
_Expression

1.  Let _front_ be TemplateStrings of _TemplateMiddleList_ with argument
    _raw_.

2.  If _raw_ is FALSE, then

    a.  Let _last_ be the TV of _TemplateMiddle_.

3.  Else,

    a.  Let _last_ be the TRV of _TemplateMiddle_.

4.  Append _last_ as the last element of the List _front_.

5.  Return _front_.

Runtime Semantics: ArgumentListEvaluation

See also: 12.3.6.1

_TemplateLiteral_ : _NoSubstitutionTemplate

1.  Let _templateLiteral_ be this _TemplateLiteral.

2.  Let _siteObj_ be GetTemplateObject(_templateLiteral_).

3.  Return a List containing the one element which is _siteObj_.

_TemplateLiteral_ : _TemplateHead Expression_ _TemplateSpans

1.  Let _templateLiteral_ be this _TemplateLiteral.

2.  Let _siteObj_ be GetTemplateObject(_templateLiteral_).

3.  Let _firstSub_ be the result of evaluating _Expression_.

4.  ReturnIfAbrupt(_firstSub_).

5.  Let _restSub_ be SubstitutionEvaluation of _TemplateSpans_.

6.  ReturnIfAbrupt(_restSub_).

7.  Assert: _restSub_ is a List.

8.  Return a List whose first element is _siteObj_, whose second
    elements is _firstSub_, and whose subsequent elements are the
    elements of _restSub_, in order. _restSub_ may contain no elements.

Runtime Semantics: GetTemplateObject ( templateLiteral )

The abstract operation GetTemplateObject is called with a grammar
production, _templateLiteral_, as an argument. It performs the following
steps:

1.  Let _rawStrings_ be TemplateStrings of _templateLiteral_ with
    argument TRUE.

2.  Let _ctx_ be the running execution context.

3.  Let _realm_ be the _ctx_’s Realm.

4.  Let _templateRegistry_ be _realm_.[[templateMap]].

5.  For each element _e_ of _templateRegistry_, do

    a.  If _e_.[[strings]] and _rawStrings_ contain the same values in
        the same order, then

        i.  Return _e._[[array]].

6.  Let _cookedStrings_ be TemplateStrings of _templateLiteral_ with
    argument FALSE.

7.  Let _count_ be the number of elements in the List _cookedStrings_.

8.  Let _template_ be ArrayCreate(_count_).

9.  Let _rawObj_ be ArrayCreate(_count_).

10. Let _index_ be 0.

11. Repeat while _index_ < _count

    a.  Let _prop_ be ToString(_index_).

    b.  Let _cookedValue_ be the string value _cookedStrings_[_index_].

    c.  Call _template_.[[DefineOwnProperty]](_prop_,
        PropertyDescriptor{[[Value]]: _cookedValue_, [[Enumerable]]:
        TRUE, [[Writable]]: FALSE, [[Configurable]]: FALSE})_._

    d.  Let _rawValue_ be the string value _rawStrings_[_index_].

    e.  Call _rawObj_.[[DefineOwnProperty]](_prop_,
        PropertyDescriptor{[[Value]]: _rawValue_, [[Enumerable]]: TRUE,
        [[Writable]]: FALSE, [[Configurable]]: FALSE})_._

    f.  Let _index_ be _index_+1.

12. Perform SetIntegrityLevel(_rawObj_, "FROZEN").

13. Call _template_.[[DefineOwnProperty]]("RAW",
    PropertyDescriptor{[[Value]]: _rawObj_, [[Writable]]: FALSE,
    [[Enumerable]]: FALSE, [[Configurable]]: FALSE})_._

14. Perform SetIntegrityLevel(_template_, "FROZEN").

15. Append the Record{[[strings]]: _rawStrings_, [[array]]: _template_}
    to _templateRegistry_.

16. Return _template_.

NOTE 1 The creation of a template object cannot result in an abrupt
completion.

NOTE 2 Each _TemplateLiteral_ in the program code of a Realm is
associated with a unique template object that is used in the evaluation
of tagged Templates (12.2.8.5). The template objects are frozen and the
same template object is used each time a specific tagged Template is
evaluated. Whether template objects are created lazily upon first
evaluation of the _TemplateLiteral_ or eagerly prior to first evaluation
is an implementation choice that is not observable to ECMAScript code.

NOTE 3 Future editions of this specification may define additional
non-enumerable properties of template objects.

Runtime Semantics: SubstitutionEvaluation

_TemplateSpans_ : _TemplateTail

1.  Return an empty List.

_TemplateSpans_ : _TemplateMiddleList_ _TemplateTail

1.  Return the result of SubstitutionEvaluation of _TemplateMiddleList_.

_TemplateMiddleList_ : _TemplateMiddle Expression

1.  Let _sub_ be the result of evaluating _Expression_.

2.  ReturnIfAbrupt(_sub_).

3.  Return a List containing only _sub_.

_TemplateMiddleList_ : _TemplateMiddleList_ _TemplateMiddle
_Expression

1.  Let _preceding_ be the result of SubstitutionEvaluation of
    _TemplateMiddleList_ .

2.  ReturnIfAbrupt(_preceding_).

3.  Let _next_ be the result of evaluating _Expression_.

4.  ReturnIfAbrupt(_next_).

5.  Append _next_ as the last element of the List _preceding_.

6.  Return _preceding_.

Runtime Semantics: Evaluation

_TemplateLiteral_ : _NoSubstitutionTemplate

1.  Return the string value whose code units are the elements of the TV
    of _NoSubstitutionTemplate_ as defined in 11.8.6.

_TemplateLiteral_ : _TemplateHead_ _Expression_ _TemplateSpans

1.  Let _head_ be the TV of _TemplateHead_ as defined in 11.8.6.

2.  Let _sub_ be the result of evaluating _Expression_.

3.  Let _middle_ be ToString(_sub_).

4.  ReturnIfAbrupt(_middle_).

5.  Let _tail_ be the result of evaluating _TemplateSpans_ .

6.  ReturnIfAbrupt(_tail_).

7.  Return the string value whose code units are the elements of _head
    followed by the elements of _middle_ followed by the elements of
    _tail_.

NOTE The string conversion semantics applied to the _Expression_ value
are like STRING.PROTOTYPE.CONCAT rather than the + operator.

_TemplateSpans_ : _TemplateTail

1.  Let _tail_ be the TV of _TemplateTail_ as defined in 11.8.6.

2.  Return the string consisting of the code units of _tail_.

_TemplateSpans_ : _TemplateMiddleList_ _TemplateTail

1.  Let _head_ be the result of evaluating _TemplateMiddleList_.

2.  ReturnIfAbrupt(_head_).

3.  Let _tail_ be the TV of _TemplateTail_ as defined in 11.8.6.

4.  Return the string whose code units are the elements of _head
    followed by the elements of _tail_.

_TemplateMiddleList_ : _TemplateMiddle_ _Expression

1.  Let _head_ be the TV of _TemplateMiddle_ as defined in 11.8.6.

2.  Let _sub_ be the result of evaluating _Expression_.

3.  Let _middle_ be ToString(_sub_).

4.  ReturnIfAbrupt(_middle_).

5.  Return the sequence of code units consisting of the code units of
    _head_ followed by the elements of _middle_.

NOTE The string conversion semantics applied to the _Expression_ value
are like STRING.PROTOTYPE.CONCAT rather than the + operator.

_TemplateMiddleList_ : _TemplateMiddleList_ _TemplateMiddle
_Expression

1.  Let _rest_ be the result of evaluating _TemplateMiddleList_ .

2.  ReturnIfAbrupt(_rest_).

3.  Let _middle_ be the TV of _TemplateMiddle_ as defined in 11.8.6.

4.  Let _sub_ be the result of evaluating _Expression_.

5.  Let _last_ be ToString(_sub_).

6.  ReturnIfAbrupt(_last_).

7.  Return the sequence of code units consisting of the elements of
    _rest_ followed by the code units of _middle_ followed by the
    elements of _last_.

NOTE The string conversion semantics applied to the _Expression_ value
are like STRING.PROTOTYPE.CONCAT rather than the + operator.

The Grouping Operator

Static Semantics: Early Errors

_PrimaryExpression_ :
_CoverParenthesizedExpressionAndArrowParameterList

-   It is a Syntax Error if the lexical token sequence matched by
    _CoverParenthesizedExpressionAndArrowParameterList_ cannot be parsed
    with no tokens left over using _ParenthesizedExpression_ as the goal
    symbol.

-   All Early Errors rules for _ParenthesizedExpression_ and its derived
    productions also apply to CoveredParenthesizedExpression of
    _CoverParenthesizedExpressionAndArrowParameterList_.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1, 12.8.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

_ParenthesizedExpression_ : ( _Expression_ )

1.  Return IsFunctionDefinition of _Expression_.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2, 12.7.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

_ParenthesizedExpression_ : ( _Expression_ )

1.  Return IsValidSimpleAssignmentTarget of _Expression_.

Runtime Semantics: Evaluation

_PrimaryExpression_ :
_CoverParenthesizedExpressionAndArrowParameterList

1.  Let _expr_ be CoveredParenthesizedExpression of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return the result of evaluating _expr_.

_ParenthesizedExpression_ : ( _Expression_ )

1.  Return the result of evaluating _Expression_. This may be of type
    Reference.

NOTE This algorithm does not apply GetValue to the result of evaluating
_Expression_. The principal motivation for this is so that operators
such as DELETE and TYPEOF may be applied to parenthesized expressions.


Left-Hand-Side Expressions

Syntax

MemberExpression~[Yield]~ :

PrimaryExpression~[?Yield]~
MemberExpression~[?Yield]~ [ Expression~[In,\ ?Yield]~ ]
MemberExpression~[?Yield]~ . IdentifierName
MemberExpression~[?Yield]~ TemplateLiteral~[?Yield]~
_SuperProperty_~[?Yield]~
_MetaProperty
NEW MemberExpression~[?Yield]~ Arguments~[?Yield]~

SuperProperty~[Yield]~ :

SUPER [ Expression~[In,\ ?Yield]~ ]
SUPER . IdentifierName

MetaProperty :

NewTarget

NewTarget :

NEW . TARGET

NewExpression~[Yield]~ :

MemberExpression~[?Yield]~
NEW NewExpression~[?Yield]\ ~

CallExpression~[Yield]~ :

MemberExpression~[?Yield]~ Arguments~[?Yield]~
SuperCall~[?Yield]~
CallExpression~[?Yield]~ Arguments~[?Yield]~
CallExpression~[?Yield]~ [ Expression~[In,\ ?Yield]~ ]
CallExpression~[?Yield]~ . IdentifierName
CallExpression~[?Yield]~ TemplateLiteral~[?Yield]~

SuperCall~[Yield]~ :

SUPER Arguments~[?Yield]~

Arguments~[Yield]~ :

( )
( ArgumentList~[?Yield]~ )

ArgumentList~[Yield]~ :

AssignmentExpression~[In,\ ?Yield]~
... AssignmentExpression~[In,\ ?Yield]~
ArgumentList~[?Yield]~ , AssignmentExpression~[In,\ ?Yield]~
ArgumentList~[?Yield]~ , ... AssignmentExpression~[In,\ ?Yield]~

LeftHandSideExpression~[Yield]~ :

NewExpression~[?Yield]~
CallExpression~[?Yield]~

Static Semantics

Static Semantics: Contains

  With parameter _symbol_.

See also: 5.3, 12.2.5.3, 14.1.4, 14.2.3, 14.4.4, 14.5.4

_MemberExpression_ : _MemberExpression_ . _IdentifierName

1.  If _MemberExpression_ Contains _symbol_ is TRUE, return TRUE.

2.  If _symbol_ is a _ReservedWord_, return FALSE.

3.  If _symbol_ is an _Identifier_ and StringValue of _symbol_ is the
    same value as the StringValue of _IdentifierName_, return TRUE;

4.  Return FALSE.

_SuperProperty_ : SUPER . _IdentifierName

1.  If _symbol_ is the _ReservedWord_ SUPER, return TRUE.

2.  If _symbol_ is a _ReservedWord_, return FALSE.

3.  If _symbol_ is an _Identifier_ and StringValue of _symbol_ is the
    same value as the StringValue of _IdentifierName_, return TRUE;

4.  Return FALSE.

_CallExpression_ : _CallExpression_ . _IdentifierName

1.  If _CallExpression_ Contains _symbol_ is TRUE, return TRUE.

2.  If _symbol_ is a _ReservedWord_, return FALSE.

3.  If _symbol_ is an _Identifier_ and StringValue of _symbol_ is the
    same value as the StringValue of _IdentifierName_, return TRUE;

4.  Return FALSE.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1, 12.8.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

MemberExpression :

MemberExpression [ Expression ]
MemberExpression . IdentifierName
MemberExpression TemplateLiteral
SuperProperty
_MetaProperty
NEW MemberExpression Arguments

NewExpression :

NEW NewExpression

CallExpression :

MemberExpression Arguments
SuperCall
CallExpression Arguments
CallExpression [ Expression ]
CallExpression. IdentifierName
CallExpression TemplateLiteral

1.  Return FALSE.

Static Semantics: IsDestructuring

See also: 13.6.4.6.

_MemberExpression_ : _PrimaryExpression

1.  If _PrimaryExpression_ is either an _ObjectLiteral_ or an
    _ArrayLiteral_, return TRUE.

2.  Return FALSE.

MemberExpression :

MemberExpression [ Expression ]
MemberExpression . IdentifierName
MemberExpression TemplateLiteral
SuperProperty
_MetaProperty
NEW MemberExpression Arguments

NewExpression :

NEW NewExpression

CallExpression :

MemberExpression Arguments
SuperCall
CallExpression Arguments
CallExpression [ Expression ]
CallExpression. IdentifierName
CallExpression TemplateLiteral

1.  Return FALSE.

Static Semantics: IsIdentifierRef

See also: 12.2.0.4.

LeftHandSideExpression :

CallExpression

MemberExpression :

MemberExpression [ Expression ]
MemberExpression . IdentifierName
MemberExpression TemplateLiteral
SuperProperty
_MetaProperty
NEW MemberExpression Arguments

NewExpression :

NEW NewExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.4.3, 12.5.3, 12.6.2, 12.7.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

CallExpression :

CallExpression [ Expression ]
CallExpression . IdentifierName

MemberExpression :

MemberExpression [ Expression ]
MemberExpression . IdentifierName
SuperProperty

1.  Return TRUE.

CallExpression :

MemberExpression Arguments
SuperCall
CallExpression Arguments
CallExpression TemplateLiteral

NewExpression :

NEW NewExpression

MemberExpression :

MemberExpression TemplateLiteral
NEW MemberExpression Arguments

NewTarget :

NEW . TARGET

1.  Return FALSE.

Property Accessors

NOTE Properties are accessed by name, using either the dot notation:

MemberExpression . IdentifierName
CallExpression . IdentifierName

or the bracket notation:

MemberExpression [ Expression ]
CallExpression [ Expression ]

The dot notation is explained by the following syntactic conversion:

MemberExpression . IdentifierName

is identical in its behaviour to

MemberExpression [ <identifier-name-string> ]

and similarly

CallExpression . IdentifierName

is identical in its behaviour to

CallExpression [ <identifier-name-string> ]

where _<identifier-name-string>_ is the result of evaluating StringValue
of _IdentifierName_.

Runtime Semantics: Evaluation

_MemberExpression_ : _MemberExpression_ [ _Expression_ ]

1.  Let _baseReference_ be the result of evaluating _MemberExpression_.

2.  Let _baseValue_ be GetValue(_baseReference_).

3.  ReturnIfAbrupt(_baseValue_).

4.  Let _propertyNameReference_ be the result of evaluating
    _Expression_.

5.  Let _propertyNameValue_ be GetValue(_propertyNameReference_).

6.  ReturnIfAbrupt(_propertyNameValue_).

7.  Let _bv_ be RequireObjectCoercible(_baseValue_).

8.  ReturnIfAbrupt(_bv_).

9.  Let _propertyKey_ be ToPropertyKey(_propertyNameValue_).

10. ReturnIfAbrupt(_propertyKey_).

11. If the code matched by the syntactic production that is being
    evaluated is strict mode code, let _strict_ be TRUE, else let
    _strict_ be FALSE.

12. Return a value of type Reference whose base value is _bv_ and whose
    referenced name is _propertyKey_, and whose strict reference flag is
    _strict_.

_MemberExpression_ : _MemberExpression_ . _IdentifierName

1.  Let _baseReference_ be the result of evaluating _MemberExpression_.

2.  Let _baseValue_ be GetValue(_baseReference_).

3.  ReturnIfAbrupt(_baseValue_).

4.  Let _bv_ be RequireObjectCoercible(_baseValue_).

5.  ReturnIfAbrupt(_bv_).

6.  Let _propertyNameString_ be StringValue of _IdentifierName

7.  If the code matched by the syntactic production that is being
    evaluated is strict mode code, let _strict_ be TRUE, else let
    _strict_ be FALSE.

8.  Return a value of type Reference whose base value is _bv_ and whose
    referenced name is _propertyNameString_, and whose strict reference
    flag is _strict_.

_CallExpression_ : _CallExpression_ [ _Expression_ ]

Is evaluated in exactly the same manner as _MemberExpression_ :
_MemberExpression_ [ _Expression_ ] except that the contained
_CallExpression_ is evaluated in step 1.

_CallExpression_ : _CallExpression_ . _IdentifierName

Is evaluated in exactly the same manner as _MemberExpression_ :
_MemberExpression_ . _IdentifierName_ except that the contained
_CallExpression_ is evaluated in step 1.

The new Operator

Runtime Semantics: Evaluation

_NewExpression_ : NEW _NewExpression

1.  Return EvaluateNew(_NewExpression_, empty).

_MemberExpression_ : NEW _MemberExpression_ _Arguments

1.  Return EvaluateNew(_MemberExpression_, _Arguments_).

Runtime Semantics: EvaluateNew(constructProduction, arguments)

The abstract operation EvaluateNew with arguments _constructProduction_,
and _arguments_ performs the following steps:

1.  Assert: _constructProduction_ is either a _NewExpression_ or a
    _MemberExpression_.

2.  Assert: _arguments_ is either empty or an _Arguments_ production.

3.  Let _ref_ be the result of evaluating _constructProduction_.

4.  Let _constructor_ be GetValue(_ref_).

5.  ReturnIfAbrupt(_constructor_).

6.  If _arguments_ is empty, let _argList_ be an empty List.

7.  Else,

    a.  Let _argList_ be ArgumentListEvaluation of _arguments_.

    b.  ReturnIfAbrupt(_argList_).

8.  If IsConstructor (_constructor_) is FALSE, throw a TYPEERROR
    exception.

9.  Return Construct(_constructor_, _argList_).

Function Calls

Runtime Semantics: Evaluation

_CallExpression_ : _MemberExpression_ _Arguments

1.  Let _ref_ be the result of evaluating _MemberExpression_.

2.  Let _func_ be GetValue(_ref_).

3.  ReturnIfAbrupt(_func_).

4.  If Type(_ref_) is Reference and IsPropertyReference(_ref_) is FALSE
    and GetReferencedName(_ref_) is "EVAL", then

    a.  If SameValue(_func_, %eval%) is TRUE, then

        i.  Let _argList_ be ArgumentListEvaluation(_Arguments_).

        ii. ReturnIfAbrupt(_argList_).

        iii. If _argList_ has no elements, return UNDEFINED.

        iv. Let _evalText_ be the first element of _argList_.

        v.  If the source code matching this _CallExpression_ is strict
            code, let _strictCaller_ be TRUE. Otherwise let
            _strictCaller_ be FALSE.

        vi. Let _evalRealm_ be the running execution context’s Realm.

        vii. Return PerformEval(_evalText_, _evalRealm_, _strictCaller_,
            TRUE). .

5.  If Type(_ref_) is Reference, then

    a.  If IsPropertyReference(_ref_) is TRUE, then

        i.  Let _thisValue_ be GetThisValue(_ref_).

    b.  Else, the base of _ref_ is an Environment Record

        i.  Let _refEnv_ be GetBase(_ref_).

        ii. Let _thisValue_ be _refEnv_.WithBaseObject().

6.  Else Type(_ref_) is not Reference,

    a.  Let _thisValue_ be UNDEFINED.

7.  Let _thisCall_ be this _CallExpression_.

8.  Let _tailCall_ be IsInTailPosition(_thisCall_). (See 14.6.1)

9.  Return EvaluateDirectCall(_func_, _thisValue_, _Arguments_,
    _tailCall_).

A _CallExpression_ whose evaluation executes step 4.a.vii is a _direct
eval_.

_CallExpression_ : _CallExpression_ _Arguments

1.  Let _ref_ be the result of evaluating _CallExpression_.

2.  Let _thisCall_ be this _CallExpression

3.  Let _tailCall_ be IsInTailPosition(_thisCall_). (See 14.6.1)

4.  Return EvaluateCall(_ref_, _Arguments_, _tailCall_).

Runtime Semantics: EvaluateCall( ref, arguments, tailPosition )

The abstract operation EvaluateCall takes as arguments a value _ref_, a
syntactic grammar production _arguments_, and a Boolean argument
_tailPosition_. It performs the following steps:

1.  Let _func_ be GetValue(_ref_).

2.  ReturnIfAbrupt(_func_).

3.  If Type(_ref_) is Reference, then

    a.  If IsPropertyReference(_ref_) is TRUE, then

        i.  Let _thisValue_ be GetThisValue(_ref_).

    b.  Else, the base of _ref_ is an Environment Record

        i.  Let _refEnv_ be GetBase(_ref_).

        ii. Let _thisValue_ be _refEnv_.WithBaseObject().

4.  Else Type(_ref_) is not Reference,

    a.  Let _thisValue_ be UNDEFINED.

5.  Return EvaluateDirectCall(_func_, _thisValue_, _arguments_,
    _tailPosition_).

Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments, tailPosition )

The abstract operation EvaluateDirectCall takes as arguments a value
_func_, a value _thisValue_, a syntactic grammar production _arguments_,
and a Boolean argument _tailPosition_. It performs the following steps:

1.  Let _argList_ be ArgumentListEvaluation(_arguments_).

2.  ReturnIfAbrupt(_argList_).

3.  If Type(_func_) is not Object, throw a TYPEERROR exception.

4.  If IsCallable(_func_) is FALSE, throw a TYPEERROR exception.

5.  If _tailPosition_ is TRUE, perform PrepareForTailCall().

6.  Let _result_ be Call(_func_, _thisValue_, _argList_).

7.  Assert: If _tailPosition_ is TRUE, the above call will not return
    here, but instead evaluation will continue as if the following
    return has already occurred.

8.  Assert: If _result_ is not an abrupt completion then Type(_result_)
    is an ECMAScript language type.

9.  Return _result_.

The super Keyword

Runtime Semantics: Evaluation

_SuperProperty_ : SUPER [ _Expression_ ]

1.  Let _propertyNameReference_ be the result of evaluating
    _Expression_.

2.  Let _propertyNameValue_ be GetValue(_propertyNameReference_).

3.  Let _propertyKey_ be ToPropertyKey(_propertyNameValue_).

4.  ReturnIfAbrupt(_propertyKey_).

5.  If the code matched by the syntactic production that is being
    evaluated is strict mode code, let _strict_ be TRUE, else let
    _strict_ be FALSE.

6.  Return MakeSuperPropertyReference(_propertyKey_, _strict_).

_SuperProperty_ : SUPER . _IdentifierName

1.  Let _propertyKey_ be StringValue of _IdentifierName_.

2.  If the code matched by the syntactic production that is being
    evaluated is strict mode code, let _strict_ be TRUE, else let
    _strict_ be FALSE.

3.  Return MakeSuperPropertyReference(_propertyKey_, _strict_).

_SuperCall_ : SUPER _Arguments

1.  Let _newTarget_ be GetNewTarget().

2.  If _newTarget_ is UNDEFINED, throw a REFERENCEERROR exception.

3.  Let _func_ be GetSuperConstructor().

4.  ReturnIfAbrupt(_func_).

5.  Let _argList_ be ArgumentListEvaluation of _Arguments_.

6.  ReturnIfAbrupt(_argList_).

7.  Let _result_ be Construct(_func_, _argList_, _newTarget_).

8.  ReturnIfAbrupt(_result_).

9.  Let _thisER_ be GetThisEnvironment( ).

10. Return _thisER_.BindThisValue(_result_).

Runtime Semantics: GetSuperConstructor ( )

The abstract operation GetSuperConstructor performs the following steps:

1.  Let _envRec_ be GetThisEnvironment( ).

2.  Assert: _envRec_ is a function Environment Record.

3.  Let _activeFunction_ be _envRec_.[[FunctionObject]].

4.  Let _superConstructor_ be _activeFunction_.[[GetPrototypeOf]]().

5.  ReturnIfAbrupt(_superConstructor_).

6.  If IsConstructor(_superConstructor_) is FALSE, throw a TYPEERROR
    exception.

7.  Return _superConstructor_.

Runtime Semantics: MakeSuperPropertyReference(propertyKey, strict)

The abstract operation MakeSuperPropertyReference with arguments
_propertyKey_ and _strict_ performs the following steps:

1.  Let _env_ be GetThisEnvironment( ).

2.  If _env_.HasSuperBinding() is FALSE, throw a REFERENCEERROR
    exception.

3.  Let _actualThis_ be _env_.GetThisBinding().

4.  ReturnIfAbrupt(_actualThis_).

5.  Let _baseValue_ be _env_.GetSuperBase().

6.  Let _bv_ be RequireObjectCoercible(_baseValue_).

7.  ReturnIfAbrupt(_bv_).

8.  Return a value of type Reference that is a Super Reference whose
    base value is _bv_, whose referenced name is _propertyKey_, whose
    thisValue is _actualThis_, and whose strict reference flag is
    _strict_.

Argument Lists

NOTE The evaluation of an argument list produces a List of values (see
6.2.1).

Runtime Semantics: ArgumentListEvaluation

See also: 12.2.8.2

_Arguments_ : ( )

1.  Return an empty List.

_ArgumentList_ : _AssignmentExpression

1.  Let _ref_ be the result of evaluating _AssignmentExpression_.

2.  Let _arg_ be GetValue(_ref_).

3.  ReturnIfAbrupt(_arg_).

4.  Return a List whose sole item is _arg_.

_ArgumentList_ : ... _AssignmentExpression

1.  Let _list_ be an empty List.

2.  Let _spreadRef_ be the result of evaluating _AssignmentExpression_.

3.  Let _spreadObj_ be GetValue(_spreadRef_).

4.  Let _iterator_ be GetIterator(_spreadObj_).

5.  ReturnIfAbrupt(_iterator_).

6.  Repeat

    a.  Let _next_ be IteratorStep(_iterator_).

    b.  ReturnIfAbrupt(_next_).

    c.  If _next_ is FALSE, return _list_.

    d.  Let _nextArg_ be IteratorValue(_next_).

    e.  ReturnIfAbrupt(_nextArg_).

    f.  Append _nextArg_ as the last element of _list_.

_ArgumentList_ : _ArgumentList_ , _AssignmentExpression

1.  Let _precedingArgs_ be the result of evaluating _ArgumentList_.

2.  ReturnIfAbrupt(_precedingArgs_).

3.  Let _ref_ be the result of evaluating _AssignmentExpression_.

4.  Let _arg_ be GetValue(_ref_).

5.  ReturnIfAbrupt(_arg_).

6.  Append _arg_ to the end of _precedingArgs_.

7.  Return _precedingArgs_.

_ArgumentList_ : _ArgumentList_ , ... _AssignmentExpression

1.  Let _precedingArgs_ be the result of evaluating _ArgumentList_.

2.  Let _spreadRef_ be the result of evaluating _AssignmentExpression_.

3.  Let _iterator_ be GetIterator(GetValue(_spreadRef_) ).

4.  ReturnIfAbrupt(_iterator_).

5.  Repeat

    a.  Let _next_ be IteratorStep(_iterator_).

    b.  ReturnIfAbrupt(_next_).

    c.  If _next_ is FALSE, return _precedingArgs_.

    d.  Let _nextArg_ be IteratorValue(_next_).

    e.  ReturnIfAbrupt(_nextArg_).

    f.  Append _nextArg_ as the last element of _precedingArgs_.

Tagged Templates

NOTE A tagged template is a function call where the arguments of the
call are derived from a _TemplateLiteral_ (12.2.8). The actual arguments
include a template object (12.2.8.3) and the values produced by
evaluating the expressions embedded within the _TemplateLiteral_.

Runtime Semantics: Evaluation

_MemberExpression_ : _MemberExpression_ _TemplateLiteral

1.  Let _tagRef_ be the result of evaluating _MemberExpression_.

2.  Let _thisCall_ be this _MemberExpression_.

3.  Let _tailCall_ be IsInTailPosition(_thisCall_). (See 14.6.1)

4.  Return EvaluateCall(_tagRef_, _TemplateLiteral_, _tailCall_).

_CallExpression_ : _CallExpression_ _TemplateLiteral

1.  Let _tagRef_ be the result of evaluating _CallExpression_.

2.  Let _thisCall_ be this _CallExpression_.

3.  Let _tailCall_ be IsInTailPosition(_thisCall_). (See 14.6.1)

4.  Return EvaluateCall(_tagRef_, _TemplateLiteral_, _tailCall_).

Meta Properties

Runtime Semantics: Evaluation

_NewTarget_ : NEW . TARGET

1.  Return GetNewTarget().


Postfix Expressions

Syntax

PostfixExpression~[Yield]~ :

LeftHandSideExpression~[?Yield]~
LeftHandSideExpression~[?Yield]~ [no LineTerminator here] ++
LeftHandSideExpression~[?Yield]~ [no LineTerminator here] --

Static Semantics: Early Errors

PostfixExpression :

LeftHandSideExpression ++
LeftHandSideExpression --

-   It is an early Reference Error if IsValidSimpleAssignmentTarget of
    _LeftHandSideExpression_ is FALSE.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.5.2, 12.6.1, 12.7.1, 12.8.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.

PostfixExpression :

LeftHandSideExpression ++
LeftHandSideExpression --

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.5.3, 12.6.2, 12.7.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

PostfixExpression :

LeftHandSideExpression ++
LeftHandSideExpression --

1.  Return FALSE.

Postfix Increment Operator

Runtime Semantics: Evaluation

_PostfixExpression_ : _LeftHandSideExpression_ ++

1.  Let _lhs_ be the result of evaluating _LeftHandSideExpression_.

2.  Let _oldValue_ be ToNumber(GetValue(_lhs_)).

3.  ReturnIfAbrupt(_oldValue_).

4.  Let _newValue_ be the result of adding the value 1 to _oldValue_,
    using the same rules as for the + operator (see 12.7.5).

5.  Let _status_ be PutValue(_lhs_, _newValue_).

6.  ReturnIfAbrupt(_status_).

7.  Return _oldValue_.

Postfix Decrement Operator

Runtime Semantics: Evaluation

_PostfixExpression_ : _LeftHandSideExpression_ --

1.  Let _lhs_ be the result of evaluating _LeftHandSideExpression_.

2.  Let _oldValue_ be ToNumber(GetValue(_lhs_)).

3.  ReturnIfAbrupt(_oldValue_).

4.  Let _newValue_ be the result of subtracting the value 1 from
    _oldValue_, using the same rules as for the - operator (12.7.5).

5.  Let _status_ be PutValue(_lhs_, _newValue_).

6.  ReturnIfAbrupt(_status_).

7.  Return _oldValue_.


Unary Operators

Syntax

UnaryExpression~[Yield]~ :

PostfixExpression~[?Yield]~
DELETE UnaryExpression~[?Yield]~
VOID UnaryExpression~[?Yield]~
TYPEOF UnaryExpression~[?Yield]~
++ UnaryExpression~[?Yield]~
-- UnaryExpression~[?Yield]~
+ UnaryExpression~[?Yield]~
- UnaryExpression~[?Yield]~
~ UnaryExpression~[?Yield]~
! UnaryExpression~[?Yield]~

Static Semantics: Early Errors

UnaryExpression :

++ UnaryExpression
-- UnaryExpression

-   It is an early Reference Error if IsValidSimpleAssignmentTarget of
    _UnaryExpression_ is FALSE.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.6.1, 12.7.1, 12.8.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

UnaryExpression :

DELETE UnaryExpression
VOID UnaryExpression
TYPEOF UnaryExpression
++ UnaryExpression
-- UnaryExpression
+ UnaryExpression
- UnaryExpression
~ UnaryExpression
! UnaryExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.6.2, 12.7.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

UnaryExpression :

DELETE UnaryExpression
VOID UnaryExpression
TYPEOF UnaryExpression
++ UnaryExpression
-- UnaryExpression
+ UnaryExpression
- UnaryExpression
~ UnaryExpression
! UnaryExpression

1.  Return FALSE.

The delete Operator

Static Semantics: Early Errors

_UnaryExpression_ : DELETE _UnaryExpression

-   It is a Syntax Error if the _UnaryExpression_ is contained in strict
    mode code and the derived _UnaryExpression_ is _PrimaryExpression_ :
    _IdentifierReference._

-   It is a Syntax Error if the derived _UnaryExpression_ is
     _PrimaryExpression :
    CoverParenthesizedExpressionAndArrowParameterList
    _and _CoverParenthesizedExpressionAndArrowParameterList_ ultimately
    derives a phrase that, if used in place of _UnaryExpression,_ would
    produce a Syntax Error according to these rules. This rule is
    recursively applied.

NOTE The last rule means that expressions such as
 DELETE (((FOO)))
produce early errors because of recursive application of the first rule.

Runtime Semantics: Evaluation

_UnaryExpression_ : DELETE _UnaryExpression

1.  Let _ref_ be the result of evaluating _UnaryExpression_.

2.  ReturnIfAbrupt(_ref_).

3.  If Type(_ref_) is not Reference, return TRUE.

4.  If IsUnresolvableReference(_ref_) is TRUE, then

    a.  Assert: IsStrictReference(_ref_) is FALSE.

    b.  Return TRUE.

5.  If IsPropertyReference(_ref_) is TRUE, then

    a.  If IsSuperReference(_ref_), throw a REFERENCEERROR exception.

    b.  Let _baseObj_ be ToObject(GetBase(_ref_)).

    c.  Let _deleteStatus_ be
        _baseObj_.[[Delete]](GetReferencedName(_ref_)).

    d.  ReturnIfAbrupt(_deleteStatus_).

    e.  If _deleteStatus_ is FALSE and IsStrictReference(_ref_) is TRUE,
        throw a TYPEERROR exception.

    f.  Return _deleteStatus_.

6.  Else _ref_ is a Reference to an Environment Record binding,

    a.  Let _bindings_ be GetBase(_ref_).

    b.  Return _bindings_.DeleteBinding(GetReferencedName(_ref_)).

NOTE When a DELETE operator occurs within strict mode code, a
SYNTAXERROR exception is thrown if its _UnaryExpression_ is a direct
reference to a variable, function argument, or function name. In
addition, if a DELETE operator occurs within strict mode code and the
property to be deleted has the attribute { [[Configurable]]: FALSE }, a
TYPEERROR exception is thrown.

The void Operator

Runtime Semantics: Evaluation

_UnaryExpression_ : VOID _UnaryExpression

1.  Let _expr_ be the result of evaluating _UnaryExpression_.

2.  Let _status_ be GetValue(_expr_).

3.  ReturnIfAbrupt(_status_).

4.  Return UNDEFINED.

NOTE GetValue must be called even though its value is not used because
it may have observable side-effects.

The typeof Operator

Runtime Semantics: Evaluation

_UnaryExpression_ : TYPEOF _UnaryExpression

1.  Let _val_ be the result of evaluating _UnaryExpression_.

2.  If Type(_val_) is Reference, then

    a.  If IsUnresolvableReference(_val_) is TRUE, return "UNDEFINED".

3.  Let _val_ be GetValue(_val_).

4.  ReturnIfAbrupt(_val_).

5.  Return a String according to Table 35.

Table 35 — typeof Operator Results

  -------------------------------------------------------------- ----------------------------------------------------------------------------------------------------------
  _TYPE OF val_                                                  _RESULT_
  Undefined                                                      "UNDEFINED"
  Null                                                           "OBJECT"
  Boolean                                                        "BOOLEAN"
  Number                                                         "NUMBER"
  String                                                         "STRING"
  Symbol                                                         "SYMBOL"
  Object (ordinary and does not implement [[Call]])              "OBJECT"
  Object (standard exotic and does not implement [[Call]])       "OBJECT"
  Object (implements [[Call]])                                   "FUNCTION"
  Object (non-standard exotic and does not implement [[Call]])   Implementation-defined. Must not be "UNDEFINED", "BOOLEAN", "FUNCTION", "NUMBER", "SYMBOL", or "STRING".
  -------------------------------------------------------------- ----------------------------------------------------------------------------------------------------------

NOTE Implementations are discouraged from defining new TYPEOF result
values for non-standard exotic objects. If possible "OBJECT"should be
used for such objects.

Prefix Increment Operator

Runtime Semantics: Evaluation

_UnaryExpression_ : ++ _UnaryExpression

1.  Let _expr_ be the result of evaluating _UnaryExpression_.

2.  Let _oldValue_ be ToNumber(GetValue(_expr_)).

3.  ReturnIfAbrupt(_oldValue_).

4.  Let _newValue_ be the result of adding the value 1 to _oldValue_,
    using the same rules as for the + operator (see 12.7.5).

5.  Let _status_ be PutValue(_expr_, _newValue_).

6.  ReturnIfAbrupt(_status_).

7.  Return _newValue_.

Prefix Decrement Operator

Runtime Semantics: Evaluation

_UnaryExpression_ : -- _UnaryExpression

1.  Let _expr_ be the result of evaluating _UnaryExpression_.

2.  Let _oldValue_ be ToNumber(GetValue(_expr_)).

3.  ReturnIfAbrupt(_oldValue_).

4.  Let _newValue_ be the result of subtracting the value 1 from
    _oldValue_, using the same rules as for the - operator (see 12.7.5).

5.  Let _status_ be PutValue(_expr_, _newValue_).

6.  ReturnIfAbrupt(_status_).

7.  Return _newValue_.

Unary + Operator

NOTE The unary + operator converts its operand to Number type.

Runtime Semantics: Evaluation

_UnaryExpression_ : + _UnaryExpression

1.  Let _expr_ be the result of evaluating _UnaryExpression_.

2.  Return ToNumber(GetValue(_expr_)).

Unary - Operator

NOTE The unary - operator converts its operand to Number type and then
negates it. Negating +0 produces −0, and negating −0 produces +0.

Runtime Semantics: Evaluation

_UnaryExpression_ : - _UnaryExpression

1.  Let _expr_ be the result of evaluating _UnaryExpression_.

2.  Let _oldValue_ be ToNumber(GetValue(_expr_)).

3.  ReturnIfAbrupt(_oldValue_).

4.  If _oldValue_ is NAN, return NAN.

5.  Return the result of negating _oldValue_; that is, compute a Number
    with the same magnitude but opposite sign.

Bitwise NOT Operator ( ~ )

Runtime Semantics: Evaluation

_UnaryExpression_ : ~ _UnaryExpression

1.  Let _expr_ be the result of evaluating _UnaryExpression_.

2.  Let _oldValue_ be ToInt32(GetValue(_expr_)).

3.  ReturnIfAbrupt(_oldValue_).

4.  Return the result of applying bitwise complement to _oldValue_. The
    result is a signed 32-bit integer.

Logical NOT Operator ( ! )

Runtime Semantics: Evaluation

_UnaryExpression_ : ! _UnaryExpression

1.  Let _expr_ be the result of evaluating _UnaryExpression_.

2.  Let _oldValue_ be ToBoolean(GetValue(_expr_)).

3.  ReturnIfAbrupt(_oldValue_).

4.  If _oldValue_ is TRUE, return FALSE.

5.  Return TRUE.


Multiplicative Operators

Syntax

MultiplicativeExpression~[Yield]~ :

UnaryExpression~[?Yield]~
MultiplicativeExpression~[?Yield]~ MultiplicativeOperator
UnaryExpression~[?Yield]~

MultiplicativeOperator : ONE OF

* / %

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.7.1, 12.8.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

_MultiplicativeExpression_ : _MultiplicativeExpression
_MultiplicativeOperator_ _UnaryExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.7.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

_MultiplicativeExpression_ : _MultiplicativeExpression
_MultiplicativeOperator_ _UnaryExpression

1.  Return FALSE.

Runtime Semantics: Evaluation

_MultiplicativeExpression_ : _MultiplicativeExpression
_MultiplicativeOperator_ _UnaryExpression

1.  Let _left_ be the result of evaluating _MultiplicativeExpression_.

2.  Let _leftValue_ be GetValue(_left_).

3.  ReturnIfAbrupt(_leftValue_).

4.  Let _right_ be the result of evaluating _UnaryExpression_.

5.  Let _rightValue_ be GetValue(_right_).

6.  Let _lnum_ be ToNumber(_leftValue_).

7.  ReturnIfAbrupt(_lnum_).

8.  Let _rnum_ be ToNumber(_rightValue_).

9.  ReturnIfAbrupt(_rnum_).

10. Return the result of applying the _MultiplicativeOperator_ (*, /, or
    %) to _lnum_ and _rnum_ as specified in 12.6.3.1, 12.6.3.2, or
    12.6.3.3.

Applying the * Operator

The * _MultiplicativeOperator_ performs multiplication, producing the
product of its operands. Multiplication is commutative. Multiplication
is not always associative in ECMAScript, because of finite precision.

The result of a floating-point multiplication is governed by the rules
of IEEE 754-2008 binary double-precision arithmetic:

-   If either operand is NAN, the result is NAN.

-   The sign of the result is positive if both operands have the same
      sign, negative if the operands have different signs.

-   Multiplication of an infinity by a zero results in NAN.

-   Multiplication of an infinity by an infinity results in an infinity.
      The sign is determined by the rule already stated above.

-   Multiplication of an infinity by a finite nonzero value results in a
      signed infinity. The sign is determined by the rule already stated
      above.

-   In the remaining cases, where neither an infinity nor NaN is
      involved, the product is computed and rounded to the nearest
      representable value using IEEE 754-2008 round-to-nearest mode. If
      the magnitude is too large to represent, the result is then an
      infinity of appropriate sign. If the magnitude is too small to
      represent, the result is then a zero of appropriate sign. The
      ECMAScript language requires support of gradual underflow as
      defined by IEEE 754-2008.

Applying the / Operator

The / _MultiplicativeOperator_ performs division, producing the quotient
of its operands. The left operand is the dividend and the right operand
is the divisor. ECMAScript does not perform integer division. The
operands and result of all division operations are double-precision
floating-point numbers. The result of division is determined by the
specification of IEEE 754-2008 arithmetic:

-   If either operand is NAN, the result is NAN.

-   The sign of the result is positive if both operands have the same
      sign, negative if the operands have different signs.

-   Division of an infinity by an infinity results in NAN.

-   Division of an infinity by a zero results in an infinity. The sign
      is determined by the rule already stated above.

-   Division of an infinity by a nonzero finite value results in a
      signed infinity. The sign is determined by the rule already stated
      above.

-   Division of a finite value by an infinity results in zero. The sign
      is determined by the rule already stated above.

-   Division of a zero by a zero results in NAN; division of zero by any
      other finite value results in zero, with the sign determined by
      the rule already stated above.

-   Division of a nonzero finite value by a zero results in a signed
      infinity. The sign is determined by the rule already stated above.

-   In the remaining cases, where neither an infinity, nor a zero, nor
      NAN is involved, the quotient is computed and rounded to the
      nearest representable value using IEEE 754-2008 round-to-nearest
      mode. If the magnitude is too large to represent, the operation
      overflows; the result is then an infinity of appropriate sign. If
      the magnitude is too small to represent, the operation underflows
      and the result is a zero of the appropriate sign. The ECMAScript
      language requires support of gradual underflow as defined by IEEE
      754-2008.

Applying the % Operator

The % _MultiplicativeOperator_ yields the remainder of its operands from
an implied division; the left operand is the dividend and the right
operand is the divisor.

NOTE In C and C++, the remainder operator accepts only integral
operands; in ECMAScript, it also accepts floating-point operands.

The result of a floating-point remainder operation as computed by the %
operator is not the same as the “remainder” operation defined by IEEE
754-2008. The IEEE 754-2008 “remainder” operation computes the remainder
from a rounding division, not a truncating division, and so its
behaviour is not analogous to that of the usual integer remainder
operator. Instead the ECMAScript language defines % on floating-point
operations to behave in a manner analogous to that of the Java integer
remainder operator; this may be compared with the C library function
fmod.

The result of an ECMAScript floating-point remainder operation is
determined by the rules of IEEE arithmetic:

-   If either operand is NAN, the result is NAN.

-   The sign of the result equals the sign of the dividend.

-   If the dividend is an infinity, or the divisor is a zero, or both,
      the result is NAN.

-   If the dividend is finite and the divisor is an infinity, the result
      equals the dividend.

-   If the dividend is a zero and the divisor is nonzero and finite, the
      result is the same as the dividend.

-   In the remaining cases, where neither an infinity, nor a zero, nor
      NAN is involved, the floating-point remainder r from a dividend n
      and a divisor d is defined by the mathematical relation r = n − (d
      × q) where q is an integer that is negative only if n/d is
      negative and positive only if n/d is positive, and whose magnitude
      is as large as possible without exceeding the magnitude of the
      true mathematical quotient of n and d. r is computed and rounded
      to the nearest representable value using IEEE 754-2008
      round-to-nearest mode.


Additive Operators

Syntax

AdditiveExpression~[Yield]~ :

MultiplicativeExpression~[?Yield]~
AdditiveExpression~[?Yield]~ + MultiplicativeExpression~[?Yield]~
AdditiveExpression~[?Yield]~ - MultiplicativeExpression~[?Yield]~

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.8.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

AdditiveExpression :

AdditiveExpression + MultiplicativeExpression
AdditiveExpression - MultiplicativeExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

AdditiveExpression :

AdditiveExpression + MultiplicativeExpression
AdditiveExpression - MultiplicativeExpression

1.  Return FALSE.

The Addition operator ( + )

NOTE The addition operator either performs string concatenation or
numeric addition.

Runtime Semantics: Evaluation

_AdditiveExpression_ : _AdditiveExpression_ + _MultiplicativeExpression

1.  Let _lref_ be the result of evaluating _AdditiveExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _MultiplicativeExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _lprim_ be ToPrimitive(_lval_).

8.  ReturnIfAbrupt(_lprim_).

9.  Let _rprim_ be ToPrimitive(_rval_).

10. ReturnIfAbrupt(_rprim_).

11. If Type(_lprim_) is String or Type(_rprim_) is String, then

    a.  Let _lstr_ be ToString(_lprim_).

    b.  ReturnIfAbrupt(_lstr_).

    c.  Let _rstr_ be ToString(_rprim_).

    d.  ReturnIfAbrupt(_rstr_).

    e.  Return the String that is the result of concatenating _lstr_ and
        _rstr._

12. Let _lnum_ be ToNumber(_lprim_).

13. ReturnIfAbrupt(_lnum_).

14. Let _rnum_ be ToNumber(_rprim_).

15. ReturnIfAbrupt(_rnum_).

16. Return the result of applying the addition operation to _lnum_ and
    _rnum_. See the Note below 12.7.5.

NOTE 1 No hint is provided in the calls to ToPrimitive in steps 7 and 9.
All standard objects except Date objects handle the absence of a hint as
if the hint Number were given; Date objects handle the absence of a hint
as if the hint String were given. Exotic objects may handle the absence
of a hint in some other manner.

NOTE 2 Step 11 differs from step 5 of the Abstract Relational Comparison
algorithm (7.2.7), by using the logical-or operation instead of the
logical-and operation.

The Subtraction Operator ( - )

Runtime Semantics: Evaluation

_AdditiveExpression_ : _AdditiveExpression_ - _MultiplicativeExpression

1.  Let _lref_ be the result of evaluating _AdditiveExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _MultiplicativeExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _lnum_ be ToNumber(_lval_).

8.  ReturnIfAbrupt(_lnum_).

9.  Let _rnum_ be ToNumber(_rval_).

10. ReturnIfAbrupt(_rnum_).

11. Return the result of applying the subtraction operation to _lnum
    and _rnum_. See the note below 12.7.5.

Applying the Additive Operators to Numbers

The + operator performs addition when applied to two operands of numeric
type, producing the sum of the operands. The - operator performs
subtraction, producing the difference of two numeric operands.

Addition is a commutative operation, but not always associative.

The result of an addition is determined using the rules of IEEE 754-2008
binary double-precision arithmetic:

-   If either operand is NAN, the result is NAN.

-   The sum of two infinities of opposite sign is NAN.

-   The sum of two infinities of the same sign is the infinity of that
      sign.

-   The sum of an infinity and a finite value is equal to the infinite
      operand.

-   The sum of two negative zeroes is −0. The sum of two positive
      zeroes, or of two zeroes of opposite sign, is +0.

-   The sum of a zero and a nonzero finite value is equal to the nonzero
      operand.

-   The sum of two nonzero finite values of the same magnitude and
      opposite sign is +0.

-   In the remaining cases, where neither an infinity, nor a zero, nor
      NaN is involved, and the operands have the same sign or have
      different magnitudes, the sum is computed and rounded to the
      nearest representable value using IEEE 754-2008 round-to-nearest
      mode. If the magnitude is too large to represent, the operation
      overflows and the result is then an infinity of appropriate sign.
      The ECMAScript language requires support of gradual underflow as
      defined by IEEE 754-2008.

NOTE The - operator performs subtraction when applied to two operands of
numeric type, producing the difference of its operands; the left operand
is the minuend and the right operand is the subtrahend. Given numeric
operands _a_ and _b_, it is always the case that _a–b_ produces the same
result as _a +(–b)_.


Bitwise Shift Operators

Syntax

ShiftExpression~[Yield]~ :

AdditiveExpression~[?Yield]~
ShiftExpression~[?Yield]~ << AdditiveExpression~[?Yield]~
ShiftExpression~[?Yield]~ >> AdditiveExpression~[?Yield]~
ShiftExpression~[?Yield]~ >>> AdditiveExpression~[?Yield]~

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

ShiftExpression :

ShiftExpression << AdditiveExpression
ShiftExpression >> AdditiveExpression
ShiftExpression >>> AdditiveExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

ShiftExpression :

ShiftExpression << AdditiveExpression
ShiftExpression >> AdditiveExpression
ShiftExpression >>> AdditiveExpression

1.  Return FALSE.

The Left Shift Operator ( << )

NOTE Performs a bitwise left shift operation on the left operand by the
amount specified by the right operand.

Runtime Semantics: Evaluation

_ShiftExpression_ : _ShiftExpression_ << _AdditiveExpression

1.  Let _lref_ be the result of evaluating _ShiftExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _AdditiveExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _lnum_ be ToInt32(_lval_).

8.  ReturnIfAbrupt(_lnum_).

9.  Let _rnum_ be ToUint32(_rval_).

10. ReturnIfAbrupt(_rnum_).

11. Let _shiftCount_ be the result of masking out all but the least
    significant 5 bits of _rnum_, that is, compute _rnum_ & 0x1F.

12. Return the result of left shifting _lnum_ by _shiftCount_ bits. The
    result is a signed 32-bit integer.

The Signed Right Shift Operator ( >> )

NOTE Performs a sign-filling bitwise right shift operation on the left
operand by the amount specified by the right operand.

Runtime Semantics: Evaluation

_ShiftExpression_ : _ShiftExpression_ >> _AdditiveExpression

1.  Let _lref_ be the result of evaluating _ShiftExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _AdditiveExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _lnum_ be ToInt32(_lval_).

8.  ReturnIfAbrupt(_lnum_).

9.  Let _rnum_ be ToUint32(_rval_).

10. ReturnIfAbrupt(_rnum_).

11. Let _shiftCount_ be the result of masking out all but the least
    significant 5 bits of _rnum_, that is, compute _rnum_ & 0x1F.

12. Return the result of performing a sign-extending right shift of
    _lnum_ by _shiftCount_ bits. The most significant bit is propagated.
    The result is a signed 32-bit integer.

The Unsigned Right Shift Operator ( >>> )

NOTE Performs a zero-filling bitwise right shift operation on the left
operand by the amount specified by the right operand.

Runtime Semantics: Evaluation

_ShiftExpression_ : _ShiftExpression_ >>> _AdditiveExpression

1.  Let _lref_ be the result of evaluating _ShiftExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _AdditiveExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _lnum_ be ToUint32(_lval_).

8.  ReturnIfAbrupt(_lnum_).

9.  Let _rnum_ be ToUint32(_rval_).

10. ReturnIfAbrupt(_rnum_).

11. Let _shiftCount_ be the result of masking out all but the least
    significant 5 bits of _rnum_, that is, compute _rnum_ & 0x1F.

12. Return the result of performing a zero-filling right shift of _lnum
    by _shiftCount_ bits. Vacated bits are filled with zero. The result
    is an unsigned 32-bit integer.


Relational Operators

NOTE The result of evaluating a relational operator is always of type
Boolean, reflecting whether the relationship named by the operator holds
between its two operands.

Syntax

RelationalExpression~[In,\ Yield]~ :

ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ < ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ > ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ <= ShiftExpression~[?\ Yield]~
RelationalExpression~[?In,\ ?Yield]~ >= ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ INSTANCEOF
ShiftExpression~[?Yield]~
[+In] RelationalExpression~[In,\ ?Yield]~ IN ShiftExpression~[?Yield]~

NOTE The [In] grammar parameter is needed to avoid confusing the IN
operator in a relational expression with the IN operator in a FOR
statement.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

RelationalExpression :

RelationalExpression < ShiftExpression
RelationalExpression > ShiftExpression
RelationalExpression <= ShiftExpression
RelationalExpression >= ShiftExpression
RelationalExpression INSTANCEOF ShiftExpression
RelationalExpression IN ShiftExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.8.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

RelationalExpression :

RelationalExpression < ShiftExpression
RelationalExpression > ShiftExpression
RelationalExpression <= ShiftExpression
RelationalExpression >= ShiftExpression
RelationalExpression INSTANCEOF ShiftExpression
RelationalExpression IN ShiftExpression

1.  Return FALSE.

Runtime Semantics: Evaluation

_RelationalExpression_ : _RelationalExpression_ < _ShiftExpression

1.  Let _lref_ be the result of evaluating _RelationalExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _ShiftExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  Let _r_ be the result of performing Abstract Relational Comparison
    _lval_ < _rval_. (see 7.2.7)

7.  ReturnIfAbrupt(_r_).

8.  If _r_ is UNDEFINED, return FALSE. Otherwise, return _r_.

_RelationalExpression_ : _RelationalExpression_ > _ShiftExpression

1.  Let _lref_ be the result of evaluating _RelationalExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _ShiftExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  Let _r_ be the result of performing Abstract Relational Comparison
    _rval_ < _lval_ with _LeftFirst_ equal to FALSE.

7.  ReturnIfAbrupt(_r_).

8.  If _r_ is UNDEFINED, return FALSE. Otherwise, return _r_.

_RelationalExpression_ : _RelationalExpression_ <= _ShiftExpression

1.  Let _lref_ be the result of evaluating _RelationalExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _ShiftExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  Let _r_ be the result of performing Abstract Relational Comparison
    _rval_ < _lval_ with _LeftFirst_ equal to FALSE.

7.  ReturnIfAbrupt(_r_).

8.  If _r_ is TRUE or UNDEFINED, return FALSE. Otherwise, return TRUE.

_RelationalExpression_ : _RelationalExpression_ >= _ShiftExpression

1.  Let _lref_ be the result of evaluating _RelationalExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _ShiftExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  Let _r_ be the result of performing Abstract Relational Comparison
    _lval_ < _rval_.

7.  ReturnIfAbrupt(_r_).

8.  If _r_ is TRUE or UNDEFINED, return FALSE. Otherwise, return TRUE.

_RelationalExpression_ : _RelationalExpression_ INSTANCEOF
_ShiftExpression

1.  Let _lref_ be the result of evaluating _RelationalExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _ShiftExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Return InstanceofOperator(_lval_, _rval_).

_RelationalExpression_ : _RelationalExpression_ IN _ShiftExpression

1.  Let _lref_ be the result of evaluating _RelationalExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _ShiftExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  If Type(_rval_) is not Object, throw a TYPEERROR exception.

8.  Return HasProperty(_rval_, ToPropertyKey(_lval_)).

Runtime Semantics: InstanceofOperator(O, C)

The abstract operation InstanceofOperator(_O_, _C_) implements the
generic algorithm for determining if an object _O_ inherits from the
inheritance path defined by constructor _C_. This abstract operation
performs the following steps:

1.  If Type(_C_) is not Object, throw a TYPEERROR exception.

2.  Let _instOfHandler_ be GetMethod(_C_,@@hasInstance).

3.  ReturnIfAbrupt(_instOfHandler_).

4.  If _instOfHandler_ is not UNDEFINED, then

    a.  Return ToBoolean(Call(_instOfHandler_, _C_, «_O_»)).

5.  If IsCallable(_C_) is FALSE, throw a TYPEERROR exception.

6.  Return OrdinaryHasInstance(_C_, _O_).

NOTE Steps 5 and 6 provide compatibility with previous editions of
ECMAScript that did not use a @@hasInstance method to define the
INSTANCEOF operator semantics. If a function object does not define or
inherit @@hasInstance it uses the default INSTANCEOF semantics.


Equality Operators

NOTE The result of evaluating an equality operator is always of type
Boolean, reflecting whether the relationship named by the operator holds
between its two operands.

Syntax

EqualityExpression~[In,\ Yield]~ :

RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ ==
RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ !=
RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ ===
RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ !==
RelationalExpression~[?In,\ ?Yield]~

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

EqualityExpression :

EqualityExpression == RelationalExpression
EqualityExpression != RelationalExpression
EqualityExpression === RelationalExpression
EqualityExpression !== RelationalExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.8.2, 12.9.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

EqualityExpression :

EqualityExpression == RelationalExpression
EqualityExpression != RelationalExpression
EqualityExpression === RelationalExpression
EqualityExpression !== RelationalExpression

1.  Return FALSE.

Runtime Semantics: Evaluation

_EqualityExpression_ : _EqualityExpression_ == _RelationalExpression

1.  Let _lref_ be the result of evaluating _EqualityExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _RelationalExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Return the result of performing Abstract Equality Comparison _rval
    == _lval_.

_EqualityExpression_ : _EqualityExpression_ != _RelationalExpression

1.  Let _lref_ be the result of evaluating _EqualityExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _RelationalExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _r_ be the result of performing Abstract Equality Comparison
    _rval_ == _lval_.

8.  If _r_ is TRUE, return FALSE. Otherwise, return TRUE.

_EqualityExpression_ : _EqualityExpression_ === _RelationalExpression

1.  Let _lref_ be the result of evaluating _EqualityExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_)

4.  Let _rref_ be the result of evaluating _RelationalExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Return the result of performing Strict Equality Comparison _rval
    === _lval_.

_EqualityExpression_ : _EqualityExpression_ !== _RelationalExpression

1.  Let _lref_ be the result of evaluating _EqualityExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _RelationalExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _r_ be the result of performing Strict Equality Comparison
    _rval_ === _lval_.

8.  If _r_ is TRUE, return FALSE. Otherwise, return TRUE.

NOTE 1 Given the above definition of equality:

-   String comparison can be forced by: "" + A == "" + B.

-   Numeric comparison can be forced by: +A == +B.

-   Boolean comparison can be forced by: !A == !B.

NOTE 2 The equality operators maintain the following invariants:

-   A != B is equivalent to !(A == B).

-   A == B is equivalent to B == A, except in the order of evaluation of
      A and B.

NOTE 3 The equality operator is not always transitive. For example,
there might be two distinct String objects, each representing the same
String value; each String object would be considered equal to the String
value by the == operator, but the two String objects would not be equal
to each other. For Example:

-   NEW STRING("A") == "A" and "A" == NEW STRING("A")are both TRUE.

-   NEW STRING("A") == NEW STRING("A") is FALSE.

NOTE 4 Comparison of Strings uses a simple equality test on sequences of
code unit values. There is no attempt to use the more complex,
semantically oriented definitions of character or string equality and
collating order defined in the Unicode specification. Therefore Strings
values that are canonically equal according to the Unicode standard
could test as unequal. In effect this algorithm assumes that both
Strings are already in normalized form.


Binary Bitwise Operators

Syntax

BitwiseANDExpression~[In,\ Yield]~ :

EqualityExpression~[?In,\ ?Yield]~
BitwiseANDExpression~[?In,\ ?Yield]~ &
EqualityExpression~[?In,\ ?Yield]~

BitwiseXORExpression~[In,\ Yield]~ :

BitwiseANDExpression~[?In,\ ?Yield]~
BitwiseXORExpression~[?In,\ ?Yield]~ ^
BitwiseANDExpression~[?In,\ ?Yield]~

BitwiseORExpression~[In,\ Yield]~ :

BitwiseXORExpression~[?In,\ ?Yield]~
BitwiseORExpression~[?In,\ ?Yield]~ |
BitwiseXORExpression~[?In,\ ?Yield]~

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

_BitwiseANDExpression_ : _BitwiseANDExpression_ & _EqualityExpression

_BitwiseXORExpression_ : _BitwiseXORExpression_ ^ _BitwiseANDExpression

_BitwiseORExpression_ : _BitwiseORExpression_ | _BitwiseXORExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget 

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.8.2, 12.9.2, 12.10.2, 12.12.2, 12.13.2, 12.14.3, 12.15.2.

_BitwiseANDExpression_ : _BitwiseANDExpression_ & _EqualityExpression

_BitwiseXORExpression_ : _BitwiseXORExpression_ ^ _BitwiseANDExpression

_BitwiseORExpression_ : _BitwiseORExpression_ | _BitwiseXORExpression

1.  Return FALSE.

Runtime Semantics: Evaluation

The production _A_ : _A @ B_, where @ is one of the bitwise operators in
the productions above, is evaluated as follows:

1.  Let _lref_ be the result of evaluating _A_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _B_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _lnum_ be ToInt32(_lval_).

8.  ReturnIfAbrupt(_lnum_).

9.  Let _rnum_ be ToInt32(_rval_).

10. ReturnIfAbrupt(_rnum_).

11. Return the result of applying the bitwise operator @ to _lnum_ and
    _rnum_. The result is a signed 32 bit integer.


Binary Logical Operators

Syntax

LogicalANDExpression~[In,\ Yield]~ :

BitwiseORExpression~[?In,\ ?Yield]~
LogicalANDExpression~[?In,\ ?Yield]~ &&
BitwiseORExpression~[?In,\ ?Yield]~

LogicalORExpression~[In,\ Yield]~ :

LogicalANDExpression~[?In,\ ?Yield]~
LogicalORExpression~[?In,\ ?Yield]~ ||
LogicalANDExpression~[?In,\ ?Yield]~

NOTE The value produced by a && or || operator is not necessarily of
type Boolean. The value produced will always be the value of one of the
two operand expressions.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.11.1, 12.13.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

_LogicalANDExpression_ : _LogicalANDExpression_ && _BitwiseORExpression

_LogicalORExpression_ : _LogicalORExpression_ || _LogicalANDExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.13.2, 12.14.3, 12.15.2.

_LogicalANDExpression_ : _LogicalANDExpression_ && _BitwiseORExpression

_LogicalORExpression_ : _LogicalORExpression_ || _LogicalANDExpression

1.  Return FALSE.

Runtime Semantics: Evaluation

_LogicalANDExpression_ : _LogicalANDExpression_ && _BitwiseORExpression

1.  Let _lref_ be the result of evaluating _LogicalANDExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  Let _lbool_ be ToBoolean(_lval_).

4.  ReturnIfAbrupt(_lbool_).

5.  If _lbool_ is FALSE, return _lval_.

6.  Let _rref_ be the result of evaluating _BitwiseORExpression_.

7.  Return GetValue(_rref_).

_LogicalORExpression_ : _LogicalORExpression_ || _LogicalANDExpression

1.  Let _lref_ be the result of evaluating _LogicalORExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  Let _lbool_ be ToBoolean(_lval_).

4.  ReturnIfAbrupt(_lbool_).

5.  If _lbool_ is TRUE, return _lval_.

6.  Let _rref_ be the result of evaluating _LogicalANDExpression_.

7.  Return GetValue(_rref_).


Conditional Operator ( ? : )

Syntax

ConditionalExpression~[In,\ Yield]~ :

LogicalORExpression~[?In,\ ?Yield]~
LogicalORExpression~[?In,?Yield]~ ? AssignmentExpression~[In,\ ?Yield]~
: AssignmentExpression~[?In,\ ?Yield]~

NOTE The grammar for a _ConditionalExpression_ in ECMAScript is slightly
different from that in C and Java, which each allow the second
subexpression to be an _Expression_ but restrict the third expression to
be a _ConditionalExpression_. The motivation for this difference in
ECMAScript is to allow an assignment expression to be governed by either
arm of a conditional and to eliminate the confusing and fairly useless
case of a comma expression as the centre expression.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.14.2, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

_ConditionalExpression_ : _LogicalORExpression_ ? _AssignmentExpression
: _AssignmentExpression_

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.14.3, 12.15.2.

_ConditionalExpression_ : _LogicalORExpression_ ? _AssignmentExpression
: _AssignmentExpression_

1.  Return FALSE.

Runtime Semantics: Evaluation

_ConditionalExpression_ : _LogicalORExpression_ ? _AssignmentExpression
: _AssignmentExpression_

1.  Let _lref_ be the result of evaluating _LogicalORExpression_.

2.  Let _lval_ be ToBoolean(GetValue(_lref_)).

3.  ReturnIfAbrupt(_lval_).

4.  If _lval_ is TRUE, then

    a.  Let _trueRef_ be the result of evaluating the first
        _AssignmentExpression_.

    b.  Return GetValue(_trueRef_).

5.  Else

    a.  Let _falseRef_ be the result of evaluating the second
        _AssignmentExpression_.

    b.  Return GetValue(_falseRef_).


Assignment Operators

Syntax

AssignmentExpression~[In,\ Yield]~ :

ConditionalExpression~[?In,\ ?Yield]~
[+Yield] YieldExpression~[?In]~
ArrowFunction~[?In,\ ?Yield]~
LeftHandSideExpression~[?Yield]~ = AssignmentExpression~[?In,\ ?Yield]~
LeftHandSideExpression~[?Yield]~ AssignmentOperator
AssignmentExpression~[?In,\ ?Yield]~

AssignmentOperator : ONE OF

  ---- ---- ---- ---- ---- ----- ----- ------ ---- ---- ----
  *=   /=   %=   +=   -=   <<=   >>=   >>>=   &=   ^=   |=
  ---- ---- ---- ---- ---- ----- ----- ------ ---- ---- ----

Static Semantics: Early Errors

_AssignmentExpression_ : _LeftHandSideExpression_ =
_AssignmentExpression

-   It is a Syntax Error if _LeftHandSideExpression_ is either an
    _ObjectLiteral_ or an _ArrayLiteral_ and the lexical token sequence
    matched by _LeftHandSideExpression_ cannot be parsed with no tokens
    left over using _AssignmentPattern_ as the goal symbol.

-   It is an early Reference Error if _LeftHandSideExpression_ is
    neither an _ObjectLiteral_ nor an _ArrayLiteral_ and
    IsValidSimpleAssignmentTarget of _LeftHandSideExpression_ is FALSE.

_AssignmentExpression_ : _LeftHandSideExpression_ _AssignmentOperator
_AssignmentExpression

-   It is an early Reference Error if IsValidSimpleAssignmentTarget of
    _LeftHandSideExpression_ is FALSE.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.15.1, 14.1.11,
14.4.9, 14.5.8.

_AssignmentExpression_ : _ArrowFunction

1.  Return TRUE.

AssignmentExpression :

YieldExpression
LeftHandSideExpression = AssignmentExpression
LeftHandSideExpression AssignmentOperator AssignmentExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.15.2.

AssignmentExpression :

YieldExpression
ArrowFunction
LeftHandSideExpression = AssignmentExpression
LeftHandSideExpression AssignmentOperator AssignmentExpression

1.  Return FALSE.

Runtime Semantics: Evaluation 

_AssignmentExpression_~[In,\ Yield]~ :
_LeftHandSideExpression_~[?Yield]~ =
_AssignmentExpression_~[?In,\ ?Yield]~

1.  If _LeftHandSideExpression_ is neither an _ObjectLiteral_ nor an
    _ArrayLiteral_, then

    a.  Let _lref_ be the result of evaluating _LeftHandSideExpression_.

    b.  ReturnIfAbrupt(_lref_).

    c.  Let _rref_ be the result of evaluating _AssignmentExpression_.

    d.  Let _rval_ be GetValue(_rref_).

    e.  If IsAnonymousFunctionDefinition(_AssignmentExpression_) and
        IsIdentifierRef of _LeftHandSideExpression_ are both TRUE, then

        i.  Let _hasNameProperty_ be HasOwnProperty(_rval_, "NAME").

        ii. ReturnIfAbrupt(_hasNameProperty_).

        iii. If _hasNameProperty_ is FALSE, perform
            SetFunctionName(_rval_, GetReferencedName(_lref_)).

    f.  Let _status_ be PutValue(_lref_, _rval_).

    g.  ReturnIfAbrupt(_status_).

    h.  Return _rval_.

2.  Let _assignmentPattern_ be the parse of the source text
    corresponding to _LeftHandSideExpression_ using
    _AssignmentPattern_~[?Yield]~ as the goal symbol.

3.  Let _rref_ be the result of evaluating _AssignmentExpression_.

4.  Let _rval_ be GetValue(_rref_).

5.  ReturnIfAbrupt(_rval_).

6.  Let _status_ be the result of performing
    DestructuringAssignmentEvaluation of _assignmentPattern_ using
    _rval_ as the argument.

7.  ReturnIfAbrupt(_status_).

8.  Return _rval_.

_AssignmentExpression_ : _LeftHandSideExpression_ _AssignmentOperator
_AssignmentExpression

1.  Let _lref_ be the result of evaluating _LeftHandSideExpression_.

2.  Let _lval_ be GetValue(_lref_).

3.  ReturnIfAbrupt(_lval_).

4.  Let _rref_ be the result of evaluating _AssignmentExpression_.

5.  Let _rval_ be GetValue(_rref_).

6.  ReturnIfAbrupt(_rval_).

7.  Let _op_ be the @ where _AssignmentOperator_ is @=

8.  Let _r_ be the result of applying _op_ to _lval_ and _rval_ as if
    evaluating the expression _lval_ _op_ _rval_.

9.  Let _status_ be PutValue(_lref_, _r_).

10. ReturnIfAbrupt(_status_).

11. Return _r_.

NOTE When an assignment occurs within strict mode code, it is an runtime
error if _lref_ in step 1.f.of the first algorithm or step 9 of the
second algorithm it is an unresolvable reference. If it is, a
REFERENCEERROR exception is thrown. The _LeftHandSide_ also may not be a
reference to a data property with the attribute value
{[[Writable]]:FALSE}, to an accessor property with the attribute value
{[[Set]]:UNDEFINED}, nor to a non-existent property of an object for
which the IsExtensible predicate returns the value FALSE. In these cases
a TYPEERROR exception is thrown.

Destructuring Assignment

Supplemental Syntax

In certain circumstances when processing the production
_AssignmentExpression_ : _LeftHandSideExpression_ =
_AssignmentExpression_ the following grammar is used to refine the
interpretation of _LeftHandSideExpression_.

AssignmentPattern~[Yield]~ :

ObjectAssignmentPattern~[?Yield]~
ArrayAssignmentPattern~[?Yield]~

ObjectAssignmentPattern~[Yield]~ :

{ }
{ AssignmentPropertyList~[?Yield]~ }
{ AssignmentPropertyList~[?Yield]~ , }

ArrayAssignmentPattern~[Yield]~ :

[ Elision~opt~ AssignmentRestElement~[?Yield]opt~ ]
[ AssignmentElementList~[?Yield]~ ]
[ AssignmentElementList~[?Yield]~ , Elision~opt~
AssignmentRestElement~[?Yield]opt~ ]

AssignmentPropertyList~[Yield]~ :

AssignmentProperty~[?Yield]~
AssignmentPropertyList~[?Yield]~ , AssignmentProperty~[?Yield]~

AssignmentElementList~[Yield]~ :

AssignmentElisionElement~[?Yield]~
AssignmentElementList~[?Yield]~ , AssignmentElisionElement~[?Yield]~

AssignmentElisionElement~[Yield]~ :

Elision~opt~ AssignmentElement~[?Yield]~

AssignmentProperty~[Yield]~ :

IdentifierReference~[?Yield]~ Initializer~[In,?Yield]opt~
PropertyName : AssignmentElement~[?Yield]~

AssignmentElement~[Yield]~ :

DestructuringAssignmentTarget~[?Yield]~ Initializer~[In,?Yield]opt~

AssignmentRestElement~[Yield]~ :

... DestructuringAssignmentTarget~[?Yield]~

DestructuringAssignmentTarget~[Yield]~ :

LeftHandSideExpression~[?Yield]~

Static Semantics: Early Errors

_AssignmentProperty_ : _IdentifierReference Initializer_~opt~

-   It is a Syntax Error if IsValidSimpleAssignmentTarget of
    _IdentifierReference_ is FALSE.

_DestructuringAssignmentTarget_ : _LeftHandSideExpression

-   It is a Syntax Error if _LeftHandSideExpression_ is either an
    _ObjectLiteral_ or an _ArrayLiteral_ and if the lexical token
    sequence matched by _LeftHandSideExpression_ cannot be parsed with
    no tokens left over using _AssignmentPattern_ as the goal symbol.

-   It is a Syntax Error if _LeftHandSideExpression_ is neither an
    _ObjectLiteral_ nor an _ArrayLiteral_ and
    IsValidSimpleAssignmentTarget(_LeftHandSideExpression_) is FALSE.

Runtime Semantics: DestructuringAssignmentEvaluation 

  with parameter _value_

_ObjectAssignmentPattern_ : { }

1.  Let _valid_ be RequireObjectCoercible(_value_).

2.  ReturnIfAbrupt(_valid_).

3.  Return NormalCompletion(empty).

_ArrayAssignmentPattern_ : [ ]

1.  Let _iterator_ be GetIterator(_value_).

2.  ReturnIfAbrupt(_iterator_).

3.  Return IteratorClose(_iterator_, NormalCompletion(empty)).

_ArrayAssignmentPattern_ : [ _Elision_ ]

1.  Let _iterator_ be GetIterator(_value_).

2.  ReturnIfAbrupt(_iterator_).

3.  Let _iteratorRecord_ be Record {[[iterator]]: _iterator_, [[done]]:
    FALSE}.

4.  Let _result_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _Elision_ with
    _iteratorRecord_ as the argument.

5.  If _iteratorRecord_.[[done]] is FALSE, return
    IteratorClose(_iterator_, _result_).

6.  Return _result_.

_ArrayAssignmentPattern_ : [ _Elision_~opt~ _AssignmentRestElement_ ]

1.  Let _iterator_ be GetIterator(_value_).

2.  ReturnIfAbrupt(_iterator_).

3.  Let _iteratorRecord_ be Record {[[iterator]]: _iterator_, [[done]]:
    FALSE}.

4.  If _Elision_ is present, then

    a.  Let _status_ be the result of performing
        IteratorDestructuringAssignmentEvaluation of _Elision_ with
        _iteratorRecord_ as the argument.

    b.  If _status_ is an abrupt completion, then

        i.  If _iteratorRecord_.[[done]] is FALSE, return
            IteratorClose(_iterator_, _status_).

        ii. Return Completion(_status_).

5.  Let _result_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _AssignmentRestElement_
    with _iteratorRecord_ as the argument.

6.  If _iteratorRecord_.[[done]] is FALSE, return
    IteratorClose(_iterator_, _result_).

7.  Return _result_.

_ArrayAssignmentPattern_ : [ _AssignmentElementList_ ]

1.  Let _iterator_ be GetIterator(_value_).

2.  ReturnIfAbrupt(_iterator_).

3.  Let _iteratorRecord_ be Record {[[iterator]]: _iterator_, [[done]]:
    FALSE}.

4.  Let _result_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _AssignmentElementList_
    using _iteratorRecord_ as the argument.

5.  If _iteratorRecord_.[[done]] is FALSE, return
    IteratorClose(_iterator_, _result_).

6.  Return _result_.

_ArrayAssignmentPattern_ : [ _AssignmentElementList_ , _Elision_~opt~
_AssignmentRestElement~opt~_ ]

1.  Let _iterator_ be GetIterator(_value_).

2.  ReturnIfAbrupt(_iterator_).

3.  Let _iteratorRecord_ be Record {[[iterator]]: _iterator_, [[done]]:
    FALSE}.

4.  Let _status_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _AssignmentElementList_
    using _iteratorRecord_ as the argument.

5.  If _status_ is an abrupt completion, then

    a.  If _iteratorRecord_.[[done]] is FALSE, return
        IteratorClose(_iterator_, _status_).

    b.  Return Completion(_status_).

6.  If _Elision_ is present, then

    a.  Let _status_ be the result of performing
        IteratorDestructuringAssignmentEvaluation of _Elision_ with
        _iteratorRecord_ as the argument.

    b.  If _status_ is an abrupt completion, then

        i.  If _iteratorRecord_.[[done]] is FALSE, return
            IteratorClose(_iterator_, _status_).

        ii. Return Completion(_status_).

7.  If _AssignmentRestElement_ is present, then

    a.  Let _status_ be the result of performing
        IteratorDestructuringAssignmentEvaluation of
        _AssignmentRestElement_ with _iteratorRecord_ as the argument.

8.  If _iteratorRecord_.[[done]] is FALSE, return
    IteratorClose(_iterator_, _status_).

9.  Return Completion(_status_).

_AssignmentPropertyList_ : _AssignmentPropertyList_ ,
_AssignmentProperty

1.  Let _status_ be the result of performing
    DestructuringAssignmentEvaluation for _AssignmentPropertyList_ using
    _value_ as the argument.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing DestructuringAssignmentEvaluation
    for _AssignmentProperty_ using _value_ as the argument.

_AssignmentProperty_ : _IdentifierReference Initializer_~opt~

1.  Let _P_ be StringValue of _IdentifierReference_.

2.  Let _lref_ be ResolveBinding(_P_).

3.  ReturnIfAbrupt(_P_).

4.  Let _v_ be GetV(_value_, _P_).

5.  ReturnIfAbrupt(_v_).

6.  If _Initializer_~opt~ is present and _v_ is UNDEFINED, then

    a.  Let _defaultValue_ be the result of evaluating _Initializer_.

    b.  Let _v_ be GetValue(_defaultValue_).

    c.  ReturnIfAbrupt(_v_).

    d.  If IsAnonymousFunctionDefinition(_Initializer_) is TRUE, then

        i.  Let _hasNameProperty_ be HasOwnProperty(_v_, "NAME").

        ii. ReturnIfAbrupt(_hasNameProperty_).

        iii. If _hasNameProperty_ is FALSE, perform SetFunctionName(_v_,
            _P_).

7.  Return PutValue(_lref_,_v_).

_AssignmentProperty_ : _PropertyName_ : _AssignmentElement

1.  Let _name_ be the result of evaluating _PropertyName_.

2.  ReturnIfAbrupt(_name_).

3.  Return the result of performing
    KeyedDestructuringAssignmentEvaluation of _AssignmentElement_ with
    _value_ and _name_ as the arguments.

Runtime Semantics: IteratorDestructuringAssignmentEvaluation 

  with parameters _iteratorRecord_

_AssignmentElementList_ : _AssignmentElisionElement

1.  Return the result of performing
    IteratorDestructuringAssignmentEvaluation of
    _AssignmentElisionElement_ using _iteratorRecord_ as the _argument_.

_AssignmentElementList_ : _AssignmentElementList_ ,
_AssignmentElisionElement

1.  Let _status_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _AssignmentElementList_
    using _iteratorRecord_ as the _argument._

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing
    IteratorDestructuringAssignmentEvaluation of
    _AssignmentElisionElement_ using _iteratorRecord_ as the _argument_.

_AssignmentElisionElement_ : _AssignmentElement

1.  Return the result of performing
    IteratorDestructuringAssignmentEvaluation of _AssignmentElement_
    with _iteratorRecord_ as the argument.

_AssignmentElisionElement_ : _Elision_ _AssignmentElement

1.  Let _status_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _Elision_ with
    _iteratorRecord_ as the argument.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing
    IteratorDestructuringAssignmentEvaluation of _AssignmentElement_
    with _iteratorRecord_ as the argument.

_Elision_ : ,

1.  If _iteratorRecord_.[[done]] is FALSE, then

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE.

2.  Return NormalCompletion(empty).

_Elision_ : _Elision_ ,

1.  Let _status_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _Elision_ with
    _iteratorRecord_ as the argument.

2.  ReturnIfAbrupt(_status_).

3.  If _iteratorRecord_.[[done]] is FALSE, then

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE.

4.  Return NormalCompletion(empty).

_AssignmentElement_~[Yield]~ : _DestructuringAssignmentTarget
_Initializer_~opt~

1.  If _DestructuringAssignmentTarget_ is neither an _ObjectLiteral_ nor
    an _ArrayLiteral_, then

    a.  Let _lref_ be the result of evaluating
        _DestructuringAssignmentTarget_.

    b.  ReturnIfAbrupt(_lref_).

2.  If _iteratorRecord_.[[done]] is FALSE, then

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE.

    e.  Else

        i.  Let _value_ be IteratorValue(_next_).

        ii. If _value_ is an abrupt completion, set
            _iteratorRecord_.[[done]] to TRUE.

        iii. ReturnIfAbrupt(_value_).

3.  If _iteratorRecord_.[[done]] is TRUE, let _value_ be UNDEFINED.

4.  If _Initializer_ is present and _value_ is UNDEFINED, then

    a.  Let _defaultValue_ be the result of evaluating _Initializer_.

    b.  Let _v_ be GetValue(_defaultValue_)

    c.  ReturnIfAbrupt(_v_).

5.  Else, let _v_ be _value_.

6.  If _DestructuringAssignmentTarget_ is an _ObjectLiteral_ or an
    _ArrayLiteral_, then

    a.  Let _nestedAssignmentPattern_ be the parse of the source text
        corresponding to _DestructuringAssignmentTarget_ using either
        _AssignmentPattern_ or _AssignmentPattern_~[Yield]~ as the goal
        symbol depending upon whether this _AssignmentElement_ has the
        ~Yield~ parameter.

    b.  Return the result of performing
        DestructuringAssignmentEvaluation of _nestedAssignmentPattern_
        with _v_ as the argument.

7.  If _Initializer_ is present and _value_ is UNDEFINED and
    IsAnonymousFunctionDefinition(_Initializer_) and IsIdentifierRef of
    _DestructuringAssignmentTarget_ are both TRUE, then

    a.  Let _hasNameProperty_ be HasOwnProperty(_v_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform SetFunctionName(_v_,
        GetReferencedName(_lref_)).

8.  Return PutValue(_lref_, _v_).

NOTE Left to right evaluation order is maintained by evaluating a
_DestructuringAssignmentTarget_ that is not a destructuring pattern
prior to accessing the iterator or evaluating the _Initializer_.

_AssignmentRestElement_~[Yield]~ : ... _DestructuringAssignmentTarget

1.  If _DestructuringAssignmentTarget_ is neither an _ObjectLiteral_ nor
    an _ArrayLiteral_, then

    a.  Let _lref_ be the result of evaluating
        _DestructuringAssignmentTarget_.

    b.  ReturnIfAbrupt(_lref_).

2.  Let _A_ be ArrayCreate(0).

3.  Let _n_=0;

4.  Repeat while _iteratorRecord_.[[done]] is FALSE,

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE.

    e.  else,

        i.  Let _nextValue_ be IteratorValue(_next_).

        ii. If _nextValue_ is an abrupt completion, set
            _iteratorRecord_.[[done]] to TRUE.

        iii. ReturnIfAbrupt(_nextValue_).

        iv. Let _status_ be CreateDataProperty(_A_, ToString(_n_),
            _nextValue_).

        v.  Assert: _status_ is TRUE.

        vi. Increment _n_ by 1.

5.  If _DestructuringAssignmentTarget_ is neither an _ObjectLiteral_ nor
    an _ArrayLiteral_, then

    a.  Return PutValue(_lref_, _A_).

6.  Let _nestedAssignmentPattern_ be the parse of the source text
    corresponding to _DestructuringAssignmentTarget_ using either
    _AssignmentPattern_ or _AssignmentPattern_~[Yield]~ as the goal
    symbol depending upon whether this _AssignmentElement_ has the
    ~Yield~ parameter.

7.  Return the result of performing DestructuringAssignmentEvaluation of
    _nestedAssignmentPattern_ with _A_ as the argument.

Runtime Semantics: KeyedDestructuringAssignmentEvaluation 

  with parameters _value_ and _propertyName _

_AssignmentElement_~[Yield]~ : _DestructuringAssignmentTarget
_Initializer_~opt~

1.  If _DestructuringAssignmentTarget_ is neither an _ObjectLiteral_ nor
    an _ArrayLiteral_, then

    a.  Let _lref_ be the result of evaluating
        _DestructuringAssignmentTarget_.

    b.  ReturnIfAbrupt(_lref_).

2.  Let _v_ be GetV(_value_, _propertyName_).

3.  ReturnIfAbrupt(_v_).

4.  If _Initializer_ is present and _v_ is UNDEFINED, then

    a.  Let _defaultValue_ be the result of evaluating _Initializer_.

    b.  Let _rhsValue_ be GetValue(_defaultValue_)

    c.  ReturnIfAbrupt(_rhsValue_).

5.  Else, let _rhsValue_ be _v_.

6.  If _DestructuringAssignmentTarget_ is an _ObjectLiteral_ or an
    _ArrayLiteral_, then

    a.  Let _assignmentPattern_ be the parse of the source text
        corresponding to _DestructuringAssignmentTarget_ using either
        _AssignmentPattern_ or _AssignmentPattern_~[Yield]~ as the goal
        symbol depending upon whether this _AssignmentElement_ has the
        ~Yield~ parameter.

    b.  Return the result of performing
        DestructuringAssignmentEvaluation of _assignmentPattern_ with
        _rhsValue_ as the argument.

7.  If _Initializer_ is present and _v_ is UNDEFINED and
    IsAnonymousFunctionDefinition(_Initializer_) and IsIdentifierRef of
    _DestructuringAssignmentTarget_ are both TRUE, then

    a.  Let _hasNameProperty_ be HasOwnProperty(_rhsValue_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform
        SetFunctionName(_rhsValue_, GetReferencedName(_lref_)).

8.  Return PutValue(_lref_, _rhsValue_).


Comma Operator ( , )

Syntax

_Expression_~[In,\ Yield]~ :

_AssignmentExpression_~[?In,\ ?Yield]~
Expression~[?In,\ ?Yield]~ , AssignmentExpression~[?In,\ ?Yield]~

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 14.1.11,
14.4.9, 14.5.8.

_Expression_ _: Expression_ , _AssignmentExpression

1.  Return FALSE.

Static Semantics: IsValidSimpleAssignmentTarget

See also: 12.1.3, 12.2.0.4, 12.2.9.3, 12.3.1.5, 12.4.3, 12.5.3, 12.6.2,
12.7.2, 12.8.2, 12.9.2, 12.10.2, 12.11.2, 12.12.2, 12.13.2, 12.14.3.

_Expression_ _: Expression_ , _AssignmentExpression

1.  Return FALSE.

Runtime Semantics: Evaluation

_Expression_ : _Expression_ , _AssignmentExpression

1.  Let _lref_ be the result of evaluating _Expression_.

2.  ReturnIfAbrupt(GetValue(_lref_))

3.  Let _rref_ be the result of evaluating _AssignmentExpression_.

4.  Return GetValue(_rref_).

NOTE GetValue must be called even though its value is not used because
it may have observable side-effects.



ECMASCRIPT LANGUAGE: STATEMENTS AND DECLARATIONS


Syntax

Statement~[Yield,\ Return]~ :

BlockStatement~[?Yield,\ ?Return]~
VariableStatement~[?Yield]~
EmptyStatement
ExpressionStatement~[?Yield]~
IfStatement~[?Yield,\ ?Return]~
BreakableStatement~[?Yield,\ ?Return]~
ContinueStatement~[?Yield]~
BreakStatement~[?Yield]~
[+Return] ReturnStatement~[?Yield]~
WithStatement~[?Yield,\ ?Return]~
LabelledStatement~[?Yield,\ ?Return]~
ThrowStatement~[?Yield]~
TryStatement~[?Yield,\ ?Return]~
DebuggerStatement

Declaration~[Yield]~ :

HoistableDeclaration~[?Yield]~
ClassDeclaration~[?Yield]~
LexicalDeclaration~[In,\ ?Yield]~

HoistableDeclaration~[Yield,\ Default]~ :

FunctionDeclaration~[?Yield,?Default]~
GeneratorDeclaration~[?Yield,\ ?Default]~

BreakableStatement~[Yield,\ Return]~ :

IterationStatement~[?Yield,\ ?Return]~
SwitchStatement~[?Yield,\ ?Return]~


Statement Semantics

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2, 13.6.4.3,
13.10.2, 13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

Statement :

VariableStatement
EmptyStatement
ExpressionStatement
ContinueStatement
BreakStatement
ReturnStatement
ThrowStatement
DebuggerStatement

1.  Return FALSE.

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3, 13.6.4.4,
13.8.2, 13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

Statement :

VariableStatement
EmptyStatement
ExpressionStatement
ContinueStatement
ReturnStatement
ThrowStatement
DebuggerStatement

1.  Return FALSE.

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4, 13.6.4.5,
13.7.2, 13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

Statement :

VariableStatement
EmptyStatement
ExpressionStatement
BreakStatement
ReturnStatement
ThrowStatement
DebuggerStatement

1.  Return FALSE.

_BreakableStatement_ : _IterationStatement

1.  Let _newIterationSet_ be a copy of _iterationSet_ with all the
    elements of _labelSet_ appended.

2.  Return ContainsUndefinedContinueTarget of _IterationStatement_ with
    arguments _newIterationSet_ and « ».

Static Semantics: DeclarationPart

_HoistableDeclaration_ : _FunctionDeclaration

1.  Return _FunctionDeclaration_.

_HoistableDeclaration_ : _GeneratorDeclaration

1.  Return _GeneratorDeclaration_.

_Declaration_ : _ClassDeclaration

1.  Return _ClassDeclaration_.

_Declaration_ : _LexicalDeclaration

1.  Return _LexicalDeclaration_.

Static Semantics: VarDeclaredNames

See also: 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4, 13.6.3.5,
13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

Statement :

EmptyStatement
ExpressionStatement
ContinueStatement
BreakStatement
ReturnStatement
ThrowStatement
DebuggerStatement

1.  Return a new empty List.

Static Semantics: VarScopedDeclarations

See also: 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5, 13.6.3.6,
13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

Statement :

EmptyStatement
ExpressionStatement
ContinueStatement
BreakStatement
ReturnStatement
ThrowStatement
DebuggerStatement

1.  Return a new empty List.

Runtime Semantics: LabelledEvaluation

  With argument _labelSet_.

See also: 13.6.1.6, 13.6.2.6, 13.6.3.7, 13.6.4.11, 13.12.14.

_BreakableStatement_ : _IterationStatement

1.  Let _stmtResult_ be the result of performing LabelledEvaluation of
    _IterationStatement_ with argument _labelSet_.

2.  If _stmtResult_.[[type]] is break, then

    a.  If _stmtResult_.[[target]] is empty, then

        i.  If _stmtResult_.[[value]] is empty, let _stmtResult_ be
            NormalCompletion(UNDEFINED).

        ii. Else, let _stmtResult_ be
            NormalCompletion(_stmtResult_.[[value]]).

3.  Return Completion(_stmtResult_).

_BreakableStatement_ : _SwitchStatement

1.  Let _stmtResult_ be the result of evaluating _SwitchStatement_.

2.  If _stmtResult_.[[type]] is break, then

    a.  If _stmtResult_.[[target]] is empty, then

        i.  If _stmtResult_.[[value]] is empty, let _stmtResult_ be
            NormalCompletion(UNDEFINED).

        ii. Else, let _stmtResult_ be
            NormalCompletion(_stmtResult_.[[value]]).

3.  Return Completion(_stmtResult_).

NOTE A _BreakableStatement_ is one that can be exited via an unlabelled
_BreakStatement.

Runtime Semantics: Evaluation

HoistableDeclaration :

FunctionDeclaration
_GeneratorDeclaration

1.  Return NormalCompletion(empty).

BreakableStatement :

IterationStatement
SwitchStatement

1.  Let _newLabelSet_ be a new empty List.

2.  Return the result of performing LabelledEvaluation of this
    _BreakableStatement_ with argument _newLabelSet_.


Block

Syntax

BlockStatement~[Yield,\ Return]~ :

Block~[?Yield,\ ?Return]~

Block~[Yield,\ Return]~ :

{ StatementList~[?Yield,\ ?Return]opt~ }

StatementList~[Yield,\ Return]~ :

StatementListItem~[?Yield,\ ?Return]~
StatementList~[?Yield,\ ?Return]~ StatementListItem~[?Yield,\ ?Return]~

StatementListItem~[Yield,\ Return]~ :

Statement~[?Yield,\ ?Return]~
Declaration~[?Yield]~

Static Semantics: Early Errors

_Block_ : { _StatementList_ }

-   It is a Syntax Error if the LexicallyDeclaredNames of
    _StatementList_ contains any duplicate entries.

-   It is a Syntax Error if any element of the LexicallyDeclaredNames of
    _StatementList_ also occurs in the VarDeclaredNames of
    _StatementList_.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2, 13.6.4.3,
13.10.2, 13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

_Block_ : { }

1.  Return FALSE.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _hasDuplicates_ be ContainsDuplicateLabels of _StatementList
    with argument _labelSet_.

2.  If _hasDuplicates_ is TRUE, return TRUE.

3.  Return ContainsDuplicateLabels of _StatementListItem_ with argument
    _labelSet._

_StatementListItem_ : _Declaration

1.  Return FALSE.

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3, 13.6.4.4,
13.8.2, 13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

_Block_ : { }

1.  Return FALSE.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of
    _StatementList_ with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedBreakTarget of _StatementListItem_ with
    argument _labelSet._

_StatementListItem_ : _Declaration

1.  Return FALSE.

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4, 13.6.4.5,
13.7.2, 13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

_Block_ : { }

1.  Return FALSE.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _StatementList_ with arguments _iterationSet_ and « ».

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedContinueTarget of _StatementListItem_ with
    arguments _iterationSet_ and « ».

_StatementListItem_ : _Declaration

1.  Return FALSE.

Static Semantics: LexicallyDeclaredNames

See also: 13.11.5, 13.12.6, 14.1.13, 14.2.10, 15.1.3, 15.2.1.10.

_Block_ : { }

1.  Return a new empty List.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _names_ be LexicallyDeclaredNames of _StatementList_.

2.  Append to _names_ the elements of the LexicallyDeclaredNames of
    _StatementListItem._

3.  Return _names_.

_StatementListItem_ : _Statement

1.  If _Statement_ is _Statement_ : _LabelledStatement_, return
    LexicallyDeclaredNames of _LabelledStatement_.

2.  Return a new empty List.

_StatementListItem_ : _Declaration

1.  Return the BoundNames of _Declaration_.

Static Semantics: LexicallyScopedDeclarations

See also: 13.11.6, 13.12.7, 14.1.14, 14.2.11, 15.1.4, 15.2.1.11,
15.2.3.8.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _declarations_ be LexicallyScopedDeclarations of
    _StatementList_.

2.  Append to _declarations_ the elements of the
    LexicallyScopedDeclarations of _StatementListItem._

3.  Return _declarations_.

_StatementListItem_ : _Statement

1.  If _Statement_ is _Statement_ : _LabelledStatement_, return
    LexicallyScopedDeclarations of _LabelledStatement_.

2.  Return a new empty List.

_StatementListItem_ : _Declaration

1.  Return a new List containing DeclarationPart of _Declaration_.

Static Semantics: TopLevelLexicallyDeclaredNames

See also: 13.12.8.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _names_ be TopLevelLexicallyDeclaredNames of _StatementList_.

2.  Append to _names_ the elements of the TopLevelLexicallyDeclaredNames
    of _StatementListItem._

3.  Return _names_.

_StatementListItem_ : _Statement

1.  Return a new empty List.

_StatementListItem_ : _Declaration

1.  If _Declaration_ is _Declaration_ : _HoistableDeclaration_, then

    a.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _FunctionDeclaration_, return « ».

    b.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _GeneratorDeclaration_, return « ».

2.  Return the BoundNames of _Declaration_.

NOTE At the top level of a function, or script, function declarations
are treated like var declarations rather than like lexical declarations.

Static Semantics: TopLevelLexicallyScopedDeclarations

See also: 13.12.9.

_Block_ : { }

1.  Return a new empty List.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _declarations_ be TopLevelLexicallyScopedDeclarations of
    _StatementList_.

2.  Append to _declarations_ the elements of the
    TopLevelLexicallyScopedDeclarations of _StatementListItem._

3.  Return _declarations_.

_StatementListItem_ : _Statement

1.  Return a new empty List.

_StatementListItem_ : _Declaration

1.  If _Declaration_ is _Declaration_ : _HoistableDeclaration_, then

    a.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _FunctionDeclaration_, return « ».

    b.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _GeneratorDeclaration_, return « ».

2.  Return a new List containing _Declaration_.

Static Semantics: TopLevelVarDeclaredNames

See also: 13.12.10.

_Block_ : { }

1.  Return a new empty List.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _names_ be TopLevelVarDeclaredNames of _StatementList_.

2.  Append to _names_ the elements of the TopLevelVarDeclaredNames of
    _StatementListItem._

3.  Return _names_.

_StatementListItem_ : _Declaration

1.  If _Declaration_ is _Declaration_ : _HoistableDeclaration_, then

    a.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _FunctionDeclaration_, return the BoundNames of
        _FunctionDeclaration_.

    b.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _GeneratorDeclaration_, return the BoundNames of
        _GeneratorDeclaration_.

2.  Return a new empty List.

_StatementListItem_ : _Statement

1.  If _Statement_ is _Statement_ : _LabelledStatement_, return
    TopLevelVarDeclaredNames of _Statement_.

2.  Return VarDeclaredNames of _Statement_.

NOTE At the top level of a function or script, inner function
declarations are treated like var declarations.

Static Semantics: TopLevelVarScopedDeclarations

See also: 13.12.11.

_Block_ : { }

1.  Return a new empty List.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _declarations_ be TopLevelVarScopedDeclarations of
    _StatementList_.

2.  Append to _declarations_ the elements of the
    TopLevelVarScopedDeclarations of _StatementListItem._

3.  Return _declarations_.

_StatementListItem_ : _Statement

1.  If _Statement_ is _Statement_ : _LabelledStatement_, return
    TopLevelVarScopedDeclarations of _Statement_.

2.  Return VarScopedDeclarations of _Statement_.

_StatementListItem_ : _Declaration

1.  If _Declaration_ is _Declaration_ : _HoistableDeclaration_, then

    a.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _FunctionDeclaration_, return « _FunctionDeclaration_ ».

    b.  If _HoistableDeclaration_ is _HoistableDeclaration_ :
        _GeneratorDeclaration_, return « _GeneratorDeclaration_ ».

2.  Return a new empty List.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4, 13.6.3.5,
13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_Block_ : { }

1.  Return a new empty List.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _names_ be VarDeclaredNames of _StatementList_.

2.  Append to _names_ the elements of the VarDeclaredNames of
    _StatementListItem._

3.  Return _names_.

_StatementListItem_ : _Declaration

1.  Return a new empty List.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5, 13.6.3.6,
13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_Block_ : { }

1.  Return a new empty List.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _declarations_ be VarScopedDeclarations of _StatementList_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _StatementListItem._

3.  Return _declarations_.

_StatementListItem_ : _Declaration

1.  Return a new empty List.

Runtime Semantics: Evaluation

_Block_ : { }

1.  Return NormalCompletion(empty).

_Block_ : { _StatementList_ }

1.  Let _oldEnv_ be the running execution context’s LexicalEnvironment.

2.  Let _blockEnv_ be NewDeclarativeEnvironment(_oldEnv_).

3.  Perform BlockDeclarationInstantiation(_StatementList_, _blockEnv_).

4.  Set the running execution context’s LexicalEnvironment to
    _blockEnv_.

5.  Let _blockValue_ be the result of evaluating _StatementList_.

6.  Set the running execution context’s LexicalEnvironment to _oldEnv_.

7.  Return _blockValue_.

NOTE No matter how control leaves the _Block_ the LexicalEnvironment is
always restored to its former state.

_StatementList_ : _StatementList_ _StatementListItem

1.  Let _sl_ be the result of evaluating _StatementList_.

2.  ReturnIfAbrupt(_sl_).

3.  Let _s_ be the result of evaluating _StatementListItem_.

4.  If _s_.[[type]] is throw, return Completion(_s_).

5.  If _s_.[[value]] is empty, let _V_ = _sl_.[[value]], otherwise let
    _V_ = _s_.[[value]].

6.  Return Completion{[[type]]: _s_.[[type]], [[value]]: _V_,
    [[target]]: _s_.[[target]]}.

NOTE Steps 5 and 6 of the above algorithm ensure that the value of a
_StatementList_ is the value of the last value producing item in the
_StatementList_. For example, the following calls to the EVAL function
all return the value 1:

  EVAL("1;;;;;")

  EVAL("1;{}")

  EVAL("1;VAR A;")

Runtime Semantics: BlockDeclarationInstantiation( code, env )

NOTE When a _Block_ or _CaseBlock_ production is evaluated a new
declarative Environment Record is created and bindings for each block
scoped variable, constant, function, generator function, or class
declared in the block are instantiated in the Environment Record.

BlockDeclarationInstantiation is performed as follows using arguments
_code_ and _env_. _code_ is the grammar production corresponding to the
body of the block. _env_ is the declarative Environment Record in which
bindings are to be created.

1.  Let _declarations_ be the LexicallyScopedDeclarations of _code_.

2.  For each element _d_ in _declarations_ do

    a.  For each element _dn_ of the BoundNames of _d_ do

        i.  If IsConstantDeclaration of _d_ is TRUE, then

            1.  Let _status_ be _env_.CreateImmutableBinding(_dn_,
                TRUE).

        ii. Else,

            1.  Let _status_ be _env_.CreateMutableBinding(_dn_, FALSE).

        iii. Assert: _status_ is never an abrupt completion.

    b.  If _d_ is a _GeneratorDeclaration_ production or a
        _FunctionDeclaration_ production, then

        i.  Let _fn_ be the sole element of the BoundNames of _d_

        ii. Let _fo_ be the result of performing
            InstantiateFunctionObject for _d_ with argument _env_.

        iii. Perform _env_.InitializeBinding(_fn_, _fo_).


Declarations and the Variable Statement

Let and Const Declarations

NOTE LET and CONST declarations define variables that are scoped to the
running execution context’s LexicalEnvironment. The variables are
created when their containing Lexical Environment is instantiated but
may not be accessed in any way until the variable’s _LexicalBinding_ is
evaluated. A variable defined by a _LexicalBinding_ with an
_Initializer_ is assigned the value of its _Initializer_’s
_AssignmentExpression_ when the _LexicalBinding_ is evaluated, not when
the variable is created. If a _LexicalBinding_ in a LET declaration does
not have an _Initializer_ the variable is assigned the value UNDEFINED
when the _LexicalBinding_ is evaluated.

Syntax

LexicalDeclaration~[In,\ Yield]~ :

LetOrConst BindingList~[?In,\ ?Yield]~ ;

LetOrConst :

LET
CONST

BindingList~[In,\ Yield]~ :

LexicalBinding~[?In,\ ?Yield]~
BindingList~[?In,\ ?Yield]~ , LexicalBinding~[?In,\ ?Yield]~

LexicalBinding~[In,\ Yield]~ :

BindingIdentifier~[?Yield]~ Initializer~[?In,\ ?Yield]opt
~BindingPattern~[?Yield]~ Initializer~[?In,\ ?Yield]~

Static Semantics: Early Errors

_LexicalDeclaration_ : _LetOrConst_ _BindingList_ ;

-   It is a Syntax Error if the BoundNames of _BindingList_ contains
    "LET".

-   It is a Syntax Error if the BoundNames of _BindingList_ contains any
    duplicate entries.

_LexicalBinding_ : _BindingIdentifier_ _Initializer_~opt~

-   It is a Syntax Error if _Initializer_ is not present and
    IsConstantDeclaration of the _LexicalDeclaration_ containing this
    production is TRUE.

Static Semantics: BoundNames

See also: 12.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.1.3, 14.2.2, 14.4.2,
14.5.2, 15.2.2.2, 15.2.3.2.

_LexicalDeclaration_ : _LetOrConst_ _BindingList_ ;

1.  Return the BoundNames of _BindingList_.

_BindingList_ : _BindingList_ , _LexicalBinding

1.  Let _names_ be the BoundNames of _BindingList_.

2.  Append to _names_ the elements of the BoundNames of
    _LexicalBinding._

3.  Return _names_.

_LexicalBinding_ : _BindingIdentifier_ _Initializer_~opt~

1.  Return the BoundNames of _BindingIdentifier_.

_LexicalBinding_ : _BindingPattern_ _Initializer

1.  Return the BoundNames of _BindingPattern_.

Static Semantics: IsConstantDeclaration

See also: 14.1.10, 14.4.8, 14.5.7, 15.2.3.7.

_LexicalDeclaration_ : _LetOrConst_ _BindingList_ ;

1.  Return IsConstantDeclaration of _LetOrConst_.

_LetOrConst_ : LET

1.  Return FALSE.

_LetOrConst_ : CONST

1.  Return TRUE.

Runtime Semantics: Evaluation

_LexicalDeclaration_ : _LetOrConst_ _BindingList_ ;

1.  Let _next_ be the result of evaluating _BindingList_.

2.  ReturnIfAbrupt(_next_).

3.  Return NormalCompletion(empty).

_BindingList_ : _BindingList_ , _LexicalBinding

1.  Let _next_ be the result of evaluating _BindingList_.

2.  ReturnIfAbrupt(_next_).

3.  Return the result of evaluating _LexicalBinding_.

_LexicalBinding_ : _BindingIdentifier

1.  Let _lhs_ be ResolveBinding(StringValue of _BindingIdentifier_).

2.  Return InitializeReferencedBinding(_lhs_, UNDEFINED).

NOTE A static semantics rule ensures that this form of _LexicalBinding_
never occurs in a CONST declaration.

_LexicalBinding_ : _BindingIdentifier_ _Initializer

1.  Let _bindingId_ be StringValue of _BindingIdentifier_.

2.  Let _lhs_ be ResolveBinding(_bindingId_).

3.  Let _rhs_ be the result of evaluating _Initializer_.

4.  Let _value_ be GetValue(_rhs_).

5.  ReturnIfAbrupt(_value_).

6.  If IsAnonymousFunctionDefinition(_Initializer_) is TRUE, then

    a.  Let _hasNameProperty_ be HasOwnProperty(_value_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform SetFunctionName(_value_,
        _bindingId_).

7.  Return InitializeReferencedBinding(_lhs_, _value_).

_LexicalBinding_ : _BindingPattern_ _Initializer

1.  Let _rhs_ be the result of evaluating _Initializer_.

2.  Let _value_ be GetValue(_rhs_).

3.  ReturnIfAbrupt(_value_).

4.  Let _env_ be the running execution context’s LexicalEnvironment.

5.  Return the result of performing BindingInitialization for
    _BindingPattern_ using _value_ and _env_ as the _arguments_.

Variable Statement

NOTE A VAR statement declares variables that are scoped to the running
execution context’s VariableEnvironment. Var variables are created when
their containing Lexical Environment is instantiated and are initialized
to UNDEFINED when created. Within the scope of any VariableEnvironment a
common _BindingIdentifier_ may appear in more than one
_VariableDeclaration_ but those declarations collective define only one
variable. A variable defined by a _VariableDeclaration_ with an
_Initializer_ is assigned the value of its _Initializer_’s
_AssignmentExpression_ when the _VariableDeclaration_ is executed, not
when the variable is created.

Syntax

VariableStatement~[Yield]~ :

VAR VariableDeclarationList~[In,\ ?Yield]~ ;

VariableDeclarationList~[In,\ Yield]~ :

VariableDeclaration~[?In,\ ?Yield]~
VariableDeclarationList~[?In,\ ?Yield]~ ,
VariableDeclaration~[?In,\ ?Yield]~

VariableDeclaration~[In,\ Yield]~ :

BindingIdentifier~[?Yield]~ Initializer~[?In,\ ?Yield]opt
~BindingPattern~[?Yield]~ Initializer~[?In,\ ?Yield]~

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.3.1, 13.6.4.2, 14.1.3, 14.2.2, 14.4.2,
14.5.2, 15.2.2.2, 15.2.3.2.

_VariableDeclarationList_ : _VariableDeclarationList_ ,
_VariableDeclaration

1.  Let _names_ be BoundNames of _VariableDeclarationList_.

2.  Append to _names_ the elements of BoundNames of
    _VariableDeclaration._

3.  Return _names_.

_VariableDeclaration_ : _BindingIdentifier_ _Initializer_~opt~

1.  Return the BoundNames of _BindingIdentifier_.

_VariableDeclaration_ : _BindingPattern_ _Initializer

1.  Return the BoundNames of _BindingPattern_.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.5.5, 13.6.1.4, 13.6.2.4, 13.6.3.5,
13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_VariableStatement_ : VAR _VariableDeclarationList_ ;

1.  Return BoundNames of _VariableDeclarationList.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.5.6, 13.6.1.5, 13.6.2.5, 13.6.3.6,
13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_VariableDeclarationList_ : _VariableDeclaration

1.  Return a new List containing _VariableDeclaration.

_VariableDeclarationList_ : _VariableDeclarationList_ ,
_VariableDeclaration

1.  Let _declarations_ be VarScopedDeclarations of
    _VariableDeclarationList_.

2.  Append _VariableDeclaration_ to _declarations.

3.  Return _declarations_.

RUNTIME Semantics: Evaluation

_VariableStatement_ : VAR _VariableDeclarationList_ ;

1.  Let _next_ be the result of evaluating _VariableDeclarationList_.

2.  ReturnIfAbrupt(_next_).

3.  Return NormalCompletion( empty).

_VariableDeclarationList_ : _VariableDeclarationList_ ,
_VariableDeclaration

1.  Let _next_ be the result of evaluating _VariableDeclarationList_.

2.  ReturnIfAbrupt(_next_).

3.  Return the result of evaluating _VariableDeclaration_.

_VariableDeclaration_ : _BindingIdentifier

1.  Return NormalCompletion(empty).

_VariableDeclaration_ : _BindingIdentifier_ _Initializer

1.  Let _bindingId_ be StringValue of _BindingIdentifier_.

2.  Let _lhs_ be ResolveBinding(_bindingId_)

3.  ReturnIfAbrupt(_lhs_).

4.  Let _rhs_ be the result of evaluating _Initializer_.

5.  Let _value_ be GetValue(_rhs_).

6.  ReturnIfAbrupt(_value_).

7.  If IsAnonymousFunctionDefinition(_Initializer_) is TRUE, then

    a.  Let _hasNameProperty_ be HasOwnProperty(_value_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform SetFunctionName(_value_,
        _bindingId_).

8.  Return PutValue(_lhs_, _value_).

NOTE If a _VariableDeclaration_ is nested within a with statement and
the _BindingIdentifier_ in the _VariableDeclaration_ is the same as a
property name of the binding object of the with statement’s object
Environment Record, then step 7 will assign _value_ to the property
instead of assigning to the VariableEnvironment binding of the
_Identifier_.

_VariableDeclaration_ : _BindingPattern_ _Initializer

1.  Let _rhs_ be the result of evaluating _Initializer_.

2.  Let _rval_ be GetValue(_rhs_).

3.  ReturnIfAbrupt(_rval_).

4.  Return the result of performing BindingInitialization for
    _BindingPattern_ passing _rval_ and UNDEFINED as arguments.

Destructuring Binding Patterns

Syntax

BindingPattern~[Yield,GeneratorParameter]~ :

ObjectBindingPattern~[?Yield,?GeneratorParameter]~
ArrayBindingPattern~[?Yield,?GeneratorParameter]~

ObjectBindingPattern~[Yield,GeneratorParameter]~ :

{ }
{ BindingPropertyList~[?Yield,?GeneratorParameter]~ }
{ BindingPropertyList~[?Yield,?GeneratorParameter]~ , }

ArrayBindingPattern~[Yield,GeneratorParameter]~ :

[ Elision~opt~ BindingRestElement~[?Yield,\ ?GeneratorParameter]opt~ ]
[ BindingElementList~[?Yield,\ ?GeneratorParameter]~ ]
[ BindingElementList~[?Yield,\ ?GeneratorParameter]~ , Elision~opt~
BindingRestElement~[?Yield,\ ?GeneratorParameter]opt~ ]

BindingPropertyList~[Yield,GeneratorParameter]~ :

BindingProperty~[?Yield,\ ?GeneratorParameter]~
BindingPropertyList~[?Yield,\ ?GeneratorParameter]~ ,
BindingProperty~[?Yield,\ ?GeneratorParameter]~

BindingElementList~[Yield,GeneratorParameter]~ :

BindingElisionElement~[?Yield,\ ?GeneratorParameter]~
BindingElementList~[?Yield,\ ?GeneratorParameter]~ ,
BindingElisionElement~[?Yield,\ ?GeneratorParameter]~

BindingElisionElement~[Yield,GeneratorParameter]~ :

Elision~opt~ BindingElement~[?Yield,\ ?GeneratorParameter]~

BindingProperty~[Yield,GeneratorParameter]~ :

SingleNameBinding~[?Yield,\ ?GeneratorParameter]
~ PropertyName~[?Yield,\ ?GeneratorParameter]~ :
BindingElement~[?Yield,\ ?GeneratorParameter]~

BindingElement~[Yield,\ GeneratorParameter\ ]~ :

SingleNameBinding~[?Yield,\ ?GeneratorParameter]
~[+GeneratorParameter] BindingPattern~[?Yield,GeneratorParameter]~
Initializer~[In]opt~
[~GeneratorParameter] BindingPattern~[?Yield]~
Initializer~[In,\ ?Yield]opt~

SingleNameBinding~[Yield,\ GeneratorParameter]~ :

[+GeneratorParameter] BindingIdentifier~[Yield]~ Initializer~[In]opt~
[~GeneratorParameter] BindingIdentifier~[?Yield]~
Initializer~[In,\ ?Yield]opt~

BindingRestElement~[Yield,\ GeneratorParameter]~ :

[+GeneratorParameter]... BindingIdentifier~[Yield]~
[~GeneratorParameter] ... BindingIdentifier~[?Yield]~

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.6.4.2, 14.1.3, 14.2.2, 14.4.2,
14.5.2, 15.2.2.2, 15.2.3.2.

_ObjectBindingPattern_ : { }

1.  Return an empty List.

_ArrayBindingPattern_ : [ _Elision_~opt~ ]

1.  Return an empty List.

_ArrayBindingPattern_ : [ _Elision_~opt~ _BindingRestElement_ ]

1.  Return the BoundNames of _BindingRestElement_.

_ArrayBindingPattern_ : [ _BindingElementList_ , _Elision_~opt~ ]

1.  Return the BoundNames of _BindingElementList_.

_ArrayBindingPattern_ : [ _BindingElementList_ , _Elision_~opt~
_BindingRestElement_ ]

1.  Let _names_ be BoundNames of _BindingElementList_.

2.  Append to _names_ the elements of BoundNames of
    _BindingRestElement._

3.  Return _names_.

_BindingPropertyList_ : _BindingPropertyList_ , _BindingProperty

1.  Let _names_ be BoundNames of _BindingPropertyList_.

2.  Append to _names_ the elements of BoundNames of _BindingProperty.

3.  Return _names_.

_BindingElementList_ : _BindingElementList_ , _BindingElisionElement

1.  Let _names_ be BoundNames of _BindingElementList_.

2.  Append to _names_ the elements of BoundNames of
    _BindingElisionElement._

3.  Return _names_.

_BindingElisionElement_ : _Elision_~opt~ _BindingElement

1.  Return BoundNames of _BindingElement_.

_BindingProperty_ : _PropertyName_ : _BindingElement

1.  Return the BoundNames of _BindingElement_.

_SingleNameBinding_ : _BindingIdentifier Initializer_~opt~

1.  Return the BoundNames of _BindingIdentifier_.

_BindingElement_ : _BindingPattern Initializer_~opt~

1.  Return the BoundNames of _BindingPattern_.

Static Semantics: ContainsExpression

See also: 14.1.5, 14.2.4.

_ObjectBindingPattern_ : { }

1.  Return FALSE.

_ArrayBindingPattern_ : [ _Elision_~opt~ ]

1.  Return FALSE.

_ArrayBindingPattern_ : [ _Elision_~opt~ _BindingRestElement_ ]

1.  Return FALSE.

_ArrayBindingPattern_ : [ _BindingElementList_ , _Elision_~opt~ ]

1.  Return ContainsExpression of _BindingElementList_.

_ArrayBindingPattern_ : [ _BindingElementList_ , _Elision_~opt~
_BindingRestElement_ ]

1.  Return ContainsExpression of _BindingElementList_.

_BindingPropertyList_ : _BindingPropertyList_ , _BindingProperty

1.  Let _has_ be ContainsExpression of _BindingPropertyList_.

2.  If _has_ is TRUE, return TRUE_.

3.  Return ContainsExpression of _BindingProperty_.

_BindingElementList_ : _BindingElementList_ , _BindingElisionElement

1.  Let _has_ be ContainsExpression of _BindingElementList_.

2.  If _has_ is TRUE, return TRUE_.

3.  Return ContainsExpression of _BindingElisionElement_.

_BindingElisionElement_ : _Elision_~opt~ _BindingElement

1.  Return ContainsExpression of _BindingElement_.

_BindingProperty_ : _PropertyName_ : _BindingElement

1.  Let _has_ be IsComputedPropertyKey of _PropertyName_.

2.  If _has_ is TRUE, return TRUE_.

3.  Return the ContainsExpression of _BindingElement_.

_BindingElement_ : _BindingPattern Initializer

1.  Return TRUE.

_SingleNameBinding_ : _BindingIdentifier

1.  Return FALSE.

_SingleNameBinding_ : _BindingIdentifier Initializer

1.  Return TRUE.

Static Semantics: HasInitializer

See also: 14.1.7, 14.2.6.

_BindingElement_ : _BindingPattern

1.  Return FALSE.

_BindingElement_ : _BindingPattern Initializer

1.  Return TRUE.

_SingleNameBinding_ : _BindingIdentifier

1.  Return FALSE.

_SingleNameBinding_ : _BindingIdentifier Initializer

1.  Return TRUE.

Static Semantics: IsSimpleParameterList

See also: 14.1.12, 14.2.9.

_BindingElement_ : _BindingPattern

1.  Return FALSE.

_BindingElement_ : _BindingPattern Initializer

1.  Return FALSE.

_SingleNameBinding_ : _BindingIdentifier

1.  Return TRUE.

_SingleNameBinding_ : _BindingIdentifier Initializer

1.  Return FALSE.

Runtime Semantics: BindingInitialization

  With parameters _value_ and _environment_.

See also: 12.1.5, 13.6.4.9.

NOTE When UNDEFINED is passed for _environment_ it indicates that a
PutValue operation should be used to assign the initialization value.
This is the case for formal parameter lists of non-strict functions. In
that case the formal parameter bindings are preinitialized in order to
deal with the possibility of multiple parameters with the same name.

_BindingPattern_ : _ObjectBindingPattern

1.  Let _valid_ be RequireObjectCoercible(_value_).

2.  ReturnIfAbrupt(_valid_).

3.  Return the result of performing BindingInitialization for
    _ObjectBindingPattern_ using _value_ and _environment_ as arguments.

_BindingPattern_ : _ArrayBindingPattern

1.  Let _iterator_ be GetIterator(_value_).

2.  ReturnIfAbrupt(_iterator_).

3.  Let _iteratorRecord_ be Record {[[iterator]]: _iterator_, [[done]]:
    FALSE}.

4.  Let _result_ be IteratorBindingInitialization for
    _ArrayBindingPattern_ using _iteratorRecord_, and _environment_ as
    arguments.

5.  If _iteratorRecord_.[[done]] is FALSE, return
    IteratorClose(_iterator_, _result_).

6.  Return _result_.

_ObjectBindingPattern_ : { }

1.  Return NormalCompletion(empty).

_BindingPropertyList_ : _BindingPropertyList_ , _BindingProperty

1.  Let _status_ be the result of performing BindingInitialization for
    _BindingPropertyList_ using _value_ and _environment_ as arguments.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing BindingInitialization for
    _BindingProperty_ using _value_ and _environment_ as arguments.

_BindingProperty_ : _SingleNameBinding

1.  Let _name_ be the string that is the only element of BoundNames of
    _SingleNameBinding_.

2.  Return the result of performing KeyedBindingInitialization for
    _SingleNameBinding_ using _value_, _environment_, and _name_ as the
    arguments.

_BindingProperty_ : _PropertyName_ : _BindingElement

1.  Let _P_ be the result of evaluating _PropertyName

2.  ReturnIfAbrupt(_P_).

3.  Return the result of performing KeyedBindingInitialization for
    _BindingElement_ using _value_, _environment_, and _P_ as arguments.

Runtime Semantics: IteratorBindingInitialization

  With parameters _iteratorRecord,_ and _environment_.

See also: 14.1.18, 14.2.14.

NOTE When UNDEFINED is passed for _environment_ it indicates that a
PutValue operation should be used to assign the initialization value.
This is the case for formal parameter lists of non-strict functions. In
that case the formal parameter bindings are preinitialized in order to
deal with the possibility of multiple parameters with the same name.

_ArrayBindingPattern_ : [ ]

1.  Return NormalCompletion(empty).

_ArrayBindingPattern_ : [ _Elision_ ]

1.  Return the result of performing
    IteratorDestructuringAssignmentEvaluation of _Elision_ with
    _iteratorRecord_ as the argument.

_ArrayBindingPattern_ : [ _Elision_~opt~ _BindingRestElement_ ]

1.  If _Elision_ is present, then

    a.  Let _status_ be the result of performing
        IteratorDestructuringAssignmentEvaluation of _Elision_ with
        _iteratorRecord_ as the argument.

    b.  ReturnIfAbrupt(_status_).

2.  Return the result of performing IteratorBindingInitialization for
    _BindingRestElement_ with _iteratorRecord_ and _environment_ as
    arguments.

_ArrayBindingPattern_ : [ _BindingElementList_ ]

1.  Return the result of performing IteratorBindingInitialization for
    _BindingElementList_ with _iteratorRecord_ and _environment_ as
    arguments.

_ArrayBindingPattern_ : [ _BindingElementList_ , ]

1.  Return the result of performing IteratorBindingInitialization for
    _BindingElementList_ with _iteratorRecord_ and _environment_ as
    arguments.

_ArrayBindingPattern_ : [ _BindingElementList_ , _Elision_ ]

1.  Let _status_ be the result of performing
    IteratorBindingInitialization for _BindingElementList_ with
    _iteratorRecord_ and _environment_ as arguments.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing
    IteratorDestructuringAssignmentEvaluation of _Elision_ with
    _iteratorRecord_ as the argument.

_ArrayBindingPattern_ : [ _BindingElementList_ , _Elision_~opt~
_BindingRestElement_ ]

1.  Let _status_ be the result of performing
    IteratorBindingInitialization for _BindingElementList_ with
    _iteratorRecord_ and _environment_ as arguments.

2.  ReturnIfAbrupt(_status_).

3.  If _Elision_ is present, then

    a.  Let _status_ be the result of performing
        IteratorDestructuringAssignmentEvaluation of _Elision_ with
        _iteratorRecord_ as the argument.

    b.  ReturnIfAbrupt(_status_).

4.  Return the result of performing IteratorBindingInitialization for
    _BindingRestElement_ with _iteratorRecord_ and _environment_ as
    arguments.

_BindingElementList_ : _BindingElisionElement

1.  Return the result of performing IteratorBindingInitialization for
    _BindingElisionElement_ with _iteratorRecord_ and _environment_ as
    arguments.

_BindingElementList_ : _BindingElementList_ , _BindingElisionElement

1.  Let _status_ be the result of performing
    IteratorBindingInitialization for _BindingElementList_ with
    _iteratorRecord_ and _environment_ as arguments.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing IteratorBindingInitialization for
    _BindingElisionElement_ using _iteratorRecord_ and _environment_ as
    arguments.

_BindingElisionElement_ : _BindingElement

1.  Return the result of performing IteratorBindingInitialization of
    _BindingElement_ with _iteratorRecord_ and _environment_ as the
    arguments.

_BindingElisionElement_ : _Elision_ _BindingElement

1.  Let _status_ be the result of performing
    IteratorDestructuringAssignmentEvaluation of _Elision_ with
    _iteratorRecord_ as the argument.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing IteratorBindingInitialization of
    _BindingElement_ with _iteratorRecord_ and _environment_ as the
    arguments.

_BindingElement_ : _SingleNameBinding

1.  Return the result of performing IteratorBindingInitialization for
    _SingleNameBinding_ with _iteratorRecord_ and _environment_ as the
    arguments.

_SingleNameBinding_ : _BindingIdentifier Initializer_~opt~

1.  Let _bindingId_ be StringValue of _BindingIdentifier_.

2.  Let _lhs_ be ResolveBinding(_bindingId_, _environment_).

3.  ReturnIfAbrupt(_lhs_).

4.  If _iteratorRecord_.[[done]] is FALSE, then

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE.

    e.  Else,

        i.  Let _v_ be IteratorValue(_next_).

        ii. If _v_ is an abrupt completion, set
            _iteratorRecord_.[[done]] to TRUE.

        iii. ReturnIfAbrupt(_v_).

5.  If _iteratorRecord_.[[done]] is TRUE, let _v_ be UNDEFINED.

6.  If _Initializer_ is present and _v_ is UNDEFINED, then

    a.  Let _defaultValue_ be the result of evaluating _Initializer_.

    b.  Let _v_ be GetValue(_defaultValue_).

    c.  ReturnIfAbrupt(_v_).

    d.  If IsAnonymousFunctionDefinition(_Initializer_) is TRUE, then

        i.  Let _hasNameProperty_ be HasOwnProperty(_v_, "NAME").

        ii. ReturnIfAbrupt(_hasNameProperty_).

        iii. If _hasNameProperty_ is FALSE, perform SetFunctionName(_v_,
            _bindingId_).

7.  If _environment_ is UNDEFINED, return PutValue(_lhs_, _v_).

8.  Return InitializeReferencedBinding(_lhs_, _v_).

_BindingElement_ : _BindingPattern Initializer_~opt~

1.  If _iteratorRecord_.[[done]] is FALSE, then

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE.

    e.  Else

        i.  Let _v_ be IteratorValue(_next_).

        ii. If _v_ is an abrupt completion, set
            _iteratorRecord_.[[done]] to TRUE.

        iii. ReturnIfAbrupt(_v_).

2.  If _iteratorRecord_.[[done]] is TRUE, let _v_ be UNDEFINED.

3.  If _Initializer_ is present and _v_ is UNDEFINED, then

    a.  Let _defaultValue_ be the result of evaluating _Initializer_.

    b.  Let _v_ be GetValue(_defaultValue_).

    c.  ReturnIfAbrupt(_v_).

4.  Return the result of performing BindingInitialization of
    _BindingPattern_ with _v_ and _environment_ as the arguments.

_BindingRestElement_ : ... _BindingIdentifier

1.  Let _lhs_ be ResolveBinding(StringValue of _BindingIdentifier_,
    _environment_).

2.  ReturnIfAbrupt(_lhs_).

3.  Let _A_ be ArrayCreate(0).

4.  Let _n_=0.

5.  Repeat,

    a.  If _iteratorRecord_.[[done]] is FALSE,

        i.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

        ii. If _next_ is an abrupt completion, set
            _iteratorRecord_.[[done]] to TRUE.

        iii. ReturnIfAbrupt(_next_).

        iv. If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE.

    b.  If _iteratorRecord_.[[done]] is TRUE, then

        i.  If _environment_ is UNDEFINED, return PutValue(_lhs_, _A_).

        ii. Return InitializeReferencedBinding(_lhs_, _A_).

    c.  Let _nextValue_ be IteratorValue(_next_).

    d.  If _nextValue_ is an abrupt completion, set
        _iteratorRecord_.[[done]] to TRUE.

    e.  ReturnIfAbrupt(_nextValue_).

    f.  Let _status_ be CreateDataProperty(_A_, ToString (_n_),
        _nextValue_).

    g.  Assert: _status_ is TRUE.

    h.  Increment _n_ by 1.

Runtime Semantics: KeyedBindingInitialization

  With parameters _value_, _environment,_ and _propertyName_.

NOTE When UNDEFINED is passed for _environment_ it indicates that a
PutValue operation should be used to assign the initialization value.
This is the case for formal parameter lists of non-strict functions. In
that case the formal parameter bindings are preinitialized in order to
deal with the possibility of multiple parameters with the same name.

_BindingElement_ : _BindingPattern Initializer_~opt~

1.  Let _v_ be GetV(_value_, _propertyName_).

2.  ReturnIfAbrupt(_v_).

3.  If _Initializer_ is present and _v_ is UNDEFINED, then

    a.  Let _defaultValue_ be the result of evaluating _Initializer_.

    b.  Let _v_ be GetValue(_defaultValue_).

    c.  ReturnIfAbrupt(_v_).

4.  Return the result of performing BindingInitialization for
    _BindingPattern_ passing _v_ and _environment_ as arguments.

_SingleNameBinding_ : _BindingIdentifier Initializer_~opt~

1.  Let _bindingId_ be StringValue of _BindingIdentifier_.

2.  Let _lhs_ be ResolveBinding(_bindingId_, _environment_).

3.  ReturnIfAbrupt(_lhs_).

4.  Let _v_ be GetV(_value_, _propertyName_).

5.  ReturnIfAbrupt(_v_).

6.  If _Initializer_ is present and _v_ is UNDEFINED, then

    a.  Let _defaultValue_ be the result of evaluating _Initializer_.

    b.  Let _v_ be GetValue(_defaultValue_).

    c.  ReturnIfAbrupt(_v_).

    d.  If IsAnonymousFunctionDefinition(_Initializer_) is TRUE, then

        i.  Let _hasNameProperty_ be HasOwnProperty(_v_, "NAME").

        ii. ReturnIfAbrupt(_hasNameProperty_).

        iii. If _hasNameProperty_ is FALSE, perform SetFunctionName(_v_,
            _bindingId_).

7.  If _environment_ is UNDEFINED, return PutValue(_lhs_, _v_).

8.  Return InitializeReferencedBinding(_lhs_, _v_).


Empty Statement

Syntax

EmptyStatement :

;

Runtime Semantics: Evaluation

_EmptyStatement_ : ;

1.  Return NormalCompletion(empty).


Expression Statement

Syntax

ExpressionStatement~[Yield]~ :

[lookahead ∉ {{, FUNCTION, CLASS, LET [ }] Expression~[In,\ ?Yield]~ ;

NOTE An _ExpressionStatement_ cannot start with a U+007B (left curly
bracket) because that might make it ambiguous with a _Block_. Also, an
_ExpressionStatement_ cannot start with the FUNCTION or CLASS keywords
because that would make it ambiguous with a _FunctionDeclaration_, a
_GeneratorDeclaration_, or a _ClassDeclaration_. An
_ExpressionStatement_ cannot start with the two token sequence LET [
because that would make it ambiguous with a LET _LexicalDeclaration_
whose first _LexicalBinding_ was an _ArrayBindingPattern_.

Runtime Semantics: Evaluation

_ExpressionStatement_ : _Expression_ ;

1.  Let _exprRef_ be the result of evaluating _Expression_.

2.  Return GetValue(_exprRef_).


The if Statement

Syntax

IfStatement~[Yield,\ Return]~ :

IF ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~ ELSE
Statement~[?Yield,\ ?Return]~
IF ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

Each ELSE for which the choice of associated IF is ambiguous shall be
associated with the nearest possible IF that would otherwise have no
corresponding ELSE.

Static Semantics: Early Errors

IfStatement :

IF ( Expression) Statement ELSE Statement
IF ( Expression ) Statement

-   It is a Syntax Error if IsLabelledFunction(_Statement_) is TRUE.

NOTE It is only necessary to apply this rule if the extension specified
in B.3.2 is implemented.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.6.1.1, 13.6.2.1, 13.6.3.2, 13.6.4.3,
13.10.2, 13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

_IfStatement_ : IF ( _Expression_ ) _Statement_ ELSE _Statement

1.  Let _hasUndefinedLabels_ be ContainsDuplicateLabels of the first
    _Statement_ with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsDuplicateLabels of the second _Statement_ with
    argument _labelSet._

_IfStatement_ : IF ( _Expression_ ) _Statement

1.  Return ContainsDuplicateLabels of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.6.1.2, 13.6.2.2, 13.6.3.3, 13.6.4.4,
13.8.2, 13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

_IfStatement_ : IF ( _Expression_ ) _Statement_ ELSE _Statement

1.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of the
    first _Statement_ with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedBreakTarget of the second _Statement_ with
    argument _labelSet._

_IfStatement_ : IF ( _Expression_ ) _Statement

1.  Return ContainsUndefinedBreakTarget of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.6.1.3, 13.6.2.3, 13.6.3.4, 13.6.4.5,
13.7.2, 13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

_IfStatement_ : IF ( _Expression_ ) _Statement_ ELSE _Statement

1.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of the
    first _Statement_ with arguments _iterationSet_ and « ».

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedContinueTarget of the second _Statement
    with arguments _iterationSet_ and « »_._

_IfStatement_ : IF ( _Expression_ ) _Statement

1.  Return ContainsUndefinedContinueTarget of _Statement_ with arguments
    _iterationSet_ and « »_._

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.6.1.4, 13.6.2.4, 13.6.3.5,
13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_IfStatement_ : IF ( _Expression_ ) _Statement_ ELSE _Statement

1.  Let _names_ be VarDeclaredNames of the first _Statement_.

2.  Append to _names_ the elements of the VarDeclaredNames of the second
    _Statement._

3.  Return _names_.

_IfStatement_ : IF ( _Expression_ ) _Statement

1.  Return the VarDeclaredNames of _Statement_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.6.1.5, 13.6.2.5, 13.6.3.6,
13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_IfStatement_ : IF ( _Expression_ ) _Statement_ ELSE _Statement

1.  Let _declarations_ be VarScopedDeclarations of the first
    _Statement_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of the second _Statement._

3.  Return _declarations_.

_IfStatement_ : IF ( _Expression_ ) _Statement

1.  Return the VarDeclaredNames of _Statement_.

Runtime Semantics: Evaluation

_IfStatement_ : IF ( _Expression_ ) _Statement_ ELSE _Statement

1.  Let _exprRef_ be the result of evaluating _Expression_.

2.  Let _exprValue_ be ToBoolean(GetValue(_exprRef_)).

3.  ReturnIfAbrupt(_exprValue_).

4.  If _exprValue_ is TRUE, then

    a.  Let _stmtCompletion_ be the result of evaluating the first
        _Statement_.

5.  Else,

    a.  Let _stmtCompletion_ be the result of evaluating the second
        _Statement_.

6.  ReturnIfAbrupt(_stmtCompletion_).

7.  If _stmtCompletion_.[[value]] is not empty, return _stmtCompletion_.

8.  Return NormalCompletion(UNDEFINED).

_IfStatement_ : IF ( _Expression_ ) _Statement

1.  Let _exprRef_ be the result of evaluating _Expression_.

2.  Let _exprValue_ be ToBoolean(GetValue(_exprRef_)).

3.  ReturnIfAbrupt(_exprValue_).

4.  If _exprValue_ is FALSE, then

    a.  Return NormalCompletion(UNDEFINED).

5.  Else,

    a.  Let _stmtCompletion_ be the result of evaluating _Statement_.

    b.  ReturnIfAbrupt(_stmtCompletion_).

    c.  If _stmtCompletion_.[[value]] is not empty, return
        _stmtCompletion_.

    d.  Return NormalCompletion(UNDEFINED).


Iteration Statements

Syntax

IterationStatement~[Yield,\ Return]~ :

  DO Statement~[?Yield,\ ?Return]~ WHILE ( Expression~[In,\ ?Yield]~ ) ;

  WHILE ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

  FOR ( [lookahead ∉ {LET [ }] Expression~[?Yield]opt~ ;
  Expression~[In,\ ?Yield]opt~ ; Expression~[In,\ ?Yield]opt~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( VAR VariableDeclarationList~[?Yield]~;
  Expression~[In,\ ?Yield]opt~ ; Expression~[In,\ ?Yield]opt~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( LexicalDeclaration~[?Yield]~ Expression~[In,\ ?Yield]opt~ ;
  Expression~[In,\ ?Yield]opt~ ) Statement~[?Yield,\ ?Return]~

  FOR ( [lookahead ∉ {LET [ }] LeftHandSideExpression~[?Yield]~ IN
  Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

  FOR ( VAR ForBinding~[?Yield]~ IN Expression~[In,\ ?Yield]~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( ForDeclaration~[?Yield]~ IN Expression~[In,\ ?Yield]~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( [lookahead ≠ LET] LeftHandSideExpression~[?Yield]~ OF
  AssignmentExpression~[In,\ ?Yield]~ ) Statement~[?Yield, ?Return]~

  FOR ( VAR ForBinding~[?Yield]~ OF AssignmentExpression~[In,\ ?Yield]~
  ) Statement~[?Yield,\ ?Return]~

  FOR ( ForDeclaration~[?Yield]~ OF AssignmentExpression~[In,\ ?Yield]~
  ) Statement~[?Yield,\ ?Return]~

ForDeclaration~[Yield]~ :

LetOrConst ForBinding~[?Yield]~

ForBinding~[Yield]~ :

BindingIdentifier~[?Yield]~
BindingPattern~[?Yield]~

Semantics

Static Semantics: Early Errors

IterationStatement :

  DO Statement WHILE ( Expression ) ;

  WHILE ( Expression ) Statement

  FOR ( Expression~opt~ ; Expression~opt~ ; Expression~opt~ ) Statement

  FOR ( VAR VariableDeclarationList; Expression~opt~ ; Expression~opt~ )
  Statement

  FOR ( LexicalDeclaration Expression~opt~ ; Expression~opt~ ) Statement

  FOR ( LeftHandSideExpression IN Expression) Statement

  FOR ( VAR ForBinding IN Expression ) Statement

  FOR ( ForDeclaration IN Expression) Statement

  FOR ( LeftHandSideExpression OF AssignmentExpression ) Statement

  FOR ( VAR ForBinding OF AssignmentExpression ) Statement

  FOR ( ForDeclaration OF AssignmentExpression ) Statement

-   It is a Syntax Error if IsLabelledFunction(_Statement_) is TRUE.

NOTE It is only necessary to apply this rule if the extension specified
in B.3.2 is implemented.

Runtime Semantics: LoopContinues(completion, labelSet) 

The abstract operation LoopContinues with arguments _completion_ and
_labelSet_ is defined by the following steps:

1.  If _completion_.[[type]] is normal, return TRUE.

2.  If _completion_.[[type]] is not continue, return FALSE.

3.  If _completion_.[[target]] is empty, return TRUE.

4.  If _completion_.[[target]] is an element of _labelSet_, return TRUE.

5.  Return FALSE.

NOTE Within the _Statement_ part of an _IterationStatement_ a
_ContinueStatement_ may be used to begin a new iteration.

The do-while Statement

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.2.1, 13.6.3.2, 13.6.4.3, 13.10.2,
13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

_IterationStatement_ : DO _Statement_ WHILE ( _Expression_ );

1.  Return ContainsDuplicateLabels of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.2.2, 13.6.3.3, 13.6.4.4, 13.8.2,
13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

_IterationStatement_ : DO _Statement_ WHILE ( _Expression_ );

1.  Return ContainsUndefinedBreakTarget of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.2.3, 13.6.3.4, 13.6.4.5, 13.7.2,
13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

_IterationStatement_ : DO _Statement_ WHILE ( _Expression_ );

1.  Return ContainsUndefinedContinueTarget of _Statement_ with arguments
    _iterationSet_ and « »_._

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.2.4, 13.6.3.5,
13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_IterationStatement_ : DO _Statement_ WHILE ( _Expression_ );

1.  Return the VarDeclaredNames of _Statement_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.2.5, 13.6.3.6,
13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_IterationStatement_ : DO _Statement_ WHILE ( _Expression_ );

1.  Return the VarScopedDeclarations of _Statement_.

Runtime Semantics: LabelledEvaluation

  With argument _labelSet_.

See also: 13.0.7, 13.6.2.6, 13.6.3.7, 13.6.4.11, 13.12.14.

_IterationStatement_ : DO _Statement_ WHILE ( _Expression_ );

1.  Let _V_ = UNDEFINED.

2.  Repeat

    a.  Let _stmt_ be the result of evaluating _Statement_.

    b.  If LoopContinues(_stmt_, _labelSet_) is FALSE, return
        Completion(_stmt_).

    c.  If _stmt_.[[value]] is not empty, let _V_ = _stmt_.[[value]]_._

    d.  Let _exprRef_ be the result of evaluating _Expression_.

    e.  Let _exprValue_ be GetValue(_exprRef_).

    f.  ReturnIfAbrupt(_exprValue_).

    g.  h.  If ToBoolean(_exprValue_) is FALSE, return
        NormalCompletion(_V_).

    i.  i.  ii. 

The while Statement

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.3.2, 13.6.4.3, 13.10.2,
13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

_IterationStatement_ : WHILE ( _Expression_ ) _Statement

1.  Return ContainsDuplicateLabels of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.3.3, 13.6.4.4, 13.8.2,
13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

_IterationStatement_ : WHILE ( _Expression_ ) _Statement

1.  Return ContainsUndefinedBreakTarget of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.3.4, 13.6.4.5, 13.7.2,
13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

_IterationStatement_ : WHILE ( _Expression_ ) _Statement

1.  Return ContainsUndefinedContinueTarget of _Statement_ with arguments
    _iterationSet_ and « »_._

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.3.5,
13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_IterationStatement_ : WHILE ( _Expression_ ) _Statement

1.  Return the VarDeclaredNames of _Statement_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.3.6,
13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_IterationStatement_ : WHILE ( _Expression_ ) _Statement

1.  Return the VarScopedDeclarations of _Statement_.

Runtime Semantics: LabelledEvaluation

  With argument _labelSet_.

See also: 13.0.7, 13.6.1.6, 13.6.3.7, 13.6.4.11, 13.12.14.

_IterationStatement_ : WHILE ( _Expression_ ) _Statement

1.  Let _V_ = UNDEFINED.

2.  Repeat

    a.  Let _exprRef_ be the result of evaluating _Expression_.

    b.  Let _exprValue_ be GetValue(_exprRef_).

    c.  ReturnIfAbrupt(_exprValue_).

    d.  e.  If ToBoolean(_exprValue_) is FALSE, return
        NormalCompletion(_V_).

    f.  i.  ii. 

    g.  Let _stmt_ be the result of evaluating _Statement_.

    h.  If LoopContinues (_stmt_, _labelSet_) is FALSE, return
        Completion(_stmt_).

    i.  If _stmt_.[[value]] is not empty, let _V_ = _stmt_.[[value]].

The for Statement

Static Semantics: Early Errors

_IterationStatement_ : FOR ( _LexicalDeclaration_ _Expression_~opt~ ;
_Expression_~opt~ ) _Statement

-   It is a Syntax Error if any element of the BoundNames of
    _LexicalDeclaration_ also occurs in the VarDeclaredNames of
    _Statement_.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.4.3, 13.10.2,
13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

IterationStatement :

  FOR ( Expression~opt~ ; Expression~opt~ ; Expression~opt~ ) Statement

  FOR ( VAR VariableDeclarationList; Expression~opt~ ; Expression~opt~ )
  Statement

  FOR ( LexicalDeclaration Expression~opt~ ; Expression~opt~ ) Statement

1.  Return ContainsDuplicateLabels of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.4.4, 13.8.2,
13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

IterationStatement :

  FOR ( Expression~opt~ ; Expression~opt~ ; Expression~opt~ ) Statement

  FOR ( VAR VariableDeclarationList; Expression~opt~ ; Expression~opt~ )
  Statement

  FOR ( LexicalDeclaration Expression~opt~ ; Expression~opt~ ) Statement

1.  Return ContainsUndefinedBreakTarget of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.4.5, 13.7.2,
13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

IterationStatement :

  FOR ( Expression~opt~ ; Expression~opt~ ; Expression~opt~ ) Statement

  FOR ( VAR VariableDeclarationList; Expression~opt~ ; Expression~opt~ )
  Statement

  FOR ( LexicalDeclaration Expression~opt~ ; Expression~opt~ ) Statement

1.  Return ContainsUndefinedContinueTarget of _Statement_ with arguments
    _iterationSet_ and « »_._

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_IterationStatement_ : FOR ( _Expression_~opt~ ; _Expression_~opt~ ;
_Expression_~opt~ ) _Statement

1.  Return the VarDeclaredNames of _Statement_.

_IterationStatement_ : FOR ( VAR _VariableDeclarationList_ ;
_Expression_~opt~ ; _Expression_~opt~ ) _Statement

1.  Let _names_ be BoundNames of _VariableDeclarationList_.

2.  Append to _names_ the elements of the VarDeclaredNames of
    _Statement._

3.  Return _names_.

_IterationStatement_ : FOR ( _LexicalDeclaration_ _Expression_~opt~ ;
_Expression_~opt~ ) _Statement

1.  Return the VarDeclaredNames of _Statement_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_IterationStatement_ : FOR ( _Expression_~opt~ ; _Expression_~opt~ ;
_Expression_~opt~ ) _Statement

1.  Return the VarScopedDeclarations of _Statement_.

_IterationStatement_ : FOR ( VAR _VariableDeclarationList_ ;
_Expression_~opt~ ; _Expression_~opt~ ) _Statement

1.  Let _declarations_ be VarScopedDeclarations of
    _VariableDeclarationList_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _Statement._

3.  Return _declarations_.

_IterationStatement_ : FOR ( _LexicalDeclaration_ _Expression_~opt~ ;
_Expression_~opt~ ) _Statement

1.  Return the VarScopedDeclarations of _Statement_.

Runtime Semantics: LabelledEvaluation

  With argument _labelSet_.

See also: 13.0.7, 13.6.1.6, 13.6.2.6, 13.6.4.11, 13.12.14.

_IterationStatement_ : FOR ( _Expression_~opt~ ; _Expression_~opt~ ;
_Expression_~opt~ ) _Statement

1.  If the first _Expression_ is present, then

    a.  Let _exprRef_ be the result of evaluating the first
        _Expression_.

    b.  Let _exprValue_ be GetValue(_exprRef_).

    c.  ReturnIfAbrupt(_exprValue_).

2.  Return ForBodyEvaluation(the second _Expression_, the third
    _Expression_, _Statement_, « », _labelSet_).

_IterationStatement_ : FOR ( VAR _VariableDeclarationList_ ;
_Expression_~opt~ ; _Expression_~opt~ ) _Statement

1.  Let _varDcl_ be the result of evaluating _VariableDeclarationList_.

2.  ReturnIfAbrupt(_varDcl_).

3.  Return ForBodyEvaluation(the first _Expression_, the second
    _Expression_, _Statement_, « », _labelSet_).

_IterationStatement_ : FOR ( _LexicalDeclaration_ _Expression_~opt~ ;
_Expression_~opt~ ) _Statement

1.  Let _oldEnv_ be the running execution context’s LexicalEnvironment.

2.  Let _loopEnv_ be NewDeclarativeEnvironment(_oldEnv_).

3.  Let _isConst_ be the result of performing IsConstantDeclaration of
    _LexicalDeclaration_.

4.  Let _boundNames_ be the BoundNames of _LexicalDeclaration_.

5.  For each element _dn_ of _boundNames_ do

    a.  If _isConst_ is TRUE, then

        i.  Perform _loopEnv_.CreateImmutableBinding(_dn_, TRUE).

    b.  Else,

        i.  Perform _loopEnv_.CreateMutableBinding(_dn,_ FALSE).

        ii. Assert: The above call to CreateMutableBinding will never
            return an abrupt completion.

6.  Set the running execution context’s LexicalEnvironment to _loopEnv_.

7.  Let _forDcl_ be the result of evaluating _LexicalDeclaration_.

8.  If _forDcl_ is an abrupt completion, then

    a.  Set the running execution context’s LexicalEnvironment to
        _oldEnv_.

    b.  Return Completion(_forDcl_).

9.  If _isConst_ is FALSE, let _perIterationLets_ be _boundNames
    otherwise let _perIterationLets_ be « ».

10. Let _bodyResult_ be ForBodyEvaluation(the first _Expression_, the
    second _Expression_, _Statement_, _perIterationLets_, _labelSet_).

11. Set the running execution context’s LexicalEnvironment to _oldEnv_.

12. Return Completion(_bodyResult_).

Runtime Semantics: ForBodyEvaluation( test, increment, stmt, perIterationBindings, labelSet )

The abstract operation ForBodyEvaluation with arguments _test_,
_increment_, _stmt_, _perIterationBindings_, and _labelSet_ is performed
as follows:

1.  Let _V_ = UNDEFINED.

2.  Let _status_ be
    CreatePerIterationEnvironment(_perIterationBindings_).

3.  ReturnIfAbrupt(_status_).

4.  Repeat

    a.  If _test_ is not [empty], then

        i.  Let _testRef_ be the result of evaluating _test_.

        ii. Let _testValue_ be GetValue(_testRef_).

        iii. ReturnIfAbrupt(_testValue_).

        iv. v.  If ToBoolean(_testValue_) is FALSE, return
            NormalCompletion(_V_).

        vi. 1.  2.  

    b.  Let _result_ be the result of evaluating _stmt_.

    c.  If LoopContinues(_result_, _labelSet_) is FALSE, return
        Completion(_result_).

    d.  If _result_.[[value]] is not empty, let _V_ =
        _result_.[[value]].

    e.  Let _status_ be
        CreatePerIterationEnvironment(_perIterationBindings_).

    f.  ReturnIfAbrupt(_status_).

    g.  If _increment_ is not [empty], then

        i.  Let _incRef_ be the result of evaluating _increment_.

        ii. Let _incValue_ be GetValue(_incRef_).

        iii. ReturnIfAbrupt(_incValue_).

Runtime Semantics: CreatePerIterationEnvironment( perIterationBindings )

The abstract operation CreatePerIterationEnvironment with argument
_perIterationBindings_ is performed as follows:

1.  If _perIterationBindings_ has any elements, then

    a.  Let _lastIterationEnv_ be the running execution context’s
        LexicalEnvironment.

    b.  Let _outer_ be _lastIterationEnv_’s outer environment reference.

    c.  Assert: _outer_ is not NULL.

    d.  Let _thisIterationEnv_ be NewDeclarativeEnvironment(_outer_).

    e.  For each element _bn_ of _perIterationBindings_ do,

        i.  Let _status_ be
            _thisIterationEnv_.CreateMutableBinding(_bn_, FALSE).

        ii. Assert: _status_ is never an abrupt completion.

        iii. Let _lastValue_ be _lastIterationEnv_.GetBindingValue(_bn_,
            TRUE).

        iv. ReturnIfAbrupt(_lastValue_).

        v.  Perform _thisIterationEnv_.InitializeBinding(_bn_,
            _lastValue_).

    f.  Set the running execution context’s LexicalEnvironment to
        _thisIterationEnv._

2.  Return UNDEFINED

The for-in and for-of Statements

Static Semantics: Early Errors

_IterationStatement_ :

FOR ( _LeftHandSideExpression_ IN _Expression_ ) _Statement_

FOR ( _LeftHandSideExpression_ OF _AssignmentExpression_ ) _Statement_

-   It is a Syntax Error if _LeftHandSideExpression_ is either an
    _ObjectLiteral_ or an _ArrayLiteral_ and if the lexical token
    sequence matched by _LeftHandSideExpression_ cannot be parsed with
    no tokens left over using _AssignmentPattern_ as the goal symbol.

  If _LeftHandSideExpression_ is either an _ObjectLiteral_ or an
  _ArrayLiteral_ and if the lexical token sequence matched by
  _LeftHandSideExpression_ can be parsed with no tokens left over using
  _AssignmentPattern_ as the goal symbol then the following rules are
  not applied. Instead, the Early Error rules for _AssignmentPattern_
  are used.

-   It is a Syntax Error if IsValidSimpleAssignmentTarget of
    _LeftHandSideExpression_ is FALSE.

-   It is a Syntax Error if the _LeftHandSideExpression_ is
    _CoverParenthesizedExpressionAndArrowParameterList_ : ( _Expression_
    )
    and _Expression_ derives a production that would produce a Syntax
    Error according to these rules if that production is substituted for
    _LeftHandSideExpression_. This rule is recursively applied.

NOTE The last rule means that the other rules are applied even if
parentheses surround _Expression_.

_IterationStatement_ :

FOR ( _ForDeclaration_ IN _Expression_ ) _Statement_

FOR ( _ForDeclaration_ OF _AssignmentExpression_ ) _Statement_

-   It is a Syntax Error if the BoundNames of _ForDeclaration_ contains
    "LET".

-   It is a Syntax Error if any element of the BoundNames of
    _ForDeclaration_ also occurs in the VarDeclaredNames of _Statement_.

-   It is a Syntax Error if the BoundNames of _ForDeclaration_ contains
    any duplicate entries.

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.2.3.1, 14.1.3, 14.2.2, 14.4.2,
14.5.2, 15.2.2.2, 15.2.3.2.

_ForDeclaration_ : _LetOrConst_ _ForBinding

1.  Return the BoundNames of _ForBinding_.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2, 13.10.2,
13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

IterationStatement :

  FOR ( LeftHandSideExpression IN Expression) Statement

  FOR ( VAR ForBinding IN Expression ) Statement

  FOR ( ForDeclaration IN Expression) Statement

  FOR ( LeftHandSideExpression OF AssignmentExpression ) Statement

  FOR ( VAR ForBinding OF AssignmentExpression ) Statement

  FOR ( ForDeclaration OF AssignmentExpression ) Statement

1.  Return ContainsDuplicateLabels of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3, 13.8.2,
13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

IterationStatement :

  FOR ( LeftHandSideExpression IN Expression) Statement

  FOR ( VAR ForBinding IN Expression ) Statement

  FOR ( ForDeclaration IN Expression) Statement

  FOR ( LeftHandSideExpression OF AssignmentExpression ) Statement

  FOR ( VAR ForBinding OF AssignmentExpression ) Statement

  FOR ( ForDeclaration OF AssignmentExpression ) Statement

1.  Return ContainsUndefinedBreakTarget of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4, 13.7.2,
13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

IterationStatement :

  FOR ( LeftHandSideExpression IN Expression) Statement

  FOR ( VAR ForBinding IN Expression ) Statement

  FOR ( ForDeclaration IN Expression) Statement

  FOR ( LeftHandSideExpression OF AssignmentExpression ) Statement

  FOR ( VAR ForBinding OF AssignmentExpression ) Statement

  FOR ( ForDeclaration OF AssignmentExpression ) Statement

1.  Return ContainsUndefinedContinueTarget of _Statement_ with arguments
    _iterationSet_ and « »_._

Static Semantics: IsDestructuring

See also: 12.3.1.3.

_ForDeclaration_ : _LetOrConst_ _ForBinding

1.  Return IsDestructuring of _ForBinding_.

_ForBinding_ : _BindingIdentifier

1.  Return FALSE.

_ForBinding_ : _BindingPattern

1.  Return TRUE.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_IterationStatement_ : FOR ( _LeftHandSideExpression_ IN _Expression_ )
_Statement

1.  Return the VarDeclaredNames of _Statement_.

_IterationStatement_ : FOR ( VAR _ForBinding_ IN _Expression_ )
_Statement

1.  Let _names_ be the BoundNames of _ForBinding_.

2.  Append to _names_ the elements of the VarDeclaredNames of
    _Statement._

3.  Return _names.

_IterationStatement_ : FOR ( _ForDeclaration_ IN _Expression_ )
_Statement

1.  Return the VarDeclaredNames of _Statement_.

_IterationStatement_ : FOR ( _LeftHandSideExpression_ OF
_AssignmentExpression_ ) _Statement

1.  Return the VarDeclaredNames of _Statement_.

_IterationStatement_ : FOR ( VAR _ForBinding_ OF _AssignmentExpression
) _Statement_

1.  Let _names_ be the BoundNames of _ForBinding_.

2.  Append to _names_ the elements of the VarDeclaredNames of
    _Statement._

3.  Return _names.

_IterationStatement_ : FOR ( _ForDeclaration_ OF _AssignmentExpression
) _Statement_

1.  Return the VarDeclaredNames of _Statement_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_IterationStatement_ : FOR ( _LeftHandSideExpression_ IN _Expression_ )
_Statement

1.  Return the VarScopedDeclarations of _Statement_.

_IterationStatement_ : FOR ( VAR _ForBinding_ IN _Expression_ )
_Statement

1.  Let _declarations_ be a List containing _ForBinding_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _Statement._

3.  Return _declarations.

_IterationStatement_ : FOR ( _ForDeclaration_ IN _Expression_ )
_Statement

1.  Return the VarScopedDeclarations of _Statement_.

_IterationStatement_ : FOR ( _LeftHandSideExpression_ OF
_AssignmentExpression_ ) _Statement

1.  Return the VarScopedDeclarations of _Statement_.

_IterationStatement_ : FOR ( VAR _ForBinding_ OF _AssignmentExpression
) _Statement_

1.  Let _declarations_ be a List containing _ForBinding_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _Statement._

3.  Return _declarations.

_IterationStatement_ : FOR ( _ForDeclaration_ OF _AssignmentExpression
) _Statement_

1.  Return the VarScopedDeclarations of _Statement_.

Runtime Semantics: BindingInitialization

  With arguments _value_ and _environment_.

See also: 12.1.5, 13.2.3.5.

NOTE UNDEFINED is passed for _environment_ to indicate that a PutValue
operation should be used to assign the initialization value. This is the
case for VAR statements and the formal parameter lists of some
non-strict functions (see 9.2.12). In those cases a lexical binding is
hoisted and preinitialized prior to evaluation of its initializer.

_ForDeclaration_ : _LetOrConst_ _ForBinding

1.  Return the result of performing BindingInitialization for
    _ForBinding_ passing _value_ and _environment_ as the arguments.

Runtime Semantics: BindingInstantiation

  With argument _environment_.

_ForDeclaration_ : _LetOrConst_ _ForBinding

1.  For each element _name_ of the BoundNames of _ForBinding_ do

    a.  If IsConstantDeclaration of _LetOrConst_ is TRUE, then

        i.  Perform _environment_.CreateImmutableBinding(_name_, TRUE).

    b.  Else,

        i.  Perform _environment_.CreateMutableBinding(_name_).

        ii. Assert: The above call to CreateMutableBinding will never
            return an abrupt completion.

Runtime Semantics: LabelledEvaluation

  With argument _labelSet_.

See also: 13.0.7, 13.6.1.6, 13.6.2.6, 13.6.3.7, 13.12.14.

_IterationStatement_ : FOR ( _LeftHandSideExpression_ IN _Expression_ )
_Statement

1.  Let _keyResult_ be ForIn/OfHeadEvaluation( « », _Expression_,
    enumerate, _labelSet_).

2.  ReturnIfAbrupt(_keyResult_).

3.  Return ForIn/OfBodyEvaluation(_LeftHandSideExpression_, _Statement_,
    _keyResult_, assignment, _labelSet_).

_IterationStatement_ : FOR ( VAR _ForBinding_ IN _Expression_ )
_Statement

1.  Let _keyResult_ be ForIn/OfHeadEvaluation( « », _Expression_,
    enumerate, _labelSet_).

2.  ReturnIfAbrupt(_keyResult_).

3.  Return ForIn/OfBodyEvaluation(_ForBinding_, _Statement_,
    _keyResult_, varBinding, _labelSet_).

_IterationStatement_ : FOR ( _ForDeclaration_ IN _Expression_ )
_Statement

1.  Let _keyResult_ be the result of performing
    ForIn/OfHeadEvaluation(BoundNames of _ForDeclaration_, _Expression_,
    enumerate, _labelSet_).

2.  ReturnIfAbrupt(_keyResult_).

3.  Return ForIn/OfBodyEvaluation(_ForDeclaration_, _Statement_,
    _keyResult_, lexicalBinding, _labelSet_).

_IterationStatement_ : FOR ( _LeftHandSideExpression_ OF
_AssignmentExpression_ ) _Statement

1.  Let _keyResult_ be the result of performing ForIn/OfHeadEvaluation(
    « », _AssignmentExpression_, iterate, _labelSet_).

2.  ReturnIfAbrupt(_keyResult_).

3.  Return ForIn/OfBodyEvaluation(_LeftHandSideExpression_, _Statement_,
    _keyResult_, assignment, _labelSet_).

_IterationStatement_ : FOR ( VAR _ForBinding_ OF _AssignmentExpression
) _Statement_

1.  Let _keyResult_ be the result of performing ForIn/OfHeadEvaluation(
    « », _AssignmentExpression_, iterate, _labelSet_).

2.  ReturnIfAbrupt(_keyResult_).

3.  Return ForIn/OfBodyEvaluation(_ForBinding_, _Statement_,
    _keyResult_, varBinding, _labelSet_).

_IterationStatement_ : FOR ( _ForDeclaration_ OF _AssignmentExpression
) _Statement_

1.  Let _keyResult_ be the result of performing ForIn/OfHeadEvaluation(
    BoundNames of _ForDeclaration_, _AssignmentExpression_, iterate,
    _labelSet_).

2.  ReturnIfAbrupt(_keyResult_).

3.  Return ForIn/OfBodyEvaluation(_ForDeclaration_, _Statement_,
    _keyResult_, lexicalBinding, _labelSet_).

Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr, iterationKind, labelSet)

The abstract operation ForIn/OfHeadEvaluation is called with arguments
_TDZnames_, _expr_, _iterationKind_, and _labelSet_. The value of
_iterationKind_ is either ENUMERATE or ITERATE.

1.  Let _oldEnv_ be the running execution context’s LexicalEnvironment.

2.  If _TDZnames_ is not an empty List, then

    a.  Assert: _TDZnames_ has no duplicate entries.

    b.  Let _TDZ_ be NewDeclarativeEnvironment(_oldEnv_).

    c.  For each string _name_ in _TDZnames_, do

        i.  Let _status_ be _TDZ_.CreateMutableBinding(_name_, FALSE).

        ii. Assert: _status_ is never an abrupt completion.

    d.  Set the running execution context’s LexicalEnvironment to _TDZ_.

3.  Let _exprRef_ be the result of evaluating the production that is
    _expr_.

4.  Set the running execution context’s LexicalEnvironment to _oldEnv_.

5.  Let _exprValue_ be GetValue(_exprRef_).

6.  ReturnIfAbrupt(_exprValue_).

7.  a.  b.  

8.  If _iterationKind_ is enumerate, then

    a.  If _exprValue_.[[value]] is NULL or UNDEFINED, then

        i.  Return Completion{[[type]]: break, [[value]]: empty,
            [[target]]: empty}.

    b.  Let _obj_ be ToObject(_exprValue_).

    c.  Return _obj_.[[Enumerate]]().

9.  Else,

    a.  Assert: _iterationKind_ is iterate.

    b.  Return GetIterator(_exprValue_).

10. a.  b.  c.  

11. 

Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator, lhsKind, labelSet )

The abstract operation ForIn/OfBodyEvaluation is called with arguments
_lhs_, _stmt, iterator,_ _lhsKind_, and _labelSet._ The value of
_lhsKind_ is either ASSIGNMENT, VARBINDING or LEXICALBINDING.

1.  Let _oldEnv_ be the running execution context’s LexicalEnvironment.

2.  Let _V_ = UNDEFINED .

3.  Let _destructuring_ be IsDestructuring of _lhs_.

4.  If _destructuring_ is TRUE and if _lhsKind_ is assignment, then

    a.  Assert: _lhs_ is a _LeftHandSideExpression_.

    b.  Let _assignmentPattern_ be the parse of the source text
          corresponding to _lhs_ using _AssignmentPattern_ as the goal
          symbol.

5.  Repeat

    a.  If _lhsKind_ is either assignment or varBinding, then

        i.  If _destructuring_ is FALSE, then

            1.  Let _lhsRef_ be the result of evaluating _lhs_ ( it may
                be evaluated repeatedly).

            2.  ReturnIfAbrupt(_lhsRef_).

    b.  Else

        i.  Assert: _lhsKind_ is lexicalBinding.

        ii. Assert: _lhs_ is a _ForDeclaration_.

        iii. Let _iterationEnv_ be NewDeclarativeEnvironment(_oldEnv_).

        iv. Perform BindingInstantiation for _lhs_ passing
            _iterationEnv_ as the argument.

        v.  Set the running execution context’s LexicalEnvironment to
            _iterationEnv_.

        vi. If _destructuring_ is FALSE, then

            1.  Assert: _lhs_ binds a single name.

            2.  Let _lhsName_ be the sole element of BoundNames of
                _lhs._

            3.  Let _lhsRef_ be ResolveBinding(_lhsName_).

            4.  Assert: _lhsRef_ is not an abrupt completion.

    c.  Let _nextResult_ be IteratorStep(_iterator_).

    d.  If _nextResult_ is an abrupt completion, then

        i.  Set the running execution context’s LexicalEnvironment to
            _oldEnv_.

        ii. Return _nextResult_.

    e.  If _nextResult_ is FALSE, then

        i.  Set the running execution context’s LexicalEnvironment to
            _oldEnv_.

        ii. Return NormalCompletion(_V_).

    f.  Let _nextValue_ be IteratorValue(_nextResult_).

    g.  If _nextValue_ is an abrupt completion, then

        i.  Set the running execution context’s LexicalEnvironment to
            _oldEnv_.

        ii. Return Completion(_nextValue_).

    h.  If _destructuring_ is FALSE, then

        i.  If _lhsKind_ is lexicalBinding, then

            1.  Let _status_ be InitializeReferencedBinding(_lhsRef_,
                _nextValue_).

        ii. Else,

            1.  Let _status_ be PutValue(_lhsRef_, _nextValue_).

    i.  Else,

        i.  If _lhsKind_ is assignment, then

            1.  Let _status_ be the result of performing
                DestructuringAssignmentEvaluation of _assignmentPattern_
                using _nextValue_ as the argument.

        ii. Else if _lhsKind_ is varBinding, then

            1.  Assert: _lhs_ is a _ForBinding_.

            2.  Let _status_ be the result of performing
                BindingInitialization for _lhs_ passing _nextValue_ and
                UNDEFINED as the arguments.

        iii. Else,

            1.  Assert: _lhsKind_ is lexicalBinding.

            2.  Assert: _lhs_ is a _ForDeclaration_.

            3.  Let _status_ be the result of performing
                BindingInitialization for _lhs_ passing _nextValue_ and
                _iterationEnv_ as arguments.

    j.  If _status_ is an abrupt completion, then

        i.  Set the running execution context’s LexicalEnvironment to
            _oldEnv_.

        ii. Return IteratorClose(_iterator_, _status_).

    k.  Let _status_ be the result of evaluating _stmt_.

    l.  If _status_.[[type]] is normal and _status_.[[value]] is not
          empty, then

        i.  Let _V_ = _status_.[[value]].

    m.  Set the running execution context’s LexicalEnvironment to
          _oldEnv_.

    n.  If LoopContinues(_status_, _labelSet_) is FALSE, then

        i.  Return IteratorClose(_iterator_, _status_).

Runtime Semantics: Evaluation

_ForBinding_ : _BindingIdentifier

1.  Let _bindingId_ be StringValue of _BindingIdentifier_.

2.  Return ResolveBinding(_bindingId_)


The continue Statement

Syntax

ContinueStatement~[Yield]~ :

CONTINUE ;
CONTINUE [no LineTerminator here] _LabelIdentifier_~[?Yield]~ ;

Static Semantics: Early Errors

_ContinueStatement_ : CONTINUE ;

_ContinueStatement_ : CONTINUE _LabelIdentifier_ ;

-   It is a Syntax Error if this production is not nested, directly or
    indirectly (but not crossing function boundaries), within an
    _IterationStatement_.

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4,
13.6.4.5, 13.10.4, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

_ContinueStatement_ : CONTINUE ;

1.  Return FALSE.

_ContinueStatement_ : CONTINUE _LabelIdentifier_;

1.  If the StringValue of _LabelIdentifier_ is not an element of
    _iterationSet_, return TRUE.

2.  Return FALSE.

Runtime Semantics: Evaluation

_ContinueStatement_ : CONTINUE ;

1.  Return Completion{[[type]]: continue, [[value]]: empty, [[target]]:
    empty}.

_ContinueStatement_ : CONTINUE _LabelIdentifier_;

1.  Let _label_ be the StringValue of _LabelIdentifier_.

2.  Return Completion{[[type]]: continue, [[value]]: empty, [[target]]:
    _label_ }.


The break Statement

Syntax

BreakStatement~[Yield]~ :

BREAK ;
BREAK [no LineTerminator here] _LabelIdentifier_~[?Yield]~ ;

Static Semantics: Early Errors

_BreakStatement_ : BREAK ;

-   It is a Syntax Error if this production is not nested, directly or
    indirectly (but not crossing function boundaries), within an
    _IterationStatement_ or a _SwitchStatement_.

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3,
13.6.4.4, 13.10.3, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

_BreakStatement_ : BREAK ;

1.  Return FALSE.

_BreakStatement_ : BREAK _LabelIdentifier_;

1.  If the StringValue of _LabelIdentifier_ is not an element of
    _labelSet_, return TRUE.

2.  Return FALSE.

Runtime Semantics: Evaluation

_BreakStatement_ : BREAK ;

1.  Return Completion{[[type]]: break, [[value]]: empty, [[target]]:
    empty}.

_BreakStatement_ : BREAK _LabelIdentifier_;

1.  Let _label_ be the StringValue of _LabelIdentifier_.

2.  Return Completion{[[type]]: break, [[value]]: empty, [[target]]:
    _label_ }.


The return Statement

Syntax

ReturnStatement~[Yield]~ :

RETURN ;
RETURN [no LineTerminator here] Expression~[In,\ ?Yield]~ ;

NOTE A RETURN statement causes a function to cease execution and return
a value to the caller. If _Expression_ is omitted, the return value is
UNDEFINED. Otherwise, the return value is the value of _Expression_.

Runtime Semantics: Evaluation

_ReturnStatement_ : RETURN ;

1.  Return Completion{[[type]]: return, [[value]]: UNDEFINED,
    [[target]]: empty}.

_ReturnStatement_ : RETURN _Expression_ ;

1.  Let _exprRef_ be the result of evaluating _Expression_.

2.  Let _exprValue_ be GetValue(_exprRef_).

3.  ReturnIfAbrupt(_exprValue_).

4.  Return Completion{[[type]]: return, [[value]]: _exprValue_,
    [[target]]: empty}.


The with Statement

Syntax

WithStatement~[Yield,\ Return]~ :

WITH ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

NOTE The WITH statement adds an object Environment Record for a computed
object to the lexical environment of the running execution context. It
then executes a statement using this augmented lexical environment.
Finally, it restores the original lexical environment.

Static Semantics: Early Errors

_WithStatement_ : WITH ( _Expression_ ) _Statement

-   It is a Syntax Error if the code that matches this production is
    contained in strict code.

-   It is a Syntax Error if IsLabelledFunction(_Statement_) is TRUE.

NOTE It is only necessary to apply the second rule if the extension
specified in B.3.2 is implemented.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2,
13.6.4.3, 13.11.2, 13.12.2, 13.14.2, 15.2.1.2.

_WithStatement_ : WITH ( _Expression_ ) _Statement

1.  Return ContainsDuplicateLabels of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3,
13.6.4.4, 13.8.2, 13.11.3, 13.12.3, 13.14.3, 15.2.1.3.

_WithStatement_ : WITH ( _Expression_ ) _Statement

1.  Return ContainsUndefinedBreakTarget of _Statement_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4,
13.6.4.5, 13.7.2, 13.11.4, 13.12.4,13.14.4, 15.2.1.4.

_WithStatement_ : WITH ( _Expression_ ) _Statement

1.  Return ContainsUndefinedContinueTarget of _Statement_ with arguments
    _iterationSet_ and « »_._

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.11.7, 13.12.12, 13.14.5, 14.1.15, 14.2.12,
15.1.5, 15.2.1.12.

_WithStatement_ : WITH ( _Expression_ ) _Statement

1.  Return the VarDeclaredNames of _Statement_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.11.8, 13.12.13, 13.14.6, 14.1.16, 14.2.13,
15.1.6, 15.2.1.13.

_WithStatement_ : WITH ( _Expression_ ) _Statement

1.  Return the VarScopedDeclarations of _Statement_.

Runtime Semantics: Evaluation

_WithStatement_ : WITH ( _Expression_ ) _Statement

1.  Let _val_ be the result of evaluating _Expression_.

2.  Let _obj_ be ToObject(GetValue(_val_)).

3.  ReturnIfAbrupt(_obj_).

4.  Let _oldEnv_ be the running execution context’s LexicalEnvironment.

5.  Let _newEnv_ be NewObjectEnvironment(_obj_, _oldEnv_).

6.  Set the _withEnvironment_ flag of _newEnv’s_ EnvironmentRecord to
    TRUE.

7.  Set the running execution context’s LexicalEnvironment to _newEnv_.

8.  Let _C_ be the result of evaluating _Statement_.

9.  Set the running execution context’s Lexical Environment to _oldEnv_.

10. 11. If _C_.[[type]] is normal and _C_.[[value]] is empty, return
    NormalCompletion(UNDEFINED).

12. Return Completion(_C_).

NOTE No matter how control leaves the embedded _Statement_, whether
normally or by some form of abrupt completion or exception, the
LexicalEnvironment is always restored to its former state.


The switch Statement

Syntax

SwitchStatement~[Yield,\ Return]~ :

SWITCH ( Expression~[In,\ ?Yield]~ ) CaseBlock~[?Yield,\ ?Return]~

CaseBlock~[Yield,\ Return]~ :

{ CaseClauses~[?Yield,\ ?Return]opt~ }
{ CaseClauses~[?Yield,\ ?Return]opt~ DefaultClause~[?Yield,\ ?Return]~
CaseClauses~[?Yield,\ ?Return]opt~ }

CaseClauses~[Yield,\ Return]~ :

CaseClause~[?Yield,\ ?Return]~
CaseClauses~[?Yield,\ ?Return]~ CaseClause~[?Yield,\ ?Return]~

CaseClause~[Yield,\ Return]~ :

CASE Expression~[In,\ ?Yield]~ : StatementList~[?Yield,\ ?Return]opt~

DefaultClause~[Yield,\ Return]~ :

DEFAULT : StatementList~[?Yield,\ ?Return]opt~

Static Semantics: Early Errors

_CaseBlock_ : { _CaseClauses_ }

-   It is a Syntax Error if the LexicallyDeclaredNames of _CaseClauses_
    contains any duplicate entries.

-   It is a Syntax Error if any element of the LexicallyDeclaredNames of
    _CaseClauses_ also occurs in the VarDeclaredNames of _CaseClauses_.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2,
13.6.4.3, 13.10.2, 13.12.2, 13.14.2, 15.2.1.2.

_SwitchStatement_ : SWITCH ( _Expression_ ) _CaseBlock

1.  Return ContainsDuplicateLabels of _CaseBlock_ with argument
    _labelSet._

_CaseBlock_ : { }

1.  Return FALSE.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  If the first _CaseClauses_ is present, then

    a.  Let _hasDuplicates_ be ContainsDuplicateLabels of the first
        _CaseClauses_ with argument _labelSet_.

    b.  If _hasDuplicates_ is TRUE, return TRUE.

2.  Let _hasDuplicates_ be ContainsDuplicateLabels of _DefaultClause
    with argument _labelSet._

3.  If _hasDuplicates_ is TRUE, return TRUE.

4.  If the second _CaseClauses_ is not present, return FALSE.

5.  Return ContainsDuplicateLabels of the second _CaseClauses_ with
    argument _labelSet_.

_CaseClauses_ : _CaseClauses_ _CaseClause

1.  Let _hasDuplicates_ be ContainsDuplicateLabels of _CaseClauses_ with
    argument _labelSet_.

2.  If _hasDuplicates_ is TRUE, return TRUE.

3.  Return ContainsDuplicateLabels of _CaseClause_ with argument
    _labelSet._

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  If the _StatementList_ is present, return ContainsDuplicateLabels of
    _StatementList_ with argument _labelSet_.

2.  Else return FALSE.

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If the _StatementList_ is present, return ContainsDuplicateLabels of
    _StatementList_ with argument _labelSet_.

2.  Else return FALSE.

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3,
13.6.4.4, 13.8.2, 13.10.3, 13.12.3, 13.14.3, 15.2.1.3.

_SwitchStatement_ : SWITCH ( _Expression_ ) _CaseBlock

1.  Return ContainsUndefinedBreakTarget of _CaseBlock_ with argument
    _labelSet._

_CaseBlock_ : { }

1.  Return FALSE.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  If the first _CaseClauses_ is present, then

    a.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of the
        first _CaseClauses_ with argument _labelSet_.

    b.  If _hasUndefinedLabels_ is TRUE, return TRUE.

2.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of
    _DefaultClause_ with argument _labelSet._

3.  If _hasUndefinedLabels_ is TRUE, return TRUE.

4.  If the second _CaseClauses_ is not present, return FALSE.

5.  Return ContainsUndefinedBreakTarget of the second _CaseClauses_ with
    argument _labelSet_.

_CaseClauses_ : _CaseClauses_ _CaseClause

1.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of
    _CaseClauses_ with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedBreakTarget of _CaseClause_ with argument
    _labelSet._

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  If the _StatementList_ is present, return
    ContainsUndefinedBreakTarget of _StatementList_ with argument
    _labelSet_.

2.  Else return FALSE.

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If the _StatementList_ is present, return
    ContainsUndefinedBreakTarget of _StatementList_ with argument
    _labelSet_.

2.  Else return FALSE.

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4,
13.6.4.5, 13.7.2, 13.10.4, 13.12.4,13.14.4, 15.2.1.4.

_SwitchStatement_ : SWITCH ( _Expression_ ) _CaseBlock

1.  Return ContainsUndefinedContinueTarget of _CaseBlock_ with arguments
    _iterationSet_ and « »_._

_CaseBlock_ : { }

1.  Return FALSE.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  If the first _CaseClauses_ is present, then

    a.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
        the first _CaseClauses_ with arguments _iterationSet_ and « ».

    b.  If _hasUndefinedLabels_ is TRUE, return TRUE.

2.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _DefaultClause_ with arguments _iterationSet_ and « »_._

3.  If _hasUndefinedLabels_ is TRUE, return TRUE.

4.  If the second _CaseClauses_ is not present, return FALSE.

5.  Return ContainsUndefinedContinueTarget of the second _CaseClauses
    with arguments _iterationSet_ and « ».

_CaseClauses_ : _CaseClauses_ _CaseClause

1.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _CaseClauses_ with arguments _iterationSet_ and « ».

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedContinueTarget of _CaseClause_ with
    arguments _iterationSet_ and « »_._

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  If the _StatementList_ is present, return
    ContainsUndefinedContinueTarget of _StatementList_ with arguments
    _iterationSet_ and « ».

2.  Else return FALSE.

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If the _StatementList_ is present, return
    ContainsUndefinedContinueTarget of _StatementList_ with arguments
    _iterationSet_ and « ».

2.  Else return FALSE.

Static Semantics: LexicallyDeclaredNames

See also: 13.1.5, 13.12.6, 14.1.13, 14.2.10, 15.1.3, 15.2.1.10.

_CaseBlock_ : { }

1.  Return a new empty List.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  If the first _CaseClauses_ is present, let _names_ be the
    LexicallyDeclaredNames of the first _CaseClauses_.

2.  Else let _names_ be a new empty List.

3.  Append to _names_ the elements of the LexicallyDeclaredNames of the
    _DefaultClause._

4.  If the second _CaseClauses_ is not present, return _names_.

5.  Else return the result of appending to _names_ the elements of the
    LexicallyDeclaredNames of the second _CaseClauses_.

_CaseClauses_ : _CaseClauses_ _CaseClause

1.  Let _names_ be LexicallyDeclaredNames of _CaseClauses_.

2.  Append to _names_ the elements of the LexicallyDeclaredNames of
    _CaseClause._

3.  Return _names_.

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  If the _StatementList_ is present, return the LexicallyDeclaredNames
    of _StatementList_.

2.  Else return a new empty List.

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If the _StatementList_ is present, return the LexicallyDeclaredNames
    of _StatementList_.

2.  Else return a new empty List.

Static Semantics: LexicallyScopedDeclarations

See also: 13.1.6, 13.12.7, 14.1.14, 14.2.11, 15.1.4, 15.2.1.11,
15.2.3.8.

_CaseBlock_ : { }

1.  Return a new empty List.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  If the first _CaseClauses_ is present, let _declarations_ be the
    LexicallyScopedDeclarations of the first _CaseClauses_.

2.  Else let _declarations_ be a new empty List.

3.  Append to _declarations_ the elements of the
    LexicallyScopedDeclarations of the _DefaultClause._

4.  If the second _CaseClauses_ is not present, return _declarations_.

5.  Else return the result of appending to _declarations_ the elements
    of the LexicallyScopedDeclarations of the second _CaseClauses_.

_CaseClauses_ : _CaseClauses_ _CaseClause

1.  Let _declarations_ be LexicallyScopedDeclarations of _CaseClauses_.

2.  Append to _declarations_ the elements of the
    LexicallyScopedDeclarations of _CaseClause._

3.  Return _declarations_.

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  If the _StatementList_ is present, return the
    LexicallyScopedDeclarations of _StatementList_.

2.  Else return a new empty List.

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If the _StatementList_ is present, return the
    LexicallyScopedDeclarations of _StatementList_.

2.  Else return a new empty List.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.10.5, 13.12.12, 13.14.5, 14.1.15, 14.2.12,
15.1.5, 15.2.1.12.

_SwitchStatement_ : SWITCH ( _Expression_ ) _CaseBlock

1.  Return the VarDeclaredNames of _CaseBlock_.

_CaseBlock_ : { }

1.  Return a new empty List.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  If the first _CaseClauses_ is present, let _names_ be the
    VarDeclaredNames of the first _CaseClauses_.

2.  Else let _names_ be a new empty List.

3.  Append to _names_ the elements of the VarDeclaredNames of the
    _DefaultClause._

4.  If the second _CaseClauses_ is not present, return _names_.

5.  Else return the result of appending to _names_ the elements of the
    VarDeclaredNames of the second _CaseClauses_.

_CaseClauses_ : _CaseClauses_ _CaseClause

1.  Let _names_ be VarDeclaredNames of _CaseClauses_.

2.  Append to _names_ the elements of the VarDeclaredNames of
    _CaseClause._

3.  Return _names_.

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  If the _StatementList_ is present, return the VarDeclaredNames of
    _StatementList_.

2.  Else return a new empty List.

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If the _StatementList_ is present, return the VarDeclaredNames of
    _StatementList_.

2.  Else return a new empty List.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.10.6, 13.12.13, 13.14.6, 14.1.16, 14.2.13,
15.1.6, 15.2.1.13.

_SwitchStatement_ : SWITCH ( _Expression_ ) _CaseBlock

1.  Return the VarScopedDeclarations of _CaseBlock_.

_CaseBlock_ : { }

1.  Return a new empty List.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  If the first _CaseClauses_ is present, let _declarations_ be the
    VarScopedDeclarations of the first _CaseClauses_.

2.  Else let _declarations_ be a new empty List.

3.  Append to _declarations_ the elements of the VarScopedDeclarations
    of the _DefaultClause._

4.  If the second _CaseClauses_ is not present, return _declarations_.

5.  Else return the result of appending to _declarations_ the elements
    of the VarScopedDeclarations of the second _CaseClauses_.

_CaseClauses_ : _CaseClauses_ _CaseClause

1.  Let _declarations_ be VarScopedDeclarations of _CaseClauses_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _CaseClause._

3.  Return _declarations_.

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  If the _StatementList_ is present, return the VarScopedDeclarations
    of _StatementList_.

2.  Else return a new empty List.

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If the _StatementList_ is present, return the VarScopedDeclarations
    of _StatementList_.

2.  Else return a new empty List.

Runtime Semantics: CaseBlockEvaluation

  With argument _input_.

_CaseBlock_ : { }

1.  Return NormalCompletion(UNDEFINED).

_CaseBlock_ : { _CaseClauses_ }

1.  Let _V_ = UNDEFINED.

2.  Let _A_ be the List of _CaseClause_ items in _CaseClauses_, in
    source text order.

3.  Let _found_ be FALSE.

4.  Repeat for each _CaseClause_ _C_ in _A_,

    a.  If _found_ is FALSE, then

        i.  Let _clauseSelector_ be the result of CaseSelectorEvaluation
            of _C_.

        ii. If _clauseSelector_ is an abrupt completion, then

            1.  If _clauseSelector_.[[value]] is empty, return
                Completion{[[type]]: _clauseSelector_.[[type]],
                [[value]]: UNDEFINED, [[target]]:
                _clauseSelector_.[[target]]}.

            2.  Else, return Completion(_clauseSelector_).

        iii. Let _found_ be the result of performing Strict Equality
            Comparison _input_ === _clauseSelector_.[[value]].

        iv. 1.  2.  a.  b.  

    b.  If _found_ is TRUE, then

        i.  ii. Let _R_ be the result of evaluating _C_.

        iii. If _R_.[[value]] is not empty, let _V_ = _R_.[[value]].

        iv. If _R_ is an abrupt completion, return Completion{[[type]]:
            _R_.[[type]], [[value]]: _V_, [[target]]: _R_.[[target]]}.

5.  Return NormalCompletion(_V_).

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause_ _CaseClauses_~opt~ }

1.  Let _V_ = UNDEFINED.

2.  Let _A_ be the list of _CaseClause_ items in the first
    _CaseClauses_, in source text order. If the first _CaseClauses_ is
    not present _A_ is « ».

3.  Let _found_ be FALSE.

4.  Repeat for each _CaseClause_ _C_ in _A

    a.  If _found_ is FALSE, then

        i.  Let _clauseSelector_ be the result of CaseSelectorEvaluation
            of _C_.

        ii. If _clauseSelector_ is an abrupt completion, then

            1.  If _clauseSelector_.[[value]] is empty, return
                Completion{[[type]]: _clauseSelector_.[[type]],
                [[value]]: UNDEFINED, [[target]]:
                _clauseSelector_.[[target]]}.

            2.  Else, return Completion(_clauseSelector_).

        iii. Let _found_ be the result of performing Strict Equality
            Comparison _input_ === _clauseSelector_.[[value]].

    b.  If _found_ is TRUE, then

        i.  Let _R_ be the result of evaluating _C_.

        ii. If _R_.[[value]] is not empty, let _V_ = _R_.[[value]].

        iii. If _R_ is an abrupt completion, return Completion{[[type]]:
            _R_.[[type]], [[value]]: _V_, [[target]]: _R_.[[target]]}.

5.  Let _foundInB_ be FALSE.

6.  Let _B_ be the List containing the _CaseClause_ items in the second
    _CaseClauses_, in source text order. If the second _CaseClauses_ is
    not present _B_ is « ».

7.  If _found_ is FALSE, then

    a.  Repeat for each _CaseClause_ _C_ in _B_

        i.  If _foundInB_ is FALSE, then

            1.  Let _clauseSelector_ be the result of
                CaseSelectorEvaluation of _C_.

            2.  If _clauseSelector_ is an abrupt completion, then

                a.  If _clauseSelector_.[[value]] is empty, return
                    Completion{[[type]]: _clauseSelector_.[[type]],
                    [[value]]: UNDEFINED, [[target]]:
                    _clauseSelector_.[[target]]}.

                b.  Else, return Completion(_clauseSelector_).

            3.  Let _foundInB_ be the result of performing Strict
                Equality Comparison _input_ ===
                _clauseSelector_.[[value]].

        ii. If _foundInB_ is TRUE, then

            1.  Let _R_ be the result of evaluating _CaseClause C_.

            2.  If _R_.[[value]] is not empty, let _V_ = _R_.[[value]].

            3.  If _R_ is an abrupt completion, return
                Completion{[[type]]: _R_.[[type]], [[value]]: _V_,
                [[target]]: _R_.[[target]]}.

8.  If _foundInB_ is TRUE, return NormalCompletion(_V_).

9.  Let _R_ be the result of evaluating _DefaultClause_.

10. If _R_.[[value]] is not empty, let _V_ = _R_.[[value]].

11. If _R_ is an abrupt completion, return Completion{[[type]]:
    _R_.[[type]], [[value]]: _V_, [[target]]: _R_.[[target]]}.

12. Repeat for each _CaseClause_ _C_ in _B_ (NOTE this is another
    complete iteration of the second _CaseClauses_)

    a.  Let _R_ be the result of evaluating _CaseClause_ _C_.

    b.  If _R_.[[value]] is not empty, let _V_ = _R_.[[value]].

    c.  If _R_ is an abrupt completion, return Completion{[[type]]:
        _R_.[[type]], [[value]]: _V_, [[target]]: _R_.[[target]]}.

13. Return NormalCompletion(_V_).

Runtime Semantics: CaseSelectorEvaluation

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

1.  Let _exprRef_ be the result of evaluating _Expression_.

2.  Return GetValue(_exprRef_).

NOTE CaseSelectorEvaluation does not execute the associated
_StatementList_. It simply evaluates the _Expression_ and returns the
value, which the _CaseBlock_ algorithm uses to determine which
_StatementList_ to start executing.

Runtime Semantics: Evaluation

_SwitchStatement_ : SWITCH ( _Expression_ ) _CaseBlock

1.  Let _exprRef_ be the result of evaluating _Expression_.

2.  Let _switchValue_ be GetValue(_exprRef_).

3.  ReturnIfAbrupt(_switchValue_).

4.  Let _oldEnv_ be the running execution context’s LexicalEnvironment.

5.  Let _blockEnv_ be NewDeclarativeEnvironment(_oldEnv_).

6.  Perform BlockDeclarationInstantiation(_CaseBlock_, _blockEnv_).

7.  Set the running execution context’s LexicalEnvironment to
    _blockEnv_.

8.  Let _R_ be the result of performing CaseBlockEvaluation of
    _CaseBlock_ with argument _switchValue_.

9.  Set the running execution context’s LexicalEnvironment to _oldEnv_.

10. Return _R_.

NOTE No matter how control leaves the _SwitchStatement_ the
LexicalEnvironment is always restored to its former state.

_CaseClause_ : CASE _Expression_ :

1.  Return NormalCompletion(empty).

_CaseClause_ : CASE _Expression_ : _StatementList

1.  Return the result of evaluating _StatementList_.

_DefaultClause_ : DEFAULT :

1.  Return NormalCompletion(empty).

_DefaultClause_ : DEFAULT : _StatementList

1.  Return the result of evaluating _StatementList_.


Labelled Statements

Syntax

LabelledStatement~[Yield,\ Return]~ :

LabelIdentifier~[?Yield]~ : LabelledItem~[?Yield,\ ?Return]~

LabelledItem~[Yield,\ Return]~ :

Statement~[?Yield,\ ?Return]
~_FunctionDeclaration_~[?Yield]~

NOTE A _Statement_ may be prefixed by a label. Labelled statements are
only used in conjunction with labelled BREAK and CONTINUE statements.
ECMAScript has no GOTO statement. A _Statement_ can be part of a
_LabelledStatement_, which itself can be part of a _LabelledStatement_,
and so on. The labels introduced this way are collectively referred to
as the “current label set” when describing the semantics of individual
statements. A _LabelledStatement_ has no semantic meaning other than the
introduction of a label to a _label set_.

Static Semantics: Early Errors

_LabelledItem_ : _FunctionDeclaration

-   It is a Syntax Error if any source text matches this rule.

NOTE An alternative definition for this rule is provided in B.3.2.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2,
13.6.4.3, 13.10.2, 13.11.2, 13.14.2, 15.2.1.2.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Let _label_ be the StringValue of _LabelIdentifier_.

2.  If _label_ is an element of _labelSet_, return TRUE.

3.  Let _newLabelSet_ be a copy of _labelSet_ with _label_ appended.

4.  Return ContainsDuplicateLabels of _LabelledItem_ with argument
    _newLabelSet._

_LabelledItem_ : _FunctionDeclaration

1.  Return FALSE.

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3,
13.6.4.4, 13.8.2, 13.10.3, 13.11.3, 13.14.3, 15.2.1.3.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Let _label_ be the StringValue of _LabelIdentifier_.

2.  Let _newLabelSet_ be a copy of _labelSet_ with _label_ appended.

3.  Return ContainsUndefinedBreakTarget of _LabelledItem_ with argument
    _newLabelSet._

_LabelledItem_ : _FunctionDeclaration

1.  Return FALSE.

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4,
13.6.4.5, 13.7.2, 13.10.4, 13.11.4, 13.14.4, 15.2.1.4.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Let _label_ be the StringValue of _LabelIdentifier_.

2.  Let _newLabelSet_ be a copy of _labelSet_ with _label_ appended.

3.  Return ContainsUndefinedContinueTarget of _LabelledItem_ with
    arguments _iterationSet_ and _newLabelSet._

_LabelledItem_ : _FunctionDeclaration

1.  Return FALSE.

Static Semantics: IsLabelledFunction ( stmt )

The abstract operation IsLabelledFunction with argument _stmt_ performs
the following steps:

1.  If _stmt_ is not a _LabelledStatement_, return FALSE.

2.  Let _item_ be the _LabelledItem_ component of _stmt_.

3.  If _item_ is _LabelledItem_ : _FunctionDeclaration_, return TRUE.

4.  Let _subStmt_ be the _Statement_ component of _item_.

5.  Return IsLabelledFunction(_subStmt_).

Static Semantics: LexicallyDeclaredNames

See also: 13.1.5, 13.11.5, 14.1.13, 14.2.10, 15.1.3, 15.2.1.10.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return the LexicallyDeclaredNames of _LabelledItem_.

_LabelledItem_ : _Statement

1.  Return a new empty List.

_LabelledItem_ : _FunctionDeclaration

1.  Return BoundNames of _FunctionDeclaration_.

Static Semantics: LexicallyScopedDeclarations

See also: 13.1.6, 13.11.6, 14.1.14, 14.2.11, 15.1.4, 15.2.1.11,
15.2.3.8.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return the LexicallyScopedDeclarations of _LabelledItem_.

_LabelledItem_ : _Statement

1.  Return a new empty List.

_LabelledItem_ : _FunctionDeclaration

1.  Return a new List containing _FunctionDeclaration_.

Static Semantics: TopLevelLexicallyDeclaredNames

See also: 13.1.7.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return a new empty List.

Static Semantics: TopLevelLexicallyScopedDeclarations

See also: 13.1.8.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return a new empty List.

Static Semantics: TopLevelVarDeclaredNames

See also: 13.1.9.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return the TopLevelVarDeclaredNames of _LabelledItem_.

_LabelledItem_ : _Statement

1.  If _Statement_ is _Statement_ : _LabelledStatement_, return
    TopLevelVarDeclaredNames of _Statement_.

2.  Return VarDeclaredNames of _Statement_.

_LabelledItem_ : _FunctionDeclaration

1.  Return BoundNames of _FunctionDeclaration_.

Static Semantics: TopLevelVarScopedDeclarations

See also: 13.1.10.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return the TopLevelVarScopedDeclarations of _LabelledItem_.

_LabelledItem_ : _Statement

1.  If _Statement_ is _Statement_ : _LabelledStatement_, return
    TopLevelVarScopedDeclarations of _Statement_.

2.  Return VarScopedDeclarations of _Statement_.

_LabelledItem_ : _FunctionDeclaration

1.  Return a new List containing _FunctionDeclaration_.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.10.5, 13.11.7, 13.14.5, 14.1.15, 14.2.12, 15.1.5,
15.2.1.12.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return the VarDeclaredNames of _LabelledItem_.

_LabelledItem_ : _FunctionDeclaration

1.  Return a new empty List.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.10.6, 13.11.8, 13.14.6, 14.1.16, 14.2.13, 15.1.6,
15.2.1.13.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Return the VarScopedDeclarations of _LabelledItem_.

_LabelledItem_ : _FunctionDeclaration

1.  Return a new empty List.

Runtime Semantics: LabelledEvaluation

  With argument _labelSet_.

See also: 13.0.7, 13.6.1.6, 13.6.2.6, 13.6.3.7, 13.6.4.11.

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Let _label_ be the StringValue of _LabelIdentifier_.

2.  Append _label_ as an element of _labelSet_.

3.  Let _stmtResult_ be LabelledEvaluation of _LabelledItem_ with
    argument _labelSet_.

4.  If _stmtResult_.[[type]] is break and
    SameValue(_stmtResult_.[[target]], _label_), then

    a.  If _stmtResult_.[[value]] is empty, let _stmtResult_ be
        NormalCompletion(UNDEFINED).

    b.  Else, let _stmtResult_ be
        NormalCompletion(_stmtResult_.[[value]]).

5.  Return Completion(_stmtResult_).

_LabelledItem_ : _Statement

1.  If _Statement_ is either a _LabelledStatement_ or a
    _BreakableStatement_, then

    a.  Return LabelledEvaluation of _Statement_ with argument
        _labelSet_.

2.  Else,

    a.  Return the result of evaluating _Statement_.

_LabelledItem_: _FunctionDeclaration

1.  Return the result of evaluating _FunctionDeclaration_.

Runtime Semantics: Evaluation

_LabelledStatement_ : _LabelIdentifier_ : _LabelledItem

1.  Let _newLabelSet_ be a new empty List.

2.  Return LabelledEvaluation of _LabelledItem_ with argument
    _newLabelSet_.


The throw Statement

Syntax

ThrowStatement~[Yield]~ :

THROW [no LineTerminator here] Expression~[In,\ ?Yield]~ ;

Runtime Semantics: Evaluation

_ThrowStatement_ : THROW _Expression_ ;

1.  Let _exprRef_ be the result of evaluating _Expression_.

2.  Let _exprValue_ be GetValue(_exprRef_).

3.  ReturnIfAbrupt(_exprValue_).

4.  Return Completion{[[type]]: throw, [[value]]: _exprValue_,
    [[target]]: empty}.


The try Statement

Syntax

TryStatement~[Yield,\ Return]~ :

TRY Block~[?Yield,\ ?Return]~ Catch~[?Yield,\ ?Return]
~TRY Block~[?Yield,\ ?Return]~ Finally~[?Yield,\ ?Return]
~TRY Block~[?Yield,\ ?Return]~ Catch~[?Yield,\ ?Return]~
Finally~[?Yield,\ ?Return]~

Catch~[Yield,\ Return]~ :

CATCH ( CatchParameter~[?Yield]~ ) Block~[?Yield,\ ?Return]~

Finally~[Yield,\ Return]~ :

FINALLY Block~[?Yield,\ ?Return]~

CatchParameter~[Yield]~ :

BindingIdentifier~[?Yield]
~BindingPattern~[?Yield]~

NOTE The TRY statement encloses a block of code in which an exceptional
condition can occur, such as a runtime error or a THROW statement. The
CATCH clause provides the exception-handling code. When a catch clause
catches an exception, its _CatchParameter_ is bound to that exception.

Static Semantics: Early Errors

_Catch_ : CATCH ( _CatchParameter_ ) _Block 

-   It is a Syntax Error if BoundNames of _CatchParameter_ contains any
    duplicate elements.

-   It is a Syntax Error if any element of the BoundNames of
    _CatchParameter_ also occurs in the LexicallyDeclaredNames of
    _Block_.

-   It is a Syntax Error if any element of the BoundNames of
    _CatchParameter_ also occurs in the VarDeclaredNames of _Block_.

NOTE An alternative static semantics for this production is given in
B.3.5.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2,
13.6.4.3, 13.10.2, 13.11.2, 13.12.2, 15.2.1.2.

_TryStatement_ : TRY _Block_ _Catch

1.  Let _hasDuplicates_ be ContainsDuplicateLabels of _Block_ with
    argument _labelSet_.

2.  If _hasDuplicates_ is TRUE, return TRUE.

3.  Return ContainsDuplicateLabels of _Catch_ with argument _labelSet.

_TryStatement_ : TRY _Block_ _Finally

1.  Let _hasDuplicates_ be ContainsDuplicateLabels of _Block_ with
    argument _labelSet_.

2.  If _hasDuplicates_ is TRUE, return TRUE.

3.  Return ContainsDuplicateLabels of _Finally_ with argument
    _labelSet._

_TryStatement_ : TRY _Block_ _Catch_ _Finally

1.  Let _hasDuplicates_ be ContainsDuplicateLabels of _Block_ with
    argument _labelSet_.

2.  If _hasDuplicates_ is TRUE, return TRUE.

3.  Let _hasDuplicates_ be ContainsDuplicateLabels of _Catch_ with
    argument _labelSet_.

4.  If _hasDuplicates_ is TRUE, return TRUE.

5.  Return ContainsDuplicateLabels of _Finally_ with argument
    _labelSet._

_Catch_ : CATCH ( _CatchParameter_ ) _Block

1.  Return ContainsDuplicateLabels of _Block_ with argument _labelSet.

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3,
13.6.4.4, 13.8.2, 13.10.3, 13.11.3, 13.12.3, 15.2.1.3.

_TryStatement_ : TRY _Block_ _Catch

1.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of _Block
    with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedBreakTarget of _Catch_ with argument
    _labelSet._

_TryStatement_ : TRY _Block_ _Finally

1.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of _Block
    with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedBreakTarget of _Finally_ with argument
    _labelSet._

_TryStatement_ : TRY _Block_ _Catch_ _Finally

1.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of _Block
    with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of _Catch
    with argument _labelSet_.

4.  If _hasUndefinedLabels_ is TRUE, return TRUE.

5.  Return ContainsUndefinedBreakTarget of _Finally_ with argument
    _labelSet._

_Catch_ : CATCH ( _CatchParameter_ ) _Block

1.  Return ContainsUndefinedBreakTarget of _Block_ with argument
    _labelSet._

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4,
13.6.4.5, 13.7.2, 13.10.4, 13.11.4, 13.12.4, 15.2.1.4.

_TryStatement_ : TRY _Block_ _Catch

1.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _Block_ with arguments _iterationSet_ and « ».

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedContinueTarget of _Catch_ with arguments
    _iterationSet_ and « »_._

_TryStatement_ : TRY _Block_ _Finally

1.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _Block_ with arguments _iterationSet_ and « ».

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedContinueTarget of _Finally_ with arguments
    _iterationSet_ and « »_._

_TryStatement_ : TRY _Block_ _Catch_ _Finally

1.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _Block_ with arguments _iterationSet_ and « ».

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _Catch_ with arguments _iterationSet_ and « ».

4.  If _hasUndefinedLabels_ is TRUE, return TRUE.

5.  Return ContainsUndefinedContinueTarget of _Finally_ with arguments
    _iterationSet_ and « »_._

_Catch_ : CATCH ( _CatchParameter_ ) _Block

1.  Return ContainsUndefinedContinueTarget of _Block_ with arguments
    _iterationSet_ and « »_._

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 14.1.15, 14.2.12,
15.1.5, 15.2.1.12.

_TryStatement_ : TRY _Block_ _Catch

1.  Let _names_ be VarDeclaredNames of _Block_.

2.  Append to _names_ the elements of the VarDeclaredNames of _Catch.

3.  Return _names_.

_TryStatement_ : TRY _Block_ _Finally

1.  Let _names_ be VarDeclaredNames of _Block_.

2.  Append to _names_ the elements of the VarDeclaredNames of _Finally.

3.  Return _names_.

_TryStatement_ : TRY _Block_ _Catch_ _Finally

1.  Let _names_ be VarDeclaredNames of _Block_.

2.  Append to _names_ the elements of the VarDeclaredNames of _Catch.

3.  Append to _names_ the elements of the VarDeclaredNames of _Finally.

4.  Return _names_.

_Catch_ : CATCH ( _CatchParameter_ ) _Block

1.  Return the VarDeclaredNames of _Block_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 14.1.16, 14.2.13,
15.1.6, 15.2.1.13.

_TryStatement_ : TRY _Block_ _Catch

1.  Let _declarations_ be VarScopedDeclarations of _Block_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _Catch._

3.  Return _declarations_.

_TryStatement_ : TRY _Block_ _Finally

1.  Let _declarations_ be VarScopedDeclarations of _Block_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _Finally._

3.  Return _declarations_.

_TryStatement_ : TRY _Block_ _Catch_ _Finally

1.  Let _declarations_ be VarScopedDeclarations of _Block_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _Catch._

3.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _Finally._

4.  Return _declarations_.

_Catch_ : CATCH ( _CatchParameter_ ) _Block

1.  Return the VarScopedDeclarations of _Block_.

Runtime Semantics: CatchClauseEvaluation

with parameter _thrownValue_

_Catch_ : CATCH ( _CatchParameter_ ) _Block

1.  Let _oldEnv_ be the running execution context’s LexicalEnvironment.

2.  Let _catchEnv_ be NewDeclarativeEnvironment(_oldEnv_).

3.  For each element _argName_ of the BoundNames of _CatchParameter_, do

    a.  Perform _catchEnv_.CreateMutableBinding(_argName_).

    b.  Assert: The above call to CreateMutableBinding will never return
        an abrupt completion.

4.  Set the running execution context’s LexicalEnvironment to
    _catchEnv_.

5.  Let _status_ be the result of performing BindingInitialization for
    _CatchParameter_ passing _thrownValue_ and _catchEnv_ as arguments.

6.  If _status_ is an abrupt completion, then

    a.  Set the running execution context’s LexicalEnvironment to
        _oldEnv_.

    b.  Return Completion(_status_).

7.  Let _B_ be the result of evaluating _Block_.

8.  Set the running execution context’s LexicalEnvironment to _oldEnv_.

9.  10. Return Completion(_B_).

NOTE No matter how control leaves the _Block_ the LexicalEnvironment is
always restored to its former state.

Runtime Semantics: Evaluation

_TryStatement_ : TRY _Block_ _Catch

1.  Let _B_ be the result of evaluating _Block_.

2.  3.  If _B_.[[type]] is throw, then

    a.  Let _C_ be CatchClauseEvaluation of _Catch_ with parameter
        _B_.[[value]].

4.  Else _B_.[[type]] is not throw,

1.  a.  Let _C_ be _B_.

1.  If _C_.[[type]] is return, or _C_.[[type]] is throw, return
    Completion(_C_).

2.  If _C_.[[value]] is not empty, return Completion(_C_).

3.  Return Completion{[[type]]: _C_.[[type]], [[value]]: UNDEFINED,
    [[target]]: _C_.[[target]]}.

_TryStatement_ : TRY _Block_ _Finally

1.  Let _B_ be the result of evaluating _Block_.

2.  3.  Let _F_ be the result of evaluating _Finally_.

4.  If _F_.[[type]] is normal, let _F_ be _B.

    a.  

5.  If _F_.[[type]] is return, or _F_.[[type]] is throw, return
    Completion(_F_).

6.  If _F_.[[value]] is not empty, return Completion(_F_).

7.  Return Completion{[[type]]: _F_.[[type]], [[value]]: UNDEFINED,
    [[target]]: _F_.[[target]]}.

_TryStatement_ : TRY _Block Catch Finally

1.  Let _B_ be the result of evaluating _Block_.

2.  3.  If _B_.[[type]] is throw, then

    a.  Let _C_ be CatchClauseEvaluation of _Catch_ with parameter
        _B_.[[value]].

4.  Else _B_.[[type]] is not throw,

5.  let _C_ be _B_.

6.  Let _F_ be the result of evaluating _Finally_.

7.  If _F_.[[type]] is normal, let _F_ be _C_.

8.  If _F_.[[type]] is return, or _F_.[[type]] is throw, return
    Completion(_F_).

9.  If _F_.[[value]] is not empty, return
    NormalCompletion(_F_.[[value]]).

10. Return Completion{[[type]]: _F_.[[type]], [[value]]: UNDEFINED,
    [[target]]: _F_.[[target]]}.


The debugger statement

Syntax

DebuggerStatement :

DEBUGGER ;

Runtime Semantics: Evaluation

NOTE Evaluating the _DebuggerStatement_ production may allow an
implementation to cause a breakpoint when run under a debugger. If a
debugger is not present or active this statement has no observable
effect.

_DebuggerStatement_ : DEBUGGER ;

1.  If an implementation defined debugging facility is available and
    enabled, then

    a.  Perform an implementation defined debugging action.

    b.  Let _result_ be an implementation defined Completion value.

2.  Else

    a.  Let _result_ be NormalCompletion(empty).

3.  Return _result.



ECMASCRIPT LANGUAGE: FUNCTIONS AND CLASSES 


NOTE Various ECMAScript language elements cause the creation of
ECMAScript function objects (9.1.14). Evaluation of such functions
starts with the execution of their [[Call]] internal method (9.2.1).


Function Definitions

Syntax

FunctionDeclaration~[Yield,\ Default]~ :

FUNCTION BindingIdentifier~[?Yield]~ ( FormalParameters ) { FunctionBody
}
[+Default] FUNCTION ( FormalParameters ) { FunctionBody }

FunctionExpression :

FUNCTION BindingIdentifier~opt~ ( FormalParameters ) { FunctionBody }

StrictFormalParameters~[Yield,\ GeneratorParameter]~ :

FormalParameters~[?Yield,\ ?GeneratorParameter]~

FormalParameters~[Yield,GeneratorParameter]~ :

[empty]
FormalParameterList~[?Yield,\ ?GeneratorParameter]~

FormalParameterList~[Yield,GeneratorParameter]~ :

FunctionRestParameter~[?Yield]~
FormalsList~[?Yield,\ ?GeneratorParameter]~
FormalsList~[?Yield,\ ?GeneratorParameter]~,
FunctionRestParameter~[?Yield]~

FormalsList~[Yield,GeneratorParameter]~ :

FormalParameter~[?Yield,\ ?GeneratorParameter]~
FormalsList~[?Yield,\ ?GeneratorParameter]~ ,
FormalParameter~[?Yield,?GeneratorParameter]~

FunctionRestParameter~[Yield]~ :

BindingRestElement~[?Yield]~

FormalParameter~[Yield,GeneratorParameter]~ :

BindingElement~[?Yield,\ ?GeneratorParameter]~

FunctionBody~[Yield]~ :

FunctionStatementList~[?Yield]~

FunctionStatementList~[Yield]~ :

StatementList~[?Yield,\ Return]opt~

Directive Prologues and the Use Strict Directive

A Directive Prologue is the longest sequence of _ExpressionStatement_
productions occurring as the initial _StatementListItem_ or _ModuleItem_
productions of a _FunctionBody_, a _ScriptBody_, or a _ModuleBody_ and
where each _ExpressionStatement_ in the sequence consists entirely of a
_StringLiteral_ token followed by a semicolon. The semicolon may appear
explicitly or may be inserted by automatic semicolon insertion. A
Directive Prologue may be an empty sequence.

A Use Strict Directive is an _ExpressionStatement_ in a Directive
Prologue whose _StringLiteral_ is either the exact code unit sequences
"USE STRICT" or 'USE STRICT'. A Use Strict Directive may not contain an
_EscapeSequence_ or _LineContinuation_.

A Directive Prologue may contain more than one Use Strict Directive.
However, an implementation may issue a warning if this occurs.

NOTE The _ExpressionStatement_ productions of a Directive Prologue are
evaluated normally during evaluation of the containing production.
Implementations may define implementation specific meanings for
_ExpressionStatement_ productions which are not a Use Strict Directive
and which occur in a Directive Prologue. If an appropriate notification
mechanism exists, an implementation should issue a warning if it
encounters in a Directive Prologue an _ExpressionStatement_ that is not
a Use Strict Directive and which does not have a meaning defined by the
implementation.

Static Semantics: Early Errors

_FunctionDeclaration_ : FUNCTION _BindingIdentifier_ (
_FormalParameters_ ) { _FunctionBody_ }
_FunctionDeclaration_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}
_FunctionExpression_ : FUNCTION _BindingIdentifier_~opt~ (
_FormalParameters_ ) { _FunctionBody_ }

-   If the source code matching this production is strict code, the
    Early Error rules for _StrictFormalParameters_ : _FormalParameters_
    are applied.

-   If the source code matching this production is strict code, it is a
    Syntax Error if _BindingIdentifier_ is the _IdentifierName_ EVAL or
    the _IdentifierName_ ARGUMENTS.

-   It is a Syntax Error if any element of the BoundNames of
    _FormalParameters_ also occurs in the LexicallyDeclaredNames of
    _FunctionBody_.

-   It is a Syntax Error if _FormalParameters_ Contains _SuperProperty_
    is TRUE.

-   It is a Syntax Error if _FunctionBody_ Contains _SuperProperty_ is
    TRUE.

-   It is a Syntax Error if _FormalParameters_ Contains _SuperCall_ is
    TRUE.

-   It is a Syntax Error if _FunctionBody_ Contains _SuperCall_ is TRUE.

NOTE 1 The LexicallyDeclaredNames of a _FunctionBody_ does not include
identifiers bound using var or function declarations.

_StrictFormalParameters_ : _FormalParameters

-   It is a Syntax Error if BoundNames of _FormalParameters_ contains
    any duplicate elements.

_FormalParameters_ : _FormalParameterList

-   It is a Syntax Error if IsSimpleParameterList of
    _FormalParameterList_ is FALSE and BoundNames of
    _FormalParameterList_ contains any duplicate elements.

NOTE 2 Multiple occurrences of the same _BindingIdentifier_ in a
_FormalParameterList_ is only allowed for functions and generator
functions which have simple parameter lists and which are not defined in
strict mode code.

_FunctionBody_ : _FunctionStatementList

-   It is a Syntax Error if the LexicallyDeclaredNames of
    _FunctionStatementList_ contains any duplicate entries.

-   It is a Syntax Error if any element of the LexicallyDeclaredNames of
    _FunctionStatementList_ also occurs in the VarDeclaredNames of
    _FunctionStatementList_.

-   It is a Syntax Error if ContainsDuplicateLabels of
    _FunctionStatementList_ with argument « » is TRUE.

-   It is a Syntax Error if ContainsUndefinedBreakTarget of
    _FunctionStatementList_ with argument « » is TRUE.

-   It is a Syntax Error if ContainsUndefinedContinueTarget of
    _FunctionStatementList_ with arguments « » and « » is TRUE.

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.2.2,
14.4.2, 14.5.2, 15.2.2.2, 15.2.3.2.

_FunctionDeclaration_ : FUNCTION _BindingIdentifier_ (
_FormalParameters_ ) { _FunctionBody_ }

1.  Return the BoundNames of _BindingIdentifier_.

_FunctionDeclaration_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}

1.  Return «"*DEFAULT*"».

NOTE "*DEFAULT*" is used within this specification as a synthetic name
for hoistable anonymous functions that are defined using export
declarations.

FormalParameters : [empty]

1.  Return an empty List.

FormalParameterList : FormalsList , FunctionRestParameter

1.  Let _names_ be BoundNames of _FormalsList_.

2.  Append to _names_ the BoundNames of _FunctionRestParameter.

3.  Return _names_.

_FormalsList_ : _FormalsList ,_ _FormalParameter

1.  Let _names_ be BoundNames of _FormalsList_.

2.  Append to _names_ the elements of BoundNames of _FormalParameter.

3.  Return _names_.

Static Semantics: Contains

  With parameter _symbol_.

See also: 5.3, 12.2.5.3, 12.3.1.1, 14.2.3, 14.4.4, 14.5.4

_FunctionDeclaration_ : FUNCTION _BindingIdentifier_ (
_FormalParameters_ ) { _FunctionBody_ }

_FunctionDeclaration_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}
_FunctionExpression_ : FUNCTION _BindingIdentifier_~opt~ (
_FormalParameters_ ) { _FunctionBody_ }

1.  Return FALSE.

NOTE Static semantic rules that depend upon substructure generally do
not look into function definitions.

Static Semantics: ContainsExpression

See also: 13.2.3.2, 14.2.4.

FormalParameters : [empty]

1.  Return FALSE.

FormalParameterList : FunctionRestParameter

1.  Return FALSE.

FormalParameterList : FormalsList , FunctionRestParameter

1.  Return ContainsExpression of _FormalsList_.

_FormalsList_ : _FormalsList ,_ _FormalParameter 

1.  If ContainsExpression of _FormalsList_ is TRUE, return TRUE.

2.  Return ContainsExpression of _FormalParameter_.

Static Semantics: ExpectedArgumentCount

See also: 14.2.5, 14.3.3.

FormalParameters : [empty]

1.  Return 0.

FormalParameterList : FunctionRestParameter

1.  Return 0.

FormalParameterList : FormalsList , FunctionRestParameter

1.  Return the ExpectedArgumentCount of _FormalsList_.

NOTE The ExpectedArgumentCount of a _FormalParameterList_ is the number
of _FormalParameters_ to the left of either the rest parameter or the
first _FormalParameter_ with an Initializer. A _FormalParameter_ without
an initializer is allowed after the first parameter with an initializer
but such parameters are considered to be optional with UNDEFINED as
their default value.

_FormalsList_ : _FormalParameter 

1.  If HasInitializer of _FormalParameter_ is TRUE return 

2.  Return 1.

_FormalsList_ : _FormalsList,_ _FormalParameter 

1.  Let _count_ be the ExpectedArgumentCount of _FormalsList.

2.  If HasInitializer of _FormalsList_ is TRUE or HasInitializer of
    _FormalParameter_ is TRUE, return _count_.

3.  Return _count_+1.

Static Semantics: HasInitializer

See also: 13.2.3.3, 14.2.6.

_FormalParameters_ : [empty]

1.  Return FALSE.

_FormalParameterList_ : _FunctionRestParameter

1.  Return FALSE.

_FormalParameterList_ : _FormalsList_ , _FunctionRestParameter

1.  If HasInitializer of _FormalsList_ is TRUE, return TRUE.

2.  Return FALSE.

_FormalsList_ : _FormalsList ,_ _FormalParameter 

1.  If HasInitializer of _FormalsList_ is TRUE, return TRUE.

2.  Return HasInitializer of _FormalParameter_.

Static Semantics: HasName

See also: 12.2.0.2, 14.2.7, 14.4.7, 14.5.6.

_FunctionExpression_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}

1.  Return FALSE.

_FunctionExpression_ : FUNCTION _BindingIdentifier_ ( _FormalParameters
) { _FunctionBody_ }

1.  Return TRUE.

Static Semantics: IsAnonymousFunctionDefinition ( production )

The abstract operation IsAnonymousFunctionDefinition determines if its
argument is a function definition that does not bind a name. The
argument _production_ is the result of parsing an _AssignmentExpression_
or _Initializer_. The following steps are taken:

1.  If IsFunctionDefinition of _production_ is FALSE, return FALSE.

2.  Let _hasName_ be the result of HasName of _production_.

3.  If _hasName_ is TRUE, return FALSE.

4.  Return TRUE.

Static Semantics: IsConstantDeclaration

See also: 13.2.1.3, 14.4.8, 14.5.7, 15.2.3.7.

_FunctionDeclaration_ : FUNCTION _BindingIdentifier_ (
_FormalParameters_ ) { _FunctionBody_ }
_FunctionDeclaration_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}

1.  Return FALSE.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1,
14.4.9, 14.5.8.

_FunctionExpression_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}

1.  Return TRUE.

_FunctionExpression_ : FUNCTION _BindingIdentifier_ ( _FormalParameters
) { _FunctionBody_ }

1.  Return TRUE.

Static Semantics: IsSimpleParameterList

See also: 13.2.3.4, 14.2.9

FormalParameters : [empty]

1.  Return TRUE.

FormalParameterList : FunctionRestParameter

1.  Return FALSE.

FormalParameterList : FormalsList , FunctionRestParameter

1.  Return FALSE.

_FormalsList_ : _FormalsList ,_ _FormalParameter

1.  If IsSimpleParameterList of _FormalsList_ is FALSE, return FALSE.

2.  Return IsSimpleParameterList of _FormalParameter_.

_FormalParameter_ : _BindingElement

1.  Return IsSimpleParameterList of _BindingElement_.

1.  

Static Semantics: LexicallyDeclaredNames

See also: 13.1.5, 13.11.5, 13.12.6, 14.2.9, 15.1.3, 15.2.1.10.

FunctionStatementList : [empty]

1.  Return an empty List.

FunctionStatementList : StatementList

1.  Return TopLevelLexicallyDeclaredNames of _StatementList_.

Static Semantics: LexicallyScopedDeclarations

See also: 13.1.6, 13.11.6, 13.12.7, 14.2.11, 15.1.4, 15.2.1.11,
15.2.3.8.

FunctionStatementList : [empty]

1.  Return an empty List.

_FunctionStatementList_ : _StatementList

1.  Return the TopLevelLexicallyScopedDeclarations of _StatementList_.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.2.12,
15.1.5, 15.2.1.12.

FunctionStatementList : [empty]

1.  Return an empty List.

FunctionStatementList : StatementList

1.  Return TopLevelVarDeclaredNames of _StatementList_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.2.13,
15.1.6, 15.2.1.13.

FunctionStatementList : [empty]

1.  Return an empty List.

_FunctionStatementList_ : _StatementList

1.  Return the TopLevelVarScopedDeclarations of _StatementList_.

Runtime Semantics: EvaluateBody

  With parameter _functionObject_.

See also: 14.2.15, 14.4.11.

_FunctionBody_ : _FunctionStatementList 

1.  Return the result of evaluating _FunctionStatementList_.

Runtime Semantics: IteratorBindingInitialization

  With parameters _iteratorRecord_ and _environment_.

NOTE When UNDEFINED is passed for _environment_ it indicates that a
PutValue operation should be used to assign the initialization value.
This is the case for formal parameter lists of non-strict functions. In
that case the formal parameter bindings are preinitialized in order to
deal with the possibility of multiple parameters with the same name.

See also: 13.2.3.6, 14.2.14.

FormalParameters : [empty]

1.  Return NormalCompletion(empty).

FormalParameterList : FormalsList , FunctionRestParameter

1.  Let _restIndex_ be the result of performing
    IteratorBindingInitialization for _FormalsList_ using
    _iteratorRecord_, and _environment_ as the arguments.

2.  ReturnIfAbrupt(_restIndex_).

3.  Return the result of performing IteratorBindingInitialization for
    _FunctionRestParameter_ using _iteratorRecord_ and _environment_ as
    the arguments.

FormalsList : FormalsList , FormalParameter

1.  Let _status_ be the result of performing
    IteratorBindingInitialization for _FormalsList_ using
    _iteratorRecord_ and _environment_ as the arguments.

2.  ReturnIfAbrupt(_status_).

3.  Return the result of performing IteratorBindingInitialization for
    _FormalParameter_ using _iteratorRecord_ and _environment_ as the
    arguments.

_FormalParameter_ : _BindingElement

1.  If HasInitializer of _BindingElement_ is FALSE, return the result of
    performing IteratorBindingInitialization for _BindingElement_ using
    _iteratorRecord_ and _environment_ as the arguments.

2.  Let _currentContext_ be the running execution context.

3.  Let _originalEnv_ be the VariableEnvironment of _currentContext_.

4.  Assert: The VariableEnvironment and LexicalEnvironment of
    _currentContext_ are the same.

5.  Assert: _environment_ and _originalEnv_ are the same.

6.  Let _paramVarEnv_ be NewDeclarativeEnvironment(_originalEnv_).

7.  Set the VariableEnvironment of _currentContext_ to _paramVarEnv_.

8.  Set the LexicalEnvironment of _currentContext_ to _paramVarEnv_.

9.  Let _result_ be the result of performing
    IteratorBindingInitialization for _BindingElement_ using
    _iteratorRecord_ and _environment_ as the arguments.

10. Set the VariableEnvironment of _currentContext_ to _originalEnv_.

11. Set the LexicalEnvironment of _currentContext_ to _originalEnv_.

12. Return _result_.

The new Environment Record created in step 5 is only used if the
_BindElement’_s _Initializer_ contains a direct eval.

Runtime Semantics: InstantiateFunctionObject

  With parameter _scope_.

See also: 14.4.12.

_FunctionDeclaration_ : FUNCTION _BindingIdentifier_ (
_FormalParameters_ ) { _FunctionBody_ }

1.  If the function code for _FunctionDeclaration_ is strict mode code,
    let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _name_ be StringValue of _BindingIdentifier.

3.  Let _F_ be FunctionCreate(Normal, _FormalParameters_, _FunctionBody,
    scope_, _strict_).

4.  Perform MakeConstructor(_F_).

5.  Perform SetFunctionName(_F_, _name_).

6.  Return _F_.

_FunctionDeclaration_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}

1.  If the function code for _FunctionDeclaration_ is strict mode code,
    let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _F_ be FunctionCreate(Normal, _FormalParameters_, _FunctionBody,
    scope_, _strict_).

3.  Perform MakeConstructor(_F_).

4.  Perform SetFunctionName(_F_, "DEFAULT").

5.  Return _F_.

NOTE An anonymous _FunctionDeclaration_ can only occur as part of an
EXPORT DEFAULT declaration.

Runtime Semantics: Evaluation

_FunctionDeclaration_ : FUNCTION _BindingIdentifier_ (
_FormalParameters_ ) { _FunctionBody_ }

1.  Return NormalCompletion(empty).

NOTE An alternative semantics is provided in B.3.3.

_FunctionDeclaration_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}

1.  Return NormalCompletion(empty).

_FunctionExpression_ : FUNCTION ( _FormalParameters_ ) { _FunctionBody
}

1.  If the function code for _FunctionExpression_ is strict mode code,
    let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _scope_ be the LexicalEnvironment of the running execution
    context.

3.  Let _closure_ be FunctionCreate(Normal, _FormalParameters_,
    _FunctionBody, scope_, _strict_).

4.  Perform MakeConstructor(_closure_).

5.  Return _closure_.

_FunctionExpression_ : FUNCTION _BindingIdentifier_ ( _FormalParameters
) { _FunctionBody_ }

1.  If the function code for _FunctionExpression_ is strict mode code,
    let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _runningContext_ be the running execution context’s Lexical
    Environment.

3.  Let _funcEnv_ be NewDeclarativeEnvironment(_runningContext_ ).

4.  Let _envRec_ be _funcEnv’s_ EnvironmentRecord.

5.  Let _name_ be StringValue of _BindingIdentifier_.

6.  Perform _envRec._CreateImmutableBinding(_name_).

7.  Let _closure_ be FunctionCreate(Normal, _FormalParameters_,
    _FunctionBody, funcEnv_, _strict_).

8.  Perform MakeConstructor(_closure_).

9.  Perform SetFunctionName(_closure_, _name_).

10. Perform _envRec_.InitializeBinding(_name,_ _closure_).

11. Return NormalCompletion(_closure_).

NOTE 1 The _BindingIdentifier_ in a _FunctionExpression_ can be
referenced from inside the _FunctionExpression's_ _FunctionBody_ to
allow the function to call itself recursively. However, unlike in a
_FunctionDeclaration_, the _BindingIdentifier_ in a _FunctionExpression
cannot be referenced from and does not affect the scope enclosing the
_FunctionExpression_.

NOTE 2 A PROTOTYPE property is automatically created for every function
defined using a _FunctionDeclaration_ or _FunctionExpression_, to allow
for the possibility that the function will be used as a constructor.

FunctionStatementList : [empty]

1.  Return NormalCompletion(UNDEFINED).


Arrow Function Definitions

Syntax

_ArrowFunction_~[In,\ Yield]~ :

_ArrowParameters_~[?Yield]~ [no LineTerminator here] =>
_ConciseBody_~[?In]~

_ArrowParameters_~[Yield]~ :

_BindingIdentifier_~[?Yield]~
CoverParenthesizedExpressionAndArrowParameterList~[?Yield]~

ConciseBody~[In]~ :

[lookahead ≠ {] AssignmentExpression~[?In]~
{ FunctionBody }

Supplemental Syntax

When the production

_ArrowParameters_~[Yield]~ :
_CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~

is recognized the following grammar is used to refine the interpretation
of _CoverParenthesizedExpressionAndArrowParameterList_:

ArrowFormalParameters~[Yield,\ GeneratorParameter]~ :

( StrictFormalParameters~[?Yield,\ ?GeneratorParameter]~ )

Static Semantics: Early Errors

_ArrowFunction_ : _ArrowParameters_ => _ConciseBody

-   It is a Syntax Error if any element of the BoundNames of
    _ArrowParameters_ also occurs in the LexicallyDeclaredNames of
    _ConciseBody_.

_ArrowParameters_~[Yield]~ :
_CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~

-   If the ~[Yield]~ grammar parameter is present on _ArrowParameters_,
    it is a Syntax Error if the lexical token sequence matched by
    _CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~ cannot
    be parsed with no tokens left over using
    _ArrowFormalParameters_~[Yield,\ GeneratorParameter]~ as the goal
    symbol.

-   If the ~[Yield]~ grammar parameter is not present on
    _ArrowParameters_, it is a Syntax Error if the lexical token
    sequence matched by
    _CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~ cannot
    be parsed with no tokens left over using _ArrowFormalParameters_ as
    the goal symbol.

-   All early errors rules for _ArrowFormalParameters_ and its derived
    productions also apply to CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~.

NOTE The YIELD operator cannot be used within expressions that are part
of an _ArrowFormalParameters_.

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.1.3,
14.4.2, 14.5.2, 15.2.2.2, 15.2.3.2.

_ArrowParameters_ : _CoverParenthesizedExpressionAndArrowParameterList

1.  Let _formals_ be CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return the BoundNames of _formals_.

Static Semantics: Contains

  With parameter _symbol_.

See also: 5.3, 12.2.5.3, 12.3.1.1, 14.1.4, 14.4.4, 14.5.4

_ArrowFunction_ : _ArrowParameters_ => _ConciseBody

1.  If _symbol_ is not one of _NewTarget_, _SuperProperty_, _SuperCall_,
    SUPER or THIS, return FALSE.

2.  If _ArrowParameters_ Contains _symbol_ is TRUE, return TRUE;

3.  Return _ConciseBody_ Contains _symbol_ .

NOTE Normally, Contains does not look inside most function forms
However, Contains is used to detect NEW.TARGET, THIS, and SUPER usage
within an _ArrowFunction_.

_ArrowParameters_ : _CoverParenthesizedExpressionAndArrowParameterList

1.  Let _formals_ be CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return _formals_ Contains _symbol_.

Static Semantics: ContainsExpression

See also: 13.2.3.2, 14.1.5.

_ArrowParameters_ : _BindingIdentifier

1.  Return FALSE.

_ArrowParameters_: _CoverParenthesizedExpressionAndArrowParameterList

1.  Let _formals_ be CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return the ContainsExpression of _formals_.

1.  

1.  

2.  

Static Semantics: ExpectedArgumentCount

See also: 14.1.6,14.3.3.

_ArrowParameters_ : _BindingIdentifier

1.  Return 1.

_ArrowParameters_ : _CoverParenthesizedExpressionAndArrowParameterList

1.  Let _formals_ be CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return the ExpectedArgumentCount of _formals_.

Static Semantics: HasInitializer

See also: 13.2.3.3, 14.1.7.

_ArrowParameters_ : _BindingIdentifier

1.  Return FALSE.

_ArrowParameters_ : _CoverParenthesizedExpressionAndArrowParameterList

1.  Let _formals_ be CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return the HasInitializer of _formals_.

Static Semantics: HasName

See also: 12.2.0.2, 14.1.8, 14.4.7, 14.5.6.

_ArrowFunction_ : _ArrowParameters_ => _ConciseBody

1.  Return FALSE.

Static Semantics: IsSimpleParameterList

See also: 13.2.3.4, 14.1.12.

_ArrowParameters_ : _BindingIdentifier

1.  Return TRUE.

_ArrowParameters_ : _CoverParenthesizedExpressionAndArrowParameterList

1.  Let _formals_ be CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return the IsSimpleParameterList of _formals_.

Static Semantics: CoveredFormalsList

_ArrowParameters_ : _BindingIdentifier

1.  Return _BindingIdentifier_.

CoverParenthesizedExpressionAndArrowParameterList~[Yield]~ :

( Expression )
( )
( ... BindingIdentifier )
( Expression , ... BindingIdentifier )

1.  If the ~[Yield]~ grammar parameter is present for
    _CoverParenthesizedExpressionAndArrowParameterList_~[Yield]~ return
    the result of parsing the lexical token stream matched by
    _CoverParenthesizedExpressionAndArrowParameterList_~[Yield]~ using
    _ArrowFormalParameters_~[Yield,\ GeneratorParameter]~ as the goal
    symbol.

2.  If the ~[Yield]~ grammar parameter is not present for
    _CoverParenthesizedExpressionAndArrowParameterList_~[Yield]~ return
    the result of parsing the lexical token stream matched by
    _CoverParenthesizedExpressionAndArrowParameterList_ using
    _ArrowFormalParameters_ as the goal symbol.

Static Semantics: LexicallyDeclaredNames

See also: 13.1.5, 13.11.5, 13.12.6, 14.1.13, 15.1.3, 15.2.1.10.

_ConciseBody_ : _AssignmentExpression

1.  Return an empty List.

Static Semantics: LexicallyScopedDeclarations

See also: 13.1.6, 13.11.6, 13.12.7, 14.1.14, 15.1.4, 15.2.1.11,
15.2.3.8.

_ConciseBody_ : _AssignmentExpression

1.  Return an empty List.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15,
15.1.5, 15.2.1.12.

_ConciseBody_ : _AssignmentExpression

1.  Return an empty List.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16,
15.1.6, 15.2.1.13.

_ConciseBody_ : _AssignmentExpression

1.  Return an empty List.

Runtime Semantics: IteratorBindingInitialization

  With parameters _iteratorRecord_ and _environment_.

See also: 13.2.3.6, 14.1.18.

NOTE When UNDEFINED is passed for _environment_ it indicates that a
PutValue operation should be used to assign the initialization value.
This is the case for formal parameter lists of non-strict functions. In
that case the formal parameter bindings are preinitialized in order to
deal with the possibility of multiple parameters with the same name.

_ArrowParameters_ : _BindingIdentifier

1.  Assert: _iteratorRecord_.[[done]] is FALSE.

2.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

3.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]] to
    TRUE.

4.  ReturnIfAbrupt(_next_).

5.  If _next_ is FALSE, set _iteratorRecord_.[[done]] to TRUE

6.  Else

    a.  Let _v_ be IteratorValue(_next_).

    b.  If _v_ is an abrupt completion, set _iteratorRecord_.[[done]] to
        TRUE.

    c.  ReturnIfAbrupt(_v_).

7.  If _iteratorRecord_.[[done]] is TRUE, let _v_ be UNDEFINED.

8.  Return the result of performing BindingInitialization for
    _BindingIdentifier_ using _v_ and _environment_ as the arguments.

_ArrowParameters_ : _CoverParenthesizedExpressionAndArrowParameterList

1.  Let _formals_ be CoveredFormalsList of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return the result of performing IteratorBindingInitialization of
    _formals_ with arguments _iteratorRecord_ and _environment_.

Runtime Semantics: EvaluateBody

  With parameter _functionObject_.

See also: 14.1.17, 14.4.11.

_ConciseBody_ : _AssignmentExpression

1.  Let _exprRef_ be the result of evaluating _AssignmentExpression_.

2.  Let _exprValue_ be GetValue(_exprRef_).

3.  ReturnIfAbrupt(_exprValue_).

4.  Return Completion{[[type]]: return, [[value]]: _exprValue_,
    [[target]]: empty}.

Runtime Semantics: Evaluation

_ArrowFunction_ : _ArrowParameters_ => _ConciseBody

1.  If the function code for this _ArrowFunction_ is strict mode code
    (10.2.1), let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _scope_ be the LexicalEnvironment of the running execution
    context.

3.  Let _parameters_ be CoveredFormalsList of _ArrowParameters_.

4.  Let _closure_ be FunctionCreate(Arrow, _parameters_, _ConciseBody,
    scope_, _strict_).

5.  Return _closure_.

NOTE An _ArrowFunction_ does not define local bindings for ARGUMENTS,
SUPER, THIS, or NEW.TARGET. Any reference to ARGUMENTS, SUPER, or THIS
within an _ArrowFunction_ must resolve to a binding in a lexically
enclosing environment. Typically this will be the Function Environment
of an immediately enclosing function. Even though an _ArrowFunction_ may
contain references to SUPER, the function object created in step 4 is
not made into a method by performing MakeMethod. An _ArrowFunction_ that
references SUPER is always contained within a non-_ArrowFunction_ and
the necessary state to implement SUPER is accessible via the _scope_
that is captured by the function object of the _ArrowFunction_.


Method Definitions

Syntax

MethodDefinition~[Yield]~ :

PropertyName~[?Yield]~ ( StrictFormalParameters ) { FunctionBody }
GeneratorMethod~[?Yield]~
GET PropertyName~[?Yield]~ ( ) { FunctionBody }
SET PropertyName~[?Yield]~ ( PropertySetParameterList ) { FunctionBody }

PropertySetParameterList :

FormalParameter

Static Semantics: Early Errors

_MethodDefinition_ : _PropertyName_ ( _StrictFormalParameters_ ) {
_FunctionBody_ }

-   It is a Syntax Error if any element of the BoundNames of
    _StrictFormalParameters_ also occurs in the LexicallyDeclaredNames
    of _FunctionBody_.

_MethodDefinition_ : SET _PropertyName_ ( _PropertySetParameterList_ ) {
_FunctionBody_ }

-   It is a Syntax Error if BoundNames of _PropertySetParameterList_
    contains any duplicate elements.

-   It is a Syntax Error if any element of the BoundNames of
    _PropertySetParameterList_ also occurs in the LexicallyDeclaredNames
    of _FunctionBody_.

Static Semantics: ComputedPropertyContains

  With parameter _symbol_.

See also: 12.2.5.2, 14.4.3, 14.5.5.

MethodDefinition :

PropertyName ( StrictFormalParameters ) { FunctionBody }
GET PropertyName ( ) { FunctionBody }
SET PropertyName ( PropertySetParameterList ) { FunctionBody }

1.  Return the result of ComputedPropertyContains for _PropertyName
    with argument _symbol_.

Static Semantics: ExpectedArgumentCount

See also: 14.1.6, 14.2.6.

_PropertySetParameterList_ : _FormalParameter

1.  If HasInitializer of _FormalParameter_ is TRUE return 

2.  Return 1.

Static Semantics: HasComputedPropertyKey

See also: 12.2.5.4, 14.4.5

MethodDefinition :

PropertyName ( StrictFormalParameters ) { FunctionBody }
GET PropertyName ( ) { FunctionBody }
SET PropertyName ( PropertySetParameterList ) { FunctionBody }

1.  Return HasComputedPropertyKey of _PropertyName_.

Static Semantics: HasDirectSuper

See also: 14.4.6.

_MethodDefinition_ : _PropertyName_ ( _StrictFormalParameters_ ) {
_FunctionBody_ }

1.  If _StrictFormalParameters_ Contains _SuperCall_ is TRUE, return
    TRUE.

2.  Return _FunctionBody_ Contains _SuperCall_.

_MethodDefinition_ : GET _PropertyName_ ( ) { _FunctionBody_ }

1.  Return _FunctionBody_ Contains _SuperCall_.

_MethodDefinition_ : SET _PropertyName_ ( _PropertySetParameterList_ ) {
_FunctionBody_ }

1.  If _PropertySetParameterList_ Contains _SuperCall_ is TRUE, return
    TRUE.

2.  Return _FunctionBody_ Contains _SuperCall_.

Static Semantics: PropName

See also: 12.2.5.6, 14.4.10, 14.5.12

MethodDefinition :

PropertyName ( StrictFormalParameters ) { FunctionBody }
GET PropertyName ( ) { FunctionBody }
SET PropertyName ( PropertySetParameterList ) { FunctionBody }

1.  Return PropName of _PropertyName_.

1.  2.  

1.  

1.  2.  

Static Semantics: SpecialMethod

_MethodDefinition_ : _PropertyName_ ( _StrictFormalParameters_ ) {
_FunctionBody_ }

1.  Return FALSE.

MethodDefinition :

GeneratorMethod
GET PropertyName ( ) { FunctionBody }
SET PropertyName ( PropertySetParameterList ) { FunctionBody }

1.  Return TRUE.

Runtime Semantics: DefineMethod

  With parameters _object_ and optional parameter _functionPrototype_.

_MethodDefinition_ : _PropertyName_ ( _StrictFormalParameters_ ) {
_FunctionBody_ }

1.  Let _propKey_ be the result of evaluating _PropertyName_.

2.  ReturnIfAbrupt(_propKey_).

3.  If the function code for this _MethodDefinition_ is strict mode
    code, let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

4.  Let _scope_ be the running execution context’s LexicalEnvironment.

5.  If _functionPrototype_ was passed as a parameter, let _kind_ be
    Normal; otherwise let _kind_ be Method.

6.  Let _closure_ be FunctionCreate(_kind_, _StrictFormalParameters_,
    _FunctionBody, scope_, _strict_). If _functionPrototype_ was passed
    as a parameter then pass its value as the _functionPrototype_
    optional argument of FunctionCreate.

7.  8.  Perform MakeMethod(_closure_, _object_).

9.  Return the Record{[[key]]: _propKey_, [[closure]]: _closure_}.

Runtime Semantics: PropertyDefinitionEvaluation

  With parameters _object_ and _enumerable_.

See also: 12.2.5.9, 14.4.13, B.3.1

_MethodDefinition_ : _PropertyName_ ( _StrictFormalParameters_ ) {
_FunctionBody_ }

1.  Let _methodDef_ be DefineMethod of _MethodDefinition_ with argument
    _object_.

2.  ReturnIfAbrupt(_methodDef_).

3.  Perform SetFunctionName(_methodDef_.[[closure]],
    _methodDef_.[[key]]).

4.  Let _desc_ be the Property Descriptor{[[Value]]:
    _methodDef_.[[closure]], [[Writable]]: TRUE, [[Enumerable]]:
    _enumerable_, [[Configurable]]: TRUE}.

5.  Return DefinePropertyOrThrow(_object_, _methodDef_.[[key]], _desc_).

_MethodDefinition_ : _GeneratorMethod

See 14.4.

_MethodDefinition_ : GET _PropertyName_ ( ) { _FunctionBody_ }

1.  Let _propKey_ be the result of evaluating _PropertyName_.

2.  ReturnIfAbrupt(_propKey_).

3.  If the function code for this _MethodDefinition_ is strict mode
    code, let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

4.  Let _scope_ be the running execution context’s LexicalEnvironment.

5.  Let _formalParameterList_ be the production _FormalParameters_ :
    [empty]

6.  Let _closure_ be FunctionCreate(Method, _formalParameterList_,
    _FunctionBody, scope_, _strict_).

7.  8.  Perform MakeMethod(_closure_, _object_).

9.  Perform SetFunctionName(_closure_, _propKey_, "GET").

10. Let _desc_ be the PropertyDescriptor{[[Get]]: _closure_,
    [[Enumerable]]: _enumerable_, [[Configurable]]: TRUE}

11. Return DefinePropertyOrThrow(_object_, _propKey_, _desc_).

_MethodDefinition_ : SET _PropertyName_ ( _PropertySetParameterList_ ) {
_FunctionBody_}

1.  Let _propKey_ be the result of evaluating _PropertyName_.

2.  ReturnIfAbrupt(_propKey_).

3.  If the function code for this _MethodDefinition_ is strict mode
    code, let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

4.  Let _scope_ be the running execution context’s LexicalEnvironment.

5.  Let _closure_ be FunctionCreate(Method, _PropertySetParameterList_,
    _FunctionBody, scope_, _strict_).

6.  7.  Perform MakeMethod(_closure_, _object_).

8.  Perform SetFunctionName(_closure_, _propKey_, "SET").

9.  Let _desc_ be the PropertyDescriptor{[[Set]]: _closure_,
    [[Enumerable]]: _enumerable_, [[Configurable]]: TRUE}

10. Return DefinePropertyOrThrow(_object_, _propKey_, _desc_).


Generator Function Definitions

Syntax

GeneratorMethod~[Yield]~ :

* PropertyName~[?Yield]~
(StrictFormalParameters~[Yield,GeneratorParameter]~ ) { GeneratorBody }

GeneratorDeclaration~[Yield,\ Default]~ :

FUNCTION * BindingIdentifier~[?Yield]~ (
FormalParameters~[Yield,GeneratorParameter]~ ) { GeneratorBody }
[+Default] FUNCTION * ( FormalParameters~[Yield,GeneratorParameter]~ ) {
GeneratorBody }

GeneratorExpression :

FUNCTION * BindingIdentifier~[Yield]opt~ (
FormalParameters~[Yield,GeneratorParameter]~ ) { GeneratorBody }

GeneratorBody :

FunctionBody~[Yield]~

YieldExpression~[In]~ :

YIELD
YIELD [no LineTerminator here] AssignmentExpression~[?In,\ Yield]~
YIELD [no LineTerminator here] * AssignmentExpression~[?In,\ Yield]~

NOTE 1 The syntactic context immediately following YIELD requires use of
the _InputElementRegExpOrTemplateTail_ lexical goal.

NOTE 2 _YieldExpression_ cannot be used within the _FormalParameters_ of
a generator function because any expressions that are part of
_FormalParameters_ are evaluated before the resulting generator object
is in a resumable state.

NOTE 3 Abstract operations relating to generator objects are defined in
25.3.3.

Static Semantics: Early Errors

_GeneratorMethod_ : * _PropertyName_ ( _StrictFormalParameters_ ) {
_GeneratorBody_ }

-   It is a Syntax Error if HasDirectSuper of _GeneratorMethod_ is TRUE
    .

-   It is a Syntax Error if any element of the BoundNames of
    _StrictFormalParameters_ also occurs in the LexicallyDeclaredNames
    of _GeneratorBody_.

_GeneratorDeclaration_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

-   It is a Syntax Error if HasDirectSuper of _GeneratorDeclaration_ is
    TRUE .

_GeneratorExpression_ : FUNCTION * _BindingIdentifier_~opt~ (
_FormalParameters_ ) { _GeneratorBody_ }

-   It is a Syntax Error if HasDirectSuper of _GeneratorExpression_ is
    TRUE .

_GeneratorDeclaration_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }
_GeneratorExpression_ : FUNCTION * _BindingIdentifier_~opt~ (
_FormalParameters_ ) { _GeneratorBody_ }

-   If the source code matching this production is strict code, the
    Early Error rules for _StrictFormalParameters_ : _FormalParameters_
    are applied.

-   If the source code matching this production is strict code, it is a
    Syntax Error if _BindingIdentifier_ is the _IdentifierName_ EVAL or
    the _IdentifierName_ ARGUMENTS.

-   It is a Syntax Error if any element of the BoundNames of
    _FormalParameters_ also occurs in the LexicallyDeclaredNames of
    _GeneratorBody_.

-   It is a Syntax Error if _FormalParameters_ Contains _SuperProperty_
    is TRUE.

-   It is a Syntax Error if _GeneratorBody_ Contains _SuperProperty_ is
    TRUE.

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.1.3,
14.2.2, 14.5.2, 15.2.2.2, 15.2.3.2.

_GeneratorDeclaration_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

1.  Return the BoundNames of _BindingIdentifier_.

_GeneratorDeclaration_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

1.  Return «"*DEFAULT*"».

NOTE "*DEFAULT*" is used within this specification as a synthetic name
for hoistable anonymous functions that are defined using export
declarations.

Static Semantics: ComputedPropertyContains

  With parameter _symbol_.

See also: 12.2.5.2, 14.3.2, 14.5.5.

_GeneratorMethod_ : * _PropertyName_ ( _StrictFormalParameters_ ) {
_GeneratorBody_ }

1.  Return the result of ComputedPropertyContains for _PropertyName
    with argument _symbol_.

Static Semantics: Contains

  With parameter _symbol_.

See also: 5.3, 12.2.5.3, 12.3.1.1, 14.1.4, 14.2.3, 14.5.4

_GeneratorDeclaration_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

_GeneratorDeclaration_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

1.  Return FALSE.

_GeneratorExpression_ : FUNCTION * _BindingIdentifier_~opt~ (
_FormalParameters_ ) { _GeneratorBody_ }

1.  Return FALSE.

NOTE Static semantic rules that depend upon substructure generally do
not look into function definitions.

Static Semantics: HasComputedPropertyKey

See also: 12.2.5.4, 14.3.4.

_GeneratorMethod_ : * _PropertyName_ ( _StrictFormalParameters_ ) {
_GeneratorBody_ }

1.  Return IsComputedPropertyKey of _PropertyName_.

Static Semantics: HasDirectSuper

See also: 14.3.5.

_GeneratorMethod_ : * _PropertyName_ ( _StrictFormalParameters_ ) {
_GeneratorBody_ }

1.  If _StrictFormalParameters_ Contains _SuperCall_ is TRUE, return
    TRUE.

2.  Return _GeneratorBody_ Contains _SuperCall_.

_GeneratorDeclaration_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }
_GeneratorDeclaration_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

_GeneratorExpression_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

_GeneratorExpression_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

1.  If _FormalParameters_ Contains _SuperCall_ is TRUE, return TRUE.

2.  Return _GeneratorBody_ Contains _SuperCall_.

Static Semantics: HasName

See also: 12.2.0.2, 14.1.8, 14.2.7, 14.5.6.

_GeneratorExpression_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

1.  Return FALSE.

_GeneratorExpression_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

1.  Return TRUE.

Static Semantics: IsConstantDeclaration

See also: 13.2.1.3, 14.1.10, 14.5.7, 15.2.3.7.

_GeneratorDeclaration_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }
_GeneratorDeclaration_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

1.  Return FALSE.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1,
14.1.11, 14.5.8.

_GeneratorExpression_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

1.  Return TRUE.

_GeneratorExpression_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

1.  Return TRUE.

Static Semantics: PropName

See also: 12.2.5.6, 14.3.6, 14.5.12

_GeneratorMethod_ : * _PropertyName_ ( _StrictFormalParameters_ ) {
_GeneratorBody_ }

1.  Return PropName of _PropertyName_.

Runtime Semantics: EvaluateBody

  With parameter _functionObject_.

See also: 14.1.17, 14.2.15.

_GeneratorBody_ : _FunctionBody

1.  Let _G_ be OrdinaryCreateFromConstructor(_functionObject_,
    "%GENERATORPROTOTYPE%", «‍[[GeneratorState]], [[GeneratorContext]]»
    ).

2.  ReturnIfAbrupt(_G_).

3.  Perform GeneratorStart(_G_, _FunctionBody_).

4.  Return Completion{[[type]]: return, [[value]]: _G_, [[target]]:
    empty}.

NOTE If the generator was invoked using [[Call]], the THIS binding will
have already been initialized in the normal manner. If the generator was
invoked using [[Construct]], the THIS bind is not initialized and any
references to THIS within the _FunctionBody_ will produce a
REFERENCEERROR exception.

Runtime Semantics: InstantiateFunctionObject

  With parameter _scope_.

See also: 14.1.19.

_GeneratorDeclaration_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

1.  If the function code for _GeneratorDeclaration_ is strict mode code,
    let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _name_ be StringValue of _BindingIdentifier.

3.  Let _F_ be GeneratorFunctionCreate(Normal, _FormalParameters_,
    _GeneratorBody_, _scope_, _strict_).

4.  Let _prototype_ be ObjectCreate(%GeneratorPrototype%).

5.  Perform MakeConstructor(_F_, TRUE, _prototype_).

6.  Perform SetFunctionName(_F_, _name_).

7.  Return _F_.

_GeneratorDeclaration_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

1.  If the function code for _GeneratorDeclaration_ is strict mode code,
    let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _F_ be GeneratorFunctionCreate(Normal, _FormalParameters_,
    _GeneratorBody_, _scope_, _strict_).

3.  Let _prototype_ be ObjectCreate(%GeneratorPrototype%).

4.  Perform MakeConstructor(_F_, TRUE, _prototype_).

5.  Perform SetFunctionName(_F_, "DEFAULT").

6.  Return _F_.

NOTE An anonymous _GeneratorDeclaration_ can only occur as part of an
EXPORT DEFAULT declaration.

Runtime Semantics: PropertyDefinitionEvaluation

  With parameter _object_ and _enumerable_.

See also: 12.2.5.9, 14.3.9, B.3.1

_GeneratorMethod_ : * _PropertyName_ ( _StrictFormalParameters_ ) {
_GeneratorBody_ }

1.  Let _propKey_ be the result of evaluating _PropertyName_.

2.  ReturnIfAbrupt(_propKey_).

3.  If the function code for this _GeneratorMethod_ is strict mode code,
    let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

4.  Let _scope_ be the running execution context’s LexicalEnvironment.

5.  Let _closure_ be GeneratorFunctionCreate(Method,
    _StrictFormalParameters_, _GeneratorBody, scope_, _strict_).

6.  7.  Perform MakeMethod(_closure_, _object_).

8.  Let _prototype_ be ObjectCreate(%GeneratorPrototype%).

9.  Perform MakeConstructor(_closure_, TRUE, _prototype_).

10. Perform SetFunctionName(_closure_, _propKey_).

11. Let _desc_ be the Property Descriptor{[[Value]]: _closure_,
    [[Writable]]: TRUE, [[Enumerable]]: _enumerable_, [[Configurable]]:
    TRUE}.

12. Return DefinePropertyOrThrow(_object_, _propKey_, _desc_).

Runtime Semantics: Evaluation

_GeneratorExpression_ : FUNCTION * ( _FormalParameters_ ) {
_GeneratorBody_ }

1.  If the function code for this _GeneratorExpression_ is strict mode
    code, let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _scope_ be the LexicalEnvironment of the running execution
    context.

3.  Let _closure_ be GeneratorFunctionCreate(Normal, _FormalParameters_,
    _GeneratorBody, scope_, _strict_).

4.  Let _prototype_ be ObjectCreate(%GeneratorPrototype%).

5.  Perform MakeConstructor(_closure_, TRUE, _prototype_).

6.  Return _closure_.

_GeneratorExpression_ : FUNCTION * _BindingIdentifier_ (
_FormalParameters_ ) { _GeneratorBody_ }

1.  If the function code for this _GeneratorExpression_ is strict mode
    code, let _strict_ be TRUE. Otherwise let _strict_ be FALSE.

2.  Let _runningContext_ be the running execution context’s Lexical
    Environment.

3.  Let _funcEnv_ be NewDeclarativeEnvironment(_runningContext_).

4.  Let _envRec_ be _funcEnv’s_ EnvironmentRecord.

5.  Let _name_ be StringValue of _BindingIdentifier_.

6.  Perform _envRec._CreateImmutableBinding(_name_).

7.  Let _closure_ be GeneratorFunctionCreate(Normal, _FormalParameters_,
    _GeneratorBody, funcEnv_, _strict_).

8.  Let _prototype_ be ObjectCreate(%GeneratorPrototype%).

9.  Perform MakeConstructor (_closure_, TRUE, _prototype_).

1.  Perform SetFunctionName(_closure_, _name_).

1.  Perform _envRec._InitializeBinding(_name,_ _closure_).

2.  Return _closure_.

NOTE 1 The _BindingIdentifier_ in a _GeneratorExpression_ can be
referenced from inside the _GeneratorExpression's_ _FunctionBody_ to
allow the generator code to call itself recursively. However, unlike in
a _GeneratorDeclaration_, the _BindingIdentifier_ in a
_GeneratorExpression_ cannot be referenced from and does not affect the
scope enclosing the _GeneratorExpression_.

_YieldExpression_ : YIELD

1.  Return GeneratorYield(CreateIterResultObject(UNDEFINED, FALSE)).

_YieldExpression_ : YIELD _AssignmentExpression

1.  Let _exprRef_ be the result of evaluating _AssignmentExpression_.

2.  Let _value_ be GetValue(_exprRef_).

3.  ReturnIfAbrupt(_value_).

4.  Return GeneratorYield(CreateIterResultObject(_value_, FALSE)).

_YieldExpression_ : YIELD * _AssignmentExpression

1.  Let _exprRef_ be the result of evaluating _AssignmentExpression_.

2.  Let _value_ be GetValue(_exprRef_).

3.  Let _iterator_ be GetIterator(_value_).

4.  ReturnIfAbrupt(_iterator_)_.

5.  Let _received_ be NormalCompletion(UNDEFINED).

6.  Repeat

    a.  If _received_.[[type]] is normal, then

        i.  Let _innerResult_ be IteratorNext(_iterator_,
            _received_.[[value]]).

        ii. ReturnIfAbrupt(_innerResult_).

        iii. Let _done_ be IteratorComplete(_innerResult_).

        iv. ReturnIfAbrupt(_done_).

        v.  If _done_ is TRUE, then

            1.  Return IteratorValue (_innerResult_).

        vi. Let _received_ be GeneratorYield(_innerResult_).

    b.  Else if _received_.[[type]] is throw, then

        i.  Let _throw_ be GetMethod(_iterator_, "THROW").

        ii. ReturnIfAbrupt(_throw_).

        iii. If _throw_ is not UNDEFINED, then

            1.  Let _innerResult_ be Call(_throw_, _iterator_,
                «‍_received_.[[value]]»).

            2.  ReturnIfAbrupt(_innerResult_).

            3.  NOTE: Exceptions from the inner iterator THROW method
                are propagated. Normal completions from an inner THROW
                method are processed similarly to an inner NEXT.

            4.  If Type(_innerResult_) is not Object, throw a TYPEERROR
                exception.

            5.  Let _done_ be IteratorComplete(_innerResult_).

            6.  ReturnIfAbrupt(_done_).

            7.  If _done_ is TRUE, then

                a.  Let _value_ be IteratorValue(_innerResult_).

                b.  ReturnIfAbrupt(_value_).

                c.  Return Completion{[[type]]: return ,
                    [[value]]:_value_, [[target]]:empty}.

            8.  Let _received_ be GeneratorYield(_innerResult_).

        iv. Else,

            1.  NOTE: If _iterator_ does not have a THROW method, this
                throw is going to terminate the YIELD* loop. But first
                we need to give _iterator_ a chance to clean up.

            2.  Let _closeResult_ be IteratorClose(_iterator_,
                Completion{[[type]]: normal , [[value]]: empty,
                [[target]]:empty}).

            3.  ReturnIfAbrupt(_closeResult_).

            4.  NOTE: Next throw a TYPEERROR to indicate that there was
                an YIELD* protocol violation: _iterator_ does not have a
                THROW method.

            5.  Throw a TYPEERROR exception.

    c.  Else,

        i.  Assert: _received_.[[type]] is return.

        ii. Let _return_ be GetMethod(_iterator_, "RETURN").

        iii. ReturnIfAbrupt(_return_).

        iv. If _return_ is UNDEFINED, return Completion(_received_).

        v.  Let _innerReturnResult_ be Call(_return_, _iterator_,
            «‍_received_.[[value]]»).

        vi. ReturnIfAbrupt(_innerReturnResult_).

        vii. If Type(_innerReturnResult_) is not Object, throw a
            TYPEERROR exception.

        viii. Let _done_ be IteratorComplete(_innerReturnResult_).

        ix. ReturnIfAbrupt(_done_).

        x.  If _done_ is TRUE, then

            1.  Let _value_ be IteratorValue(_innerReturnResult_).

            2.  ReturnIfAbrupt(_value_).

            3.  Return Completion{[[type]]: return , [[value]]: _value_,
                [[target]]:empty}.

        xi. Let _received_ be GeneratorYield(_innerReturnResult_).


Class Definitions

Syntax

ClassDeclaration~[Yield,\ Default]~ :

CLASS BindingIdentifier~[?Yield]~ ClassTail~[?Yield]~
[+Default] CLASS ClassTail~[?Yield]~

ClassExpression~[Yield]~ :

CLASS BindingIdentifier~[?Yield]opt~ ClassTail~[?Yield]~

ClassTail~[Yield]~ :

ClassHeritage~[?Yield]opt~ { ClassBody~[?Yield]opt~ }

ClassHeritage~[Yield]~ :

EXTENDS LeftHandSideExpression~[?Yield]~

ClassBody~[Yield]~ :

ClassElementList~[?Yield]~

ClassElementList~[Yield]~ :

ClassElement~[?Yield]~
ClassElementList~[?Yield]~ ClassElement~[?Yield]~

ClassElement~[Yield]~ :

MethodDefinition~[?Yield]~
STATIC MethodDefinition~[?Yield]~
;

NOTE A _ClassBody_ is always strict code.

Static Semantics: Early Errors

_ClassTail_ : _ClassHeritage_~opt~ { _ClassBody_ }

-   It is a Syntax Error if _ClassHeritage_ is not present and the
    following algorithm evaluates to TRUE:

1.  Let _constructor_ be ConstructorMethod of _ClassBody_.

2.  If _constructor_ is empty, return FALSE.

3.  Return HasDirectSuper of _constructor_.

_ClassBody_ : _ClassElementList 

-   It is a Syntax Error if PrototypePropertyNameList of
    _ClassElementList_ contains more than one occurrence of
    "CONSTRUCTOR".

_ClassElement_ : _MethodDefinition 

-   It is a Syntax Error if PropName of _MethodDefinition_ is not
    "CONSTRUCTOR" and HasDirectSuper of _MethodDefinition_ is TRUE.

-   It is a Syntax Error if PropName of _MethodDefinition_ is
    "CONSTRUCTOR" and SpecialMethod of _MethodDefinition_ is TRUE_._

_ClassElement_ : STATIC _MethodDefinition 

-   It is a Syntax Error if HasDirectSuper of _MethodDefinition_ is
    TRUE.

-   It is a Syntax Error if PropName of _MethodDefinition_ is
    "PROTOTYPE"_._

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.1.3,
14.2.2, 14.4.2, 15.2.2.2, 15.2.3.2.

_ClassDeclaration_ : CLASS _BindingIdentifier_ _ClassTail

1.  Return the BoundNames of _BindingIdentifier_.

_ClassDeclaration_ : CLASS _ClassTail

1.  Return «"*DEFAULT*"».

Static Semantics: ConstructorMethod

_ClassElementList_ : _ClassElement

1.  If _ClassElement_ is the production _ClassElement_ : ; , return
    empty.

2.  If IsStatic of _ClassElement_ is TRUE, return empty.

3.  If PropName of _ClassElement_ is not "CONSTRUCTOR", return empty.

4.  Return _ClassElement_.

_ClassElementList_ : _ClassElementList_ _ClassElement 

1.  Let _head_ be ConstructorMethod of _ClassElementList.

2.  If _head_ is not empty, return _head_.

3.  If _ClassElement_ is the production _ClassElement_ : ; , return
    empty.

4.  If IsStatic of _ClassElement_ is TRUE, return empty.

5.  If PropName of _ClassElement_ is not "CONSTRUCTOR", return empty.

6.  Return _ClassElement_.

NOTE Early Error rules ensure that there is only one method definition
named "CONSTRUCTOR" and that it is not an accessor property or generator
definition.

Static Semantics: Contains

  With parameter _symbol_.

See also: 5.3, 12.2.5.3, 12.3.1.1, 14.1.4, 14.2.3, 14.4.4

_ClassTail_ : _ClassHeritage_~opt~ { _ClassBody_ }

1.  If _symbol_ is _ClassBody_, return TRUE.

2.  If _symbol_ is _ClassHeritage_, then

    a.  If _ClassHeritage_ is present, return TRUE otherwise return
        FALSE.

3.  Let _inHeritage_ be _ClassHeritage_ Contains _symbol_.

4.  If _inHeritage_ is TRUE, return TRUE.

5.  Return the result of ComputedPropertyContains for _ClassBody_ with
    argument _symbol_.

NOTE Static semantic rules that depend upon substructure generally do
not look into class bodies except for _PropertyName_ productions.

Static Semantics: ComputedPropertyContains

  With parameter _symbol_.

See also: 12.2.5.2, 14.3.2, 14.4.3.

_ClassElementList_ : _ClassElementList_ _ClassElement 

1.  Let _inList_ be the result of ComputedPropertyContains for
    _ClassElementList_ with argument _symbol._

2.  If _inList_ is TRUE, return TRUE.

3.  Return the result of ComputedPropertyContains for _ClassElement
    with argument _symbol_.

_ClassElement_ : _MethodDefinition

1.  Return the result of ComputedPropertyContains for _MethodDefinition
    with argument _symbol_.

_ClassElement_ : STATIC _MethodDefinition

1.  Return the result of ComputedPropertyContains for _MethodDefinition
    with argument _symbol_.

_ClassElement_ : ;

1.  Return FALSE.

Static Semantics: HasName

See also: 12.2.0.2, 14.1.8, 14.2.7, 14.4.7.

_ClassExpression_ : CLASS _ClassTail

1.  Return FALSE.

_ClassExpression_ : CLASS _BindingIdentifier_ _ClassTail

1.  Return TRUE.

Static Semantics: IsConstantDeclaration

See also: 13.2.1.3, 14.1.10, 14.4.8, 15.2.3.7.

_ClassDeclaration_ : CLASS _BindingIdentifier_ _ClassTail

_ClassDeclaration_ : CLASS _ClassTail

1.  Return FALSE.

Static Semantics: IsFunctionDefinition

See also: 12.2.0.2, 12.2.9.2, 12.3.1.2, 12.4.2, 12.5.2, 12.6.1, 12.7.1,
12.8.1, 12.9.1, 12.10.1, 12.11.1, 12.12.1, 12.13.1, 12.14.2, 12.15.1,
14.1.11, 14.4.9.

_ClassExpression_ : CLASS _ClassTail

1.  Return TRUE.

_ClassExpression_ : CLASS _BindingIdentifier_ _ClassTail

1.  Return TRUE.

Static Semantics: IsStatic

_ClassElement_ : _MethodDefinition

1.  Return FALSE.

_ClassElement_ : STATIC _MethodDefinition

1.  Return TRUE.

_ClassElement_ : ;

1.  Return FALSE.

Static Semantics: NonConstructorMethodDefinitions

_ClassElementList_ : _ClassElement

1.  If _ClassElement_ is the production _ClassElement_ : ; , return a
    new empty List.

2.  If IsStatic of _ClassElement_ is FALSE and PropName of
    _ClassElement_ is "CONSTRUCTOR", return a new empty List.

3.  Return a List containing _ClassElement_.

_ClassElementList_ : _ClassElementList_ _ClassElement 

1.  Let _list_ be NonConstructorMethodDefinitions of _ClassElementList.

2.  If _ClassElement_ is the production _ClassElement_ : ; , return
    _list_.

3.  If IsStatic of _ClassElement_ is FALSE and PropName of
    _ClassElement_ is "CONSTRUCTOR", return _list_.

4.  Append _ClassElement_ to the end of _list_.

5.  Return _list_.

Static Semantics: PrototypePropertyNameList

_ClassElementList_ : _ClassElement 

1.  If PropName of _ClassElement_ is empty, return a new empty List.

2.  If IsStatic of _ClassElement_ is TRUE, return a new empty List.

3.  Return a List containing PropName of _ClassElement_.

_ClassElementList_ : _ClassElementList_ _ClassElement 

1.  Let _list_ be PrototypePropertyNameList of _ClassElementList.

2.  If PropName of _ClassElement_ is empty, return _list_.

3.  If IsStatic of _ClassElement_ is TRUE, return _list_.

4.  Append PropName of _ClassElement_ to the end of _list_.

5.  Return _list_.

Static Semantics: PropName

See also: 12.2.5.6, 14.3.6, 14.4.10

_ClassElement_ : ;

1.  Return empty.

Static Semantics: StaticPropertyNameList

_ClassElementList_ : _ClassElement 

1.  If PropName of _ClassElement_ is empty, return a new empty List.

2.  If IsStatic of _ClassElement_ is FALSE, return a new empty List.

3.  Return a List containing PropName of _ClassElement_.

_ClassElementList_ : _ClassElementList_ _ClassElement 

1.  Let _list_ be StaticPropertyNameList of _ClassElementList.

2.  If PropName of _ClassElement_ is empty, return _list_.

3.  If IsStatic of _ClassElement_ is FALSE, return _list_.

4.  Append PropName of _ClassElement_ to the end of _list_.

5.  Return _list_.

Runtime Semantics: ClassDefinitionEvaluation

  With parameter _className_.

_ClassTail_ : _ClassHeritage_~opt~ { _ClassBody_~opt~ }

1.  Let _lex_ be the LexicalEnvironment of the running execution
    context.

2.  Let _classScope_ be NewDeclarativeEnvironment(_lex_).

3.  Let _classScopeEnvRec_ be _classScope_’s EnvironmentRecord.

4.  If _className_ is not UNDEFINED, then

    a.  Perform _classScopeEnvRec._CreateImmutableBinding(_className_,
        TRUE).

5.  If _ClassHeritage_~opt~ is not present, then

    a.  Let _protoParent_ be the intrinsic object %ObjectPrototype%.

    b.  Let _constructorParent_ be the intrinsic object
        %FunctionPrototype%.

6.  Else

    a.  Set the running execution context’s LexicalEnvironment to
        _classScope_.

    b.  Let _superclass_ be the result of evaluating _ClassHeritage_.

    c.  Set the running execution context’s LexicalEnvironment to _lex_.

    d.  ReturnIfAbrupt(_superclass_).

    e.  If _superclass_ is NULL, then

        i.  Let _protoParent_ be NULL.

        ii. Let _constructorParent_ be the intrinsic object
            %FunctionPrototype%.

    f.  Else if IsConstructor(_superclass_) is FALSE, throw a TYPEERROR
        exception.

    g.  Else

        i.  If _superclass_ has a [[FunctionKind]] internal slot whose
            value is "GENERATOR", throw a TYPEERROR exception.

        ii. Let _protoParent_ be Get(_superclass_, "PROTOTYPE").

        iii. ReturnIfAbrupt(_protoParent_).

        iv. If Type(_protoParent_) is neither Object nor Null, throw a
            TYPEERROR exception.

        v.  Let _constructorParent_ be _superclass_.

7.  Let _proto_ be ObjectCreate(_protoParent_).

8.  If _ClassBody_~opt~ is not present, let _constructor_ be empty.

9.  Else, let _constructor_ be ConstructorMethod of _ClassBody_.

10. If _constructor_ is empty, then,

    a.  If _ClassHeritage_~opt~ is present, then

        i.  Let _constructor_ be the result of parsing the String
            "CONSTRUCTOR(... ARGS){ SUPER (...ARGS);}" using the
            syntactic grammar with the goal symbol _MethodDefinition._

    b.  Else,

        i.  Let _constructor_ be the result of parsing the String
            "CONSTRUCTOR( ){ }" using the syntactic grammar with the
            goal symbol _MethodDefinition._

11. Set the running execution context’s LexicalEnvironment to
    _classScope_.

12. Let _constructorInfo_ be the result of performing DefineMethod for
    _constructor_ with arguments _proto_ and _constructorParent_ as the
    optional _functionPrototype_ argument.

13. Assert: _constructorInfo_ is not an abrupt completion.

14. Let _F_ be _constructorInfo_.[[closure]]

15. If _ClassHeritage_~opt~ is present, set _F_’s [[ConstructorKind]]
    internal slot to "DERIVED".

16. Perform MakeConstructor(_F_, FALSE, _proto_).

17. Perform MakeClassConstructor(_F_).

18. Perform CreateMethodProperty(_proto_, "CONSTRUCTOR", _F_)_.

19. If _ClassBody_~opt~ is not present, let _methods_ be a new empty
    List.

20. Else, let _methods_ be NonConstructorMethodDefinitions of
    _ClassBody_.

21. For each _ClassElement_ _m_ in order from _methods

    a.  If IsStatic of _m_ is FALSE, then

        i.  Let _status_ be the result of performing
            PropertyDefinitionEvaluation for _m_ with arguments _proto_
            and FALSE.

    b.  Else,

        i.  Let _status_ be the result of performing
            PropertyDefinitionEvaluation for _m_ with arguments _F_ and
            FALSE.

    c.  If _status_ is an abrupt completion, then

        i.  Set the running execution context’s LexicalEnvironment to
            _lex_.

        ii. Return Completion(_status_).

22. Set the running execution context’s LexicalEnvironment to _lex_.

23. If _className_ is not UNDEFINED, then

    a.  Perform _classScopeEnvRec._InitializeBinding(_className_, _F_).

24. Return _F_.

Runtime Semantics: BindingClassDeclarationEvaluation

_ClassDeclaration_ : CLASS _BindingIdentifier_ _ClassTail

1.  Let _className_ be StringValue of _BindingIdentifier_.

2.  Let _value_ be the result of ClassDefinitionEvaluation of
    _ClassTail_ with argument _className._

3.  ReturnIfAbrupt(_value_).

4.  Let _hasNameProperty_ be HasOwnProperty(_value_, "NAME").

5.  ReturnIfAbrupt(_hasNameProperty_).

6.  If _hasNameProperty_ is FALSE, then perform SetFunctionName(_value_,
    _className_).

7.  Let _env_ be the running execution context’s LexicalEnvironment.

8.  Let _status_ be InitializeBoundName(_className_, _value_, _env_).

9.  ReturnIfAbrupt(_status_).

10. Return _value_.

_ClassDeclaration_ : CLASS _ClassTail

1.  Return the result of ClassDefinitionEvaluation of _ClassTail_ with
    argument UNDEFINED_._

NOTE _ClassDeclaration_ : CLASS _ClassTail_ only occurs as part of an
_ExportDeclaration_ and the setting of a name property and establishing
its binding are handled as part of the evaluation action for that
production. See 15.2.3.11.

Runtime Semantics: Evaluation

_ClassDeclaration_ : CLASS _BindingIdentifier_ _ClassTail

1.  Let _status_ be the result of BindingClassDeclarationEvaluation of
    this _ClassDeclaration._

2.  ReturnIfAbrupt(_status_).

3.  Return NormalCompletion(empty).

NOTE _ClassDeclaration_ : CLASS _ClassTail_ only occurs as part of an
_ExportDeclaration_ and is never directly evaluated.

_ClassExpression_ : CLASS _BindingIdentifier_~opt~ _ClassTail

1.  If _BindingIdentifier_~opt~ is not present, let _className_ be
    UNDEFINED.

2.  Else, let _className_ be StringValue of _BindingIdentifier_.

3.  Let _value_ be the result of ClassDefinitionEvaluation of
    _ClassTail_ with argument _className_.

4.  ReturnIfAbrupt(_value_).

5.  If _className_ is not UNDEFINED, then

    a.  Let _hasNameProperty_ be HasOwnProperty(_value_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, then

        i.  Perform SetFunctionName(_value_, _className_).

6.  Return NormalCompletion(_value_).

NOTE If the class definition included a "NAME" static method then that
method is not over-written with a "NAME" data property for the class
name.


Tail Position Calls

Static Semantics: IsInTailPosition(nonterminal)

The abstract operation IsInTailPosition with argument _nonterminal_
performs the following steps:

1.  Assert: _nonterminal_ is a parsed grammar production.

2.  If the source code matching _nonterminal_ is not strict code, return
    FALSE.

3.  If _nonterminal_ is not contained within a _FunctionBody_ or
    _ConciseBody_, return FALSE.

4.  Let _body_ be the _FunctionBody_ or _ConciseBody_ that most closely
    contains _nonterminal_.

5.  If _body_ is the _FunctionBody_ of a _GeneratorBody_, return FALSE.

6.  Return the result of HasProductionInTailPosition of _body_ with
    argument _nonterminal_.

NOTE Tail Position calls are only defined in strict mode code because of
a common non-standard language extension (see 9.2.7) that enables
observation of the chain of caller contexts.

Static Semantics: HasProductionInTailPosition

  With parameter _nonterminal_.

NOTE _nonterminal_ is a parsed grammar production that represent a
specific range of source text. When the following algorithms compare
_nonterminal_ to other grammar symbols they are testing whether the same
source text was matched by both symbols.

Statement Rules

_ConciseBody_ : _AssignmentExpression

1.  Return HasProductionInTailPosition of _AssignmentExpression_ with
    argument _nonterminal_.

_StatementList_ : _StatementList StatementListItem

1.  Let _has_ be HasProductionInTailPosition of _StatementList_ with
    argument _nonterminal_.

2.  If _has_ is TRUE, return TRUE.

3.  Return HasProductionInTailPosition of _StatementListItem_ with
    argument _nonterminal_.

_FunctionStatementList_ : [empty]

_StatementListItem_ : _Declaration

Statement :

VariableStatement
EmptyStatement
ExpressionStatement
ContinueStatement
BreakStatement
ThrowStatement
DebuggerStatement

_Block_ : { }

_ReturnStatement_ : RETURN ;

_LabelledItem_ : _FunctionDeclaration

IterationStatement :

FOR ( LeftHandSideExpression IN Expression ) Statement
FOR ( VAR ForBinding IN Expression ) Statement
FOR ( ForDeclaration IN Expression ) Statement
FOR ( LeftHandSideExpression OF AssignmentExpression ) Statement
FOR ( VAR ForBinding OF AssignmentExpression ) Statement
FOR ( ForDeclaration OF AssignmentExpression ) Statement

_CaseBlock_ : { }

1.  Return FALSE.

_IfStatement_ : IF ( _Expression_ ) _Statement_ ELSE _Statement

1.  Let _has_ be HasProductionInTailPosition of the first _Statement
    with argument _nonterminal_.

2.  If _has_ is TRUE, return TRUE.

3.  Return HasProductionInTailPosition of the second _Statement_ with
    argument _nonterminal_.

_IfStatement_ : IF ( _Expression_ ) _Statement

IterationStatement :

DO Statement WHILE ( Expression ) ;
WHILE ( Expression ) Statement
FOR (Expression~opt~ ; Expression~opt~ ; Expression~opt~ ) Statement
FOR ( VAR VariableDeclarationList ; Expression~opt~ ; Expression~opt~ )
Statement
FOR ( LexicalDeclaration Expression~opt~ ; Expression~opt~ ) Statement

_WithStatement_ : WITH ( _Expression_ ) _Statement

1.  Return HasProductionInTailPosition of _Statement_ with argument
    _nonterminal_.

LabelledStatement :

LabelIdentifier : LabelledItem

1.  Return HasProductionInTailPosition of _LabelledItem_ with argument
    _nonterminal_.

_ReturnStatement_ : RETURN _Expression_;

1.  Return HasProductionInTailPosition of _Expression_ with argument
    _nonterminal_.

_SwitchStatement_ : SWITCH ( _Expression_ ) _CaseBlock

1.  Return HasProductionInTailPosition of _CaseBlock_ with argument
    _nonterminal_.

_CaseBlock_ : { _CaseClauses_~opt~ _DefaultClause CaseClauses_~opt~ }

1.  Let _has_ be FALSE.

2.  If the first _CaseClauses_ is present, let _has_ be
    HasProductionInTailPosition of the first _CaseClauses_ with argument
    _nonterminal_.

3.  If _has_ is TRUE, return TRUE.

4.  Let _has_ be HasProductionInTailPosition of the _DefaultClause_ with
    argument _nonterminal_.

5.  If _has_ is TRUE, return TRUE.

6.  If the second _CaseClauses_ is present, let _has_ be
    HasProductionInTailPosition of the second _CaseClauses_ with
    argument _nonterminal_.

7.  Return _has_.

_CaseClauses_ : _CaseClauses CaseClause

1.  Let _has_ be HasProductionInTailPosition of _CaseClauses_ with
    argument _nonterminal_.

2.  If _has_ is TRUE, return TRUE.

3.  Return HasProductionInTailPosition of _CaseClause_ with argument
    _nonterminal_.

_CaseClause_ : CASE _Expression_ : _StatementList_~opt~

_DefaultClause_ : DEFAULT : _StatementList_~opt~

1.  If _StatementList_ is present, return HasProductionInTailPosition of
    _StatementList_ with argument _nonterminal_.

2.  Return FALSE.

_TryStatement_ : TRY _Block_ _Catch

1.  Return HasProductionInTailPosition of _Catch_ with argument
    _nonterminal_.

_TryStatement_ : TRY _Block_ _Finally

_TryStatement_ : TRY _Block_ _Catch_ _Finally

1.  Return HasProductionInTailPosition of _Finally_ with argument
    _nonterminal_.

_Catch_ : CATCH ( _CatchParameter_ ) _Block

1.  Return HasProductionInTailPosition of _Block_ with argument
    _nonterminal_.

Expression Rules

NOTE A potential tail position call that is immediately followed by
return GetValue of the call result is also a possible tail position
call. Function calls cannot return reference values, so such a GetValue
operation will always returns the same value as the actual function call
result.

AssignmentExpression :

YieldExpression
ArrowFunction
LeftHandSideExpression = AssignmentExpression
LeftHandSideExpression AssignmentOperator AssignmentExpression

BitwiseANDExpression : BitwiseANDExpression & EqualityExpression

BitwiseXORExpression : BitwiseXORExpression ^ BitwiseANDExpression

BitwiseORExpression : BitwiseORExpression | BitwiseXORExpression

EqualityExpression :

EqualityExpression == RelationalExpression
EqualityExpression != RelationalExpression
EqualityExpression === RelationalExpression
EqualityExpression !== RelationalExpression

RelationalExpression :

RelationalExpression < ShiftExpression
RelationalExpression > ShiftExpression
RelationalExpression <= ShiftExpression
RelationalExpression >= ShiftExpression
RelationalExpression INSTANCEOF ShiftExpression
RelationalExpression IN ShiftExpression

ShiftExpression :

ShiftExpression << AdditiveExpression
ShiftExpression >> AdditiveExpression
ShiftExpression >>> AdditiveExpression

AdditiveExpression :

AdditiveExpression + MultiplicativeExpression
AdditiveExpression - MultiplicativeExpression

MultiplicativeExpression :

MultiplicativeExpression MultiplicativeOperator UnaryExpression

UnaryExpression :

DELETE UnaryExpression
VOID UnaryExpression
TYPEOF UnaryExpression
++ UnaryExpression
-- UnaryExpression
+ UnaryExpression
- UnaryExpression
~ UnaryExpression
! UnaryExpression

PostfixExpression :

LeftHandSideExpression ++
LeftHandSideExpression --

CallExpression :

SuperCall
CallExpression [ Expression ]
CallExpression . IdentifierName

_NewExpression_ : NEW _NewExpression

MemberExpression :

MemberExpression [ Expression ]
MemberExpression . IdentifierName
_SuperProperty
_MetaProperty
_NEW MemberExpression Arguments

PrimaryExpression :

THIS
IdentifierReference
Literal
ArrayLiteral
ObjectLiteral
FunctionExpression
ClassExpression
GeneratorExpression
RegularExpressionLiteral
TemplateLiteral

1.  Return FALSE.

_Expression_ :

_AssignmentExpression
Expression , AssignmentExpression

1.  Return HasProductionInTailPosition of _AssignmentExpression_ with
    argument _nonterminal_.

_ConditionalExpression_ : _LogicalORExpression_ ? _AssignmentExpression
: _AssignmentExpression_

1.  Let _has_ be HasProductionInTailPosition of the first
    _AssignmentExpression_ with argument _nonterminal_.

2.  If _has_ is TRUE, return TRUE.

3.  Return HasProductionInTailPosition of the second
    _AssignmentExpression_ with argument _nonterminal_.

_LogicalANDExpression_ : _LogicalANDExpression_ && _BitwiseORExpression

1.  Return HasProductionInTailPosition of _BitwiseORExpression_ with
    argument _nonterminal_.

_LogicalORExpression_ : _LogicalORExpression_ || _LogicalANDExpression

1.  Return HasProductionInTailPosition of _LogicalANDExpression_ with
    argument _nonterminal_.

CallExpression :

MemberExpression Arguments
CallExpression Arguments
CallExpression TemplateLiteral

1.  If this _CallExpression_ is _nonterminal_, return TRUE.

2.  Return FALSE.

MemberExpression :

MemberExpression TemplateLiteral

1.  If this _MemberExpression_ is _nonterminal_, return TRUE.

2.  Return FALSE.

_PrimaryExpression_ :
_CoverParenthesizedExpressionAndArrowParameterList

1.  Let _expr_ be CoveredParenthesizedExpression of
    _CoverParenthesizedExpressionAndArrowParameterList_.

2.  Return HasProductionInTailPosition of _expr_ with argument
    _nonterminal_.

ParenthesizedExpression :

( Expression )

1.  Return HasProductionInTailPosition of _Expression_ with argument
    _nonterminal_.

Runtime Semantics: PrepareForTailCall ( )

The abstract operation PrepareForTailCall performs the following steps:

1.  Let _leafContext_ be the running execution context.

2.  Suspend _leafContext_.

3.  Pop _leafContext_ from the execution context stack. The execution
    context now on the top of the stack becomes the running execution
    context.

4.  Assert: _leafContext_ has no further use. It will never be activated
    as the running execution context.

A tail position call must either release any transient internal
resources associated with the currently executing function execution
context before invoking the target function or reuse those resources in
support of the target function.

NOTE For example, a tail position call should only grow an
implementation’s activation record stack by the amount that the size of
the target function’s activation record exceeds the size of the calling
function’s activation record. If the target function’s activation record
is smaller, then the total size of the stack should decrease.



ECMASCRIPT LANGUAGE: SCRIPTS AND MODULES


Scripts

Syntax

Script :

ScriptBody~opt~

ScriptBody :

StatementList

Static Semantics: Early Errors

_ScriptBody_ : _StatementList

-   It is a Syntax Error if the LexicallyDeclaredNames of
    _StatementList_ contains any duplicate entries.

-   It is a Syntax Error if any element of the LexicallyDeclaredNames of
    _StatementList_ also occurs in the VarDeclaredNames of
    _StatementList_.

-   It is a Syntax Error if _StatementList_ Contains SUPER unless the
    source code containing SUPER is eval code that is being processed by
    a direct EVAL that is contained in function code that is not the
    function code of an _ArrowFunction_.

-   It is a Syntax Error if _StatementList_ Contains _NewTarget_ unless
    the source code containing _NewTarget_ is eval code that is being
    processed by a direct EVAL that is contained in function code that
    is not the function code of an _ArrowFunction_.

-   It is a Syntax Error if ContainsDuplicateLabels of _StatementList_
    with argument « » is TRUE.

-   It is a Syntax Error if ContainsUndefinedBreakTarget of
    _StatementList_ with argument « » is TRUE.

-   It is a Syntax Error if ContainsUndefinedContinueTarget of
    _StatementList_ with arguments « » and « » is TRUE.

Static Semantics: IsStrict

_ScriptBody_ : _StatementList

1.  If the DirectivePrologue of _StatementList_ contains a Use Strict
    Directive, return TRUE; otherwise, return FALSE.

Static Semantics: LexicallyDeclaredNames

See also: 13.1.5, 13.11.5, 13.12.6, 14.1.13, 14.2.10, 15.2.1.10.

_ScriptBody_ : _StatementList

1.  Return TopLevelLexicallyDeclaredNames of _StatementList_.

NOTE At the top level of a _Script_, function declarations are treated
like var declarations rather than like lexical declarations.

Static Semantics: LexicallyScopedDeclarations

See also: 13.1.6, 13.11.6, 13.12.7, 14.1.14, 14.2.11, 15.2.1.11,
15.2.3.8.

_ScriptBody_ : _StatementList

1.  Return TopLevelLexicallyScopedDeclarations of _StatementList_.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15,
14.2.12, 15.2.1.12.

_ScriptBody_ : _StatementList

1.  Return TopLevelVarDeclaredNames of _StatementList_.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16,
14.2.13, 15.2.1.13.

_ScriptBody_ : _StatementList

1.  Return TopLevelVarScopedDeclarations of _StatementList_.

Runtime Semantics: ScriptEvaluation

  With argument _realm_.

_Script_ : _ScriptBody_~opt~

1.  If _ScriptBody_ is not present, return NormalCompletion(empty).

2.  Let _globalEnv_ be _realm_.[[globalEnv]].

3.  Let _scriptCxt_ be a new ECMAScript code execution context.

4.  Set the Function of _scriptCxt_ to NULL.

5.  Set the Realm of _scriptCxt_ to _realm_.

6.  Set the VariableEnvironment of _scriptCxt_ to _globalEnv_.

7.  Set the LexicalEnvironment of _scriptCxt_ to _globalEnv_.

8.  Suspend the currently running execution context.

9.  Push _scriptCxt_ on to the execution context stack; _scriptCxt_ is
    now the running execution context.

10. Let _result_ be GlobalDeclarationInstantiation(_ScriptBody_,
    _globalEnv_).

11. If _result_.[[type]] is normal, then

    a.  Let _result_ be the result of evaluating _ScriptBody_.

12. If _result_.[[type]] is normal and _result_.[[value]] is empty, then

    a.  Let _result_ be NormalCompletion(UNDEFINED).

13. Suspend _scriptCxt_ and remove it from the execution context stack.

14. Assert: the execution context stack is not empty.

15. Resume the context that is now on the top of the execution context
    stack as the running execution context.

16. Return Completion(_result_).

Runtime Semantics: GlobalDeclarationInstantiation (script, env)

NOTE When an execution context is established for evaluating scripts,
declarations are instantiated in the current global environment. Each
global binding declared in the code is instantiated.

GlobalDeclarationInstantiation is performed as follows using arguments
_script_ and _env_. _script_ is the _ScriptBody_ for which the execution
context is being established. _env_ is the global lexical environment in
which bindings are to be created.

1.  Let _envRec_ be _env_’s EnvironmentRecord.

2.  Assert: _envRec_ is a global Environment Record.

3.  Let _lexNames_ be the LexicallyDeclaredNames of _script_.

4.  Let _varNames_ be the VarDeclaredNames of _script_.

5.  For each _name_ in _lexNames_, do

    a.  If _envRec._HasVarDeclaration(_name_) is TRUE, throw a
        SYNTAXERROR exception.

    b.  If _envRec._HasLexicalDeclaration(_name_) is TRUE, throw a
        SYNTAXERROR exception.

    c.  If _envRec._HasRestrictedGlobalProperty(_name_) is TRUE, throw a
        SYNTAXERROR exception.

6.  For each _name_ in _varNames_, do

    a.  If _envRec._HasLexicalDeclaration(_name_) is TRUE, throw a
        SYNTAXERROR exception.

7.  Let _varDeclarations_ be the VarScopedDeclarations of _script_.

8.  Let _functionsToInitialize_ be an empty List.

9.  Let _declaredFunctionNames_ be an empty List.

10. For each _d_ in _varDeclarations_, in reverse list order do

    a.  If _d_ is neither a _VariableDeclaration_ or a _ForBinding_,
        then

        i.  Assert: _d_ is either a _FunctionDeclaration_ or a
            _GeneratorDeclaration_.

        ii. NOTE If there are multiple _FunctionDeclarations_ for the
            same name, the last declaration is used.

        iii. Let _fn_ be the sole element of the BoundNames of _d._

        iv. If _fn_ is not an element of _declaredFunctionNames_, then

            1.  Let _fnDefinable_ be
                _envRec._CanDeclareGlobalFunction(_fn_).

            2.  If _fnDefinable_ is FALSE, throw TYPEERROR exception.

            3.  Append _fn_ to _declaredFunctionNames_.

            4.  Insert _d_ as the first element of
                _functionsToInitialize_.

11. Let _declaredVarNames_ be an empty List.

12. For each _d_ in _varDeclarations_, do

    a.  If _d_ is a _VariableDeclaration_ or a _ForBinding_, then

        i.  For each String _vn_ in the BoundNames of _d_, do

            1.  If _vn_ is not an element of _declaredFunctionNames_,
                then

                a.  Let _vnDefinable_ be
                    _envRec._CanDeclareGlobalVar(_vn_).

                b.  ReturnIfAbrupt(_vnDefinable_).

                c.  If _vnDefinable_ is FALSE, throw TYPEERROR
                    exception.

                d.  If _vn_ is not an element of _declaredVarNames_,
                    then

                    i.  Append _vn_ to _declaredVarNames_.

13. NOTE: No abnormal terminations occur after this algorithm step if
    the global object is an ordinary object. However, if the global
    object is a Proxy exotic object it may exhibit behaviours that cause
    abnormal terminations in some of the following steps.

14. Let _lexDeclarations_ be the LexicallyScopedDeclarations of
    _script_.

15. For each element _d_ in _lexDeclarations_ do

    a.  NOTE Lexically declared names are only instantiated here but not
        initialized.

    b.  For each element _dn_ of the BoundNames of _d_ do

        i.  If IsConstantDeclaration of _d_ is TRUE, then

            1.  Let _status_ be _envRec_.CreateImmutableBinding(_dn_,
                TRUE).

        ii. Else,

            1.  Let _status_ be _envRec_.CreateMutableBinding(_dn_,
                FALSE).

        iii. ReturnIfAbrupt(_status_).

16. For each production _f_ in _functionsToInitialize_, do

    a.  Let _fn_ be the sole element of the BoundNames of _f._

    b.  Let _fo_ be the result of performing InstantiateFunctionObject
        for _f_ with argument _env_.

    c.  Let _status_ be _envRec_.CreateGlobalFunctionBinding(_fn_, _fo_,
        FALSE).

    d.  ReturnIfAbrupt(_status_).

17. For each String _vn_ in _declaredVarNames_, in list order do

    a.  Let _status_ be _envRec._CreateGlobalVarBinding(_vn_, FALSE).

    b.  ReturnIfAbrupt(_status_).

18. Return NormalCompletion(empty)

NOTE Early errors specified in 15.1.1 prevent name conflicts between
function/var declarations and let/const/class declarations as well as
redeclaration of let/const/class bindings for declaration contained
within a single _Script_. However, such conflicts and redeclarations
that span more than one _Script_ are detected as runtime errors during
GlobalDeclarationInstantiation. If any such errors are detected, no
bindings are instantiated for the script. However, if the global object
is defined using Proxy exotic objects then the runtime tests for
conflicting declarations may be unreliable resulting in an abrupt
completion and some global declarations not being instantiated. If this
occurs, the code for the _Script_ is not evaluated.

Unlike explicit var or function declarations, properties that are
directly created on the global object result in global bindings that may
be shadowed by let/const/class declarations.

Runtime Semantics: ScriptEvaluationJob ( sourceText )

The job ScriptEvaluationJob with parameter _sourceText_ parses,
validates, and evaluates _sourceText_ as a _Script_.

1.  Assert: _sourceText_ is an ECMAScript source text (see clause 10).

2.  Parse _sourceText_ using _Script_ as the goal symbol and analyze the
    parse result for any Early Error conditions. If the parse was
    successful and no early errors were found, let _code_ be the
    resulting parse tree. Otherwise, let _code_ be an indication of one
    or more parsing errors and/or early errors. Parsing and early error
    detection may be interweaved in an implementation dependent manner.
    If more than one parse or early error is present, the number and
    ordering of reported errors is implementation dependent but at least
    one error must be reported.

3.  If _code_ is an error indication, then

    a.  Report or log the error(s) in an implementation dependent
        manner.

    b.  Let _status_ be NormalCompletion(UNDEFINED).

4.  Else,

    a.  Let _realm_ be the running execution context’s Realm.

    b.  Let _status_ be the result of ScriptEvaluation of _code_ with
        argument _realm_.

5.  NextJob Completion(_status_).

NOTE An implementation may parse a _sourceText_ as a _Script_ and
analyze it for Early Error conditions prior to the execution of the
ScriptEvaluationJob for that _sourceText_. However, the reporting of any
errors must be deferred until the ScriptEvaluationJob is actually
executed.


Modules

Syntax

Module :

ModuleBody~opt~

ModuleBody :

ModuleItemList

ModuleItemList :

ModuleItem
ModuleItemList ModuleItem

ModuleItem :

ImportDeclaration
ExportDeclaration
StatementListItem

Module Semantics

Static Semantics: Early Errors

_ModuleBody_ : _ModuleItemList

-   It is a Syntax Error if the LexicallyDeclaredNames of
    _ModuleItemList_ contains any duplicate entries.

-   It is a Syntax Error if any element of the LexicallyDeclaredNames of
    _ModuleItemList_ also occurs in the VarDeclaredNames of
    _ModuleItemList_.

-   It is a Syntax Error if the ExportedNames of _ModuleItemList_
    contains any duplicate entries.

-   It is a Syntax Error if any element of the ExportedBindings of
    _ModuleItemList_ does not also occur in either the VarDeclaredNames
    of _ModuleItemList_, or the LexicallyDeclaredNames of
    _ModuleItemList_.

-   It is a Syntax Error if _ModuleItemList_ Contains SUPER.

-   It is a Syntax Error if _ModuleItemList_ Contains _NewTarget_

-   It is a Syntax Error if ContainsDuplicateLabels of _ModuleItemList_
    with argument « » is TRUE.

-   It is a Syntax Error if ContainsUndefinedBreakTarget of
    _ModuleItemList_ with argument « » is TRUE.

-   It is a Syntax Error if ContainsUndefinedContinueTarget of
    _ModuleItemList_ with arguments « » and « » is TRUE.

NOTE The duplicate ExportedNames rule implies that multiple EXPORT
DEFAULT _ExportDeclaration_ items within a _ModuleBody_ is a Syntax
Error. Additional error conditions relating to conflicting or duplicate
declarations are checked during module linking prior to evaluation of a
_Module_. If any such errors are detected the _Module_ is not evaluated.

Static Semantics: ContainsDuplicateLabels

  With argument _labelSet_.

See also: 13.0.1, 13.1.2, 13.5.2, 13.6.1.1, 13.6.2.1, 13.6.3.2,
13.6.4.3, 13.10.2, 13.11.2, 13.12.2, 13.14.2.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _hasDuplicates_ be ContainsDuplicateLabels of _ModuleItemList
    with argument _labelSet_.

2.  If _hasDuplicates_ is TRUE return TRUE.

3.  Return ContainsDuplicateLabels of _ModuleItem_ with argument
    _labelSet._

ModuleItem :

ImportDeclaration
ExportDeclaration

1.  Return FALSE.

Static Semantics: ContainsUndefinedBreakTarget

  With argument _labelSet_.

See also: 13.0.2, 13.1.3, 13.5.3, 13.6.1.2, 13.6.2.2, 13.6.3.3,
13.6.4.4, 13.8.2, 13.10.3, 13.11.3, 13.12.3, 13.14.3.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of
    _ModuleItemList_ with argument _labelSet_.

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedBreakTarget of _ModuleItem_ with argument
    _labelSet._

ModuleItem :

ImportDeclaration
ExportDeclaration

1.  Return FALSE.

Static Semantics: ContainsUndefinedContinueTarget

  With arguments _iterationSet_ and _labelSet_.

See also: 13.0.3, 13.1.4, 13.5.4, 13.6.1.3, 13.6.2.3, 13.6.3.4,
13.6.4.5, 13.7.2, 13.10.4, 13.11.4, 13.12.4, 13.14.4.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of
    _ModuleItemList_ with arguments _iterationSet_ and « ».

2.  If _hasUndefinedLabels_ is TRUE, return TRUE.

3.  Return ContainsUndefinedContinueTarget of _ModuleItem_ with
    arguments _iterationSet_ and « »_._

ModuleItem :

ImportDeclaration
ExportDeclaration

1.  Return FALSE.

Static Semantics: ExportedBindings

See also: 15.2.3.3.

NOTE ExportedBindings are the locally bound names that are explicitly
associated with a _Module_’s ExportedNames.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _names_ be ExportedBindings of _ModuleItemList_.

2.  Append to _names_ the elements of the ExportedBindings of
    _ModuleItem._

3.  Return _names_.

ModuleItem :

ImportDeclaration
StatementListItem

1.  Return a new empty List.

Static Semantics: ExportedNames

See also: 15.2.3.4.

NOTE ExportedNames are the externally visible names that a _Module_
explicitly maps to one of its local name bindings.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _names_ be ExportedNames of _ModuleItemList_.

2.  Append to _names_ the elements of the ExportedNames of _ModuleItem.

3.  Return _names_.

_ModuleItem_ : _ExportDeclaration

1.  Return the ExportedNames of _ExportDeclaration_.

ModuleItem :

ImportDeclaration
StatementListItem

1.  Return a new empty List.

Static Semantics: ExportEntries

See also: 15.2.3.5.

_Module_ : [empty]

1.  Return a new empty List.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _entries_ be ExportEntries of _ModuleItemList_.

2.  Append to _entries_ the elements of the ExportEntries of
    _ModuleItem._

3.  Return _entries_.

ModuleItem :

ImportDeclaration
StatementListItem

1.  Return a new empty List.

Static Semantics: ImportEntries

See also: 15.2.2.3.

_Module_ : [empty]

1.  Return a new empty List.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _entries_ be ImportEntries of _ModuleItemList_.

2.  Append to _entries_ the elements of the ImportEntries of
    _ModuleItem._

3.  Return _entries_.

ModuleItem :

ExportDeclaration
StatementListItem

1.  Return a new empty List.

Static Semantics: ImportedLocalNames ( importEntries )

The abstract operation ImportedLocalNames with argument _importEntries_
creates a List of all of the local name bindings defined by a List of
ImportEntry Records (see Table 39)_._ ImportedLocalNames performs the
following steps:

1.  Let _localNames_ be a new empty List.

2.  For each ImportEntry Record _i_ in _importEntries_, do

    a.  Append _i_.[[LocalName]] to _localNames_.

3.  Return _localNames_.

1.  

Static Semantics: ModuleRequests

See also: 15.2.2.5,15.2.3.9.

_Module_ : [empty]

1.  Return a new empty List.

_ModuleItemList_ : _ModuleItem

1.  Return ModuleRequests of _ModuleItem_.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _moduleNames_ be ModuleRequests of _ModuleItemList_.

2.  Let _additionalNames_ be ModuleRequests of _ModuleItem.

3.  Append to _moduleNames_ each element of _additionalNames_ that is
    not already an element of _moduleNames._

4.  Return _moduleNames_.

_ModuleItem_ : _StatementListItem

1.  Return a new empty List.

Static Semantics: LexicallyDeclaredNames

See also: 13.1.5, 13.11.5, 13.12.6, 14.1.13, 14.2.10, 15.1.3.

NOTE The LexicallyDeclaredNames of a _Module_ includes the names of all
of its imported bindings.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _names_ be LexicallyDeclaredNames of _ModuleItemList_.

2.  Append to _names_ the elements of the LexicallyDeclaredNames of
    _ModuleItem._

3.  Return _names_.

_ModuleItem_ : _ImportDeclaration

1.  Return the BoundNames of _ImportDeclaration_.

_ModuleItem_ : _ExportDeclaration

1.  If _ExportDeclaration_ is EXPORT _VariableStatement_, return a new
    empty List.

2.  Return the BoundNames of _ExportDeclaration_.

_ModuleItem_ : _StatementListItem

1.  Return LexicallyDeclaredNames of _StatementListItem_.

NOTE At the top level of a _Module_, function declarations are treated
like lexical declarations rather than like var declarations.

Static Semantics: LexicallyScopedDeclarations

See also: 13.1.6, 13.11.6, 13.12.7, 14.1.14, 14.2.11, 15.1.4, 15.2.3.8.

_Module_ : [empty]

1.  Return a new empty List.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _declarations_ be LexicallyScopedDeclarations of
    _ModuleItemList_.

2.  Append to _declarations_ the elements of the
    LexicallyScopedDeclarations of _ModuleItem._

3.  Return _declarations_.

_ModuleItem_ : _ImportDeclaration

1.  Return a new empty List.

Static Semantics: VarDeclaredNames

See also: 13.0.5, 13.1.11, 13.2.2.2, 13.5.5, 13.6.1.4, 13.6.2.4,
13.6.3.5, 13.6.4.7, 13.10.5, 13.11.7, 13.12.12, 13.14.5, 14.1.15,
14.2.12, 15.1.5.

_Module_ : [empty]

1.  Return an empty List.

_ModuleItemList_: _ModuleItemList_ _ModuleItem

1.  Let _names_ be VarDeclaredNames of _ModuleItemList_.

2.  Append to _names_ the elements of the VarDeclaredNames of
    _ModuleItem._

3.  Return _names_.

_ModuleItem_ : _ImportDeclaration

1.  Return an empty List.

_ModuleItem_ : _ExportDeclaration

1.  If _ExportDeclaration_ is EXPORT _VariableStatement_, return
    BoundNames of _ExportDeclaration_.

2.  Return a new empty List.

Static Semantics: VarScopedDeclarations

See also: 13.0.6, 13.1.12, 13.2.2.3, 13.5.6, 13.6.1.5, 13.6.2.5,
13.6.3.6, 13.6.4.8, 13.10.6, 13.11.8, 13.12.13, 13.14.6, 14.1.16,
14.2.13, 15.1.6.

_Module_ : [empty]

1.  Return a new empty List.

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _declarations_ be VarScopedDeclarations of _ModuleItemList_.

2.  Append to _declarations_ the elements of the VarScopedDeclarations
    of _ModuleItem._

3.  Return _declarations_.

_ModuleItem_ : _ImportDeclaration

1.  Return a new empty List.

_ModuleItem_ : _ExportDeclaration

1.  If _ExportDeclaration_ is EXPORT _VariableStatement_, return
    VarScopedDeclarations of _VariableStatement_.

2.  Return a new empty List.

Abstract Module Records

A Module Record encapsulates structural information about the imports
and exports of a single module. This information is used to link the
imports and exports of sets of connected modules. A Module Record
includes four fields that are only used when evaluating a module.

For specification purposes Module Record values are values of the Record
specification type and can be thought of as existing in a simple
object-oriented hierarchy where Module Record is an abstract class with
concrete subclasses. This specification only defines a single Module
Record concrete subclass name Source Text Module Record. Other
specifications and implementations may define additional Module Record
subclass corresponding to alternative module definition facilities that
they defined.

Module Record defines the fields listed in Table 36. All Module
Definition subclasses include at least those fields. Module Record also
defines the abstract method list in Table 37. All Module definition
subclasses must provide concrete implementations of these abstract
methods.

Table 36 — Module Record Fields

  ----------------- --------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------
  _FIELD NAME_      _VALUE TYPE_                      _MEANING_
  [[Realm]]         Realm Record | UNDEFINED          The Realm within which this module was created. UNDEFINED if not yet assigned.
  [[Environment]]   Lexical Environment | UNDEFINED   The Lexical Environment containing the top level bindings for this module. This field is set when the module is instantiated.
  [[Namespace]]     Object | UNDEFINED                The Module Namespace Object (26.3) if one has been created for this module. Otherwise UNDEFINED.
  [[Evaluated]]     Boolean                           Initially FALSE, TRUE if evaluation of this module has started. Remains TRUE when evaluation completes, even if it is an abrupt completion.
  ----------------- --------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------

Table 37 — Abstract Methods of Module Records

  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _METHOD_                                               _PURPOSE_
  ------------------------------------------------------ --------------------------------------------------------------------------------------------------------------------------------------------------------------
  GetExportedNames(exportStarSet)                        Return a list of all names that are either directly or indirectly exported from this module.

  ResolveExport(exportName, resolveSet, exportStarSet)   Return the binding of a name exported by this modules. Bindings are represented by a Record of the form {[[module]]: Module Record, [[bindingName]]: String}

  ModuleDeclarationInstantiation()                       Transitively resolve all module dependencies and create a module Environment Record for the module.

  ModuleEvaluation()                                     Do nothing if this module has already been evaluated. Otherwise, transitively evaluate all module dependences of this module and then evaluate this module.
                                                         
                                                         ModuleDeclarationInstantiation must be completed prior to invoking this method.
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Source Text Module Records

A Source Text Module Record is used to represent information about a
module that was defined from ECMAScript source text (10) that was parsed
using the goal symbol _Module_. Its fields contain digested information
about the names that are imported by the module and its concrete methods
use this digest to link, instantiate, and evaluate the module.

In addition to the fields, defined in Table 36, Source Test Module
Records have the additional fields listed in Table 38. Each of these
fields initially has the value UNDEFINED.

Table 38 — Additional Fields of Source Text Module Records

  --------------------------- ----------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _FIELD NAME_                _VALUE TYPE_                  _MEANING_
  [[ECMAScriptCode]]          a parse result                The result of parsing the source text of this module using _Module_ as the goal symbol.
  [[RequestedModules]]        List of String                A List of all the _ModuleSpecifier_ strings used by the module represented by this record to request the importation of a module. The List is source code occurrence ordered.
  [[ImportEntries]]           List of ImportEntry Records   A List of ImportEntry records derived from the code of this module.
  [[LocalExportEntries]]      List of ExportEntry Records   A List of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.
  [[IndirectExportEntries]]   List of ExportEntry Records   A List of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module.
  [[StarExportEntries]]       List of ExportEntry Records   A List of ExportEntry records derived from the code of this module that correspond to export * declarations that occur within the module.
  --------------------------- ----------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

An ImportEntry Record is a Record that digests information about a
single declarative import. Each ImportEntry Record has the fields
defined in Table 39:

 Table 39 — ImportEntry Record Fields

  ------------------- -------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _FIELD NAME_        _VALUE TYPE_   _MEANING_
  [[ModuleRequest]]   String         String value of the _ModuleSpecifier_ of the _ImportDeclaration_.
  [[ImportName]]      String         The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value "*" indicates that the import request is for the target module’s namespace object.
  [[LocalName]]       String         The name that is used to locally access the imported value from within the importing module.
  ------------------- -------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

NOTE Table 40 gives examples of ImportEntry records fields used to
represent the syntactic import forms:

Table 40 (Informative) — Import Forms Mappings to ImportEntry Records

  ----------------------------- --------------------------------------- ---------------- ---------------
  _IMPORT STATEMENT FORM_       [[MODULEREQUEST]]                       [[IMPORTNAME]]   [[LOCALNAME]]
  IMPORT V FROM "MOD";          "MOD"                                   "DEFAULT"        "V"
  IMPORT * AS NS FROM "MOD";    "MOD"                                   "*"              "NS"
  IMPORT {X} FROM "MOD";        "MOD"                                   "X"              "X"
  IMPORT {X AS V} FROM "MOD";   "MOD"                                   "X"              "V"
  IMPORT "MOD";                 An ImportEntry Record is not created.
  ----------------------------- --------------------------------------- ---------------- ---------------

An ExportEntry Record is a Record that digests information about a
single declarative export. Each ExportEntry Record has the fields
defined in Table 41:

Table 41 — ExportEntry Record Fields

  ------------------- --------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _FIELD NAME_        _VALUE TYPE_    _MEANING_
  [[ExportName]]      String          The name used to export this binding by this module.
  [[ModuleRequest]]   String | null   The String value of the _ModuleSpecifier_ of the _ExportDeclaration_. NULL if the _ExportDeclaration_ does not have a _ModuleSpecifier_.
  [[ImportName]]      String | null   The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. NULL if the _ExportDeclaration_ does not have a _ModuleSpecifier_. "*" indicates that the export request is for all exported bindings.
  [[LocalName]]       String | null   The name that is used to locally access the exported value from within the importing module. NULL if the exported value is not locally accessible from within the module.
  ------------------- --------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

NOTE Table 42 gives examples of the ExportEntry record fields used to
represent the syntactic export forms:

Table 42 (Informative) — Export Forms Mappings to ExportEntry Records

  -------------------------------- ---------------- ------------------- ---------------- ---------------
  _EXPORT STATEMENT FORM_          [[EXPORTNAME]]   [[MODULEREQUEST]]   [[IMPORTNAME]]   [[LOCALNAME]]
  EXPORT VAR V;                    "V"              NULL                NULL             "V"
  EXPORT DEFAULT FUNCTION F(){};   "DEFAULT"        NULL                NULL             "F"
  EXPORT DEFAULT FUNCTION(){};     "DEFAULT"        NULL                NULL             "*DEFAULT*"
  EXPORT DEFAULT 42;               "DEFAULT"        NULL                NULL             "*DEFAULT*"
  EXPORT {X};                      "X"              NULL                NULL             "X"
  EXPORT {V AS X};                 "X"              NULL                NULL             "V"
  EXPORT {X} FROM "MOD";           "X"              "MOD"               "X"              NULL
  EXPORT {V AS X} FROM "MOD";      "X"              "MOD"               "V"              NULL
  EXPORT * FROM "MOD";             NULL             "MOD"               "*"              NULL
  -------------------------------- ---------------- ------------------- ---------------- ---------------

The following definitions specify the required concrete methods and
other abstract operations for Source Text Module Records

Runtime Semantics: ParseModule ( sourceText )

The abstract operation ParseModule with argument _sourceText_ creates a
Source Text Module Record based upon the result of parsing _sourceText_
as a _Module._ ParseModule performs the following steps:

1.  Assert: _sourceText_ is an ECMAScript source text (see clause 10).

2.  Parse _sourceText_ using _Module_ as the goal symbol and analyze the
    parse result for any Early Error conditions. If the parse was
    successful and no early errors were found, let _body_ be the
    resulting parse tree. Otherwise, let _body_ be an indication of one
    or more parsing errors and/or early errors. Parsing and early error
    detection may be interweaved in an implementation dependent manner.
    If more than one parse or early error is present, the number and
    ordering of reported errors is implementation dependent but at least
    one error must be reported.

3.  If _body_ is an abrupt completion or error indication, then

    a.  Throw a SYNTAXERROR exception.

4.  Let _requestedModules_ be the ModuleRequests of _body_.

5.  Let _importEntries_ be ImportEntries of _body_.

6.  Let _importedBoundNames_ be ImportedLocalNames(_importEntries_).

7.  Let _indirectExportEntries_ be a new empty List.

8.  Let _localExportEntries_ be a new empty List.

9.  Let _starExportEntries_ be a new empty List.

10. Let _exportEntries_ be ExportEntries of _body_.

11. For each record _ee_ in _exportEntries_, do

    a.  If _ee_.[[ModuleRequest]] is NULL, then

        i.  If _ee_.[[LocalName]] is not an element of
            _importedBoundNames_, then

            1.  Append _ee_ to _localExportEntries_.

        ii. Else

            1.  Let _ie_ be ImportEntryFor(_ee_.[[LocalName]]).

            2.  If _ie_.[[ImportName]] is "*", then

                a.  Assert: this is a re-export of an imported module
                    namespace object.

                b.  Append _ee_ to _localExportEntries_.

            3.  Else, this is a re-export of a single name

                a.  Append to _indirectExportEntries_ the Record
                    {[[ModuleRequest]]: _ie_.[[ModuleRequest]],
                    [[ImportName]]: _ie_. [[ImportName]], [[LocalName]]:
                    NULL, [[ExportName]]: _ee_.[[ExportName }.

    b.  Else, if _ee_.[[ImportName]] is "*", then

        i.  Append _ee_ to _starExportEntries_.

    c.  Else,

        i.  Append _ee_ to _indirectExportEntries_.

12. Return Source Text Module Record {[[Realm]]: UNDEFINED,
    [[Environment]]: UNDEFINED, [[Namespace]]: UNDEFINED, [[Evaluated]]:
    FALSE, [[ECMAScriptCode]]: _body_, [[RequestedModules]]:
    _requestedModules_, [[ImportEntries]]: _importEntries_,
    [[LocalExportEntries]]: _localExportEntries_, [[StarExportEntries]]:
    _starExportEntries_, [[IndirectExportEntries]]:
    _indirectExportEntries_}.

NOTE An implementation may parse module source text and analyze it for
Early Error conditions prior to the evaluation of ParseModule for that
module source text. However, the reporting of any errors must be
deferred until the point where this specification actually performs
ParseModule upon that source text.

GetExportedNames( exportStarSet ) Concrete Method

The GetExportedNames concrete method of a Source Text Module Record with
argument _exportStarSet_ performs the following steps:

1.  Let _module_ be this Source Text Module Record.

2.  If _exportStarSet_ contains _module_, then

    a.  Assert: We’ve reached the starting point of an import *
        circularity.

    b.  Return a new empty List.

3.  Append _module_ to _exportStarSet_.

4.  Let _exportedNames_ be a new empty List.

5.  For each ExportEntry Record _e_ in _module_.[[LocalExportEntries]],
    do

    a.  Assert: _module_ provides the direct binding for this export.

    b.  Append _e_.[[ExportName]] to _exportedNames_.

6.  For each ExportEntry Record _e_ in
    _module_.[[IndirectExportEntries]], do

    a.  Assert: _module_ imports a specific binding for this export.

    b.  Append _e_.[[ExportName]] to _exportedNames_.

7.  For each ExportEntry Record _e_ in _module_.[[StarExportEntries]],
    do

    a.  Let _requestedModule_ be HostResolveImportedModule(_module_,
        _e_.[[ModuleRequest]]).

    b.  ReturnIfAbrupt(_requestedModule_).

    c.  Let _starNames_ be
        _requestedModule._GetExportedNames(_exportStarSet_).

    d.  For each element _n_ of _starNames_, do

        i.  If SameValue(_n_, "DEFAULT") is FALSE, then

            1.  If _n_ is not an element of _exportedNames_, then

                a.  Append _n_ to _exportedNames_.

8.  Return _exportedNames_.

NOTE GetExportedNames does not filter out or throw an exception for
names that have ambiguous star export bindings.

ResolveExport( exportName, resolveSet, exportStarSet ) Concrete Method

The ResolveExport concrete method of a Source Text Module Record with
arguments _exportName_, _resolveSet_, and _exportStarSet_ performs the
following steps:

1.  Let _module_ be this Source Text Module Record.

2.  For each Record {[[module]], [[exportName]]} _r_ in _resolveSet_,
    do:

    a.  If _module_ and _r_.[[module]] are the same Module Record and
        SameValue(_exportName_, _r_.[[exportName]]) is TRUE, then

        i.  Assert: this is a circular import request.

        ii. Return NULL.

3.  Append the Record {[[module]]: _module_, [[exportName]]:
    _exportName_} to _resolveSet_.

4.  For each ExportEntry Record _e_ in _module_.[[LocalExportEntries]],
    do

    a.  If SameValue(_exportName_, _e_.[[ExportName]]) is TRUE, then

        i.  Assert: _module_ provides the direct binding for this
            export.

        ii. Return Record{[[module]]: _module,_ [[bindingName]]:
            _e_.[[LocalName]]}.

5.  For each ExportEntry Record _e_ in
    _module_.[[IndirectExportEntries]], do

    a.  If SameValue(_exportName_, _e_.[[ExportName]]) is TRUE, then

        i.  Assert: _module_ imports a specific binding for this export.

        ii. Let _importedModule_ be HostResolveImportedModule(_module_,
            _e_.[[ModuleRequest]]).

        iii. ReturnIfAbrupt(_importedModule_).

        iv. Let _indirectResolution_ be
            _importedModule._ResolveExport(_e_.[[ImportName]],
            _resolveSet_, _exportStarSet_).

        v.  ReturnIfAbrupt(_indirectResolution_).

        vi. If _indirectResolution_ is not NULL, return
            _indirectResolution_.

6.  If SameValue(_exportName_, "DEFAULT") is TRUE, then

    a.  Assert: A DEFAULT export was not explicitly defined by this
        module.

    b.  Throw a SYNTAXERROR exception.

    c.  NOTE A DEFAULT export cannot be provided by an EXPORT *.

7.  If _exportStarSet_ contains _module_, then return NULL.

8.  Append _module_ to _exportStarSet_.

9.  Let _starResolution_ be NULL.

10. For each ExportEntry Record _e_ in _module_.[[StarExportEntries]],
    do

    a.  Let _importedModule_ be HostResolveImportedModule(_module_,
        _e_.[[ModuleRequest]]).

    b.  ReturnIfAbrupt(_importedModule_).

    c.  Let _resolution_ be _importedModule_.ResolveExport(_exportName_,
        _resolveSet_, _exportStarSet_).

    d.  ReturnIfAbrupt(_resolution_).

    e.  If _resolution_ is "AMBIGUOUS", return "AMBIGUOUS".

    f.  If _resolution_ is not NULL, then

        i.  If _starResolution_ is NULL, let _starResolution_ be
            _resolution_.

        ii. Else

            1.  Assert: there is more than one * import that includes
                the requested name.

            2.  If _resolution_.[[module]] and
                _starResolution_.[[module]] are not the same Module
                Record or SameValue(_resolution._[[exportName]],
                _starResolution_.[[exportName]]) is FALSE, return
                "AMBIGUOUS".

11. Return _starResolution_.

NOTE ResolveExport attempts to resolve an imported binding to the actual
defining module and local binding name. The defining module may be the
module represented by the Module Record this method was invoked on or
some other module that is imported by that module. The parameter
_resolveSet_ is use to detect unresolved circular import/export paths.
If a pair consisting of specific module record and _exportName_ is
reached that is already in _resolveSet_, an import circularity has been
encountered. Before recursively calling ResolveExport, a pair consisting
of _module_ and _exportName_ is added to _resolveSet_.

If a defining module is found a Record {[[module]]_,_ [[bindingName]]}
is returned. This record identifies the resolved binding of the
originally requested export. If no definition was found or the request
is found to be circular, NULL is returned. If the request is found to be
ambiguous, the string "AMBIGUOUS" is returned.

ModuleDeclarationInstantiation( ) Concrete Method

The ModuleDeclarationInstantiation concrete method of a Source Text
Module Record performs the following steps:

1.  Let _module_ be this Source Text Module Record.

2.  Let _realm_ be _module_.[[Realm]].

3.  Assert: _realm_ is not UNDEFINED.

4.  Let _code_ be _module_.[[ECMAScriptCode]].

5.  If _module_.[[Environment]] is not UNDEFINED, return
    NormalCompletion(empty).

6.  Let _env_ be NewModuleEnvironment(_realm_.[[globalEnv]]).

7.  Set _module_.[[Environment]] to _env_.

8.  For each String _required_ that is an element of
    _module_.[[RequestedModules]] do,

    a.  NOTE: Before instantiating a module, all of the modules it
        requested must be available. An implementation may perform this
        test at any time prior to this point,

    b.  Let _requiredModule_ be HostResolveImportedModule(_module_,
        _required_).

    c.  ReturnIfAbrupt(_requiredModule_).

    d.  Let _status_ be
        _requiredModule_.ModuleDeclarationInstantiation().

    e.  ReturnIfAbrupt(_status_).

9.  For each ExportEntry Record _e_ in
    _module_.[[IndirectExportEntries]], do

    a.  Let _resolution_ be _module_.ResolveExport(_e_.[[ExportName]],
        «‍ », «‍ »).

    b.  ReturnIfAbrupt(_resolution_).

    c.  If _resolution_ is NULL or _resolution_ is "AMBIGUOUS", throw a
        SYNTAXERROR exception.

10. Assert: all named exports from _module_ are resolvable.

11. Let _envRec_ be _env_’s EnvironmentRecord.

12. For each ImportEntry Record _in_ in _module_.[[ImportEntries]], do

    a.  Let _importedModule_ be HostResolveImportedModule(_module_,
        _in_.[[ModuleRequest]]).

    b.  ReturnIfAbrupt(_importedModule_).

    c.  If _in_.[[ImportName]] is "*", then

        i.  Let _namespace_ be GetModuleNamespace(_importedModule_).

        ii. ReturnIfAbrupt(_module_).

        iii. Let _status_ be
            _envRec_.CreateImmutableBinding(_in_.[[LocalName]], TRUE).

        iv. Assert: _status_ is not an abrupt completion.

        v.  Call _envRec_.InitializeBinding(_in_.[[LocalName]],
            _namespace_).

    d.  else,

        i.  Let _resolution_ be
            _importedModule_.ResolveExport(_in_.[[ImportName]], « », «‍
            »).

        ii. ReturnIfAbrupt(_resolution_).

        iii. If _resolution_ is NULL or _resolution_ is "AMBIGUOUS",
            throw a SYNTAXERROR exception.

        iv. Call _envRec_.CreateImportBinding(_in_.[[LocalName]],
            _resolution_.[[module]], _resolution_.[[bindingName]]).

13. Let _varDeclarations_ be the VarScopedDeclarations of _code_.

14. For each element _d_ in _varDeclarations_ do

    a.  For each element _dn_ of the BoundNames of _d_ do

        i.  Let _status_ be _envRec_.CreateMutableBinding(_dn_, FALSE).

        ii. Assert: _status_ is not an abrupt completion.

        iii. Call _envRec_.InitializeBinding(_dn_, UNDEFINED).

15. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _code_.

16. For each element _d_ in _lexDeclarations_ do

    a.  For each element _dn_ of the BoundNames of _d_ do

        i.  If IsConstantDeclaration of _d_ is TRUE, then

            1.  Let _status_ be _envRec_.CreateImmutableBinding(_dn_,
                TRUE).

        ii. Else,

            1.  Let _status_ be _envRec_.CreateMutableBinding(_dn_,
                FALSE).

        iii. Assert: _status_ is not an abrupt completion.

        iv. If _d_ is a _GeneratorDeclaration_ production or a
            _FunctionDeclaration_ production, then

            1.  Let _fo_ be the result of performing
                InstantiateFunctionObject for _d_ with argument _env_.

            2.  Call _envRec_.InitializeBinding(_dn_, _fo_).

17. Return NormalCompletion(empty).

ModuleEvaluation() Concrete Method

The ModuleEvaluation concrete method of a Source Text Module Record
performs the following steps:

1.  Let _module_ be this Source Text Module Record.

2.  Assert: ModuleDeclarationInstantiation has already been invoked on
    _module_ and successfully completed.

3.  Assert: _module_.[[Realm]] is not UNDEFINED.

4.  If _module._[[Evaluated]] is TRUE, return UNDEFINED.

5.  Set _module._[[Evaluated]] to TRUE.

6.  For each String _required_ that is an element of
    _module_.[[RequestedModules]] do,

    a.  Let _requiredModule_ be HostResolveImportedModule(_module_,
        _required_).

    b.  ReturnIfAbrupt(_requiredModule_).

    c.  Let _status_ be _requiredModule._ModuleEvaluation().

    d.  ReturnIfAbrupt(_status_).

7.  Let _moduleCxt_ be a new ECMAScript code execution context.

8.  Set the Function of _moduleCxt_ to NULL.

9.  Set the Realm of _moduleCxt_ to _module_.[[Realm]].

10. Assert: _module_ has been linked and declarations in its module
    environment have been instantiated.

11. Set the VariableEnvironment of _moduleCxt_ to
    _module_.[[Environment]].

12. Set the LexicalEnvironment of _moduleCxt_ to
    _module_.[[Environment]].

13. Suspend the currently running execution context.

14. Push _moduleCxt_ on to the execution context stack; _moduleCxt_ is
    now the running execution context.

15. Let _result_ be the result of evaluating
    _module_.[[ECMAScriptCode]].

16. Suspend _moduleCxt_ and remove it from the execution context stack.

17. Resume the context that is now on the top of the execution context
    stack as the running execution context.

18. Return Completion(_result_).

Runtime Semantics: HostResolveImportedModule (referencingModule, specifier )

HostResolveImportedModule is an implementation defined abstract
operation that provides the concrete Module Record subclass instance
that corresponds to the _ModuleSpecifier_ String, _specifier,_ occurring
within the context of the module represented by the Module Record
_referencingModule_.

The implementation of HostResolveImportedModule must conform to the
following requirements:

-   The normal return value must be an instance of a concrete subclass
    of Module Record.

-   If a Module Record corresponding to the pair _referencingModule_,
    _specifier_ does not exist or cannot be created, an exception must
    be thrown.

-   This operation must be idempotent if it completes normally. Each
    time it is called with a specific _referencingModule_, _specifier_
    pair as arguments it must return the same Module Record instance.

Multiple different _referencingModule_, _specifier_ pairs may map to the
same Module Record instance. The actual mapping semantic is
implementation defined but typically a normalization process is applied
to _specifier_ as part of the mapping process. A typical normalization
process would include actions such as alphabetic case folding and
expansion of relative and abbreviated path specifiers.

Runtime Semantics: GetModuleNamespace( module )

The abstract operation GetModuleNamespace called with argument _module_
performs the following steps:

1.  Assert: _module_ is an instance of a concrete subclass of Module
    Record.

2.  Let _namespace_ be _module_.[[Namespace]].

3.  If _namespace_ is UNDEFINED, then

    a.  Let _exportedNames_ be _module_.GetExportedNames(« »).

    b.  ReturnIfAbrupt(_exportedNames_).

    c.  Let _unambiguousNames_ be a new empty List.

    d.  For each _name_ that is an element of _exportedNames_,

        i.  Let _resolution_ be _module_.ResolveExport(_name_, « », «
            »).

        ii. ReturnIfAbrupt(_resolution_).

        iii. If _resolution_ is NULL, throw a SYNTAXERROR exception.

        iv. If _resolution_ is not "AMBIGUOUS", append _name_ to
            _unambiguousNames_.

    e.  Let _namespace_ be ModuleNamespaceCreate(_module_,
        _unambiguousNames_).

4.  Return _namespace_.

Runtime Semantics: TopLevelModuleEvaluationJob ( sourceText) 

A TopLevelModuleEvaluationJob with parameter _sourceText_ is a job that
parses, validates, and evaluates _sourceText_ as a _Module_.

1.  Assert: _sourceText_ is an ECMAScript source text (see clause 10).

2.  Let _realm_ be the running execution context’s Realm.

3.  Let _m_ be ParseModule(_sourceText_).

4.  If _m_ is an abrupt completion or any other implementation defined
    error indication, then

    a.  Report or log the error(s) in an implementation dependent
        manner.

    b.  NextJob NormalCompletion(UNDEFINED).

5.  Set _m_.[[Realm]] to _realm_.

6.  Let _status_ be _m_.ModuleDeclarationInstantiation().

7.  If _status_ is not an abrupt completion, then

    a.  Assert: all dependencies of _m_ have been transitively resolved
        and _m_ is ready for evaluation.

    b.  Let _status_ be _m_.ModuleEvaluation().

8.  NextJob Completion(_status_).

NOTE An implementation may parse a _sourceText_ as a _Module,_ analyze
it for Early Error conditions, and instantiate it prior to the execution
of the TopLevelModuleEvaluationJob for that _sourceText_. An
implementation may also resolve, pre-parse and pre-analyze, and
pre-instantiate module dependencies of _sourceText_. However, the
reporting of any errors detected by these actions must be deferred until
the TopLevelModuleEvaluationJob is actually executed.

Runtime Semantics: Evaluation

_Module_ : [empty]

1.  Return NormalCompletion(UNDEFINED).

_ModuleBody_ : _ModuleItemList

1.  Let _result_ be the result of evaluating _ModuleItemList_.

2.  If _result_.[[type]] is normal and _result_.[[value]] is empty, then

    a.  Return NormalCompletion(UNDEFINED).

3.  Return Completion(_result_).

_ModuleItemList_ : _ModuleItemList_ _ModuleItem

1.  Let _sl_ be the result of evaluating _ModuleItemList_.

2.  ReturnIfAbrupt(_sl_).

3.  Let _s_ be the result of evaluating _ModuleItem_.

4.  If _s_.[[type]] is throw, return Completion(_s_).

5.  If _s_.[[value]] is empty, let _V_ = _sl_.[[value]], otherwise let
    _V_ = _s_.[[value]].

6.  Return Completion{[[type]]: _s_.[[type]], [[value]]: _V_,
    [[target]]: _s_.[[target]]}.

NOTE Steps 5 and 6 of the above algorithm ensure that the value of a
_ModuleItemList_ is the value of the last value producing item in the
_ModuleItemList_.

_ModuleItem_ : _ImportDeclaration

1.  Return NormalCompletion(empty).

Imports

Syntax

ImportDeclaration :

IMPORT ImportClause FromClause ;
IMPORT ModuleSpecifier ;

ImportClause :

ImportedDefaultBinding
NameSpaceImport
NamedImports
ImportedDefaultBinding , NameSpaceImport
ImportedDefaultBinding , NamedImports

ImportedDefaultBinding :

ImportedBinding

NameSpaceImport :

* AS ImportedBinding

NamedImports :

{ }
{ ImportsList }
{ ImportsList , }

FromClause :

FROM ModuleSpecifier

ImportsList :

ImportSpecifier
ImportsList , ImportSpecifier

ImportSpecifier :

ImportedBinding
IdentifierName AS ImportedBinding

ModuleSpecifier :

StringLiteral

ImportedBinding :

BindingIdentifier

Static Semantics: Early Errors

_ModuleItem_ : _ImportDeclaration

-   It is a Syntax Error if the BoundNames of _ImportDeclaration_
    contains any duplicate entries.

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.1.3,
14.2.2, 14.4.2, 14.5.2, 15.2.3.2.

_ImportDeclaration_ : IMPORT _ImportClause_ _FromClause_ ;

1.  Return the BoundNames of _ImportClause_.

_ImportDeclaration_ : IMPORT _ModuleSpecifier_ ;

1.  Return a new empty List.

_ImportClause_ : _ImportedDefaultBinding_, _NameSpaceImport

1.  Let _names_ be the BoundNames of _ImportedDefaultBinding_.

2.  Append to _names_ the elements of the BoundNames of
    _NameSpaceImport_.

3.  Return _names_.

_ImportClause_ : _ImportedDefaultBinding_, _NamedImports

1.  Let _names_ be the BoundNames of _ImportedDefaultBinding_.

2.  Append to _names_ the elements of the BoundNames of _NamedImports_.

3.  Return _names_.

_NamedImports_ : { }

1.  Return a new empty List.

_ImportsList_ : _ImportsList_ , _ImportSpecifier

1.  Let _names_ be the BoundNames of _ImportsList_.

2.  Append to _names_ the elements of the BoundNames of
    _ImportSpecifier_.

3.  Return _names_.

_ImportSpecifier_ : _IdentifierName_ AS _ImportedBinding

1.  Return the BoundNames of _ImportedBinding_.

Static Semantics: ImportEntries

See also: 15.2.1.8.

_ImportDeclaration_ : IMPORT _ImportClause_ _FromClause_ ;

1.  Let _module_ be the sole element of ModuleRequests of _FromClause_.

2.  Return ImportEntriesForModule of _ImportClause_ with argument
    _module_.

_ImportDeclaration_ : IMPORT _ModuleSpecifier_ ;

1.  Return a new empty List.

Static Semantics: ImportEntriesForModule

  With parameter _module_.

_ImportClause_ : _ImportedDefaultBinding_, _NameSpaceImport

1.  Let _entries_ be ImportEntriesForModule of _ImportedDefaultBinding
    with argument _module_.

2.  Append to _entries_ the elements of the ImportEntriesForModule of
    _NameSpaceImport_ with argument _module_.

3.  Return _entries_.

_ImportClause_ : _ImportedDefaultBinding_ , _NamedImports

1.  Let _entries_ be ImportEntriesForModule of _ImportedDefaultBinding
    with argument _module_.

2.  Append to _entries_ the elements of the ImportEntriesForModule of
    _NamedImports_ with argument _module_.

3.  Return _entries_.

_ImportedDefaultBinding_: _ImportedBinding

1.  Let _localName_ be the sole element of BoundNames of
    _ImportedBinding_.

2.  Let _defaultEntry_ be the Record {[[ModuleRequest]]: _module_,
    [[ImportName]]: "DEFAULT", [[LocalName]]: _localName_ }.

3.  Return a new List containing _defaultEntry.

_NameSpaceImport_ : * AS _ImportedBinding

1.  Let _localName_ be the StringValue of _ImportedBinding_.

2.  Let _entry_ be the Record {[[ModuleRequest]]: _module_,
    [[ImportName]]: "*", [[LocalName]]: _localName_ }.

3.  Return a new List containing _entry_.

_NamedImports_ : { }

1.  Return a new empty List.

_ImportsList_ : _ImportsList_ , _ImportSpecifier

1.  Let _specs_ be the ImportEntriesForModule of _ImportsList_ with
    argument _module_.

2.  Append to _specs_ the elements of the ImportEntriesForModule of
    _ImportSpecifier_ with argument _module_.

3.  Return _specs_.

_ImportSpecifier_ : _ImportedBinding

1.  Let _localName_ be the sole element of BoundNames of
    _ImportedBinding_.

2.  Let _entry_ be the Record {[[ModuleRequest]]: _module_,
    [[ImportName]]: _localName_ , [[LocalName]]: _localName_ }.

3.  Return a new List containing _entry_.

_ImportSpecifier_ : _IdentifierName_ AS _ImportedBinding

1.  Let _importName_ be the StringValue of _IdentifierName_.

2.  Let _localName_ be the StringValue of _ImportedBinding_.

3.  Let _entry_ be the Record {[[ModuleRequest]]: _module_,
    [[ImportName]]: _importName_, [[LocalName]]: _localName_ }.

4.  Return a new List containing _entry_.

Static Semantics: ModuleRequests

See also: 15.2.1.9,15.2.3.9.

_ImportDeclaration_ : IMPORT _ImportClause_ _FromClause_ ;

1.  Return ModuleRequests of _FromClause_.

_ModuleSpecifier_ : _StringLiteral

1.  Return a List containing the StringValue of _StringLiteral_.

Exports

Syntax

ExportDeclaration :

EXPORT * FromClause ;
EXPORT ExportClause FromClause ;
EXPORT ExportClause ;
EXPORT VariableStatement
EXPORT Declaration
EXPORT DEFAULT HoistableDeclaration~[Default]~
EXPORT DEFAULT ClassDeclaration~[Default]~
EXPORT DEFAULT [lookahead ∉ { FUNCTION, CLASS }]
AssignmentExpression~[In]~ ;

ExportClause :

{ }
{ ExportsList }
{ ExportsList , }

ExportsList :

ExportSpecifier
ExportsList , ExportSpecifier

ExportSpecifier :

IdentifierName
IdentifierName AS IdentifierName

Static Semantics: Early Errors

_ExportDeclaration_ : EXPORT _ExportClause_ ;

-   For each _IdentifierName_ _n_ in ReferencedBindings of
    _ExportClause_: It is a Syntax Error if StringValue of _n_ is a
    _ReservedWord_ or if the StringValue of _n_ is one of: "IMPLEMENTS",
    "INTERFACE", "LET", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC",
    "STATIC", or "YIELD".

NOTE The above rule means that each ReferencedBindings of _ExportClause_
is treated as an _IdentifierReference_.

Static Semantics: BoundNames

See also: 12.1.2, 13.2.1.2, 13.2.2.1, 13.2.3.1, 13.6.4.2, 14.1.3,
14.2.2, 14.4.2, 14.5.2, 15.2.2.2.

ExportDeclaration :

EXPORT * FromClause ;
EXPORT ExportClause FromClause ;
EXPORT ExportClause ;

1.  Return a new empty List.

_ExportDeclaration_ : EXPORT _VariableStatement 

1.  Return the BoundNames of _VariableStatement_.

_ExportDeclaration_ : EXPORT _Declaration

1.  Return the BoundNames of _Declaration_.

_ExportDeclaration_ : EXPORT DEFAULT _HoistableDeclaration

1.  Let _declarationNames_ be the BoundNames of _HoistableDeclaration_.

2.  If _declarationNames_ does not include the element "*DEFAULT*",
    append "*DEFAULT*" to _declarationNames_.

3.  Return _declarationNames_.

_ExportDeclaration_ : EXPORT DEFAULT _ClassDeclaration

1.  Let _declarationNames_ be the BoundNames of _ClassDeclaration_.

2.  If _declarationNames_ does not include the element "*DEFAULT*",
    append "*DEFAULT*" to _declarationNames_.

3.  Return _declarationNames_.

_ExportDeclaration_ : EXPORT DEFAULT _AssignmentExpression_ ;

1.  Return «"*DEFAULT*"».

Static Semantics: ExportedBindings

See also: 15.2.1.5.

ExportDeclaration :

EXPORT ExportClause FromClause ;
EXPORT * FromClause ;

1.  Return a new empty List.

_ExportDeclaration_ : EXPORT _ExportClause_ ;

1.  Return the ExportedBindings of _ExportClause_.

_ExportDeclaration_ : EXPORT _VariableStatement

1.  Return the BoundNames of _VariableStatement_.

_ExportDeclaration_ : EXPORT _Declaration

1.  Return the BoundNames of _Declaration_.

_ExportDeclaration_ : EXPORT DEFAULT _HoistableDeclaration

_ExportDeclaration_ : EXPORT DEFAULT _ClassDeclaration

_ExportDeclaration_ : EXPORT DEFAULT _AssignmentExpression_ ;

1.  Return the BoundNames of this _ExportDeclaration_.

_ExportClause_ : { }

1.  Return a new empty List.

_ExportsList_ : _ExportsList_ , _ExportSpecifier

1.  Let _names_ be the ExportedBindings of _ExportsList_.

2.  Append to _names_ the elements of the ExportedBindings of
    _ExportSpecifier_.

3.  Return _names_.

_ExportSpecifier_ : _IdentifierName

1.  Return a List containing the StringValue of _IdentifierName_.

_ExportSpecifier_ : _IdentifierName_ AS _IdentifierName

1.  Return a List containing the StringValue of the first
    _IdentifierName_.

Static Semantics: ExportedNames

See also: 15.2.1.6.

_ExportDeclaration_ : EXPORT * _FromClause_ ;

1.  Return a new empty List.

ExportDeclaration :

EXPORT ExportClause FromClause ;
EXPORT ExportClause ;

1.  Return the ExportedNames of _ExportClause_.

_ExportDeclaration_ : EXPORT _VariableStatement

1.  Return the BoundNames of _VariableStatement_.

_ExportDeclaration_ : EXPORT _Declaration

1.  Return the BoundNames of _Declaration_.

_ExportDeclaration_ : EXPORT DEFAULT _HoistableDeclaration

_ExportDeclaration_ : EXPORT DEFAULT _ClassDeclaration

_ExportDeclaration_ : EXPORT DEFAULT _AssignmentExpression_ ;

1.  Return «"DEFAULT"».

_ExportClause_ : { }

1.  Return a new empty List.

_ExportsList_ : _ExportsList_, _ExportSpecifier

1.  Let _names_ be the ExportedNames of _ExportsList_.

2.  Append to _names_ the elements of the ExportedNames of
    _ExportSpecifier_.

3.  Return _names_.

_ExportSpecifier_ : _IdentifierName

1.  Return a List containing the StringValue of _IdentifierName_.

_ExportSpecifier_ : _IdentifierName_ AS _IdentifierName

1.  Return a List containing the StringValue of the second
    _IdentifierName_.

Static Semantics: ExportEntries

See also: 15.2.1.7.

ExportDeclaration : EXPORT * FromClause ;

1.  Let _module_ be the sole element of ModuleRequests of _FromClause_.

2.  Let _entry_ be the Record {[[ModuleRequest]]: _module_,
    [[ImportName]]: "*", [[LocalName]]: NULL, [[ExportName]]: NULL }.

3.  Return a new List containing _entry_.

ExportDeclaration : EXPORT ExportClause FromClause ;

1.  Let _module_ be the sole element of ModuleRequests of _FromClause_.

2.  Return ExportEntriesForModule of _ExportClause_ with argument
    _module_.

ExportDeclaration : EXPORT ExportClause ;

1.  Return ExportEntriesForModule of _ExportClause_ with argument NULL.

ExportDeclaration : EXPORT VariableStatement

1.  Let _entries_ be a new empty List.

2.  Let _names_ be the BoundNames of _VariableStatement_.

3.  Repeat for each _name_ in _names,

    a.  Append to _entries_ the Record {[[ModuleRequest]]: NULL,
        [[ImportName]]: NULL, [[LocalName]]: _name_, [[ExportName]]:
        _name_ }.

4.  Return _entries_.

ExportDeclaration : EXPORT Declaration

1.  Let _entries_ be a new empty List.

2.  Let _names_ be the BoundNames of _Declaration_.

3.  Repeat for each _name_ in _names,

    a.  Append to _entries_ the Record {[[ModuleRequest]]: NULL,
        [[ImportName]]: NULL, [[LocalName]]: _name_, [[ExportName]]:
        _name_ }.

4.  Return _entries_.

_ExportDeclaration_ : EXPORT DEFAULT _HoistableDeclaration

1.  Let _names_ be BoundNames of _HoistableDeclaration_.

2.  Let _localName_ be the sole element of _names_.

3.  Return a new List containing the Record {[[ModuleRequest]]: NULL,
    [[ImportName]]: NULL, [[LocalName]]: _localName_, [[ExportName]]:
    "DEFAULT"}.

_ExportDeclaration_ : EXPORT DEFAULT _ClassDeclaration

1.  Let _names_ be BoundNames of _ClassDeclaration_.

2.  Let _localName_ be the sole element of _names_.

3.  Return a new List containing the Record {[[ModuleRequest]]: NULL,
    [[ImportName]]: NULL, [[LocalName]]: _localName_, [[ExportName]]:
    "DEFAULT"}.

_ExportDeclaration_ : EXPORT DEFAULT _AssignmentExpression_;

1.  Let _entry_ be the Record {[[ModuleRequest]]: NULL, [[ImportName]]:
    NULL, [[LocalName]]: "*DEFAULT*", [[ExportName]]: "DEFAULT"}.

2.  Return a new List containing _entry_.

NOTE "*DEFAULT*" is used within this specification as a synthetic name
for anonymous default export values.

Static Semantics: ExportEntriesForModule

  With parameter _module_.

_ExportClause_ : { }

1.  Return a new empty List.

_ExportsList_ : _ExportsList_ , _ExportSpecifier

1.  Let _specs_ be the ExportEntriesForModule of _ExportsList_ with
    argument _module_.

2.  Append to _specs_ the elements of the ExportEntriesForModule of
    _ExportSpecifier_ with argument _module_.

3.  Return _specs_.

_ExportSpecifier_ : _IdentifierName

1.  Let _sourceName_ be the StringValue of _IdentifierName_.

2.  If _module_ is NULL, then

    a.  Let _localName_ be _sourceName_.

    b.  Let _importName_ be NULL.

3.  Else

    a.  Let _localName_ be NULL.

    b.  Let _importName_ be _sourceName_.

4.  Return a new List containing the Record {[[ModuleRequest]]:
    _module_, [[ImportName]]: _importName_, [[LocalName]]: _localName_,
    [[ExportName]]: _sourceName_ }.

_ExportSpecifier_ : _IdentifierName_ AS _IdentifierName

1.  Let _sourceName_ be the StringValue of the first _IdentifierName_.

2.  Let _exportName_ be the StringValue of the second _IdentifierName_.

3.  If _module_ is NULL, then

    a.  Let _localName_ be _sourceName_.

    b.  Let _importName_ be NULL.

4.  Else

    a.  Let _localName_ be NULL.

    b.  Let _importName_ be _sourceName_.

5.  Return a new List containing the Record {[[ModuleRequest]]:
    _module_, [[ImportName]]: _importName_, [[LocalName]]: _localName_,
    [[ExportName]]: _exportName_ }.

Static Semantics: IsConstantDeclaration

See also: 13.2.1.3, 14.1.10, 14.4.8, 14.5.7.

ExportDeclaration :

EXPORT * FromClause ;
EXPORT ExportClause FromClause ;
EXPORT ExportClause ;
EXPORT DEFAULT AssignmentExpression ;

1.  Return FALSE.

NOTE It is not necessary to treat EXPORT DEFAULT _AssignmentExpression_
as a constant declaration because there is no syntax that permits
assignment to the internal bound name used to reference a module’s
default object.

Static Semantics: LexicallyScopedDeclarations

See also: 13.1.6, 13.11.6, 13.12.7, 14.1.14, 14.2.11, 15.1.4, 15.2.1.11.

ExportDeclaration :

EXPORT * FromClause ;

EXPORT ExportClause FromClause ;

EXPORT ExportClause ;

EXPORT _VariableStatement_

1.  Return a new empty List.

ExportDeclaration : EXPORT Declaration

1.  Return a new List containing DeclarationPart of _Declaration_.

_ExportDeclaration_ : EXPORT DEFAULT _HoistableDeclaration

1.  Return a new List containing DeclarationPart of
    _HoistableDeclaration_.

_ExportDeclaration_ : EXPORT DEFAULT _ClassDeclaration

1.  Return a new List containing _ClassDeclaration_.

_ExportDeclaration_ : EXPORT DEFAULT _AssignmentExpression_ ;

1.  Return a new List containing this _ExportDeclaration_.

Static Semantics: ModuleRequests

See also: 15.2.1.9, 15.2.2.5.

_ExportDeclaration_ : EXPORT * _FromClause_ ;

_ExportDeclaration_ : EXPORT _ExportClause_ _FromClause_ ;

1.  Return the ModuleRequests of _FromClause_.

ExportDeclaration :

EXPORT ExportClause ;
EXPORT VariableStatement
EXPORT Declaration
EXPORT DEFAULT HoistableDeclaration~
~EXPORT DEFAULT ClassDeclaration
EXPORT DEFAULT AssignmentExpression ;

1.  Return a new empty List.

Static Semantics: ReferencedBindings

_ExportClause_ : { }

1.  Return a new empty List.

_ExportsList_ : _ExportsList_, _ExportSpecifier

1.  Let _names_ be the ReferencedBindings of _ExportsList_.

2.  Append to _names_ the elements of the ReferencedBindings of
    _ExportSpecifier_.

3.  Return _names_.

_ExportSpecifier_ : _IdentifierName

1.  Return a List containing the _IdentifierName_.

_ExportSpecifier_ : _IdentifierName_ AS _IdentifierName

1.  Return a List containing the first _IdentifierName_.

Runtime Semantics: Evaluation

ExportDeclaration :

EXPORT * FromClause ;
EXPORT ExportClause FromClause ;
EXPORT ExportClause ;

1.  Return NormalCompletion(empty).

_ExportDeclaration_ : EXPORT _VariableStatement 

1.  Return the result of evaluating _VariableStatement_.

_ExportDeclaration_ : EXPORT _Declaration

1.  Return the result of evaluating _Declaration_.

_ExportDeclaration_ : EXPORT DEFAULT _HoistableDeclaration

1.  Return the result of evaluating _HoistableDeclaration_.

_ExportDeclaration_ : EXPORT DEFAULT _ClassDeclaration

1.  Let _value_ be the result of BindingClassDeclarationEvaluation of
    _ClassDeclaration_.

2.  ReturnIfAbrupt(_value_).

3.  Let _className_ be the sole element of BoundNames of
    _ClassDeclaration_.

4.  If _className_ is "*DEFAULT*", then

    a.  Let _hasNameProperty_ be HasOwnProperty(_value_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform SetFunctionName(_value_,
        "DEFAULT").

    d.  Let _env_ be the running execution context’s LexicalEnvironment.

    e.  Let _status_ be InitializeBoundName("*DEFAULT*", _value_,
        _env_).

    f.  ReturnIfAbrupt(_status_).

5.  Return NormalCompletion(empty).

_ExportDeclaration_ : EXPORT DEFAULT _AssignmentExpression_ ;

1.  Let _rhs_ be the result of evaluating _AssignmentExpression_.

2.  Let _value_ be GetValue(_rhs_).

3.  ReturnIfAbrupt(_value_).

4.  If IsAnonymousFunctionDefinition(_AssignmentExpression_) is TRUE,
    then

    a.  Let _hasNameProperty_ be HasOwnProperty(_value_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform SetFunctionName(_value_,
        "DEFAULT").

5.  Let _env_ be the running execution context’s LexicalEnvironment.

6.  Let _status_ be InitializeBoundName("*DEFAULT*", _value_, _env_).

7.  Return NormalCompletion(empty).



ERROR HANDLING AND LANGUAGE EXTENSIONS


An implementation must report most errors at the time the relevant
ECMAScript language construct is evaluated. An _early error_ is an error
that can be detected and reported prior to the evaluation of any
construct in the _Script_ containing the error. The presence of an early
error prevents the evaluation of the construct. An implementation must
report early errors in a _Script_ as part of the ScriptEvaluationJob for
that _Script_. Early errors in a _Module_ are reported at the point when
the _Module_ would be evaluated and the _Module_ is never initialized.
Early errors in EVAL code are reported at the time EVAL is called and
prevent evaluation of the EVAL code. All errors that are not early
errors are runtime errors.

An implementation must report as an early error any occurrence of a
condition that is listed in a “Static Semantics: Early Errors” subclause
of this specification.

An implementation shall not treat other kinds of errors as early errors
even if the compiler can prove that a construct cannot execute without
error under any circumstances. An implementation may issue an early
warning in such a case, but it should not report the error until the
relevant construct is actually executed.

An implementation shall report all errors as specified, except for the
following:

-   Except as restricted in 16.1, an implementation may extend _Script_
    syntax, _Module_ syntax, and regular expression pattern or flag
    syntax. To permit this, all operations (such as calling EVAL, using
    a regular expression literal, or using the FUNCTION or REGEXP
    constructor) that are allowed to throw SYNTAXERROR are permitted to
    exhibit implementation-defined behaviour instead of throwing
    SYNTAXERROR when they encounter an implementation-defined extension
    to the script syntax or regular expression pattern or flag syntax.

-   Except as restricted in 16.1, an implementation may provide
    additional types, values, objects, properties, and functions beyond
    those described in this specification. This may cause constructs
    (such as looking up a variable in the global scope) to have
    implementation-defined behaviour instead of throwing an error (such
    as REFERENCEERROR).

An implementation may define behaviour other than throwing RANGEERROR
for TOFIXED, TOEXPONENTIAL, and TOPRECISION when the _fractionDigits_ or
_precision_ argument is outside the specified range.


Forbidden Extensions

An implementation must not extend this specification in the following
ways:

-   Other than as defined in this specification, ECMAScript Function
    objects defined using syntactic constructors in strict mode code
    must not be created with own properties named "CALLER" or
    "ARGUMENTS" other than those that are created by applying the
    AddRestrictedFunctionProperties abstract operation (9.2.7) to the
    function. Such own properties also must not be created for function
    objects defined using an _ArrowFunction_, _MethodDefinition_,
    _GeneratorDeclaration_, _GeneratorExpression_, _ClassDeclaration_,
    or _ClassExpression_ regardless of whether the definition is
    contained in strict mode code. Built-in functions, strict mode
    functions created using the FUNCTION constructor, generator
    functions created using the GENERATOR constructor, and functions
    created using the BIND method also must not be created with such own
    properties.

-   If an implementation extends non-strict or built-in function objects
    with an own property named "CALLER" the value of that property, as
    observed using [[Get]] or [[GetOwnProperty]], must not be a strict
    function object. If it is an accessor property, the function that is
    the value of the property’s [[Get]] attribute must never return a
    strict function when called.

-   The behaviour of the following methods must not be extended except
    as specified in ECMA-402: OBJECT.PROTOTYPE.TOLOCALESTRING,
    ARRAY.PROTOTYPE.TOLOCALESTRING, NUMBER.PROTOTYPE.TOLOCALESTRING,
    DATE.PROTOTYPE.TOLOCALEDATESTRING, DATE.PROTOTYPE.TOLOCALESTRING,
    DATE.PROTOTYPE.TOLOCALETIMESTRING, STRING.PROTOTYPE.LOCALECOMPARE.

-   The RegExp pattern grammars in 21.2.1 and B.1.4 must not be extended
    to recognize any of the source characters A-Z or a-z as
    _IdentityEscape_~[U]~ when the U grammar parameter is present.

-   The Syntactic Grammar must not be extended in any manner that allows
    the token : to immediate follow source text that matches the
    _BindingIdentifier_ nonterminal symbol.

-   When processing strict mode code, the syntax of _NumericLiteral_
    must not be extended to include _LegacyOctalIntegerLiteral_ as
    defined in B.1.1.

-   _TemplateCharacter_ (11.8.6) must not be extended to include
    _LegacyOctalEscapeSequence_ as defined in B.1.2.

-   When processing strict mode code, the extensions defined in B.3.1,
    B.3.2, B.3.3, and B.3.4 must not be supported.

-   When parsing for the _Module_ goal symbol, the lexical grammar
    extensions defined in B.1.3 must not be supported.



ECMASCRIPT STANDARD BUILT-IN OBJECTS 


There are certain built-in objects available whenever an ECMAScript
_Script_ or _Module_ begins execution. One, the global object, is part
of the lexical environment of the executing program. Others are
accessible as initial properties of the global object or indirectly as
properties of accessible built-in objects.

Unless specified otherwise, a built-in object that is callable as a
function is a built-in Function object with the characteristics
described in 9.3. Unless specified otherwise, the [[Extensible]]
internal slot of a built-in object initially has the value TRUE. Every
built-in Function object has a [[Realm]] internal slot whose value is
the code Realm for which the object was initially created.

Many built-in objects are functions: they can be invoked with arguments.
Some of them furthermore are constructors: they are functions intended
for use with the NEW operator. For each built-in function, this
specification describes the arguments required by that function and the
properties of that function object. For each built-in constructor, this
specification furthermore describes properties of the prototype object
of that constructor and properties of specific object instances returned
by a NEW expression that invokes that constructor.

Unless otherwise specified in the description of a particular function,
if a built-in function or constructor is given fewer arguments than the
function is specified to require, the function or constructor shall
behave exactly as if it had been given sufficient additional arguments,
each such argument being the UNDEFINED value. Such missing arguments are
considered to be “not present” and may be identified in that manner by
specification algorithms. In the description of a particular function,
the terms “THIS value” and “NewTarget” have the meanings given in 9.3.

Unless otherwise specified in the description of a particular function,
if a built-in function or constructor described is given more arguments
than the function is specified to allow, the extra arguments are
evaluated by the call and then ignored by the function. However, an
implementation may define implementation specific behaviour relating to
such arguments as long as the behaviour is not the throwing of a
TYPEERROR exception that is predicated simply on the presence of an
extra argument.

NOTE Implementations that add additional capabilities to the set of
built-in functions are encouraged to do so by adding new functions
rather than adding new parameters to existing functions.

Unless otherwise specified every built-in function and every built-in
constructor has the Function prototype object, which is the initial
value of the expression FUNCTION.PROTOTYPE (19.2.3), as the value of its
[[Prototype]] internal slot.

Unless otherwise specified every built-in prototype object has the
Object prototype object, which is the initial value of the expression
OBJECT.PROTOTYPE (19.1.3), as the value of its [[Prototype]] internal
slot, except the Object prototype object itself.

Built-in function objects that are not identified as constructors do not
implement the [[Construct]] internal method unless otherwise specified
in the description of a particular function.

Unless otherwise specified, each built-in function defined in this
specification is created as if by calling the CreateBuiltinFunction
abstract operation (9.3.3).

Every built-in Function object, including constructors, has a LENGTH
property whose value is an integer. Unless otherwise specified, this
value is equal to the largest number of named arguments shown in the
subclause headings for the function description, including optional
parameters. However, rest parameters shown using the form “...name” are
not included in the default argument count.

NOTE For example, the function object that is the initial value of the
slice property of the String prototype object is described under the
subclause heading “String.prototype.slice (start, end)” which shows the
two named arguments start and end; therefore the value of the length
property of that Function object is 2.

Unless otherwise specified, the LENGTH property of a built-in Function
object has the attributes { [[Writable]]: FALSE, [[Enumerable]]: FALSE,
[[Configurable]]: TRUE }.

Every built-in Function object, including constructors, that is not
identified as an anonymous function has a NAME property whose value is a
String. Unless otherwise specified, this value is the name that is given
to the function in this specification. For functions that are specified
as properties of objects, the name value is the property name string
used to access the function. Functions that are specified as get or set
accessor functions of built-in properties have "GET " or "SET "
prepended to the property name string. The value of the NAME property is
explicitly specified for each built-in functions whose property key is a
symbol value.

Unless otherwise specified, the NAME property of a built-in Function
object, if it exists, has the attributes { [[Writable]]: FALSE,
[[Enumerable]]: FALSE, [[Configurable]]: TRUE }.

Every other data property described in clauses 18 through 26 and in
Annex B.2 has the attributes { [[Writable]]: TRUE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE } unless otherwise specified.

Every accessor property described in clauses 18 through 26 and in Annex
B.2 has the attributes {[[Enumerable]]: FALSE, [[Configurable]]: TRUE }
unless otherwise specified. If only a get accessor function is
described, the set accessor function is the default value, UNDEFINED. If
only a set accessor is described the get accessor is the default value,
UNDEFINED.



THE GLOBAL OBJECT 


The unique _global object_ is created before control enters any
execution context.

The global object does not have a [[Construct]] internal method; it is
not possible to use the global object as a constructor with the NEW
operator.

The global object does not have a [[Call]] internal method; it is not
possible to invoke the global object as a function.

The value of the [[Prototype]] internal slot of the global object is
implementation-dependent.

In addition to the properties defined in this specification the global
object may have additional host defined properties. This may include a
property whose value is the global object itself; for example, in the
HTML document object model the WINDOW property of the global object is
the global object itself.


Value Properties of the Global Object

Infinity

The value of INFINITY is +∞ (see 6.1.6). This property has the
attributes { [[Writable]]: FALSE, [[Enumerable]]: FALSE,
[[Configurable]]: FALSE }.

NaN

The value of NAN is NAN (see 6.1.6). This property has the attributes {
[[Writable]]: FALSE, [[Enumerable]]: FALSE, [[Configurable]]: FALSE }.

undefined

The value of UNDEFINED is UNDEFINED (see 6.1.1). This property has the
attributes { [[Writable]]: FALSE, [[Enumerable]]: FALSE,
[[Configurable]]: FALSE }.


Function Properties of the Global Object

eval (x)

The EVAL function is the %eval% intrinsic object. When the EVAL function
is called with one argument _x_, the following steps are taken:

1.  Let _evalRealm_ be the value of the active function object’s
    [[Realm]] internal slot.

2.  Let _strictCaller_ be FALSE.

3.  Let _directEval_ be FALSE.

4.  Return PerformEval(_x_, _evalRealm_, _strictCaller_, _directEval_).

Runtime Semantics: PerformEval( x, evalRealm, strictCaller, direct)

The abstract operation PerformEval with arguments _x_, _evalRealm_,
_strictCaller_, and _direct_ performs the following steps:

1.  Assert: If _direct_ is FALSE then _strictCaller_ is also FALSE.

2.  If Type(_x_) is not String, return _x_.

3.  Let _script_ be the ECMAScript code that is the result of parsing
    _x_, interpreted as UTF-16 encoded Unicode text as described in
    6.1.4_,_ for the goal symbol _Script_. If the parse fails or any
    early errors are detected, throw a SYNTAXERROR exception (but see
    also clause 16).

4.  If _script_ Contains _ScriptBody_ is FALSE, return UNDEFINED.

5.  Let _body_ be the _ScriptBody_ of _script.

6.  If _strictCaller_ is TRUE, let _strictEval_ be TRUE.

7.  Else, let _strictEval_ be IsStrict of _script_.

8.  Let _ctx_ be the running execution context. If _direct_ is TRUE
    _ctx_ will be the execution context that performed the direct EVAL.
    If _direct_ is FALSE _ctx_ will be the execution context for the
    invocation of the eval function.

9.  If _direct_ is TRUE, then

    i.  Let _lexEnv_ be NewDeclarativeEnvironment(_ctx’s_
        LexicalEnvironment).

    ii. Let _varEnv_ be _ctx’s_ VariableEnvironment.

10. Else,

    a.  Let _lexEnv_ be
        NewDeclarativeEnvironment(_evalRealm_.[[globalEnv]]).

    b.  Let _varEnv_ be _evalRealm_.[[globalEnv]].

11. If _strictEval_ is TRUE, let _varEnv_ be _lexEnv_.

12. If _ctx_ is not already suspended, Suspend _ctx_.

13. Let _evalCxt_ be a new ECMAScript code execution context.

14. Set the _evalCxt’s_ Realm to _evalRealm_.

15. Set the _evalCxt’s_ VariableEnvironment to _varEnv_.

16. Set the _evalCxt’s_ LexicalEnvironment to _lexEnv_.

17. Push _evalCxt_ on to the execution context stack; _evalCxt_ is now
    the running execution context.

18. Let _result_ be EvalDeclarationInstantiation(_body_, _varEnv_,
    _lexEnv_, _strictEval_).

19. If _result_.[[type]] is normal, then

    a.  Let _result_ be the result of evaluating _body_.

20. If _result_.[[type]] is normal and _result_.[[value]] is empty, then

    a.  Let _result_ be NormalCompletion(UNDEFINED).

21. Suspend _evalCxt_ and remove it from the execution context stack.

22. Resume the context that is now on the top of the execution context
    stack as the running execution context.

23. Return Completion(_result_).

NOTE The eval code cannot instantiate variable or function bindings in
the variable environment of the calling context that invoked the eval if
the calling context is evaluating formal parameter initializers or if
either the code of the calling context or the eval code is strict code.
Instead such bindings are instantiated in a new VariableEnvironment that
is only accessible to the eval code. Bindings introduced by LET, CONST,
or CLASS declarations are always instantiated in a new
LexicalEnvironment.

Runtime Semantics: EvalDeclarationInstantiation( body, varEnv, lexEnv, strict)

When the abstract operation EvalDeclarationInstantiation is called with
arguments _body_, _varEnv_, _lexEnv_, and _strict_ the following steps
are taken:

1.  Let _lexNames_ be the LexicallyDeclaredNames of _body_.

2.  Let _varNames_ be the VarDeclaredNames of _body_.

3.  Let _varDeclarations_ be the VarScopedDeclarations of _body_.

4.  Let _lexEnvRec_ be _lexEnv_’s EnvironmentRecord.

5.  Let _varEnvRec_ be _varEnv_’s EnvironmentRecord.

6.  If _strict_ is FALSE, then

    a.  If _varEnvRec_ is a global Environment Record, then

        i.  For each _name_ in _varNames_, do

            1.  If _varEnvRec._HasLexicalDeclaration(_name_) is TRUE,
                throw a SYNTAXERROR exception.

            2.  NOTE: EVAL will not create a global var declaration that
                would be shadowed by a global lexical declaration.

    b.  Let _thisLex_ be _lexEnv_.

    c.  Assert: the following loop will terminate.

    d.  Repeat while _thisLex_ is not the same as _varEnv,_

        i.  Let _thisEnvRec_ be _thisLex_’s EnvironmentRecord.

        ii. If _thisEnvRec_ is not an object Environment Record, then

            1.  NOTE: The environment of with statements cannot contain
                any lexical declaration so it doesn’t need to be checked
                for var/let hoisting conflicts.

            2.  For each _name_ in _varNames_, do

                a.  If _thisEnvRec._HasBinding(_name_) is TRUE, then

                    i.  Throw a SYNTAXERROR exception.

                b.  NOTE: A direct EVAL will not hoist var declaration
                    over a like-named lexical declaration.

        iii. Let _thisLex_ be _thisLex_’s outer environment reference.

7.  Let _functionsToInitialize_ be an empty List.

8.  Let _declaredFunctionNames_ be an empty List.

9.  For each _d_ in _varDeclarations_, in reverse list order do

    a.  If _d_ is neither a _VariableDeclaration_ or a _ForBinding_,
        then

        i.  Assert: _d_ is either a _FunctionDeclaration_ or a
            _GeneratorDeclaration_.

        ii. NOTE If there are multiple _FunctionDeclarations_ for the
            same name, the last declaration is used.

        iii. Let _fn_ be the sole element of the BoundNames of _d._

        iv. If _fn_ is not an element of _declaredFunctionNames_, then

            1.  If _varEnvRec_ is a global Environment Record, then

                a.  Let _fnDefinable_ be
                    _varEnvRec_.CanDeclareGlobalFunction(_fn_).

                b.  If _fnDefinable_ is FALSE, throw SYNTAXERROR
                    exception.

            2.  Append _fn_ to _declaredFunctionNames_.

            3.  Insert _d_ as the first element of
                _functionsToInitialize_.

10. Let _declaredVarNames_ be an empty List.

11. For each _d_ in _varDeclarations_, do

    a.  If _d_ is a _VariableDeclaration_ or a _ForBinding_, then

        i.  For each String _vn_ in the BoundNames of _d_, do

            1.  If _vn_ is not an element of _declaredFunctionNames_,
                then

                a.  If _varEnvRec_ is a global Environment Record, then

                    i.  Let _vnDefinable_ be
                        _varEnvRec._CanDeclareGlobalVar(_vn_).

                    ii. ReturnIfAbrupt(_vnDefinable_).

                    iii. If _vnDefinable_ is FALSE, throw SYNTAXERROR
                        exception.

                b.  If _vn_ is not an element of _declaredVarNames_,
                    then

                    i.  Append _vn_ to _declaredVarNames_.

12. NOTE: No abnormal terminations occur after this algorithm step
    unless _varEnvRec_ is a global Environment Record and the global
    object is a Proxy exotic object.

13. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _body_.

14. For each element _d_ in _lexDeclarations_ do

    a.  NOTE Lexically declared names are only instantiated here but not
        initialized.

    b.  For each element _dn_ of the BoundNames of _d_ do

        i.  If IsConstantDeclaration of _d_ is TRUE, then

            1.  Let _status_ be _lexEnvRec_.CreateImmutableBinding(_dn_,
                TRUE).

        ii. Else,

            1.  Let _status_ be _lexEnvRec_.CreateMutableBinding(_dn_,
                FALSE).

        iii. ReturnIfAbrupt(_status_).

15. For each production _f_ in _functionsToInitialize_, do

    a.  Let _fn_ be the sole element of the BoundNames of _f._

    b.  Let _fo_ be the result of performing InstantiateFunctionObject
        for _f_ with argument _lexEnv_.

    c.  If _varEnvRec_ is a global Environment Record, then

        i.  Let _status_ be
            _varEnvRec_.CreateGlobalFunctionBinding(_fn_, _fo_, TRUE).

        ii. ReturnIfAbrupt(_status_).

    d.  Else,

        i.  Let _bindingExists_ be _varEnvRec_.HasBinding(_fn_).

        ii. If _bindingExists_ is FALSE, then

            1.  Let _status_ be _varEnvRec_.CreateMutableBinding(_fn_,
                TRUE).

            2.  Assert: _status_ is not an abrupt completion because of
                validation preceding step 12.

            3.  Let _status_ be _varEnvRec_.InitializeBinding(_fn_,
                _fo_).

        iii. Else,

            1.  Let _status_ be _varEnvRec_.SetMutableBinding(_fn_,
                _fo_, FALSE).

        iv. Assert: _status_ is not an abrupt completion.

16. For each String _vn_ in _declaredVarNames_, in list order do

    a.  If _varEnvRec_ is a global Environment Record, then

        i.  Let _status_ be _varEnvRec._CreateGlobalVarBinding(_vn_,
            TRUE).

        ii. ReturnIfAbrupt(_status_).

    b.  Else,

        i.  Let _bindingExists_ be _varEnvRec_.HasBinding(_vn_).

        ii. If _bindingExists_ is FALSE, then

            1.  Let _status_ be _varEnvRec_.CreateMutableBinding(_vn_,
                TRUE).

            2.  Assert: _status_ is not an abrupt completion because of
                validation preceding step 12.

            3.  Let _status_ be _varEnvRec_.InitializeBinding(_vn_,
                UNDEFINED).

            4.  Assert: _status_ is not an abrupt completion.

17. Return NormalCompletion(empty)

NOTE An alternative version of this algorithm is described in B.3.5.

isFinite (number)

The ISFINITE function is the %isFinite% intrinsic object. When the
ISFINITE function is called with one argument _x_, the following steps
are taken:

1.  Let _num_ be ToNumber(_number_).

2.  ReturnIfAbrupt(_num_).

3.  If _num_ is NAN, +∞, or −∞, return FALSE.

4.  Otherwise, return TRUE.

isNaN (number)

The ISNAN function is the %isNaN% intrinsic object. When the ISNAN
function is called with one argument _number_, the following steps are
taken:

1.  Let _num_ be ToNumber(_number_).

2.  ReturnIfAbrupt(_num_).

3.  If _num_ is NAN, return TRUE.

4.  Otherwise, return FALSE.

NOTE A reliable way for ECMAScript code to test if a value X is a NAN is
an expression of the form X !== X. The result will be TRUE if and only
if X is a NAN.

parseFloat (string)

The PARSEFLOAT function produces a Number value dictated by
interpretation of the contents of the _string_ argument as a decimal
literal.

The PARSEFLOAT function is the %parseFloat% intrinsic object. When the
PARSEFLOAT function is called with one argument _string_, the following
steps are taken:

1.  Let _inputString_ be ToString(_string_).

2.  ReturnIfAbrupt(_inputString_).

3.  Let _trimmedString_ be a substring of _inputString_ consisting of
    the leftmost code unit that is not a _StrWhiteSpaceChar_ and all
    code units to the right of that code unit. (In other words, remove
    leading white space.) If _inputString_ does not contain any such
    code units, let _trimmedString_ be the empty string.

4.  If neither _trimmedString_ nor any prefix of _trimmedString
    satisfies the syntax of a _StrDecimalLiteral_ (see 7.1.3.1), return
    NAN.

5.  Let _numberString_ be the longest prefix of _trimmedString_, which
    might be _trimmedString_ itself, that satisfies the syntax of a
    _StrDecimalLiteral_.

6.  Let _mathFloat_ be MV of _numberString_.

7.  If _mathFloat_=0, then

    a.  If the first code unit of _trimmedString_ is "-", return −0.

    b.  Return +0.

8.  Return the Number value for _mathFloat_.

NOTE PARSEFLOAT may interpret only a leading portion of _string_ as a
Number value; it ignores any code units that cannot be interpreted as
part of the notation of an decimal literal, and no indication is given
that any such code units were ignored.

parseInt (string , radix)

The PARSEINT function produces an integer value dictated by
interpretation of the contents of the _string_ argument according to the
specified _radix_. Leading white space in _string_ is ignored. If
_radix_ is UNDEFINED or 0, it is assumed to be 10 except when the number
begins with the code unit pairs 0X or 0X, in which case a radix of 16 is
assumed. If _radix_ is 16, the number may also optionally begin with the
code unit pairs 0X or 0X.

The PARSEINT function is the %parseInt% intrinsic object. When the
PARSEINT function is called, the following steps are taken:

1.  Let _inputString_ be ToString(_string_).

2.  ReturnIfAbrupt(_string_).

3.  Let _S_ be a newly created substring of _inputString_ consisting of
    the first code unit that is not a _StrWhiteSpaceChar_ and all code
    units following that code unit. (In other words, remove leading
    white space.) If _inputString_ does not contain any such code unit,
    let _S_ be the empty string.

4.  Let _sign_ be 1.

5.  If _S_ is not empty and the first code unit of _S_ is 0x002D
    (HYPHEN-MINUS), let _sign_ be −1.

6.  If _S_ is not empty and the first code unit of _S_ is 0x002B (PLUS
    SIGN) or 0x002D (HYPHEN-MINUS), remove the first code unit from _S_.

7.  Let _R_ = ToInt32(_radix_).

8.  ReturnIfAbrupt(_R_).

9.  Let _stripPrefix_ be TRUE.

10. If _R_ ≠ 0, then

    a.  If _R_ < 2 or _R_ > 36, return NAN.

    b.  If _R_ ≠ 16, let _stripPrefix_ be FALSE.

11. Else _R_ = 0,

    a.  Let _R_ = 10.

12. If _stripPrefix_ is TRUE, then

    a.  If the length of _S_ is at least 2 and the first two code units
        of _S_ are either "0X" or "0X", remove the first two code units
        from _S_ and let _R_ = 16.

13. If _S_ contains a code unit that is not a radix-_R_ digit, let _Z
    be the substring of _S_ consisting of all code units before the
    first such code unit; otherwise, let _Z_ be _S_.

14. If _Z_ is empty, return NAN.

15. Let _mathInt_ be the mathematical integer value that is represented
    by _Z_ in radix-_R_ notation, using the letters A-Z and A-Z for
    digits with values 10 through 35. (However, if _R_ is 10 and _Z_
    contains more than 20 significant digits, every significant digit
    after the 20th may be replaced by a 0 digit, at the option of the
    implementation; and if _R_ is not 2, 4, 8, 10, 16, or 32, then
    _mathInt_ may be an implementation-dependent approximation to the
    mathematical integer value that is represented by _Z_ in radix-_R_
    notation.)

16. If _mathInt_ = 0, then

    a.  If _sign_ = −1, return −0.

    b.  Return +0.

17. Let _number_ be the Number value for _mathInt_.

18. Return _sign_ × _number_.

NOTE PARSEINT may interpret only a leading portion of _string_ as an
integer value; it ignores any code units that cannot be interpreted as
part of the notation of an integer, and no indication is given that any
such code units were ignored.

URI Handling Functions 

Uniform Resource Identifiers, or URIs, are Strings that identify
resources (e.g. web pages or files) and transport protocols by which to
access them (e.g. HTTP or FTP) on the Internet. The ECMAScript language
itself does not provide any support for using URIs except for functions
that encode and decode URIs as described in 18.2.6.2, 18.2.6.3, 18.2.6.4
and 18.2.6.5

NOTE Many implementations of ECMAScript provide additional functions and
methods that manipulate web pages; these functions are beyond the scope
of this standard.

URI Syntax and Semantics

A URI is composed of a sequence of components separated by component
separators. The general form is:

_Scheme_ : _First_ / _Second_ ; _Third_ ? _Fourth

where the italicized names represent components and “:”, “/”, “;” and
“?” are reserved for use as separators. The ENCODEURI and DECODEURI
functions are intended to work with complete URIs; they assume that any
reserved code units in the URI are intended to have special meaning and
so are not encoded. The ENCODEURICOMPONENT and DECODEURICOMPONENT
functions are intended to work with the individual component parts of a
URI; they assume that any reserved code units represent text and so must
be encoded so that they are not interpreted as reserved code units when
the component is part of a complete URI.

The following lexical grammar specifies the form of encoded URIs.

Syntax

uri :::

uriCharacters~opt~

uriCharacters :::

uriCharacter uriCharacters~opt~

uriCharacter :::

uriReserved
uriUnescaped
uriEscaped

uriReserved ::: ONE OF

; / ? : @ & = + $ ,

uriUnescaped :::

uriAlpha
DecimalDigit
uriMark

uriEscaped :::

% HexDigit HexDigit

uriAlpha ::: ONE OF

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

uriMark ::: ONE OF

- _ . ! ~ * ' ( )

NOTE The above syntax is based upon RFC 2396 and does not reflect
changes introduced by the more recent RFC 3986.

RUNTIME SEMANTICS

When a code unit to be included in a URI is not listed above or is not
intended to have the special meaning sometimes given to the reserved
code units, that code unit must be encoded. The code unit is transformed
into its UTF-8 encoding, with surrogate pairs first converted from
UTF-16 to the corresponding code point value. (Note that for code units
in the range [0,127] this results in a single octet with the same
value.) The resulting sequence of octets is then transformed into a
String with each octet represented by an escape sequence of the form
"%xx".

Runtime Semantics: Encode ( string, unescapedSet )

The encoding and escaping process is described by the abstract operation
Encode taking two String arguments _string_ and _unescapedSet_.

1.  Let _strLen_ be the number of code units in _string_.

2.  Let _R_ be the empty String.

3.  Let _k_ be 0.

4.  Repeat

    a.  If _k_ equals _strLen_, return _R_.

    b.  Let _C_ be the code unit at index _k_ within _string_.

    c.  If _C_ is in _unescapedSet_, then

        i.  Let _S_ be a String containing only the code unit _C_.

        ii. Let _R_ be a new String value computed by concatenating the
            previous value of _R_ and _S_.

    d.  Else _C_ is not in _unescapedSet_,

        i.  If the code unit value of _C_ is not less than 0xDC00 and
            not greater than 0xDFFF, throw a URIERROR exception.

        ii. If the code unit value of _C_ is less than 0xD800 or greater
            than 0xDBFF, then

            1.  Let _V_ be the code unit value of _C_.

        iii. Else,

            1.  Increase _k_ by 1.

            2.  If _k_ equals _strLen_, throw a URIERROR exception.

            3.  Let _kChar_ be the code unit value of the code unit at
                index _k_ within _string_.

            4.  If _kChar_ is less than 0xDC00 or greater than 0xDFFF,
                throw a URIERROR exception.

            5.  Let _V_ be UTF16Decode(_C_, _kChar_).

        iv. Let _Octets_ be the array of octets resulting by applying
            the UTF-8 transformation to _V_, and let _L_ be the array
            size.

        v.  Let _j_ be 0.

        vi. Repeat, while _j_ < _L_

            1.  Let _jOctet_ be the value at index _j_ within _Octets_.

            2.  Let _S_ be a String containing three code units “%_XY_”
                where _XY_ are two uppercase hexadecimal digits encoding
                the value of _jOctet_.

            3.  Let _R_ be a new String value computed by concatenating
                the previous value of _R_ and _S_.

            4.  Increase _j_ by 1.

    e.  Increase _k_ by 1.

Runtime Semantics: Decode ( string, reservedSet )

The unescaping and decoding process is described by the abstract
operation Decode taking two String arguments _string_ and _reservedSet_.

1.  Let _strLen_ be the number of code units in _string_.

2.  Let _R_ be the empty String.

3.  Let _k_ be 0.

4.  Repeat

    a.  If _k_ equals _strLen_, return _R_.

    b.  Let _C_ be the code unit at index _k_ within _string_.

    c.  If _C_ is not "%", then

        i.  Let _S_ be the String containing only the code unit _C_.

    d.  Else _C_ is "%",

        i.  Let _start_ be _k_.

        ii. If _k_ + 2 is greater than or equal to _strLen_, throw a
            URIERROR exception.

        iii. If the code units at index (_k_+1) and (_k_ + 2) within
            _string_ do not represent hexadecimal digits, throw a
            URIERROR exception.

        iv. Let _B_ be the 8-bit value represented by the two
            hexadecimal digits at index (_k_ + 1) and (_k_ + 2).

        v.  Increment _k_ by 2.

        vi. If the most significant bit in _B_ is 0, then

            1.  Let _C_ be the code unit with code unit value _B_.

            2.  If _C_ is not in _reservedSet_, then

                a.  Let _S_ be the String containing only the code unit
                    _C_.

            3.  Else _C_ is in _reservedSet_,

                a.  Let _S_ be the substring of _string_ from index
                    _start_ to index _k_ inclusive.

        vii. Else the most significant bit in _B_ is 1,

            1.  Let _n_ be the smallest nonnegative integer such that
                (_B_ << _n_) & 0x80 is equal to 0.

            2.  If _n_ equals 1 or _n_ is greater than 4, throw a
                URIERROR exception.

            3.  Let _Octets_ be an array of 8-bit integers of size _n_.

            4.  Put _B_ into _Octets_ at index 0.

            5.  If _k_ + (3 × (_n_ – 1)) is greater than or equal to
                _strLen_, throw a URIERROR exception.

            6.  Let _j_ be 1.

            7.  Repeat, while _j_ < _n_

                a.  Increment _k_ by 1.

                b.  If the code unit at index _k_ within _string_ is not
                    "%", throw a URIERROR exception.

                c.  If the code units at index (_k_ +1) and (_k_ + 2)
                    within _string_ do not represent hexadecimal digits,
                    throw a URIERROR exception.

                d.  Let _B_ be the 8-bit value represented by the two
                    hexadecimal digits at index (_k_ + 1) and (_k_ + 2).

                e.  If the two most significant bits in _B_ are not 10,
                    throw a URIERROR exception.

                f.  Increment _k_ by 2.

                g.  Put _B_ into _Octets_ at index _j_.

                h.  Increment _j_ by 1.

            8.  Let _V_ be the value obtained by applying the UTF-8
                transformation to _Octets_, that is, from an array of
                octets into a 21-bit value. If _Octets_ does not contain
                a valid UTF-8 encoding of a Unicode code point throw a
                URIERROR exception.

            9.  If _V_ < 0x10000, then

                a.  Let _C_ be the code unit _V_.

                b.  If _C_ is not in _reservedSet_, then

                    i.  Let _S_ be the String containing only the code
                        unit _C_.

                c.  Else _C_ is in _reservedSet_,

                    i.  Let _S_ be the substring of _string_ from index
                        _start_ to index _k_ inclusive.

            10. Else _V_ ≥ 0x10000,

                a.  Let _L_ be (((_V_ – 0x10000) & 0x3FF) + 0xDC00).

                b.  Let _H_ be ((((_V_ – 0x10000) >> 10) & 0x3FF) +
                    0xD800).

                c.  Let _S_ be the String containing the two code units
                    _H_ and _L_.

    e.  Let _R_ be a new String value computed by concatenating the
        previous value of _R_ and _S_.

    f.  Increase _k_ by 1.

NOTE This syntax of Uniform Resource Identifiers is based upon RFC 2396
and does not reflect the more recent RFC 3986 which replaces RFC 2396. A
formal description and implementation of UTF-8 is given in RFC 3629.

In UTF-8, characters are encoded using sequences of 1 to 6 octets. The
only octet of a sequence of one has the higher-order bit set to 0, the
remaining 7 bits being used to encode the character value. In a sequence
of n octets, n>1, the initial octet has the n higher-order bits set to
1, followed by a bit set to 0. The remaining bits of that octet contain
bits from the value of the character to be encoded. The following octets
all have the higher-order bit set to 1 and the following bit set to 0,
leaving 6 bits in each to contain bits from the character to be encoded.
The possible UTF-8 encodings of ECMAScript characters are specified in
Table 43.

Table 43 — UTF-8 Encodings

  ------------------- --------------------- --------------- --------------- --------------- ---------------
  _CODE UNIT VALUE_   _REPRESENTATION_      _1^ST^ OCTET_   _2^ND^ OCTET_   _3^RD^ OCTET_   _4^TH^ OCTET_

  0X0000 - 0X007F     00000000 0_zzzzzzz_   0_zzzzzzz_                                      

  0X0080 - 0X07FF     00000_yyy yyzzzzzz_   110_yyyyy_      10_zzzzzz_                      

  0X0800 - 0XD7FF     _xxxxyyyy yyzzzzzz_   1110_xxxx_      10_yyyyyy_      10_zzzzzz_      

  0XD800 - 0XDBFF     110110_vv vvwwwwxx_   11110_uuu_      10_uuwwww_      10_xxyyyy_      10_zzzzzz_
                                                                                            
  _followed by_       _followed by_                                                         
                                                                                            
  0XDC00 – 0XDFFF     110111_yy yyzzzzzz_                                                   

  0XD800 - 0XDBFF     _causes_ URIERROR                                                     
                                                                                            
  _not followed by_                                                                         
                                                                                            
  0XDC00 – 0XDFFF                                                                           

  0XDC00 – 0XDFFF     _causes_ URIERROR                                                     

  0XE000 - 0XFFFF     _xxxxyyyy yyzzzzzz_   1110_xxxx_      10_yyyyyy_      10_zzzzzz_      
  ------------------- --------------------- --------------- --------------- --------------- ---------------

Where

_uuuuu_ = _vvvv_ + 

to account for the addition of 0x10000 as in Surrogates, section 3.7, of
the Unicode Standard.

The range of code unit values 0xD800-0xDFFF is used to encode surrogate
pairs; the above transformation combines a UTF-16 surrogate pair into a
UTF-32 representation and encodes the resulting 21-bit value in UTF-8.
Decoding reconstructs the surrogate pair.

RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For
example, the invalid sequence C0 80 must not decode into the code unit
0x0000. Implementations of the Decode algorithm are required to throw a
URIERROR when encountering such invalid sequences.

decodeURI (encodedURI)

The DECODEURI function computes a new version of a URI in which each
escape sequence and UTF-8 encoding of the sort that might be introduced
by the ENCODEURI function is replaced with the UTF-16 encoding of the
code points that it represents. Escape sequences that could not have
been introduced by ENCODEURI are not replaced.

The DECODEURI function is the %decodeURI% intrinsic object. When the
DECODEURI function is called with one argument _encodedURI_, the
following steps are taken:

1.  Let _uriString_ be ToString(_encodedURI_).

2.  ReturnIfAbrupt(_uriString_).

3.  Let _reservedURISet_ be a String containing one instance of each
    code unit valid in _uriReserved_ plus “#”.

4.  Return Decode(_uriString_, _reservedURISet_).

NOTE The code point “#” is not decoded from escape sequences even though
it is not a reserved URI code point.

 decodeURIComponent (encodedURIComponent)

The DECODEURICOMPONENT function computes a new version of a URI in which
each escape sequence and UTF-8 encoding of the sort that might be
introduced by the ENCODEURICOMPONENT function is replaced with the
UTF-16 encoding of the code points that it represents.

The DECODEURICOMPONENT function is the %decodeURIComponent% intrinsic
object. When the DECODEURICOMPONENT function is called with one argument
_encodedURIComponent_, the following steps are taken:

1.  Let _componentString_ be ToString(_encodedURIComponent_).

2.  ReturnIfAbrupt(_componentString_).

3.  Let _reservedURIComponentSet_ be the empty String.

4.  Return Decode(_componentString_, _reservedURIComponentSet_).

encodeURI (uri)

The ENCODEURI function computes a new version of a UTF-16 encoded
(6.1.4) URI in which each instance of certain code points is replaced by
one, two, three, or four escape sequences representing the UTF-8
encoding of the code points.

The ENCODEURI function is the %encodeURI% intrinsic object. When the
ENCODEURI function is called with one argument _uri_, the following
steps are taken:

1.  Let _uriString_ be ToString(_uri_).

2.  ReturnIfAbrupt(_uriString_).

3.  Let _unescapedURISet_ be a String containing one instance of each
    code unit valid in _uriReserved_ and _uriUnescaped_ plus "#".

4.  Return Encode(_uriString_, _unescapedURISet_).

NOTE The code unit "#" is not encoded to an escape sequence even though
it is not a reserved or unescaped URI code point.

encodeURIComponent (uriComponent)

The ENCODEURICOMPONENT function computes a new version of a UTF-16
encoded (6.1.4) URI in which each instance of certain code points is
replaced by one, two, three, or four escape sequences representing the
UTF-8 encoding of the code point.

The ENCODEURICOMPONENT function is the %encodeURIComponent% intrinsic
object. When the ENCODEURICOMPONENT function is called with one argument
_uriComponent_, the following steps are taken:

1.  Let _componentString_ be ToString(_uriComponent_).

2.  ReturnIfAbrupt(_componentString_).

3.  Let _unescapedURIComponentSet_ be a String containing one instance
    of each code unit valid in _uriUnescaped_.

4.  Return Encode(_componentString_, _unescapedURIComponentSet_).


Constructor Properties of the Global Object

Array ( . . . )

See 22.1.1.

ArrayBuffer ( . . . )

See 24.1.2.

Boolean ( . . . )

See 19.3.1.

DataView ( . . . )

See 24.2.2.

Date ( . . . )

See 20.3.2.

Error ( . . . )

See 19.5.1.

EvalError ( . . . )

See 19.5.5.1.

Float32Array ( . . . )

See 22.2.4.

Float64Array ( . . . )

See 22.2.4.

Function ( . . . )

See 19.2.1.

Int8Array ( . . . )

See 22.2.4.

Int16Array ( . . . )

See 22.2.4.

Int32Array ( . . . )

See 22.2.4.

Map ( . . . )

See 23.1.1.

Number ( . . . )

See 20.1.1.

Object ( . . . )

See 19.1.1.

Proxy ( . . . )

See 26.2.1.

Promise ( . . . )

See 25.4.3.

RangeError ( . . . )

See 19.5.5.2.

ReferenceError ( . . . )

See 19.5.5.3.

RegExp ( . . . )

See 21.2.3.

Set ( . . . )

See 23.2.1.

String ( . . . )

See 21.1.1.

Symbol ( . . . )

See 19.4.1.

SyntaxError ( . . . )

See 19.5.5.4.

TypeError ( . . . )

See 19.5.5.5.

Uint8Array ( . . . )

See 22.2.4.

Uint8ClampedArray ( . . . )

See 22.2.4.

Uint16Array ( . . . )

See 22.2.4.

Uint32Array ( . . . )

See 22.2.4.

URIError ( . . . )

See 19.5.5.6.

WeakMap ( . . . )

See 23.3.1.

WeakSet ( . . . )

See 23.4.


Other Properties of the Global Object

JSON

See 24.3.

Math

See 20.2.

Reflect

See 26.1.



FUNDAMENTAL OBJECTS 


Object Objects

The Object Constructor

The Object constructor is the %Object% intrinsic object and the initial
value of the OBJECT property of the global object. When called as a
constructor it creates a new ordinary object. When OBJECT is called as a
function rather than as a constructor, it performs a type conversion.

The OBJECT constructor is designed to be subclassable. It may be used as
the value of an EXTENDS clause of a class definition.

Object ( [ value ] )

When OBJECT function is called with optional argument _value_, the
following steps are taken:

1.  If NewTarget is neither UNDEFINED nor the active function_,_ then

    a.  Return OrdinaryCreateFromConstructor(NewTarget,
        "%OBJECTPROTOTYPE%").

2.  If _value_ is NULL, UNDEFINED or not supplied, return
    ObjectCreate(%ObjectPrototype%).

3.  Return ToObject(_value_).

Properties of the Object Constructor

The value of the [[Prototype]] internal slot of the Object constructor
is the intrinsic object %FunctionPrototype%.

Besides the LENGTH property (whose value is 1), the Object constructor
has the following properties:

Object.assign ( target, ...sources )

The ASSIGN function is used to copy the values of all of the enumerable
own properties from one or more source objects to a _target_ object.
When the ASSIGN function is called, the following steps are taken:

1.  Let _to_ be ToObject(_target_).

2.  ReturnIfAbrupt(_to_).

3.  If only one argument was passed, return _to_.

4.  Let _sources_ be the List of argument values starting with the
    second argument.

5.  For each element _nextSource_ of _sources_, in ascending index
    order,

    a.  If _nextSource_ is UNDEFINED or NULL, let _keys_ be an empty
        List.

    b.  Else,

        i.  Let _from_ be ToObject(_nextSource_).

        ii. ReturnIfAbrupt(_from_).

        iii. Let _keys_ be _from_.[[OwnPropertyKeys]]().

        iv. ReturnIfAbrupt(_keys_).

    c.  Repeat for each element _nextKey_ of _keys_ in List order,

        i.  Let _desc_ be _from_.[[GetOwnProperty]](_nextKey_).

        ii. ReturnIfAbrupt(_desc_).

        iii. if _desc_ is not UNDEFINED and _desc_.[[Enumerable]] is
            TRUE, then

            1.  Let _propValue_ be Get(_from_, _nextKey_).

            2.  ReturnIfAbrupt(_propValue_).

            3.  Let _status_ be Set(_to_, _nextKey_, _propValue_, TRUE).

            4.  ReturnIfAbrupt(_status_).

6.  Return _to_.

The LENGTH property of the ASSIGN method is 2.

Object.create ( O [ , Properties ] )

The CREATE function creates a new object with a specified prototype.
When the CREATE function is called, the following steps are taken:

1.  If Type(_O_) is neither Object nor Null, throw a TYPEERROR
    exception.

2.  Let _obj_ be ObjectCreate(_O_).

3.  If the argument _Properties_ is present and not UNDEFINED, then

    a.  Return ObjectDefineProperties(_obj_, _Properties_).

4.  Return _obj_.

Object.defineProperties ( O, Properties )

The DEFINEPROPERTIES function is used to add own properties and/or
update the attributes of existing own properties of an object. When the
DEFINEPROPERTIES function is called, the following steps are taken:

1.  Return ObjectDefineProperties(_O_, _Properties_).

Runtime Semantics: ObjectDefineProperties ( O. Properties )

The abstract operation ObjectDefineProperties with arguments _O_ and
_Properties_ performs the following steps:

1.  If Type(_O_) is not Object, throw a TYPEERROR exception.

2.  Let _props_ be ToObject(_Properties_).

3.  Let _keys_ be _props_.[[OwnPropertyKeys]]().

4.  ReturnIfAbrupt(_keys_).

5.  Let _descriptors_ be an empty List.

6.  Repeat for each element _nextKey_ of _keys_ in List order,

    a.  Let _propDesc_ be _props_.[[GetOwnProperty]](_nextKey_).

    b.  ReturnIfAbrupt(_propDesc_).

    c.  If _propDesc_ is not UNDEFINED and _propDesc_.[[Enumerable]] is
        TRUE, then

        i.  Let _descObj_ be Get( _props_, _nextKey_).

        ii. ReturnIfAbrupt(_descObj_).

        iii. Let _desc_ be ToPropertyDescriptor(_descObj_).

        iv. ReturnIfAbrupt(_desc_).

        v.  Append the pair (a two element List) consisting of _nextKey_
            and _desc_ to the end of _descriptors_.

7.  For each _pair_ from _descriptors_ in list order,

    a.  Let _P_ be the first element of _pair_.

    b.  Let _desc_ be the second element of _pair_.

    c.  Let _status_ be DefinePropertyOrThrow(_O_,_P_, _desc_).

    d.  ReturnIfAbrupt(_status_).

8.  Return _O_.

Object.defineProperty ( O, P, Attributes )

The DEFINEPROPERTY function is used to add an own property and/or update
the attributes of an existing own property of an object. When the
DEFINEPROPERTY function is called, the following steps are taken:

1.  If Type(_O_) is not Object, throw a TYPEERROR exception.

2.  Let _key_ be ToPropertyKey(_P_).

3.  ReturnIfAbrupt(_key_).

4.  Let _desc_ be ToPropertyDescriptor(_Attributes_).

5.  ReturnIfAbrupt(_desc_).

6.  Let _success_ be DefinePropertyOrThrow(_O,key_, _desc_).

7.  ReturnIfAbrupt(_success_).

8.  Return _O_.

Object.freeze ( O )

When the FREEZE function is called, the following steps are taken:

1.  If Type(_O_) is not Object, return _O_.

2.  Let _status_ be SetIntegrityLevel( _O_, "FROZEN").

3.  ReturnIfAbrupt(_status_).

4.  If _status_ is FALSE, throw a TYPEERROR exception.

5.  Return _O_.

Object.getOwnPropertyDescriptor ( O, P )

When the GETOWNPROPERTYDESCRIPTOR function is called, the following
steps are taken:

1.  Let _obj_ be ToObject(_O_).

2.  ReturnIfAbrupt(_obj_).

3.  Let _key_ be ToPropertyKey(_P_).

4.  ReturnIfAbrupt(_key_).

5.  Let _desc_ be _obj._[[GetOwnProperty]](_key_).

6.  ReturnIfAbrupt(_desc_).

7.  Return FromPropertyDescriptor(_desc_).

Object.getOwnPropertyNames ( O )

When the GETOWNPROPERTYNAMES function is called, the following steps are
taken:

1.  Return GetOwnPropertyKeys(_O_, String).

Object.getOwnPropertySymbols ( O )

When the GETOWNPROPERTYSYMBOLS function is called with argument _O_, the
following steps are taken:

1.  Return GetOwnPropertyKeys(_O_, Symbol).

Runtime Semantics: GetOwnPropertyKeys ( O, Type )

The abstract operation GetOwnPropertyKeys is called with arguments _O_
and _Type_ where _O_ is an Object and _Type_ is one of the ECMAScript
specification types String or Symbol. The following steps are taken:

1.  Let _obj_ be ToObject(_O_).

2.  ReturnIfAbrupt(_obj_).

3.  Let _keys_ be _obj._[[OwnPropertyKeys]]().

4.  ReturnIfAbrupt(_keys_).

5.  Let _nameList_ be a new empty List.

6.  Repeat for each element _nextKey_ of _keys_ in List order,

    a.  If Type(_nextKey_) is _Type_, then

        i.  Append _nextKey_ as the last element of _nameList_.

7.  Return CreateArrayFromList(_nameList_).

Object.getPrototypeOf ( O )

When the GETPROTOTYPEOF function is called with argument _O_, the
following steps are taken:

1.  Let _obj_ be ToObject(_O_).

2.  ReturnIfAbrupt(_obj_).

3.  Return _obj._[[GetPrototypeOf]]().

Object.is ( value1, value2 )

When the IS function is called with arguments _value1_ and _value2_ the
following steps are taken:

1.  Return SameValue(_value1_, _value2_).

Object.isExtensible ( O )

When the ISEXTENSIBLE function is called with argument _O_, the
following steps are taken:

1.  If Type(_O_) is not Object, return FALSE.

2.  Return IsExtensible(_O_).

Object.isFrozen ( O )

When the ISFROZEN function is called with argument _O_, the following
steps are taken:

1.  If Type(_O_) is not Object, return TRUE.

2.  Return TestIntegrityLevel(_O_, "FROZEN").

Object.isSealed ( O )

When the ISSEALED function is called with argument _O_, the following
steps are taken:

1.  If Type(_O_) is not Object, return TRUE.

2.  Return TestIntegrityLevel(_O_, "SEALED").

Object.keys ( O )

When the KEYS function is called with argument _O_, the following steps
are taken:

1.  Let _obj_ be ToObject(_O_).

2.  ReturnIfAbrupt(_obj_).

3.  Let _nameList_ be EnumerableOwnNames(_obj_).

4.  ReturnIfAbrupt(_nameList_).

5.  Return CreateArrayFromList(_nameList_).

If an implementation defines a specific order of enumeration for the
for-in statement, the same order must be used for the elements of the
array returned in step 4.

Object.preventExtensions ( O )

When the PREVENTEXTENSIONS function is called, the following steps are
taken:

1.  If Type(_O_) is not Object, return _O_.

2.  Let _status_ be _O_.[[PreventExtensions]]().

3.  ReturnIfAbrupt(_status_).

4.  If _status_ is FALSE, throw a TYPEERROR exception.

5.  Return _O_.

Object.prototype

The initial value of OBJECT.PROTOTYPE is the intrinsic object
%ObjectPrototype% (19.1.3).

This property has the attributes {[[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Object.seal ( O )

When the SEAL function is called, the following steps are taken:

1.  If Type(_O_) is not Object, return _O_.

2.  Let _status_ be SetIntegrityLevel( _O_, "SEALED").

3.  ReturnIfAbrupt(_status_).

4.  If _status_ is FALSE, throw a TYPEERROR exception.

5.  Return _O_.

Object.setPrototypeOf ( O, proto )

When the SETPROTOTYPEOF function is called with arguments _O_ and proto,
the following steps are taken:

1.  Let _O_ be RequireObjectCoercible(_O_)_.

2.  ReturnIfAbrupt(_O_).

3.  If Type(_proto_) is neither Object nor Null, throw a TYPEERROR
    exception.

4.  If Type(_O_) is not Object, return _O_.

5.  Let _status_ be _O_.[[SetPrototypeOf]](_proto_).

6.  ReturnIfAbrupt(_status_).

7.  If _status_ is FALSE, throw a TYPEERROR exception.

8.  Return _O_.

Properties of the Object Prototype Object

The Object prototype object is the intrinsic object %ObjectPrototype%.
The Object prototype object is an ordinary object.

The value of the [[Prototype]] internal slot of the Object prototype
object is NULL and the initial value of the [[Extensible]] internal slot
is TRUE.

Object.prototype.constructor

The initial value of OBJECT.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %Object%.

Object.prototype.hasOwnProperty ( V )

When the HASOWNPROPERTY method is called with argument _V_, the
following steps are taken:

1.  Let _P_ be ToPropertyKey(_V_).

2.  ReturnIfAbrupt(_P_).

3.  Let _O_ be ToObject(THIS value).

4.  ReturnIfAbrupt(_O_).

5.  Return HasOwnProperty(_O_, _P_).

NOTE The ordering of steps 1 and 3 is chosen to ensure that any
exception that would have been thrown by step 1 in previous editions of
this specification will continue to be thrown even if the THIS value is
UNDEFINED or NULL.

Object.prototype.isPrototypeOf ( V )

When the ISPROTOTYPEOF method is called with argument _V_, the following
steps are taken:

1.  If Type(_V_) is not Object, return FALSE.

2.  Let _O_ be ToObject(THIS value).

3.  ReturnIfAbrupt(_O_).

4.  Repeat

    a.  Let _V_ be _V_.[[GetPrototypeOf]]().

    b.  If _V_ is NULL, return FALSE

    c.  If SameValue(_O_, _V_) is TRUE, return TRUE.

NOTE The ordering of steps 1 and 2 preserves the behaviour specified by
previous editions of this specification for the case where _V_ is not an
object and the THIS value is UNDEFINED or NULL.

Object.prototype.propertyIsEnumerable ( V )

When the PROPERTYISENUMERABLE method is called with argument _V_, the
following steps are taken:

1.  Let _P_ be ToPropertyKey(_V_).

2.  ReturnIfAbrupt(_P_).

3.  Let _O_ be ToObject(THIS value).

4.  ReturnIfAbrupt(_O_).

5.  Let _desc_ be _O_.[[GetOwnProperty]](_P_).

6.  ReturnIfAbrupt(_desc_).

7.  If _desc_ is UNDEFINED, return FALSE.

8.  Return the value of _desc_.[[Enumerable]].

NOTE 1 This method does not consider objects in the prototype chain.

NOTE 2 The ordering of steps 1 and 3 is chosen to ensure that any
exception that would have been thrown by step 1 in previous editions of
this specification will continue to be thrown even if the THIS value is
UNDEFINED or NULL.

Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )

When the TOLOCALESTRING method is called, the following steps are taken:

1.  Let _O_ be the THIS value.

2.  Return Invoke(_O_, "TOSTRING").

The optional parameters to this function are not used but are intended
to correspond to the parameter pattern used by ECMA-402 TOLOCALSTRING
functions. Implementations that do not include ECMA-402 support must not
use those parameter positions for other purposes.

The LENGTH property of the TOLOCALESTRING method is 0.

NOTE 1 This function provides a generic TOLOCALESTRING implementation
for objects that have no locale-specific TOSTRING behaviour. ARRAY,
NUMBER, DATE, and TYPED ARRAYS provide their own locale-sensitive
TOLOCALESTRING methods.

NOTE 2 ECMA-402 intentionally does not provide an alternative to this
default implementation.

Object.prototype.toString ( )

When the TOSTRING method is called, the following steps are taken:

1.  If the THIS value is UNDEFINED, return "[OBJECT UNDEFINED]".

2.  If the THIS value is NULL, return "[OBJECT NULL]".

3.  Let _O_ be ToObject(THIS value).

4.  Let _isArray_ be IsArray(_O_).

5.  ReturnIfAbrupt(_isArray_).

6.  If _isArray_ is TRUE, let _builtinTag_ be "ARRAY".

7.  Else, if _O_ is an exotic String object, let _builtinTag_ be
    "STRING".

8.  Else, if _O_ has an [[ParameterMap]] internal slot, let _builtinTag
    be "ARGUMENTS".

9.  Else, if _O_ has a [[Call]] internal method, let _builtinTag_ be
    "FUNCTION".

10. Else, if _O_ has an [[ErrorData]] internal slot, let _builtinTag_ be
    "ERROR".

11. Else, if _O_ has a [[BooleanData]] internal slot, let _builtinTag
    be "BOOLEAN".

12. Else, if _O_ has a [[NumberData]] internal slot, let _builtinTag_ be
    "NUMBER".

13. Else, if _O_ has a [[DateValue]] internal slot, let _builtinTag_ be
    "DATE".

14. Else, if _O_ has a [[RegExpMatcher]] internal slot, let _builtinTag
    be "REGEXP".

15. Else, let _builtinTag_ be "OBJECT".

16. Let _tag_ be Get (_O_, @@toStringTag).

17. ReturnIfAbrupt(_tag_).

18. If Type(_tag_) is not String, let _tag_ be _builtinTag_.

19. Return the String that is the result of concatenating "[OBJECT ",
    _tag_, and "]".

This function is the %ObjProto_toString% intrinsic object.

NOTE Historically, this function was occasionally used to access the
string value of the [[Class]] internal slot that was used in previous
editions of this specification as a nominal type tag for various
built-in objects. The above definition of TOSTRING preserves
compatibility for legacy code that uses TOSTRING as a test for those
specific kinds of built-in objects. It does not provide a reliable type
testing mechanism for other kinds of built-in or program defined
objects. In addition, programs can use @@toStringTag in ways that will
invalidate the reliability of such legacy type tests.

Object.prototype.valueOf ( )

When the VALUEOF method is called, the following steps are taken:

1.  Return ToObject(THIS value).

Properties of Object Instances

Object instances have no special properties beyond those inherited from
the Object prototype object.


Function Objects

The Function Constructor

The Function constructor is the %Function% intrinsic object and the
initial value of the FUNCTION property of the global object. When
FUNCTION is called as a function rather than as a constructor, it
creates and initializes a new Function object. Thus the function call
FUNCTION(…) is equivalent to the object creation expression NEW
FUNCTION(…) with the same arguments.

The FUNCTION constructor is designed to be subclassable. It may be used
as the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified FUNCTION behaviour
must include a SUPER call to the FUNCTION constructor to create and
initialize a subclass instances with the internal slots necessary for
built-in function behaviour. All ECMAScript syntactic forms for defining
function objects create instances of FUNCTION. There is no syntactic
means to create instances of FUNCTION subclasses except for the built-in
Generator Function subclass.

Function ( p1, p2, … , pn, body )

The last argument specifies the body (executable code) of a function;
any preceding arguments specify formal parameters.

When the FUNCTION function is called with some arguments _p1_, _p2_, … ,
_pn_, _body_ (where _n_ might be 0, that is, there are no “_p_”
arguments, and where _body_ might also not be provided), the following
steps are taken:

1.  Let _C_ be the active function object.

2.  Let _args_ be the _argumentsList_ that was passed to this function
    by [[Call]] or [[Construct]].

3.  Return CreateDynamicFunction(_C_, NewTarget, "NORMAL", _args_).

NOTE It is permissible but not necessary to have one argument for each
formal parameter to be specified. For example, all three of the
following expressions produce the same result:

  new Function("a", "b", "c", "return a+b+c")

  new Function("a, b, c", "return a+b+c")

  new Function("a,b", "c", "return a+b+c")

RuntimeSemantics: CreateDynamicFunction(constructor, newTarget, kind, args)

The abstract operation CreateDynamicFunction is called with arguments
_constructor_, _newTarget_, _kind_, and _args_. _constructor_ is the
constructor function that is performing this action, _newTarget_ is the
constructor that NEW was initially applied to, _kind_ is either "NORMAL"
or "GENERATOR", and _args_ is a List containing the actual argument
values that were passed to _constructor_. The following steps are taken:

1.  If _newTarget_ is UNDEFINED_,_ let _newTarget_ be _constructor_.

2.  If _kind_ is "NORMAL", then

    a.  Let _goal_ be the grammar symbol _FunctionBody._

    b.  Let _parameterGoal_ be the grammar symbol _FormalParameters_.

    c.  Let _fallbackProto_ be "%FUNCTIONPROTOTYPE%".

3.  Else,

    a.  Let _goal_ be the grammar symbol _GeneratorBody_.

    b.  Let _parameterGoal_ be the grammar symbol
        _FormalParameters_~[Yield,\ GeneratorParameter]~.

    c.  Let _fallbackProto_ be "%GENERATOR%".

4.  Let _argCount_ be the number of elements in _args_.

5.  Let _P_ be the empty String.

6.  If _argCount_ = 0, let _bodyText_ be the empty String.

7.  Else if _argCount_ = 1, let _bodyText_ be _args_[0].

8.  Else _argCount_ > 1,

    a.  Let _firstArg_ be _args_[0].

    b.  Let _P_ be ToString(_firstArg_).

    c.  ReturnIfAbrupt(_P_).

    d.  Let _k_ be 1.

    e.  Repeat, while _k_ < _argCount_-1

        i.  Let _nextArg_ be _args_[_k_].

        ii. Let _nextArgString_ be ToString(_nextArg_).

        iii. ReturnIfAbrupt(_nextArgString_).

        iv. Let _P_ be the result of concatenating the previous value of
            _P_, the String "," (a comma), and _nextArgString_.

        v.  Increase _k_ by 1.

    f.  Let _bodyText_ be _args_[_k_].

9.  Let _bodyText_ be ToString(_bodyText_).

10. ReturnIfAbrupt(_bodyText_).

11. Let _body_ be the result of parsing _bodyText_, interpreted as
    UTF-16 encoded Unicode text as described in 6.1.4_,_ using _goal_ as
    the goal symbol. Throw a SYNTAXERROR exception if the parse fails or
    if any static semantics errors are detected.

12. If _bodyText_ is strict mode code (see 10.2.1) then let _strict_ be
    TRUE, else let _strict_ be FALSE.

13. Let _parameters_ be the result of parsing _P_, interpreted as UTF-
    encoded Unicode text as described in 6.1.4_,_ using _parameterGoal_
    as the goal symbol. Throw a SYNTAXERROR exception if the parse fails
    or if any static semantics errors are detected. If _strict_ is TRUE,
    the Early Error rules for _StrictFormalParameters_ :
    _FormalParameters_ are applied.

14. If any element of the BoundNames of _parameters_ also occurs in the
    LexicallyDeclaredNames of _body_, throw a SYNTAXERROR exception.

15. If _body_ Contains _SuperCall_ is TRUE_,_ throw a SYNTAXERROR
    exception.

16. If _parameters_ Contains _SuperCall_ is TRUE_,_ throw a SYNTAXERROR
    exception.

17. If _body_ Contains _SuperProperty_ is TRUE_,_ throw a SYNTAXERROR
    exception.

18. If _parameters_ Contains _SuperProperty_ is TRUE_,_ throw a
    SYNTAXERROR exception.

19. If _strict_ is TRUE, then

    a.  If BoundNames of _parameters_ contains any duplicate elements_,_
        throw a SYNTAXERROR exception.

20. Let _proto_ be GetPrototypeFromConstructor(_newTarget_,
    _fallbackProto_).

21. ReturnIfAbrupt(_proto_).

22. Let _F_ be FunctionAllocate(_proto_, _strict_, _kind_).

23. 24. Let _realmF_ be the value of _F’s_ [[Realm]] internal slot.

25. Let _scope_ be _realmF_.[[globalEnv]].

26. Perform FunctionInitialize(_F_, Normal, _parameters_, _body,
    scope_).

27. If _kind_ is "GENERATOR" , then

    a.  Let _prototype_ be ObjectCreate(%GeneratorPrototype%).

    b.  c.  Perform MakeConstructor(_F_, TRUE, _prototype_).

28. Else, perform MakeConstructor(_F_).

29. Perform SetFunctionName(_F_, "ANONYMOUS").

30. Return _F_.

NOTE A PROTOTYPE property is automatically created for every function
created using CreateDynamicFunction , to provide for the possibility
that the function will be used as a constructor.

Properties of the Function Constructor

The FUNCTION constructor is itself a built-in function object. The value
of the [[Prototype]] internal slot of the FUNCTION constructor is
%FunctionPrototype%, the intrinsic Function prototype object (19.2.3).

The value of the [[Extensible]] internal slot of the Function
constructor is TRUE.

The Function constructor has the following properties:

Function.length

This is a data property with a value of 1. This property has the
attributes { [[Writable]]: FALSE, [[Enumerable]]: FALSE,
[[Configurable]]: TRUE }.

Function.prototype

The value of FUNCTION.PROTOTYPE is %FunctionPrototype%, the intrinsic
Function prototype object (19.2.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the Function Prototype Object

The Function prototype object is the intrinsic object
%FunctionPrototype%. The Function prototype object is itself a built-in
function object. When invoked, it accepts any arguments and returns
UNDEFINED. It does not have a [[Construct]] internal method so it is not
a constructor.

NOTE The Function prototype object is specified to be a function object
to ensure compatibility with ECMAScript code that was created prior to
the ECMAScript 2015 specification.

The value of the [[Prototype]] internal slot of the Function prototype
object is the intrinsic object %ObjectPrototype% (19.1.3). The initial
value of the [[Extensible]] internal slot of the Function prototype
object is TRUE.

The Function prototype object does not have a PROTOTYPE property.

The value of the LENGTH property of the Function prototype object is 0.

The value of the NAME property of the Function prototype object is the
empty String.

Function.prototype.apply ( thisArg, argArray )

When the APPLY method is called on an object _func_ with arguments
_thisArg_ and _argArray_, the following steps are taken:

1.  If IsCallable(_func_) is FALSE, throw a TYPEERROR exception.

2.  If _argArray_ is NULL or UNDEFINED, then

    a.  Return Call(_func_, _thisArg_).

3.  Let _argList_ be CreateListFromArrayLike(_argArray_).

4.  ReturnIfAbrupt(_argList_ ).

5.  Perform PrepareForTailCall().

6.  Return Call(_func_, _thisArg_, _argList_).

The LENGTH property of the APPLY method is 2.

NOTE 1 The thisArg value is passed without modification as the THIS
value. This is a change from Edition 3, where an UNDEFINED or NULL
thisArg is replaced with the global object and ToObject is applied to
all other values and that result is passed as the THIS value. Even
though the thisArg is passed without modification, non-strict functions
still perform these transformations upon entry to the function.

NOTE 2 If _func_ is an arrow function or a bound function then the
_thisArg_ will be ignored by the function [[Call]] in step 6.

Function.prototype.bind ( thisArg , ...args)

When the BIND method is called with argument _thisArg_ and zero or more
_args_, it performs the following steps:

1.  Let _Target_ be the THIS value.

2.  If IsCallable(_Target_) is FALSE, throw a TYPEERROR exception.

3.  Let _args_ be a new (possibly empty) List consisting of all of the
    argument values provided after _thisArg_ in order.

4.  Let _F_ be BoundFunctionCreate(_Target_, _thisArg_, _args_).

5.  ReturnIfAbrupt(_F_).

6.  Let _targetHasLength_ be HasOwnProperty(_Target_, "LENGTH").

7.  ReturnIfAbrupt(_targetHasLength_).

8.  If _targetHasLength_ is TRUE, then

    a.  Let _targetLen_ be Get(_Target_, "LENGTH").

    b.  ReturnIfAbrupt(_targetLen_).

    c.  If Type(_targetLen_) is not Number, let _L_ be 0.

    d.  Else,

        i.  Let _targetLen_ be ToInteger(_targetLen_).

        ii. Let _L_ be the larger of 0 and the result of _targetLen_
            minus the number of elements of _args_.

9.  Else let _L_ be 0.

10. Let _status_ be DefinePropertyOrThrow(_F_, "LENGTH",
    PropertyDescriptor {[[Value]]: _L_, [[Writable]]: FALSE,
    [[Enumerable]]: FALSE, [[Configurable]]: TRUE}).

11. Assert: _status_ is not an abrupt completion.

12. Let _targetName_ be Get(_Target_, "NAME").

13. ReturnIfAbrupt(_targetName_).

14. If Type(_targetName_) is not String, let _targetName_ be the empty
    string.

15. Perform SetFunctionName(_F_, _targetName_, "BOUND").

16. Return _F_.

The LENGTH property of the BIND method is 1.

NOTE 1 Function objects created using FUNCTION.PROTOTYPE.BIND are exotic
objects. They also do not have a PROTOTYPE property.

NOTE 2 If _Target_ is an arrow function or a bound function then the
_thisArg_ passed to this method will not be used by subsequent calls to
_F_.

Function.prototype.call (thisArg , ...args)

When the CALL method is called on an object _func_ with argument,
_thisArg_ and zero or more _args_, the following steps are taken:

1.  If IsCallable(_func_) is FALSE, throw a TYPEERROR exception.

2.  Let _argList_ be an empty List.

3.  If this method was called with more than one argument then in left
    to right order, starting with the second argument, append

4.  each argument as the last element of _argList_.

5.  Perform PrepareForTailCall().

6.  Return Call(_func_, _thisArg_, _argList_).

The LENGTH property of the CALL method is 1.

NOTE 1 The thisArg value is passed without modification as the THIS
value. This is a change from Edition 3, where an UNDEFINED or NULL
thisArg is replaced with the global object and ToObject is applied to
all other values and that result is passed as the THIS value. Even
though the thisArg is passed without modification, non-strict functions
still perform these transformations upon entry to the function.

NOTE 2 If _func_ is an arrow function or a bound function then the
_thisArg_ will be ignored by the function [[Call]] in step 5.

Function.prototype.constructor

The initial value of FUNCTION.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %Function%.

Function.prototype.toString ( )

When the TOSTRING method is called on an object _func_ the following
steps are taken:

1.  If _func_ is a Bound Function exotic object, then

    a.  Return an implementation-dependent String source code
        representation of _func_. The representation must conform to the
        rules below. It is implementation dependent whether the
        representation includes bound function information or
        information about the target function.

2.  If Type(_func_) is Object and is either a built-in function object
    or has an [[ECMAScriptCode]] internal slot, then

    a.  Return an implementation-dependent String source code
        representation of _func_. The representation must conform to the
        rules below.

3.  Throw a TYPEERROR exception.

TOSTRING Representation Requirements:

-   The string representation must have the syntax of a
    _FunctionDeclaration_ _FunctionExpression_, _GeneratorDeclaration,
    GeneratorExpression, ClassDeclaration_, _ClassExpression_,
    _ArrowFunction_, _MethodDefinition_, or _GeneratorMethod_ depending
    upon the actual characteristics of the object.

-   The use and placement of white space, line terminators, and
    semicolons within the representation String is
    implementation-dependent.

-   If the object was defined using ECMAScript code and the returned
    string representation is not in the form of a _MethodDefinition_ or
    _GeneratorMethod_ then the representation must be such that if the
    string is evaluated, using EVAL in a lexical context that is
    equivalent to the lexical context used to create the original
    object, it will result in a new functionally equivalent object. In
    that case the returned source code must not mention freely any
    variables that were not mentioned freely by the original function’s
    source code, even if these “extra” names were originally in scope.

-   If the implementation cannot produce a source code string that meets
    these criteria then it must return a string for which EVAL will
    throw a SYNTAXERROR exception.

Function.prototype[@@hasInstance] ( V )

When the @@hasInstance method of an object _F_ is called with value _V_,
the following steps are taken:

1.  Let _F_ be the THIS value.

2.  Return OrdinaryHasInstance(_F_, _V_).

The value of the NAME property of this function is
"[SYMBOL.HASINSTANCE]".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

NOTE This is the default implementation of @@HASINSTANCE that most
functions inherit. @@HASINSTANCE is called by the INSTANCEOF operator to
determine whether a value is an instance of a specific constructor. An
expression such as

V INSTANCEOF F

evaluates as

F[@@HASINSTANCE](V)

A constructor function can control which objects are recognized as its
instances by INSTANCEOF by exposing a different @@HASINSTANCE method on
the function.

This property is non-writable and non-configurable to prevent tampering
that could be used to globally expose the target function of a bound
function.

Function Instances

Every function instance is an ECMAScript function object and has the
internal slots listed in Table 27. Function instances created using the
FUNCTION.PROTOTYPE.BIND method (19.2.3.2) have the internal slots listed
in Table 28.

The Function instances have the following properties:

length

The value of the LENGTH property is an integer that indicates the
typical number of arguments expected by the function. However, the
language permits the function to be invoked with some other number of
arguments. The behaviour of a function when invoked on a number of
arguments other than the number specified by its LENGTH property depends
on the function. This property has the attributes { [[Writable]]: FALSE,
[[Enumerable]]: FALSE, [[Configurable]]: TRUE }.

name

The value of the NAME property is an String that is descriptive of the
function. The name has no semantic significance but is typically a
variable or property name that is used to refer to the function at its
point of definition in ECMAScript code. This property has the attributes
{ [[Writable]]: FALSE, [[Enumerable]]: FALSE, [[Configurable]]: TRUE }.

Anonymous functions objects that do not have a contextual name
associated with them by this specification do not have a NAME own
property but inherit the NAME property of %FunctionPrototype%.

prototype

Function instances that can be used as a constructor have a PROTOTYPE
property. Whenever such a function instance is created another ordinary
object is also created and is the initial value of the function’s
PROTOTYPE property. Unless otherwise specified, the value of the
PROTOTYPE property is used to initialize the [[Prototype]] internal slot
of the object created when that function is invoked as a constructor.

This property has the attributes { [[Writable]]: TRUE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

NOTE Function objects created using FUNCTION.PROTOTYPE.BIND, or by
evaluating a _MethodDefinition_ (that are not a _GeneratorMethod_) or an
_ArrowFunction_ grammar production do not have a PROTOTYPE property.


Boolean Objects

The Boolean Constructor 

The Boolean constructor is the %Boolean% intrinsic object and the
initial value of the BOOLEAN property of the global object. When called
as a constructor it creates and initializes a new Boolean object. When
BOOLEAN is called as a function rather than as a constructor, it
performs a type conversion.

The BOOLEAN constructor is designed to be subclassable. It may be used
as the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified BOOLEAN behaviour must
include a SUPER call to the BOOLEAN constructor to create and initialize
the subclass instance with a [[BooleanData]] internal slot.

 Boolean ( value )

When BOOLEAN is called with argument _value_, the following steps are
taken:

1.  Let _b_ be ToBoolean(_value_).

2.  If NewTarget is UNDEFINED_,_ return _b_.

3.  Let _O_ be OrdinaryCreateFromConstructor(NewTarget,
    "%BOOLEANPROTOTYPE%", «[[BooleanData]]» ).

4.  ReturnIfAbrupt(_O_).

5.  Set the value of _O’s_ [[BooleanData]] internal slot to _b_.

6.  Return _O_.

Properties of the Boolean Constructor

The value of the [[Prototype]] internal slot of the Boolean constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 1), the Boolean constructor
has the following properties:

Boolean.prototype

The initial value of BOOLEAN.PROTOTYPE is the intrinsic object
%BooleanPrototype% (19.3.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the Boolean Prototype Object

The Boolean prototype object is the intrinsic object %BooleanPrototype%.
The Boolean prototype object is an ordinary object. It is not a Boolean
instance and does not have a [[BooleanData]] internal slot.

The value of the [[Prototype]] internal slot of the Boolean prototype
object is the intrinsic object %ObjectPrototype% (19.1.3).

The abstract operation thisBooleanValue(_value_) performs the following
steps:

1.  If Type(_value_) is Boolean, return _value_.

2.  If Type(_value_) is Object and _value_ has a [[BooleanData]]
    internal slot, then

    a.  Assert: _value_’s [[BooleanData]] internal slot is a Boolean
        value.

    b.  Return the value of _value’s_ [[BooleanData]] internal slot.

3.  Throw a TYPEERROR exception.

Boolean.prototype.constructor

The initial value of BOOLEAN.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %Boolean%.

Boolean.prototype.toString ( )

The following steps are taken:

1.  Let _b_ be thisBooleanValue(THIS value).

2.  ReturnIfAbrupt(_b_).

3.  If _b_ is TRUE, return "TRUE"; else return "FALSE".

Boolean.prototype.valueOf ( )

The following steps are taken:

1.  Return thisBooleanValue(THIS value).

Properties of Boolean Instances

Boolean instances are ordinary objects that inherit properties from the
Boolean prototype object. Boolean instances have a [[BooleanData]]
internal slot. The [[BooleanData]] internal slot is the Boolean value
represented by this Boolean object.


Symbol Objects

The Symbol Constructor 

The Symbol constructor is the %Symbol% intrinsic object and the initial
value of the SYMBOL property of the global object. When SYMBOL is called
as a function, it returns a new Symbol value.

The SYMBOL constructor is not intended to be used with the NEW operator
or to be subclassed. It may be used as the value of an EXTENDS clause of
a class definition but a SUPER call to the SYMBOL constructor will cause
an exception.

 Symbol ( [ description ] )

When SYMBOL is called with optional argument _description_, the
following steps are taken:

1.  If NewTarget is not UNDEFINED_,_ throw a TYPEERROR exception.

2.  If _description_ is UNDEFINED, let _descString_ be UNDEFINED.

3.  Else, let _descString_ be ToString(_description_).

4.  ReturnIfAbrupt(_descString_).

5.  Return a new unique Symbol value whose [[Description]] value is
    _descString_.

Properties of the Symbol Constructor

The value of the [[Prototype]] internal slot of the Symbol constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 0), the Symbol constructor
has the following properties:

Symbol.for ( key )

When SYMBOL.FOR is called with argument _key_ it performs the following
steps:

1.  Let _stringKey_ be ToString(_key_).

2.  ReturnIfAbrupt(_stringKey_).

3.  For each element _e_ of the GlobalSymbolRegistry List,

    a.  If SameValue(_e_.[[key]], _stringKey_) is TRUE, return
        _e_.[[symbol]].

4.  Assert: GlobalSymbolRegistry does not currently contain an entry for
    _stringKey_.

5.  Let _newSymbol_ be a new unique Symbol value whose [[Description]]
    value is _stringKey_.

6.  Append the record { [[key]]: _stringKey_, [[symbol]]: _newSymbol_ }
    to the GlobalSymbolRegistry List.

7.  Return _newSymbol_.

The GlobalSymbolRegistry is a List that is globally available. It is
shared by all Code Realms. Prior to the evaluation of any ECMAScript
code it is initialized as an empty List. Elements of the
GlobalSymbolRegistry are Records with the structure defined in Table 44.

Table 44 — GlobalSymbolRegistry Record Fields

  -------------- ---------- --------------------------------------------------
  _FIELD NAME_   _VALUE_    _USAGE_
  [[key]]        A String   A string key used to globally identify a Symbol.
  [[symbol]]     A Symbol   A symbol that can be retrieved from any Realm.
  -------------- ---------- --------------------------------------------------

Symbol.hasInstance

The initial value of SYMBOL.HASINSTANCE is the well known symbol
@@hasInstance (Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.isConcatSpreadable

The initial value of SYMBOL.ISCONCATSPREADABLE is the well known symbol
@@isConcatSpreadable (Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.iterator

The initial value of SYMBOL.ITERATOR is the well known symbol @@iterator
(Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.keyFor ( sym )

When SYMBOL.KEYFOR is called with argument _sym_ it performs the
following steps:

1.  If Type(_sym_) is not Symbol, throw a TYPEERROR exception.

2.  For each element _e_ of the GlobalSymbolRegistry List (see
    19.4.2.1),

    a.  If SameValue(_e_.[[symbol]], _sym_) is TRUE, return _e_.[[key]].

3.  Assert: GlobalSymbolRegistry does not currently contain an entry for
    _sym_.

4.  Return UNDEFINED.

Symbol.match

The initial value of SYMBOL.MATCH is the well known symbol @@match
(Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.prototype

The initial value of SYMBOL.PROTOTYPE is the intrinsic object
%SymbolPrototype% (19.4.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.replace

The initial value of SYMBOL.REPLACE is the well known symbol @@replace
(Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.search

The initial value of SYMBOL.SEARCH is the well known symbol @@search
(Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.species

The initial value of SYMBOL.SPECIES is the well known symbol @@species
(Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.split

The initial value of SYMBOL.SPLIT is the well known symbol @@split
(Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.toPrimitive

The initial value of SYMBOL.TOPRIMITIVE is the well known symbol
@@toPrimitive (Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.toStringTag

The initial value of SYMBOL.TOSTRINGTAG is the well known symbol
@@toStringTag (Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Symbol.unscopables

The initial value of SYMBOL.UNSCOPABLES is the well known symbol
@@unscopables (Table 1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the Symbol Prototype Object

The Symbol prototype object is the intrinsic object %SymbolPrototype%.
The Symbol prototype object is an ordinary object. It is not a Symbol
instance and does not have a [[SymbolData]] internal slot.

The value of the [[Prototype]] internal slot of the Symbol prototype
object is the intrinsic object %ObjectPrototype% (19.1.3).

Symbol.prototype.constructor

The initial value of SYMBOL.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %Symbol%.

Symbol.prototype.toString ( )

The following steps are taken:

1.  Let _s_ be the THIS value.

2.  If Type(_s_) is Symbol, let _sym_ be _s_.

3.  Else,

    a.  If Type(_s_) is not Object, throw a TYPEERROR exception.

    b.  If _s_ does not have a [[SymbolData]] internal slot, throw a
        TYPEERROR exception.

    c.  Let _sym_ be the value of _s’s_ [[SymbolData]] internal slot.

4.  Return SymbolDescriptiveString(_sym_).

Runtime Semantics: SymbolDescriptiveString ( sym )

When the abstract operation SymbolDescriptiveString is called with
argument _sym_, the following steps are taken:

1.  Assert: Type(_sym_) is Symbol.

2.  Let _desc_ be _sym’s_ [[Description]] value.

3.  If _desc_ is UNDEFINED, let _desc_ be the empty string.

4.  Assert: Type(_desc_) is String.

5.  Return the result of concatenating the strings "SYMBOL(", _desc_,
    and ")".

Symbol.prototype.valueOf ( )

The following steps are taken:

1.  Let _s_ be the THIS value.

2.  If Type(_s_) is Symbol, return _s_.

3.  If Type(_s_) is not Object, throw a TYPEERROR exception.

4.  If _s_ does not have a [[SymbolData]] internal slot, throw a
    TYPEERROR exception.

5.  Return the value of _s’s_ [[SymbolData]] internal slot.

Symbol.prototype [ @@toPrimitive ] ( hint )

This function is called by ECMAScript language operators to convert a
Symbol object to a primitive value. The allowed values for _hint_ are
"DEFAULT", "NUMBER", and "STRING".

When the @@TOPRIMITIVE method is called with argument _hint_, the
following steps are taken:

1.  Let _s_ be the THIS value.

2.  If Type(_s_) is Symbol, return _s_.

3.  If Type(_s_) is not Object, throw a TYPEERROR exception.

4.  If _s_ does not have a [[SymbolData]] internal slot, throw a
    TYPEERROR exception.

5.  Return the value of _s’s_ [[SymbolData]] internal slot.

The value of the NAME property of this function is
"[SYMBOL.TOPRIMITIVE]".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Symbol.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"SYMBOL".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Symbol Instances

Symbol instances are ordinary objects that inherit properties from the
Symbol prototype object. Symbol instances have a [[SymbolData]] internal
slot. The [[SymbolData]] internal slot is the Symbol value represented
by this Symbol object.


Error Objects

Instances of Error objects are thrown as exceptions when runtime errors
occur. The Error objects may also serve as base objects for user-defined
exception classes.

The Error Constructor 

The Error constructor is the %Error% intrinsic object and the initial
value of the ERROR property of the global object. When ERROR is called
as a function rather than as a constructor, it creates and initializes a
new Error object. Thus the function call ERROR(…) is equivalent to the
object creation expression NEW ERROR(…) with the same arguments.

The ERROR constructor is designed to be subclassable. It may be used as
the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified ERROR behaviour must
include a SUPER call to the ERROR constructor to create and initialize
subclass instances with a [[ErrorData]] internal slot.

Error ( message )

When the ERROR function is called with argument _message_ the following
steps are taken:

1.  If NewTarget is UNDEFINED_,_ let _newTarget_ be the active function
    object, else let _newTarget_ be NewTarget.

2.  Let _O_ be OrdinaryCreateFromConstructor(_newTarget_,
    "%ERRORPROTOTYPE%", «[[ErrorData]]»).

3.  ReturnIfAbrupt(_O_).

4.  If _message_ is not UNDEFINED, then

    a.  Let _msg_ be ToString(_message_).

    b.  ReturnIfAbrupt(_msg_).

    c.  Let _msgDesc_ be the PropertyDescriptor{[[Value]]: _msg_,
        [[Writable]]: TRUE, [[Enumerable]]: FALSE, [[Configurable]]:
        TRUE}.

    d.  Let _status_ be DefinePropertyOrThrow(_O_, "MESSAGE",
        _msgDesc_).

    e.  Assert: _status_ is not an abrupt completion.

5.  Return _O_.

Properties of the Error Constructor

The value of the [[Prototype]] internal slot of the Error constructor is
the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 1), the Error constructor
has the following properties:

Error.prototype

The initial value of ERROR.PROTOTYPE is the intrinsic object
%ErrorPrototype% (19.5.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the Error Prototype Object

The Error prototype object is the intrinsic object %ErrorPrototype%. The
Error prototype object is an ordinary object. It is not an Error
instance and does not have an [[ErrorData]] internal slot.

The value of the [[Prototype]] internal slot of the Error prototype
object is the intrinsic object %ObjectPrototype% (19.1.3).

Error.prototype.constructor

The initial value of ERROR.PROTOTYPE.CONSTRUCTOR is the intrinsic object
%Error%.

Error.prototype.message

The initial value of ERROR.PROTOTYPE.MESSAGE is the empty String.

Error.prototype.name

The initial value of ERROR.PROTOTYPE.NAME is "ERROR".

Error.prototype.toString ( )

The following steps are taken:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  Let _name_ be Get(_O_, "NAME").

4.  ReturnIfAbrupt(_name_).

5.  If _name_ is UNDEFINED, let _name_ be "ERROR"; otherwise let _name
    be ToString(_name_).

6.  ReturnIfAbrupt(_name_).

7.  Let _msg_ be Get(_O_, "MESSAGE").

8.  ReturnIfAbrupt(_msg_).

9.  If _msg_ is UNDEFINED, let _msg_ be the empty String; otherwise let
    _msg_ be ToString(_msg_).

10. ReturnIfAbrupt(_msg_).

11. If _name_ is the empty String, return _msg_.

12. If _msg_ is the empty String, return _name_.

13. Return the result of concatenating _name_, the code unit 0x003A
    (COLON), the code unit 0x0020 (SPACE), and _msg_.

Properties of Error Instances

Error instances are ordinary objects that inherit properties from the
Error prototype object and have an [[ErrorData]] internal slot whose
value is UNDEFINED. The only specified uses of [[ErrorData]] is to
identify Error and _NativeError_ instances as Error objects within
OBJECT.PROTOTYPE.TOSTRING.

Native Error Types Used in This Standard

A new instance of one of the _NativeError_ objects below is thrown when
a runtime error is detected. All of these objects share the same
structure, as described in 19.5.6.

EvalError

This exception is not currently used within this specification. This
object remains for compatibility with previous editions of this
specification.

RangeError

Indicates a value that is not in the set or range of allowable values.

ReferenceError

Indicate that an invalid reference value has been detected.

SyntaxError

Indicates that a parsing error has occurred.

TypeError

Indicates the actual type of an operand is different than the expected
type.

URIError

Indicates that one of the global URI handling functions was used in a
way that is incompatible with its definition.

_NativeError_ Object Structure

When an ECMAScript implementation detects a runtime error, it throws a
new instance of one of the _NativeError_ objects defined in 19.5.5. Each
of these objects has the structure described below, differing only in
the name used as the constructor name instead of _NativeError_, in the
NAME property of the prototype object, and in the implementation-defined
MESSAGE property of the prototype object.

For each error object, references to _NativeError_ in the definition
should be replaced with the appropriate error object name from 19.5.5.

_NativeError_ Constructors

When a _NativeError_ constructor is called as a function rather than as
a constructor, it creates and initializes a new _NativeError_ object. A
call of the object as a function is equivalent to calling it as a
constructor with the same arguments. Thus the function call
_NativeError_(…) is equivalent to the object creation expression NEW
_NativeError_(…) with the same arguments.

Each _NativeError_ constructor is designed to be subclassable. It may be
used as the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified _NativeError_
behaviour must include a SUPER call to the _NativeError_ constructor to
create and initialize subclass instances with a [[ErrorData]] internal
slot.

NativeError ( message )

When a _NativeError_ function is called with argument _message_ the
following steps are taken:

1.  If NewTarget is UNDEFINED_,_ let _newTarget_ be the active function
    object, else let _newTarget_ be NewTarget.

2.  Let _O_ be OrdinaryCreateFromConstructor(_newTarget_,
    "%_NATIVEERROR_PROTOTYPE%", «[[ErrorData]]» ).

3.  ReturnIfAbrupt(_O_).

4.  If _message_ is not UNDEFINED, then

    a.  Let _msg_ be ToString(_message_).

    b.  Let _msgDesc_ be the PropertyDescriptor{[[Value]]: _msg_,
        [[Writable]]: TRUE, [[Enumerable]]: FALSE, [[Configurable]]:
        TRUE}.

    c.  Let _status_ be DefinePropertyOrThrow(_O_, "MESSAGE",
        _msgDesc_).

    d.  Assert: _status_ is not an abrupt completion.

5.  Return _O_.

The actual value of the string passed in step 2 is either
"%EVALERRORPROTOTYPE%", "%RANGEERRORPROTOTYPE%",
"%REFERENCEERRORPROTOTYPE%", "%SYNTAXERRORPROTOTYPE%",
"%TYPEERRORPROTOTYPE%", or "%URIERRORPROTOTYPE%" corresponding to which
_NativeError_ constructor is being defined.

Properties of the _NativeError_ Constructors

The value of the [[Prototype]] internal slot of a _NativeError_
constructor is the intrinsic object %Error% (19.5.1).

Besides the LENGTH property (whose value is 1), each _NativeError_
constructor has the following properties:

NativeError.prototype

The initial value of _NATIVEERROR_.PROTOTYPE is a _NativeError_
prototype object (19.5.6.3). Each _NativeError_ constructor has a
distinct prototype object.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the _NativeError_ Prototype Objects

Each _NativeError_ prototype object is an ordinary object. It is not an
Error instance and does not have an [[ErrorData]] internal slot.

The value of the [[Prototype]] internal slot of each _NativeError_
prototype object is the intrinsic object %ErrorPrototype% (19.5.3).

_NativeError_.prototype.constructor

The initial value of the CONSTRUCTOR property of the prototype for a
given _NativeError_ constructor is the corresponding intrinsic object
%_NativeError_% (19.5.6.1).

 _NativeError_.prototype.message

The initial value of the MESSAGE property of the prototype for a given
_NativeError_ constructor is the empty String.

 _NativeError_.prototype.name

The initial value of the NAME property of the prototype for a given
_NativeError_ constructor is a string consisting of the name of the
constructor (the name used instead of _NativeError_).

Properties of _NativeError_ Instances

_NativeError_ instances are ordinary objects that inherit properties
from their _NativeError_ prototype object and have an [[ErrorData]]
internal slot whose value is UNDEFINED. The only specified use of
[[ErrorData]] is by OBJECT.PROTOTYPE.TOSTRING (19.1.3.6) to identify
Error or _NativeError_ instances.



NUMBERS AND DATES 


Number Objects

The Number Constructor 

The Number constructor is the %Number% intrinsic object and the initial
value of the NUMBER property of the global object. When called as a
constructor, it creates and initializes a new Number object. When NUMBER
is called as a function rather than as a constructor, it performs a type
conversion.

The NUMBER constructor is designed to be subclassable. It may be used as
the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified NUMBER behaviour must
include a SUPER call to the NUMBER constructor to create and initialize
the subclass instance with a [[NumberData]] internal slot.

Number ( [ value ] )

When NUMBER is called with argument _number_, the following steps are
taken:

1.  If no arguments were passed to this function invocation, let _n
    be +0.

2.  Else, let _n_ be ToNumber(_value_).

3.  ReturnIfAbrupt(_n_).

4.  If NewTarget is UNDEFINED_,_ return _n_.

5.  Let _O_ be OrdinaryCreateFromConstructor(NewTarget,
    "%NUMBERPROTOTYPE%", «[[NumberData]]» ).

6.  ReturnIfAbrupt(_O_).

7.  Set the value of _O’s_ [[NumberData]] internal slot to _n_.

8.  Return _O_.

Properties of the Number Constructor

The value of the [[Prototype]] internal slot of the Number constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 1), the Number constructor
has the following properties:

Number.EPSILON

The value of Number.EPSILON is the difference between 1 and the smallest
value greater than 1 that is representable as a Number value, which is
approximately 2.2204460492503130808472633361816 x 10‍^−‍16^.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Number.isFinite ( number )

When the NUMBER.ISFINITE is called with one argument _number_, the
following steps are taken:

1.  If Type(_number_) is not Number, return FALSE.

2.  If _number_ is NAN, +∞, or −∞, return FALSE.

3.  Otherwise, return TRUE.

Number.isInteger ( number )

When the NUMBER.ISINTEGER is called with one argument _number_, the
following steps are taken:

1.  If Type(_number_) is not Number, return FALSE.

2.  If _number_ is NAN, +∞, or −∞, return FALSE.

3.  Let _integer_ be ToInteger(_number_).

4.  If _integer_ is not equal to _number_, return FALSE.

5.  Otherwise, return TRUE.

Number.isNaN ( number )

When the NUMBER.ISNAN is called with one argument _number_, the
following steps are taken:

1.  If Type(_number_) is not Number, return FALSE.

2.  If _number_ is NAN, return TRUE.

3.  Otherwise, return FALSE.

NOTE This function differs from the global isNaN function (18.2.3) is
that it does not convert its argument to a Number before determining
whether it is NaN.

Number.isSafeInteger ( number )

When the NUMBER.ISSAFEINTEGER is called with one argument _number_, the
following steps are taken:

1.  If Type(_number_) is not Number, return FALSE.

2.  If _number_ is NAN, +∞, or −∞, return FALSE.

3.  Let _integer_ be ToInteger(_number_).

4.  If _integer_ is not equal to _number_, return FALSE.

5.  If abs(_integer_) ≤ 2^53^−1, return TRUE.

6.  Otherwise, return FALSE.

Number.MAX_SAFE_INTEGER

NOTE The value of NUMBER.MAX_SAFE_INTEGER is the largest integer n such
that n and n + 1 are both exactly representable as a Number value.

The value of Number.MAX_SAFE_INTEGER is 9007199254740991 (2^53^−1).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

 Number.MAX_VALUE

The value of NUMBER.MAX_VALUE is the largest positive finite value of
the Number type, which is approximately 1.7976931348623157 × 10^308^.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Number.MIN_SAFE_INTEGER

NOTE The value of NUMBER.MIN_SAFE_INTEGER is the smallest integer n such
that n and n − 1 are both exactly representable as a Number value.

The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53^−1)).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Number.MIN_VALUE

The value of NUMBER.MIN_VALUE is the smallest positive value of the
Number type, which is approximately 5 × 10^−324^.

In the IEEE 754-2008 double precision binary representation, the
smallest possible value is a denormalized number. If an implementation
does not support denormalized values, the value of NUMBER.MIN_VALUE must
be the smallest non-zero positive value that can actually be represented
by the implementation.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Number.NaN

The value of NUMBER.NAN is NAN.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Number.NEGATIVE_INFINITY

The value of Number.NEGATIVE_INFINITY is −∞.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Number.parseFloat ( string )

The value of the NUMBER.PARSEFLOAT data property is the same built-in
function object that is the value of the PARSEFLOAT property of the
global object defined in 18.2.4.

Number.parseInt ( string, radix )

The value of the NUMBER.PARSEINT data property is the same built-in
function object that is the value of the PARSEINT property of the global
object defined in 18.2.5.

Number.POSITIVE_INFINITY

The value of Number.POSITIVE_INFINITY is +∞.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Number.prototype

The initial value of NUMBER.PROTOTYPE is the intrinsic object
%NumberPrototype% (20.1.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the Number Prototype Object

The Number prototype object is the intrinsic object %NumberPrototype%.
The Number prototype object is an ordinary object. It is not a Number
instance and does not have a [[NumberData]] internal slot.

The value of the [[Prototype]] internal slot of the Number prototype
object is the intrinsic object %ObjectPrototype% (19.1.3).

Unless explicitly stated otherwise, the methods of the Number prototype
object defined below are not generic and the THIS value passed to them
must be either a Number value or an object that has a [[NumberData]]
internal slot that has been initialized to a Number value.

The abstract operation thisNumberValue(_value_) performs the following
steps:

1.  If Type(_value_) is Number, return _value_.

2.  If Type(_value_) is Object and _value_ has a [[NumberData]] internal
    slot, then

    a.  Assert: _value_’s [[NumberData]] internal slot is a Number
        value.

    b.  Return the value of _value’s_ [[NumberData]] internal slot.

3.  Throw a TYPEERROR exception.

The phrase “this Number value” within the specification of a method
refers to the result returned by calling the abstract operation
thisNumberValue with the THIS value of the method invocation passed as
the argument.

Number.prototype.constructor

The initial value of NUMBER.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %Number%.

Number.prototype.toExponential ( fractionDigits )

Return a String containing this Number value represented in decimal
exponential notation with one digit before the significand's decimal
point and _fractionDigits_ digits after the significand's decimal point.
If _fractionDigits_ is UNDEFINED, include as many significand digits as
necessary to uniquely specify the Number (just like in ToString except
that in this case the Number is always output in exponential notation).
Specifically, perform the following steps:

1.  Let _x_ be thisNumberValue(THIS value).

2.  ReturnIfAbrupt(_x_).

3.  Let _f_ be ToInteger(_fractionDigits_).

4.  Assert: _f_ is 0, when _fractionDigits_ is UNDEFINED.

5.  ReturnIfAbrupt(_f_).

6.  If _x_ is NAN, return the String "NAN".

7.  Let _s_ be the empty String.

8.  If _x_ _<_ 0, then

    a.  Let _s_ be "-".

    b.  Let _x_ = –_x_.

9.  If _x_ = +∞, then

    a.  Return the concatenation of the Strings _s_ and "INFINITY".

10. If _f_ < 0 or _f_ > 20, throw a RANGEERROR exception. However, an
    implementation is permitted to extend the behaviour of TOEXPONENTIAL
    for values of _f_ less than 0 or greater than 20. In this case
    TOEXPONENTIAL would not necessarily throw RANGEERROR for such
    values.

11. If _x_ = 0, then

    a.  Let _m_ be the String consisting of _f_+1 occurrences of the
        code unit 0x0030.

    b.  Let _e_ = 0.

12. Else _x_ ≠ 0,

    a.  If _fractionDigits_ is not UNDEFINED, then

        i.  Let _e_ and _n_ be integers such that 10_^f^_ ≤ _n_ <
            10^_f_+1^ and for which the exact mathematical value of _n_
            × 10^_e_–_f_^ – _x_ is as close to zero as possible. If
            there are two such sets of _e_ and _n_, pick the _e_ and _n_
            for which _n_ × 10^_e_–_f_^ is larger.

    b.  Else _fractionDigits_ is UNDEFINED,

        i.  Let _e_, _n_, and _f_ be integers such that _f_ ≥ 0, 10_^f^_
            ≤ _n_ < 10^_f_+1^, the Number value for n × 10^_e_–_f_^ is
            _x_, and _f_ is as small as possible. Note that the decimal
            representation of _n_ has _f_+1 digits, _n_ is not divisible
            by 10, and the least significant digit of _n_ is not
            necessarily uniquely determined by these criteria.

    c.  Let _m_ be the String consisting of the digits of the decimal
        representation of _n_ (in order, with no leading zeroes).

13. If _f_ ≠ 0, then

    a.  Let _a_ be the first element of _m_, and let _b_ be the
        remaining _f_ elements of _m_.

    b.  Let _m_ be the concatenation of the three Strings _a_, ".", and
        _b_.

14. If _e_ = 0, then

    a.  Let _c_ = "+".

    b.  Let _d_ = "0".

15. Else

    a.  If _e_ > 0, let _c_ = "+".

    b.  Else _e_ ≤ 0,

        i.  Let _c_ = "-".

        ii. Let _e_ = –_e_.

    c.  Let _d_ be the String consisting of the digits of the decimal
        representation of _e_ (in order, with no leading zeroes).

16. Let _m_ be the concatenation of the four Strings _m_, "E", _c_, and
    _d_.

17. Return the concatenation of the Strings _s_ and _m_.

The LENGTH property of the TOEXPONENTIAL method is 1.

If the TOEXPONENTIAL method is called with more than one argument, then
the behaviour is undefined (see clause 17).

NOTE For implementations that provide more accurate conversions than
required by the rules above, it is recommended that the following
alternative version of step 12.b.i be used as a guideline:

i.  Let _e_, _n_, and _f_ be integers such that _f_ ≥ 0, 10_^f^_ ≤ n <
      10^_f_+1^, the Number value for n × 10^_e_–_f_^ is x, and _f_ is
      as small as possible. If there are multiple possibilities for _n_,
      choose the value of _n_ for which _n_ × 10^_e_–_f_^ is closest in
      value to _x_. If there are two such possible values of _n_, choose
      the one that is even.

Number.prototype.toFixed ( fractionDigits )

NOTE TOFIXED returns a String containing this Number value represented
in decimal fixed-point notation with _fractionDigits_ digits after the
decimal point. If _fractionDigits_ is UNDEFINED, 0 is assumed.

The following steps are performed:

1.  Let _x_ be thisNumberValue(THIS value).

2.  ReturnIfAbrupt(_x_).

3.  Let _f_ be ToInteger(_fractionDigits_). (If _fractionDigits_ is
    UNDEFINED, this step produces the value 0).

4.  ReturnIfAbrupt(_f_).

5.  If _f_ < 0 or _f_ > 20, throw a RANGEERROR exception. However, an
    implementation is permitted to extend the behaviour of TOFIXED for
    values of _f_ less than 0 or greater than 20. In this case TOFIXED
    would not necessarily throw RANGEERROR for such values.

6.  If _x_ is NAN, return the String "NAN".

7.  Let _s_ be the empty String.

8.  If _x_ < 0, then

    a.  Let _s_ be "-".

    b.  Let _x_ = –_x_.

9.  If _x_ ≥ 10^21^, then

    a.  Let _m_ = ToString(_x_).

10. Else _x_ < 10^21^,

    a.  Let _n_ be an integer for which the exact mathematical value of
        _n_ ÷ 10^f^ – _x_ is as close to zero as possible. If there are
        two such _n_, pick the larger _n_.

    b.  If _n_ = 0, let _m_ be the String "0". Otherwise, let _m_ be the
        String consisting of the digits of the decimal representation of
        _n_ (in order, with no leading zeroes).

    c.  If _f_ ≠ 0, then

        i.  Let _k_ be the number of elements in _m_.

        ii. If _k_ ≤ _f_, then

            1.  Let _z_ be the String consisting of _f_+1–_k_
                occurrences of the code unit 0x0030.

            2.  Let _m_ be the concatenation of Strings _z_ and _m_.

            3.  Let _k_ = _f_ + 1.

        iii. Let _a_ be the first _k_–_f_ elements of _m_, and let _b_
            be the remaining _f_ elements of _m_.

        iv. Let _m_ be the concatenation of the three Strings _a_, ".",
            and _b_.

11. Return the concatenation of the Strings _s_ and _m_.

The LENGTH property of the TOFIXED method is 1.

If the TOFIXED method is called with more than one argument, then the
behaviour is undefined (see clause 17).

NOTE The output of TOFIXED may be more precise than TOSTRING for some
values because toString only prints enough significant digits to
distinguish the number from adjacent number values. For example,

(1000000000000000128).TOSTRING() returns "1000000000000000100",
while (1000000000000000128).TOFIXED(0) returns "1000000000000000128".

Number.prototype.toLocaleString( [ reserved1 [ , reserved2 ] ])

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
NUMBER.PROTOTYPE.TOLOCALESTRING method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the TOLOCALESTRING method is
used.

Produces a String value that represents this Number value formatted
according to the conventions of the host environment’s current locale.
This function is implementation-dependent, and it is permissible, but
not encouraged, for it to return the same thing as TOSTRING.

The meanings of the optional parameters to this method are defined in
the ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

The LENGTH property of the TOLOCALESTRING method is 0.

Number.prototype.toPrecision ( precision )

Return a String containing this Number value represented either in
decimal exponential notation with one digit before the significand's
decimal point and _precision_–1 digits after the significand's decimal
point or in decimal fixed notation with _precision_ significant digits.
If _precision_ is UNDEFINED, call ToString (7.1.12) instead.
Specifically, perform the following steps:

1.  Let _x_ be thisNumberValue(THIS value).

2.  ReturnIfAbrupt(_x_).

3.  If _precision_ is UNDEFINED, return ToString(_x_).

4.  Let _p_ be ToInteger(_precision_).

5.  ReturnIfAbrupt(_p_).

6.  If _x_ is NAN, return the String "NAN".

7.  Let _s_ be the empty String.

8.  If _x_ < 0, then

    a.  Let _s_ be code unit 0x002D (HYPHEN-MINUS).

    b.  Let _x_ = –_x_.

9.  If _x_ = +∞, then

    a.  Return the String that is the concatenation of _s_ and
        "INFINITY".

10. If _p_ < 1 or _p_ > 21, throw a RANGEERROR exception. However, an
    implementation is permitted to extend the behaviour of TOPRECISION
    for values of _p_ less than 1 or greater than 21. In this case
    TOPRECISION would not necessarily throw RANGEERROR for such values.

11. If _x_ = 0, then

    a.  Let _m_ be the String consisting of _p_ occurrences of the code
        unit 0x0030 (DIGIT ZERO).

    b.  Let _e_ = 0.

12. Else _x_ ≠ 0,

    a.  Let _e_ and _n_ be integers such that 10^_p_–1^ ≤ _n_ < 10_^p^_
        and for which the exact mathematical value of _n_ ×
        10^_e_–_p_+1^ – _x_ is as close to zero as possible. If there
        are two such sets of _e_ and _n_, pick the _e_ and _n_ for which
        _n_ × 10^_e_–_p_+1^ is larger.

    b.  Let _m_ be the String consisting of the digits of the decimal
        representation of _n_ (in order, with no leading zeroes).

    c.  If _e_ < –6 or _e_ ≥ _p_, then

        i.  Assert: _e_ ≠ 0

        ii. Let _a_ be the first element of _m_, and let _b_ be the
            remaining _p_–1 elements of _m_.

        iii. Let _m_ be the concatenation of _a_, code unit 0x002E (FULL
            STOP), and _b_.

        iv. If _e_ > 0, then

            1.  Let _c_ be code unit 0x002B (PLUS SIGN).

        v.  Else _e_ < 0,

            1.  Let _c_ be code unit 0x002D (HYPHEN-MINUS).

            2.  Let _e_ = –_e_.

        vi. Let _d_ be the String consisting of the digits of the
            decimal representation of _e_ (in order, with no leading
            zeroes).

        vii. Return the concatenation of _s_, _m_, code unit 0x0065
            (LATIN SMALL LETTER E), _c_, and _d_.

13. If _e_ = _p_–1, return the concatenation of the Strings _s_ and _m_.

14. If _e_ ≥ 0, then

    a.  Let _m_ be the concatenation of the first _e_+1 elements of _m_,
        the code unit 0x002E (FULL STOP), and the remaining _p_– (_e_+1)
        elements of _m_.

15. Else _e_ < 0,

    a.  Let _m_ be the String formed by the concatenation of code unit
        0x0030 (DIGIT ZERO), code unit 0x002E (FULL STOP), –(_e_+1)
        occurrences of code unit 0x0030 (DIGIT ZERO), and the String
        _m_.

16. Return the String that is the concatenation of _s_ and _m_.

The LENGTH property of the TOPRECISION method is 1.

If the TOPRECISION method is called with more than one argument, then
the behaviour is undefined (see clause 17).

 Number.prototype.toString ( [ radix ] )

NOTE The optional _radix_ should be an integer value in the inclusive
range 2 to 36. If _radix_ not present or is UNDEFINED the Number 10 is
used as the value of _radix_.

The following steps are performed:

1.  Let _x_ be thisNumberValue(THIS value).

2.  ReturnIfAbrupt(_x_).

3.  If _radix_ is not present, let _radixNumber_ be 10.

4.  Else if _radix_ is UNDEFINED, let _radixNumber_ be 10.

5.  Else let _radixNumber_ be ToInteger(_radix_).

6.  ReturnIfAbrupt(_radixNumber_).

7.  If _radixNumber_ < 2 or _radixNumber_ > 36, throw a RANGEERROR
    exception.

8.  If _radixNumber_ = 10, return ToString(_x_).

9.  Return the String representation of this Number value using the
    radix specified by _radixNumber_. Letters A-Z are used for digits
    with values 10 through 35. The precise algorithm is
    implementation-dependent, however the algorithm should be a
    generalization of that specified in 7.1.12.1.

The TOSTRING function is not generic; it throws a TYPEERROR exception if
its THIS value is not a Number or a Number object. Therefore, it cannot
be transferred to other kinds of objects for use as a method.

Number.prototype.valueOf ( )

1.  Let _x_ be thisNumberValue(THIS value).

2.  Return _x_.

Properties of Number Instances

Number instances are ordinary objects that inherit properties from the
Number prototype object. Number instances also have a [[NumberData]]
internal slot. The [[NumberData]] internal slot is the Number value
represented by this Number object.


The Math Object

The Math object is the %Math% intrinsic object and the initial value of
the MATH property of the global object. The Math object is a single
ordinary object.

The value of the [[Prototype]] internal slot of the Math object is the
intrinsic object %ObjectPrototype% (19.1.3).

The Math object is not a function object. It does not have a
[[Construct]] internal method; it is not possible to use the Math object
as a constructor with the NEW operator. The Math object also does not
have a [[Call]] internal method; it is not possible to invoke the Math
object as a function.

NOTE In this specification, the phrase “the Number value for _x_” has a
technical meaning defined in 6.1.6.

Value Properties of the Math Object

Math.E

The Number value for _e_, the base of the natural logarithms, which is
approximately 2.7182818284590452354.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

 Math.LN10

The Number value for the natural logarithm of 10, which is approximately
2.302585092994046.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Math.LN2

The Number value for the natural logarithm of 2, which is approximately
0.6931471805599453.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Math.LOG10E

The Number value for the base-10 logarithm of _e_, the base of the
natural logarithms; this value is approximately 0.4342944819032518.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

NOTE The value of MATH.LOG10E is approximately the reciprocal of the
value of MATH.LN10.

Math.LOG2E

The Number value for the base-2 logarithm of _e_, the base of the
natural logarithms; this value is approximately 1.4426950408889634.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

NOTE The value of MATH.LOG2E is approximately the reciprocal of the
value of MATH.LN2.

Math.PI

The Number value for π, the ratio of the circumference of a circle to
its diameter, which is approximately 3.1415926535897932.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Math.SQRT1_2

The Number value for the square root of ½, which is approximately
0.7071067811865476.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

NOTE The value of MATH.SQRT1_2 is approximately the reciprocal of the
value of MATH.SQRT2.

Math.SQRT2

The Number value for the square root of 2, which is approximately
1.4142135623730951.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Math [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"MATH".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Function Properties of the Math Object

Each of the following MATH object functions applies the ToNumber
abstract operation to each of its arguments (in left-to-right order if
there is more than one). If ToNumber returns an abrupt completion, that
Completion Record is immediately returned. Otherwise, the function
performs a computation on the resulting Number value(s). The value
returned by each function is a Number.

In the function descriptions below, the symbols NaN, −0, +0, −∞ and +∞
refer to the Number values described in 6.1.6.

NOTE The behaviour of the functions ACOS, ACOSH, ASIN, ASINH, ATAN,
ATANH, ATAN2, CBRT, COS, COSH, EXP, EXPM1, HYPOT, LOG,LOG1P, LOG2,
LOG10, POW, RANDOM, SIN, SINH, SQRT, TAN, and TANH is not precisely
specified here except to require specific results for certain argument
values that represent boundary cases of interest. For other argument
values, these functions are intended to compute approximations to the
results of familiar mathematical functions, but some latitude is allowed
in the choice of approximation algorithms. The general intent is that an
implementer should be able to use the same mathematical library for
ECMAScript on a given hardware platform that is available to C
programmers on that platform.

Although the choice of algorithms is left to the implementation, it is
recommended (but not specified by this standard) that implementations
use the approximation algorithms for IEEE 754-2008 arithmetic contained
in FDLIBM, the freely distributable mathematical library from Sun
Microsystems (http://www.netlib.org/fdlibm).

Math.abs ( x )

Returns the absolute value of _x_; the result has the same magnitude as
_x_ but has positive sign.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is −0, the result is +0.

-   If _x_ is −∞, the result is +∞.

Math.acos ( x )

Returns an implementation-dependent approximation to the arc cosine of
_x_. The result is expressed in radians and ranges from +0 to +π.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is greater than 1, the result is NaN.

-   If _x_ is less than −1, the result is NaN.

-   If _x_ is exactly 1, the result is +0.

Math.acosh( x )

Returns an implementation-dependent approximation to the inverse
hyperbolic cosine of _x_.

-   If _x_ is NaN, the result is NaN.

-   If x is less than 1, the result is NaN.

-   If x is 1, the result is +0.

-   If _x_ is +∞, the result is +∞.

Math.asin ( x )

Returns an implementation-dependent approximation to the arc sine of
_x_. The result is expressed in radians and ranges from −π/2 to +π/2.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is greater than 1, the result is NaN.

-   If _x_ is less than –1, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

Math.asinh( x )

Returns an implementation-dependent approximation to the inverse
hyperbolic sine of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

-   If x is −∞, the result is −∞.

Math.atan ( x )

Returns an implementation-dependent approximation to the arc tangent of
_x_. The result is expressed in radians and ranges from −π/2 to +π/2.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is an implementation-dependent
      approximation to +π/2.

-   If _x_ is −∞, the result is an implementation-dependent
      approximation to −π/2.

Math.atanh( x )

Returns an implementation-dependent approximation to the inverse
hyperbolic tangent of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is less than −1, the result is NaN.

-   If _x_ is greater than 1, the result is NaN.

-   If _x_ is −1, the result is −∞.

-   If _x_ is +1, the result is +∞.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

Math.atan2 ( y, x )

Returns an implementation-dependent approximation to the arc tangent of
the quotient _y_/_x_ of the arguments _y_ and _x_, where the signs of
_y_ and _x_ are used to determine the quadrant of the result. Note that
it is intentional and traditional for the two-argument arc tangent
function that the argument named _y_ be first and the argument named _x_
be second. The result is expressed in radians and ranges from −π to +π.

-   If either _x_ or _y_ is NaN, the result is NaN.

-   If _y_>0 and _x_ is +0, the result is an implementation-dependent
      approximation to +π/2.

-   If _y_>0 and _x_ is −0, the result is an implementation-dependent
      approximation to +π/2.

-   If _y_ is +0 and _x_>0, the result is +0.

-   If _y_ is +0 and _x_ is +0, the result is +0.

-   If _y_ is +0 and _x_ is −0, the result is an
      implementation-dependent approximation to +π.

-   If _y_ is +0 and _x_<0, the result is an implementation-dependent
      approximation to +π.

-   If _y_ is −0 and _x_>0, the result is −0.

-   If _y_ is −0 and _x_ is +0, the result is −0.

-   If _y_ is −0 and _x_ is −0, the result is an
      implementation-dependent approximation to −π.

-   If _y_ is −0 and _x_<0, the result is an implementation-dependent
      approximation to −π.

-   If _y_<0 and _x_ is +0, the result is an implementation-dependent
      approximation to −π/2.

-   If _y_<0 and _x_ is −0, the result is an implementation-dependent
      approximation to −π/2.

-   If _y_>0 and _y_ is finite and _x_ is +∞, the result is +0.

-   If _y_>0 and _y_ is finite and _x_ is −∞, the result if an
      implementation-dependent approximation to +π.

-   If _y_<0 and _y_ is finite and _x_ is +∞, the result is −0.

-   If _y_<0 and _y_ is finite and _x_ is −∞, the result is an
      implementation-dependent approximation to −π.

-   If _y_ is +∞ and _x_ is finite, the result is an
      implementation-dependent approximation to +π/2.

-   If _y_ is −∞ and _x_ is finite, the result is an
      implementation-dependent approximation to −π/2.

-   If _y_ is +∞ and _x_ is +∞, the result is an
      implementation-dependent approximation to +π/4.

-   If _y_ is +∞ and _x_ is −∞, the result is an
      implementation-dependent approximation to +3π/4.

-   If _y_ is −∞ and _x_ is +∞, the result is an
      implementation-dependent approximation to −π/4.

-   If _y_ is −∞ and _x_ is −∞, the result is an
      implementation-dependent approximation to −3π/4.

Math.cbrt ( x )

Returns an implementation-dependent approximation to the cube root of
_x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

-   If _x_ is −∞, the result is −∞.

Math.ceil ( x )

Returns the smallest (closest to −∞) Number value that is not less than
_x_ and is equal to a mathematical integer. If _x_ is already an
integer, the result is _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

-   If _x_ is −∞, the result is −∞.

-   If _x_ is less than 0 but greater than -1, the result is −0.

The value of MATH.CEIL(X) is the same as the value of -MATH.FLOOR(-X).

Math.clz32 ( x )

When MATH.CLZ32 is called with one argument _x_, the following steps are
taken:

1.  Let _n_ be ToUint32(_x_).

2.  Let _p_ be the number of leading zero bits in the 32-bit binary
    representation of _n_.

3.  Return _p_.

NOTE If _n_ is 0, _p_ will be 32. If the most significant bit of the
32-bit binary encoding of _n_ is 1, _p_ will be 0.

Math.cos ( x )

Returns an implementation-dependent approximation to the cosine of _x_.
The argument is expressed in radians.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is 1.

-   If _x_ is −0, the result is 1.

-   If _x_ is +∞, the result is NaN.

-   If _x_ is −∞, the result is NaN.

Math.cosh ( x )

Returns an implementation-dependent approximation to the hyperbolic
cosine of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is 1.

-   If _x_ is −0, the result is 1.

-   If _x_ is +∞, the result is +∞.

-   If _x_ is −∞, the result is +∞.

NOTE The value of cosh(x) is the same as _(exp(x) + exp(-x))/2_.

Math.exp ( x )

Returns an implementation-dependent approximation to the exponential
function of _x_ (_e_ raised to the power of _x_, where _e_ is the base
of the natural logarithms).

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is 1.

-   If _x_ is −0, the result is 1.

-   If _x_ is +∞, the result is +∞.

-   If _x_ is −∞, the result is +0.

Math.expm1 ( x )

Returns an implementation-dependent approximation to subtracting 1 from
the exponential function of _x_ (_e_ raised to the power of _x_, where
_e_ is the base of the natural logarithms). The result is computed in a
way that is accurate even when the value of x is close 0.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

-   If _x_ is −∞, the result is −1.

Math.floor ( x )

Returns the greatest (closest to +∞) Number value that is not greater
than _x_ and is equal to a mathematical integer. If _x_ is already an
integer, the result is _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

-   If _x_ is −∞, the result is −∞.

-   If _x_ is greater than 0 but less than 1, the result is +0.

NOTE The value of MATH.FLOOR(X) is the same as the value of
-MATH.CEIL(-X).

Math.fround ( x )

When MATH.FROUND is called with argument _x_ the following steps are
taken:

1.  If _x_ is NaN, return NaN.

2.  If _x_ is one of +0, −0, +∞, −∞, return _x_.

3.  Let _x32_ be the result of converting _x_ to a value in IEEE
    754-2008 binary32 format using roundTiesToEven.

4.  Let _x64_ be the result of converting _x32_ to a value in IEEE
    754-2008 binary64 format.

5.  Return the ECMAScript Number value corresponding to _x64_.

Math.hypot ( value1 , value2 , …values )

MATH.HYPOT returns an implementation-dependent approximation of the
square root of the sum of squares of its arguments.

-   If no arguments are passed, the result is +0.

-   If any argument is +∞, the result is +∞.

-   If any argument is −∞, the result is +∞.

-   If no argument is +∞ or −∞, and any argument is NaN, the result is
      NaN.

-   If all arguments are either +0 or −0, the result is +0.

The length property of the HYPOT function is 2.

NOTE Implementations should take care to avoid the loss of precision
from overflows and underflows that are prone to occur in naive
implementations when this function is called with two or more arguments.

Math.imul ( x, y )

When the MATH.IMUL is called with arguments _x_ and _y_ the following
steps are taken:

1.  Let _a_ be ToUint32(_x_).

2.  Let _b_ be ToUint32(_y_).

3.  Let _product_ be (_a_ × _b_) modulo 2^32^.

4.  If _product_ ≥ 2^31^, return _product_ − 2^32^, otherwise return
    _product_.

Math.log ( x )

Returns an implementation-dependent approximation to the natural
logarithm of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is less than 0, the result is NaN.

-   If _x_ is +0 or −0, the result is −∞.

-   If _x_ is 1, the result is +0.

-   If _x_ is +∞, the result is +∞.

Math.log1p ( x )

Returns an implementation-dependent approximation to the natural
logarithm of 1 + _x_. The result is computed in a way that is accurate
even when the value of x is close to zero.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is less than -1, the result is NaN.

-   If x is -1, the result is -∞.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

Math.log10 ( x )

Returns an implementation-dependent approximation to the base 10
logarithm of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is less than 0, the result is NaN.

-   If _x_ is +0, the result is −∞.

-   If _x_ is −0, the result is −∞.

-   If _x_ is 1, the result is +0.

-   If _x_ is +∞, the result is +∞.

-   

Math.log2 ( x )

Returns an implementation-dependent approximation to the base 2
logarithm of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is less than 0, the result is NaN.

-   If _x_ is +0, the result is −∞.

-   If _x_ is −0, the result is −∞.

-   If _x_ is 1, the result is +0.

-   If _x_ is +∞, the result is +∞.

-   

Math.max ( value1, value2 , …values )

Given zero or more arguments, calls ToNumber on each of the arguments
and returns the largest of the resulting values.

-   If no arguments are given, the result is −∞.

-   If any value is NaN, the result is NaN.

-   The comparison of values to determine the largest value is done
      using the Abstract Relational Comparison algorithm (7.2.7) except
      that +0 is considered to be larger than −0.

The LENGTH property of the MAX method is 2.

Math.min ( value1, value2 , …values )

Given zero or more arguments, calls ToNumber on each of the arguments
and returns the smallest of the resulting values.

-   If no arguments are given, the result is +∞.

-   If any value is NaN, the result is NaN.

-   The comparison of values to determine the smallest value is done
      using the Abstract Relational Comparison algorithm (7.2.7) except
      that +0 is considered to be larger than −0.

The LENGTH property of the MIN method is 2.

Math.pow ( x, y )

Returns an implementation-dependent approximation to the result of
raising _x_ to the power _y_.

-   If _y_ is NaN, the result is NaN.

-   If _y_ is +0, the result is 1, even if _x_ is NaN.

-   If _y_ is −0, the result is 1, even if _x_ is NaN.

-   If _x_ is NaN and _y_ is nonzero, the result is NaN.

-   If abs(_x_)>1 and _y_ is +∞, the result is +∞.

-   If abs(_x_)>1 and _y_ is −∞, the result is +0.

-   If abs(_x_) is 1 and _y_ is +∞, the result is NaN.

-   If abs(_x_) is 1 and _y_ is −∞, the result is NaN.

-   If abs(_x_)<1 and _y_ is +∞, the result is +0.

-   If abs(_x_)<1 and _y_ is −∞, the result is +∞.

-   If _x_ is +∞ and _y_>0, the result is +∞.

-   If _x_ is +∞ and _y_<0, the result is +0.

-   If _x_ is −∞ and _y_>0 and _y_ is an odd integer, the result is −∞.

-   If _x_ is −∞ and _y_>0 and _y_ is not an odd integer, the result
      is +∞.

-   If _x_ is −∞ and _y_<0 and _y_ is an odd integer, the result is −0.

-   If _x_ is −∞ and _y_<0 and _y_ is not an odd integer, the result
      is +0.

-   If _x_ is +0 and _y_>0, the result is +0.

-   If _x_ is +0 and _y_<0, the result is +∞.

-   If _x_ is −0 and _y_>0 and _y_ is an odd integer, the result is −0.

-   If _x_ is −0 and _y_>0 and _y_ is not an odd integer, the result
      is +0.

-   If _x_ is −0 and _y_<0 and _y_ is an odd integer, the result is −∞.

-   If _x_ is −0 and _y_<0 and _y_ is not an odd integer, the result
      is +∞.

-   If _x_<0 and _x_ is finite and _y_ is finite and _y_ is not an
      integer, the result is NaN.

Math.random ( )

Returns a Number value with positive sign, greater than or equal to 0
but less than 1, chosen randomly or pseudo randomly with approximately
uniform distribution over that range, using an implementation-dependent
algorithm or strategy. This function takes no arguments.

Each MATH.RANDOM function created for distinct code Realms must produce
a distinct sequence of values from successive calls.

Math.round ( x )

Returns the Number value that is closest to _x_ and is equal to a
mathematical integer. If two integer Number values are equally close to
_x_, then the result is the Number value that is closer to +∞. If _x_ is
already an integer, the result is _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

-   If _x_ is −∞, the result is −∞.

-   If _x_ is greater than 0 but less than 0.5, the result is +0.

-   If _x_ is less than 0 but greater than or equal to -0.5, the result
      is −0.

NOTE 1 MATH.ROUND(3.5) returns 4, but MATH.ROUND(–3.5) returns –3.

NOTE 2 The value of MATH.ROUND(X) is not always the same as the value of
MATH.FLOOR(X+0.5). When X is −0 or is less than 0 but greater than or
equal to -0.5, MATH.ROUND(X) returns −0, but MATH.FLOOR(X+0.5)
returns +0. MATH.ROUND(X) may also differ from the value of
MATH.FLOOR(X+0.5)because of internal rounding when computing X+0.5.

Math.sign(x)

Returns the sign of the x, indicating whether x is positive, negative or
zero.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is −0, the result is −0.

-   If _x_ is +0, the result is +0.

-   If _x_ is negative and not −0, the result is −1.

-   If _x_ is positive and not +0, the result is +1.

Math.sin ( x )

Returns an implementation-dependent approximation to the sine of _x_.
The argument is expressed in radians.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞ or −∞, the result is NaN.

Math.sinh( x )

Returns an implementation-dependent approximation to the hyperbolic sine
of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

-   If x is −∞, the result is −∞.

NOTE The value of sinh(x) is the same as _(exp(x) - exp(-x))/2_.

Math.sqrt ( x )

Returns an implementation-dependent approximation to the square root of
_x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is less than 0, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +∞.

Math.tan ( x )

Returns an implementation-dependent approximation to the tangent of _x_.
The argument is expressed in radians.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞ or −∞, the result is NaN.

Math.tanh ( x )

Returns an implementation-dependent approximation to the hyperbolic
tangent of _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is +0, the result is +0.

-   If _x_ is −0, the result is −0.

-   If _x_ is +∞, the result is +1.

-   If _x_ is −∞, the result is -1.

NOTE The value of tanh(x) is the same as _(exp(x) - exp(-x))/(exp(x) +
exp(-x))_.

Math.trunc ( x )

Returns the integral part of the number _x_, removing any fractional
digits. If _x_ is already an integer, the result is _x_.

-   If _x_ is NaN, the result is NaN.

-   If _x_ is −0, the result is −0.

-   If _x_ is +0, the result is +0.

-   If _x_ is +∞, the result is +∞.

-   If x is −∞, the result is −∞.

-   If _x_ is greater than 0 but less than 1, the result is +0.

-   If _x_ is less than 0 but greater than −1, the result is −0.


Date Objects

Overview of Date Objects and Definitions of Abstract Operations

The following functions are abstract operations that operate on time
values (defined in 20.3.1.1). Note that, in every case, if any argument
to one of these functions is NAN, the result will be NAN.

Time Values and Time Range

A Date object contains a Number indicating a particular instant in time
to within a millisecond. Such a Number is called a _time value_. A time
value may also be NAN, indicating that the Date object does not
represent a specific instant of time.

Time is measured in ECMAScript in milliseconds since 01 January, 1970
UTC. In time values leap seconds are ignored. It is assumed that there
are exactly 86,400,000 milliseconds per day. ECMAScript Number values
can represent all integers from –9,007,199,254,740,992 to
9,007,199,254,740,992; this range suffices to measure times to
millisecond precision for any instant that is within approximately
285,616 years, either forward or backward, from 01 January, 1970 UTC.

The actual range of times supported by ECMAScript Date objects is
slightly smaller: exactly –100,000,000 days to 100,000,000 days measured
relative to midnight at the beginning of 01 January, 1970 UTC. This
gives a range of 8,640,000,000,000,000 milliseconds to either side of 01
January, 1970 UTC.

The exact moment of midnight at the beginning of 01 January, 1970 UTC is
represented by the value +0.

Day Number and Time within Day

A given time value _t_ belongs to day number

Day(_t_) = floor(_t_ / msPerDay)

where the number of milliseconds per day is

msPerDay = 86400000

The remainder is called the time within the day:

TimeWithinDay(_t_) = _t_ modulo msPerDay

Year Number

ECMAScript uses an extrapolated Gregorian system to map a day number to
a year number and to determine the month and date within that year. In
this system, leap years are precisely those which are (divisible by 4)
and ((not divisible by 100) or (divisible by 400)). The number of days
in year number _y_ is therefore defined by

  DaysInYear(_y_) = 365 if (_y_ modulo 4) ≠ 0
  = 366 if (_y_ modulo 4) = 0 and (_y_ modulo 100) ≠ 0
  = 365 if (_y_ modulo 100) = 0 and (_y_ modulo 400) ≠ 0
  = 366 if (_y_ modulo 400) = 0

All non-leap years have 365 days with the usual number of days per month
and leap years have an extra day in February. The day number of the
first day of year _y_ is given by:

DayFromYear(_y_) = 365 × (_y_−1970) + floor((_y_−1969)/4) −
floor((_y_−1901)/100) + floor((_y_−1601)/400)

The time value of the start of a year is:

TimeFromYear(_y_) = msPerDay × DayFromYear(_y_)

A time value determines a year by:

YearFromTime(_t_) = the largest integer _y_ (closest to positive
infinity) such that TimeFromYear(_y_) ≤ _t_

The leap-year function is 1 for a time within a leap year and otherwise
is zero:

  InLeapYear(_t_) = 0 if DaysInYear(YearFromTime(_t_)) = 365
  = 1 if DaysInYear(YearFromTime(_t_)) = 366

Month Number

Months are identified by an integer in the range 0 to 11, inclusive. The
mapping MonthFromTime(_t_) from a time value _t_ to a month number is
defined by:

MonthFromTime(_t_) = 0 if 0 ≤ DayWithinYear(_t_) < 31
 = 1 if 31 ≤ DayWithinYear (_t_) < 59+InLeapYear(_t_)
 = 2 if 59+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 90+InLeapYear(_t_)
 = 3 if 90+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 120+InLeapYear(_t_)
 = 4 if 120+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 151+InLeapYear(_t_)
 = 5 if 151+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 181+InLeapYear(_t_)
 = 6 if 181+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 212+InLeapYear(_t_)
 = 7 if 212+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 243+InLeapYear(_t_)
 = 8 if 243+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 273+InLeapYear(_t_)
 = 9 if 273+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 304+InLeapYear(_t_)
 = 10 if 304+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 334+InLeapYear(_t_)
 = 11 if 334+InLeapYear(_t_) ≤ DayWithinYear (_t_) < 365+InLeapYear(_t_)

where

DayWithinYear(_t_) = Day(_t_)−DayFromYear(YearFromTime(_t_))

A month value of 0 specifies January; 1 specifies February; 2 specifies
March; 3 specifies April; 4 specifies May; 5 specifies June; 6 specifies
July; 7 specifies August; 8 specifies September; 9 specifies October; 10
specifies November; and 11 specifies December. Note that
MonthFromTime(0) = 0, corresponding to Thursday, 01 January, 1970.

Date Number

A date number is identified by an integer in the range 1 through 31,
inclusive. The mapping DateFromTime(_t_) from a time value _t_ to a date
number is defined by:

  DateFromTime(_t_) = DayWithinYear(_t_)+1 if MonthFromTime(_t_)=0
   = DayWithinYear(_t_)−30 if MonthFromTime(_t_)=1
   = DayWithinYear(_t_)−58−InLeapYear(_t_) if MonthFromTime(_t_)=2
   = DayWithinYear(_t_)−89−InLeapYear(_t_) if MonthFromTime(_t_)=3
   = DayWithinYear(_t_)−119−InLeapYear(_t_) if MonthFromTime(_t_)=4
   = DayWithinYear(_t_)−150−InLeapYear(_t_) if MonthFromTime(_t_)=5
   = DayWithinYear(_t_)−180−InLeapYear(_t_) if MonthFromTime(_t_)=6
   = DayWithinYear(_t_)−211−InLeapYear(_t_) if MonthFromTime(_t_)=7
   = DayWithinYear(_t_)−242−InLeapYear(_t_) if MonthFromTime(_t_)=8
   = DayWithinYear(_t_)−272−InLeapYear(_t_) if MonthFromTime(_t_)=9
   = DayWithinYear(_t_)−303−InLeapYear(_t_) if MonthFromTime(_t_)=10
   = DayWithinYear(_t_)−333−InLeapYear(_t_) if MonthFromTime(_t_)=11

Week Day

The weekday for a particular time value _t_ is defined as

WeekDay(_t_) = (Day(_t_) + 4) modulo 7

A weekday value of 0 specifies Sunday; 1 specifies Monday; 2 specifies
Tuesday; 3 specifies Wednesday; 4 specifies Thursday; 5 specifies
Friday; and 6 specifies Saturday. Note that WeekDay(0) = 4,
corresponding to Thursday, 01 January, 1970.

Local Time Zone Adjustment

An implementation of ECMAScript is expected to determine the local time
zone adjustment. The local time zone adjustment is a value LocalTZA
measured in milliseconds which when added to UTC represents the local
_standard_ time. Daylight saving time is _not_ reflected by LocalTZA.

NOTE It is recommended that implementations use the time zone
information of the IANA Time Zone Database
_http://www.iana.org/time-zones/_.

Daylight Saving Time Adjustment

An implementation dependent algorithm using best available information
on time zones to determine the local daylight saving time adjustment
DaylightSavingTA(_t_), measured in milliseconds. An implementation of
ECMAScript is expected to make its best effort to determine the local
daylight saving time adjustment.

NOTE It is recommended that implementations use the time zone
information of the IANA Time Zone Database
_http://www.iana.org/time-zones/_.

LocalTime ( t )

The abstract operation LocalTime with argument _t_ converts _t_ from UTC
to local time by performing the following steps:

1.  ReturnIfAbrupt(_t_).

2.  Return _t_ + LocalTZA + DaylightSavingTA(_t_).

UTC ( t )

The abstract operation UTC with argument _t_ converts _t_ from local
time to UTC is defined by performing the following steps:

1.  ReturnIfAbrupt(_t_).

2.  Return _t_ – LocalTZA – DaylightSavingTA(_t_ – LocalTZA).

NOTE UTC(LocalTime(_t_)) is not necessarily always equal to _t_.

Hours, Minutes, Second, and Milliseconds

The following abstract operations are useful in decomposing time values:

HourFromTime(_t_) = floor(_t_ / msPerHour) modulo HoursPerDay

MinFromTime(_t_) = floor(_t_ / msPerMinute) modulo MinutesPerHour

SecFromTime(_t_) = floor(_t_ / msPerSecond) modulo SecondsPerMinute

msFromTime(_t_) = _t_ modulo msPerSecond

where

HoursPerDay = 24

MinutesPerHour = 60

SecondsPerMinute = 60

msPerSecond = 1000

msPerMinute = 60000 = msPerSecond × SecondsPerMinute

msPerHour = 3600000 = msPerMinute × MinutesPerHour

MakeTime (hour, min, sec, ms)

The abstract operation MakeTime calculates a number of milliseconds from
its four arguments, which must be ECMAScript Number values. This
operator functions as follows:

1.  If _hour_ is not finite or _min_ is not finite or _sec_ is not
    finite or _ms_ is not finite, return NAN.

2.  Let _h_ be ToInteger(_hour_).

3.  Let _m_ be ToInteger(_min_).

4.  Let _s_ be ToInteger(_sec_).

5.  Let _milli_ be ToInteger(_ms_).

6.  Let _t_ be _h_ * msPerHour + _m_ * msPerMinute + _s_ * msPerSecond +
    _milli_, performing the arithmetic according to IEEE 754-2008 rules
    (that is, as if using the ECMAScript operators * and +).

7.  Return _t_.

MakeDay (year, month, date)

The abstract operation MakeDay calculates a number of days from its
three arguments, which must be ECMAScript Number values. This operator
functions as follows:

1.  If _year_ is not finite or _month_ is not finite or _date_ is not
    finite, return NAN.

2.  Let _y_ be ToInteger(_year_).

3.  Let _m_ be ToInteger(_month_).

4.  Let _dt_ be ToInteger(_date_).

5.  Let _ym_ be _y_ + floor(_m_ /12).

6.  Let _mn_ be _m_ modulo 12.

7.  Find a value _t_ such that YearFromTime(_t_) is _ym_ and
    MonthFromTime(_t_) is _mn_ and DateFromTime(_t_) is 1; but if this
    is not possible (because some argument is out of range), return NAN.

8.  Return Day(_t_) + _dt_ − 1.

MakeDate (day, time)

The abstract operation MakeDate calculates a number of milliseconds from
its two arguments, which must be ECMAScript Number values. This operator
functions as follows:

1.  If _day_ is not finite or _time_ is not finite, return NAN.

2.  Return _day_ × msPerDay + _time_.

TimeClip (time)

The abstract operation TimeClip calculates a number of milliseconds from
its argument, which must be an ECMAScript Number value. This operator
functions as follows:

1.  If _time_ is not finite, return NAN.

2.  If abs(_time_) > 8.64 × 10^15^, return NAN.

3.  Return ToInteger(_time_) + (+0). (Adding a positive zero converts −
    to +0.)

NOTE The point of step 3 is that an implementation is permitted a choice
of internal representations of time values, for example as a 64-bit
signed integer or as a 64-bit floating-point value. Depending on the
implementation, this internal representation may or may not distinguish
−0 and +0.

Date Time String Format

ECMAScript defines a string interchange format for date-times based upon
a simplification of the ISO 8601 Extended Format. The format is as
follows: YYYY-MM-DDTHH:MM:SS.SSS_Z_

Where the fields are as follows:

This format includes date-only forms:

  YYYY
  YYYY-MM
  YYYY-MM-DD

It also includes “date-time” forms that consist of one of the above
date-only forms immediately followed by one of the following time forms
with an optional time zone offset appended:

  THH:MM
  THH:MM:SS
  THH:MM:SS.SSS

All numbers must be base 10. If the MM or DD fields are absent "01" is
used as the value. If the HH, MM, or SS fields are absent "00" is used
as the value and the value of an absent SSS field is "000". If the time
zone offset is absent, the date-time is interpreted as a local time.

Illegal values (out-of-bounds as well as syntax errors) in a format
string means that the format string is not a valid instance of this
format.

NOTE 1 As every day both starts and ends with midnight, the two
notations 00:00 and 24:00 are available to distinguish the two midnights
that can be associated with one date. This means that the following two
notations refer to exactly the same point in time: 1995-02-04T24:00 and
1995-02-05T00:

NOTE 2 There exists no international standard that specifies
abbreviations for civil time zones like CET, EST, etc. and sometimes the
same abbreviation is even used for two very different time zones. For
this reason, ISO 8601 and this format specifies numeric representations
of date and time.

Extended years

ECMAScript requires the ability to specify 6 digit years (extended
years); approximately 285,426 years, either forward or backward, from 01
January, 1970 UTC. To represent years before 0 or after 9999, ISO 8601
permits the expansion of the year representation, but only by prior
agreement between the sender and the receiver. In the simplified
ECMAScript format such an expanded year representation shall have 2
extra year digits and is always prefixed with a + or – sign. The year 0
is considered positive and hence prefixed with a + sign.

NOTE Examples of extended years:

  -283457-03-21T15:00:59.008Z 283458 B.C.
  -000001-01-01T00:00:00Z 2 B.C.
  +000000-01-01T00:00:00Z 1 B.C.
  +000001-01-01T00:00:00Z 1 A.D.
  +001970-01-01T00:00:00Z 1970 A.D.
  +002009-12-15T00:00:00Z 2009 A.D.
  +287396-10-12T08:59:00.992Z 287396 A.D.

The Date Constructor 

The Date constructor is the %Date% intrinsic object and the initial
value of the DATE property of the global object. When called as a
constructor it creates and initializes a new Date object. When DATE is
called as a function rather than as a constructor, it returns a String
representing the current time (UTC).

The DATE constructor is a single function whose behaviour is overloaded
based upon the number and types of its arguments.

The DATE constructor is designed to be subclassable. It may be used as
the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified DATE behaviour must
include a SUPER call to the DATE constructor to create and initialize
the subclass instance with a [[DateValue]] internal slot.

Date ( year, month [, date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )

This description applies only if the Date constructor is called with at
least two arguments.

When the DATE function is called the following steps are taken:

1.  Let _numberOfArgs_ be the number of arguments passed to this
    function call.

2.  Assert: _numberOfArgs_ ≥ 2.

3.  If NewTarget is not UNDEFINED, then

    a.  Let _y_ be ToNumber(_year_).

    b.  ReturnIfAbrupt(_y_).

    c.  Let _m_ be ToNumber(_month_).

    d.  ReturnIfAbrupt(_m_).

    e.  If _date_ is supplied, let _dt_ be ToNumber(_date_); else let
        _dt_ be 1.

    f.  ReturnIfAbrupt(_dt_).

    g.  If _hours_ is supplied, let _h_ be ToNumber(_hours_); else let
        _h_ be 0.

    h.  ReturnIfAbrupt(_h_).

    i.  If _minutes_ is supplied, let _min_ be ToNumber(_minutes_); else
        let _min_ be 0.

    j.  ReturnIfAbrupt(_min_).

    k.  If _seconds_ is supplied, let _s_ be ToNumber(_seconds_); else
        let _s_ be 0.

    l.  ReturnIfAbrupt(_s_).

    m.  If _ms_ is supplied, let _milli_ be ToNumber(_ms_); else let
        _milli_ be 0.

    n.  ReturnIfAbrupt(_milli_).

    o.  If _y_ is not NAN and 0 ≤ ToInteger(_y_) ≤ 99, let _yr_
        be 1900+ToInteger(_y_); otherwise, let _yr_ be _y_.

    p.  Let _finalDate_ be MakeDate(MakeDay(_yr_, _m_, _dt_),
        MakeTime(_h_, _min_, _s_, _milli_)).

    q.  Let _O_ be OrdinaryCreateFromConstructor(NewTarget,
        "%DATEPROTOTYPE%", «‍ [[DateValue]]»).

    r.  ReturnIfAbrupt(_O_).

    s.  Set the [[DateValue]] internal slot of _O_ to
        TimeClip(UTC(_finalDate_)).

    t.  Return _O_.

4.  Else,

    a.  Let _now_ be the Number that is the time value (UTC) identifying
        the current time.

    b.  Return ToDateString (_now_).

Date ( value )

This description applies only if the Date constructor is called with
exactly one argument.

When the DATE function is called the following steps are taken:

1.  Let _numberOfArgs_ be the number of arguments passed to this
    function call.

2.  Assert: _numberOfArgs_ = 1.

3.  If NewTarget is not UNDEFINED, then

    a.  If Type(_value_) is Object and _value_ has a [[DateValue]]
        internal slot, then

        i.  Let _tv_ be thisTimeValue(_value_).

    b.  Else,

        i.  Let _v_ be ToPrimitive(_value_).

        ii. If Type(_v_) is String, then

            1.  Let _tv_ be the result of parsing _v_ as a date, in
                exactly the same manner as for the PARSE method
                (20.3.3.2). If the parse resulted in an abrupt
                completion, _tv_ is the Completion Record.

        iii. Else,

            1.  Let _tv_ be ToNumber(_v_).

    c.  ReturnIfAbrupt(_tv_).

    d.  Let _O_ be OrdinaryCreateFromConstructor(NewTarget,
        "%DATEPROTOTYPE%", «‍ [[DateValue]]»).

    e.  ReturnIfAbrupt(_O_).

    f.  Set the [[DateValue]] internal slot of _O_ to TimeClip(_tv_).

    g.  Return _O_.

4.  Else,

    a.  Let _now_ be the Number that is the time value (UTC) identifying
        the current time.

    b.  Return ToDateString (_now_).

Date ( )

This description applies only if the Date constructor is called with no
arguments.

When the DATE function is called the following steps are taken:

1.  Let _numberOfArgs_ be the number of arguments passed to this
    function call.

2.  Assert: _numberOfArgs_ = 0.

3.  If NewTarget is not UNDEFINED, then

    a.  Let _O_ be OrdinaryCreateFromConstructor(NewTarget,
        "%DATEPROTOTYPE%", «‍ [[DateValue]]»).

    b.  ReturnIfAbrupt(_O_).

    c.  Set the [[DateValue]] internal slot of _O_ to the time value
        (UTC) identifying the current time.

    d.  Return _O_.

4.  Else,

    a.  Let _now_ be the Number that is the time value (UTC) identifying
        the current time.

    b.  Return ToDateString (_now_).

Properties of the Date Constructor

The value of the [[Prototype]] internal slot of the Date constructor is
the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 7), the Date constructor has
the following properties:

Date.now ( )

The NOW function returns a Number value that is the time value
designating the UTC date and time of the occurrence of the call to NOW.

Date.parse ( string )

The PARSE function applies the ToString operator to its argument. If
ToString results in an abrupt completion the Completion Record is
immediately returned. Otherwise, PARSE interprets the resulting String
as a date and time; it returns a Number, the UTC time value
corresponding to the date and time. The String may be interpreted as a
local time, a UTC time, or a time in some other time zone, depending on
the contents of the String. The function first attempts to parse the
format of the String according to the rules (including extended years)
called out in Date Time String Format (20.3.1.16). If the String does
not conform to that format the function may fall back to any
implementation-specific heuristics or implementation-specific date
formats. Unrecognizable Strings or dates containing illegal element
values in the format String shall cause DATE.PARSE to return NAN.

If _x_ is any Date object whose milliseconds amount is zero within a
particular implementation of ECMAScript, then all of the following
expressions should produce the same numeric value in that
implementation, if all the properties referenced have their initial
values:

  _X_.VALUEOF()

  DATE.PARSE(_X_.TOSTRING())

  DATE.PARSE(_X_.TOUTCSTRING())

  DATE.PARSE(_X_.TOISOSTRING())

However, the expression

  DATE.PARSE(_X_.TOLOCALESTRING())

is not required to produce the same Number value as the preceding three
expressions and, in general, the value produced by DATE.PARSE is
implementation-dependent when given any String value that does not
conform to the Date Time String Format (20.3.1.16) and that could not be
produced in that implementation by the TOSTRING or TOUTCSTRING method.

Date.prototype

The initial value of DATE.PROTOTYPE is the intrinsic object
%DatePrototype% (20.3.4).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )

When the UTC function is called with fewer than two arguments, the
behaviour is implementation-dependent. When the UTC function is called
with two to seven arguments, it computes the date from _year_, _month_
and (optionally) _date_, _hours_, _minutes_, _seconds_ and _ms_. The
following steps are taken:

1.  Let _y_ be ToNumber(_year_).

2.  ReturnIfAbrupt(_y_).

3.  Let _m_ be ToNumber(_month_).

4.  ReturnIfAbrupt(_m_).

5.  If _date_ is supplied, let _dt_ be ToNumber(_date_); else let _dt
    be 1.

6.  ReturnIfAbrupt(_dt_).

7.  If _hours_ is supplied, let _h_ be ToNumber(_hours_); else let _h
    be 0.

8.  ReturnIfAbrupt(_h_).

9.  If _minutes_ is supplied, let _min_ be ToNumber(_minutes_); else let
    _min_ be 0.

10. ReturnIfAbrupt(_min_).

11. If _seconds_ is supplied, let _s_ be ToNumber(_seconds_); else let
    _s_ be 0.

12. ReturnIfAbrupt(_s_).

13. If _ms_ is supplied, let _milli_ be ToNumber(_ms_); else let _milli
    be 0.

14. ReturnIfAbrupt(_milli_).

15. If _y_ is not NAN and 0 ≤ ToInteger(_y_) ≤ 99, let _yr
    be 1900+ToInteger(_y_); otherwise, let _yr_ be _y_.

16. Return TimeClip(MakeDate(MakeDay(_yr_, _m_, _dt_), MakeTime(_h_,
    _min_, _s_, _milli_))).

The LENGTH property of the UTC function is 7.

NOTE The UTC function differs from the Date constructor in two ways: it
returns a time value as a Number, rather than creating a Date object,
and it interprets the arguments in UTC rather than as local time.

Properties of the Date Prototype Object

The Date prototype object is the intrinsic object %DatePrototype%. The
Date prototype object is itself an ordinary object. It is not a Date
instance and does not have a [[DateValue]] internal slot.

The value of the [[Prototype]] internal slot of the Date prototype
object is the intrinsic object %ObjectPrototype% (20.3.4).

Unless explicitly defined otherwise, the methods of the Date prototype
object defined below are not generic and the THIS value passed to them
must be an object that has a [[DateValue]] internal slot that has been
initialized to a time value.

The abstract operation thisTimeValue(_value_) performs the following
steps:

1.  If Type(_value_) is Object and _value_ has a [[DateValue]] internal
    slot, then

    a.  Return the value of _value’s_ [[DateValue]] internal slot.

2.  Throw a TYPEERROR exception.

In following descriptions of functions that are properties of the Date
prototype object, the phrase “this Date object” refers to the object
that is the THIS value for the invocation of the function. If the Type
of the THIS value is not Object, a TYPEERROR exception is thrown. The
phrase “this time value” within the specification of a method refers to
the result returned by calling the abstract operation thisTimeValue with
the THIS value of the method invocation passed as the argument.

Date.prototype.constructor

The initial value of DATE.PROTOTYPE.CONSTRUCTOR is the intrinsic object
%Date%.

Date.prototype.getDate ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return DateFromTime(LocalTime(_t_)).

Date.prototype.getDay ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return WeekDay(LocalTime(_t_)).

Date.prototype.getFullYear ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return YearFromTime(LocalTime(_t_)).

Date.prototype.getHours ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return HourFromTime(LocalTime(_t_)).

Date.prototype.getMilliseconds ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return msFromTime(LocalTime(_t_)).

Date.prototype.getMinutes ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return MinFromTime(LocalTime(_t_)).

Date.prototype.getMonth ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return MonthFromTime(LocalTime(_t_)).

Date.prototype.getSeconds ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return SecFromTime(LocalTime(_t_)).

Date.prototype.getTime ( )

The following steps are performed:

1.  Return this time value.

Date.prototype.getTimezoneOffset ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return (_t_ − LocalTime(_t_)) / msPerMinute.

Date.prototype.getUTCDate ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return DateFromTime(_t_).

Date.prototype.getUTCDay ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return WeekDay(_t_).

Date.prototype.getUTCFullYear ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return YearFromTime(_t_).

Date.prototype.getUTCHours ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return HourFromTime(_t_).

Date.prototype.getUTCMilliseconds ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return msFromTime(_t_).

Date.prototype.getUTCMinutes ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return MinFromTime(_t_).

Date.prototype.getUTCMonth ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return MonthFromTime(_t_).

Date.prototype.getUTCSeconds ( )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return SecFromTime(_t_).

Date.prototype.setDate ( date )

The following steps are performed:

1.  Let _t_ be LocalTime(this time value).

2.  ReturnIfAbrupt(_t_).

3.  Let _dt_ be ToNumber(_date_).

4.  ReturnIfAbrupt(_dt_).

5.  Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_),
    MonthFromTime(_t_), _dt_), TimeWithinDay(_t_)).

6.  Let _u_ be TimeClip(UTC(_newDate_)).

7.  Set the [[DateValue]] internal slot of this Date object to _u_.

8.  Return _u_.

Date.prototype.setFullYear ( year [ , month [ , date ] ] )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, let _t_ be +0; otherwise, let _t_ be LocalTime(_t_).

4.  ReturnIfAbrupt(_t_).

5.  Let _y_ be ToNumber(_year_).

6.  ReturnIfAbrupt(_y_).

7.  If _month_ is not specified, let _m_ be MonthFromTime(_t_);
    otherwise, let _m_ be ToNumber(_month_).

8.  ReturnIfAbrupt(_m_).

9.  If _date_ is not specified, let _dt_ be DateFromTime(_t_);
    otherwise, let _dt_ be ToNumber(_date_).

10. ReturnIfAbrupt(_dt_).

11. Let _newDate_ be MakeDate(MakeDay(_y_, _m_, _dt_),
    TimeWithinDay(_t_)).

12. Let _u_ be TimeClip(UTC(_newDate_)).

13. Set the [[DateValue]] internal slot of this Date object to _u_.

14. Return _u_.

The LENGTH property of the SETFULLYEAR method is 3.

NOTE If _month_ is not specified, this method behaves as if _month_ were
specified with the value GETMONTH(). If _date_ is not specified, it
behaves as if _date_ were specified with the value GETDATE().

Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )

The following steps are performed:

1.  Let _t_ be LocalTime(this time value).

2.  ReturnIfAbrupt(_t_).

3.  Let _h_ be ToNumber(_hour_).

4.  ReturnIfAbrupt(_h_).

5.  If _min_ is not specified, let _m_ be MinFromTime(_t_); otherwise,
    let _m_ be ToNumber(_min_).

6.  ReturnIfAbrupt(_m_).

7.  If _sec_ is not specified, let _s_ be SecFromTime(_t_); otherwise,
    let _s_ be ToNumber(_sec_).

8.  ReturnIfAbrupt(_s_).

9.  If _ms_ is not specified, let _milli_ be msFromTime(_t_); otherwise,
    let _milli_ be ToNumber(_ms_).

10. ReturnIfAbrupt(_milli_).

11. Let _date_ be MakeDate(Day(_t_), MakeTime(_h_, _m_, _s_, _milli_)).

12. Let _u_ be TimeClip(UTC(_date_)).

13. Set the [[DateValue]] internal slot of this Date object to _u_.

14. Return _u_.

The LENGTH property of the SETHOURS method is 4.

NOTE If _min_ is not specified, this method behaves as if _min_ were
specified with the value GETMINUTES(). If _sec_ is not specified, it
behaves as if _sec_ were specified with the value GETSECONDS(). If _ms_
is not specified, it behaves as if _ms_ were specified with the value
GETMILLISECONDS().

Date.prototype.setMilliseconds ( ms )

The following steps are performed:

1.  Let _t_ be LocalTime(this time value).

2.  ReturnIfAbrupt(_t_).

3.  Let _ms_ be ToNumber(_ms_).

4.  ReturnIfAbrupt(_ms_).

5.  Let _time_ be MakeTime(HourFromTime(_t_), MinFromTime(_t_),
    SecFromTime(_t_), _ms_).

6.  Let _u_ be TimeClip(UTC(MakeDate(Day(_t_), _time_))).

7.  Set the [[DateValue]] internal slot of this Date object to _u_.

8.  Return _u_.

Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )

The following steps are performed:

1.  Let _t_ be LocalTime(this time value).

2.  ReturnIfAbrupt(_t_).

3.  Let _m_ be ToNumber(_min_).

4.  ReturnIfAbrupt(_m_).

5.  If _sec_ is not specified, let _s_ be SecFromTime(_t_); otherwise,
    let _s_ be ToNumber(_sec_).

6.  ReturnIfAbrupt(_s_).

7.  If _ms_ is not specified, let _milli_ be msFromTime(_t_); otherwise,
    let _milli_ be ToNumber(_ms_).

8.  ReturnIfAbrupt(_milli_).

9.  Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_), _m_,
    _s_, _milli_)).

10. Let _u_ be TimeClip(UTC(_date_)).

11. Set the [[DateValue]] internal slot of this Date object to _u_.

12. Return _u_.

The LENGTH property of the SETMINUTES method is 3.

NOTE If _sec_ is not specified, this method behaves as if _sec_ were
specified with the value GETSECONDS(). If _ms_ is not specified, this
behaves as if _ms_ were specified with the value GETMILLISECONDS().

Date.prototype.setMonth ( month [ , date ] )

The following steps are performed:

1.  Let _t_ be LocalTime(this time value).

2.  ReturnIfAbrupt(_t_).

3.  Let _m_ be ToNumber(_month_).

4.  ReturnIfAbrupt(_m_).

5.  If _date_ is not specified, let _dt_ be DateFromTime(_t_);
    otherwise, let _dt_ be ToNumber(_date_).

6.  ReturnIfAbrupt(_dt_).

7.  Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_), _m_, _dt_),
    TimeWithinDay(_t_)).

8.  Let _u_ be TimeClip(UTC(_newDate_)).

9.  Set the [[DateValue]] internal slot of this Date object to _u_.

10. Return _u_.

The LENGTH property of the SETMONTH method is 2.

NOTE If _date_ is not specified, this method behaves as if _date_ were
specified with the value GETDATE().

Date.prototype.setSeconds ( sec [ , ms ] )

The following steps are performed:

1.  Let _t_ be LocalTime(this time value).

2.  ReturnIfAbrupt(_t_).

3.  Let _s_ be ToNumber(_sec_).

4.  ReturnIfAbrupt(_s_).

5.  If _ms_ is not specified, let _milli_ be msFromTime(_t_); otherwise,
    let _milli_ be ToNumber(_ms_).

6.  ReturnIfAbrupt(_milli_).

7.  Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_),
    MinFromTime(_t_), _s_, _milli_)).

8.  Let _u_ be TimeClip(UTC(_date_)).

9.  Set the [[DateValue]] internal slot of this Date object to _u_.

10. Return _u_.

The LENGTH property of the SETSECONDS method is 2.

NOTE If _ms_ is not specified, this method behaves as if _ms_ were
specified with the value GETMILLISECONDS().

Date.prototype.setTime ( time )

The following steps are performed:

1.  Let _valueNotUsed_ be this time value.

2.  ReturnIfAbrupt(_valueNotUsed_).

3.  Let _t_ be ToNumber(_time_).

4.  ReturnIfAbrupt(_t_).

5.  Let _v_ be TimeClip(_t_).

6.  Set the [[DateValue]] internal slot of this Date object to _v_.

7.  Return _v_.

Date.prototype.setUTCDate ( date )

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  Let _dt_ be ToNumber(_date_).

4.  ReturnIfAbrupt(_dt_).

5.  Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_),
    MonthFromTime(_t_), _dt_), TimeWithinDay(_t_)).

6.  Let _v_ be TimeClip(_newDate_).

7.  Set the [[DateValue]] internal slot of this Date object to _v_.

8.  Return _v_.

Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, let _t_ be +0.

4.  Let _y_ be ToNumber(_year_).

5.  ReturnIfAbrupt(_y_).

6.  If _month_ is not specified, let _m_ be MonthFromTime(_t_);
    otherwise, let _m_ be ToNumber(_month_).

7.  ReturnIfAbrupt(_m_).

8.  If _date_ is not specified, let _dt_ be DateFromTime(_t_);
    otherwise, let _dt_ be ToNumber(_date_).

9.  ReturnIfAbrupt(_dt_).

10. Let _newDate_ be MakeDate(MakeDay(_y_, _m_, _dt_),
    TimeWithinDay(_t_)).

11. Let _v_ be TimeClip(_newDate_).

12. Set the [[DateValue]] internal slot of this Date object to _v_.

13. Return _v_.

The LENGTH property of the SETUTCFULLYEAR method is 3.

NOTE If _month_ is not specified, this method behaves as if _month_ were
specified with the value GETUTCMONTH(). If _date_ is not specified, it
behaves as if _date_ were specified with the value GETUTCDATE().

Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  Let _h_ be ToNumber(_hour_).

4.  ReturnIfAbrupt(_h_).

5.  If _min_ is not specified, let _m_ be MinFromTime(_t_); otherwise,
    let _m_ be ToNumber(_min_).

6.  ReturnIfAbrupt(_m_).

7.  If _sec_ is not specified, let _s_ be SecFromTime(_t_); otherwise,
    let _s_ be ToNumber(_sec_).

8.  ReturnIfAbrupt(_s_).

9.  If _ms_ is not specified, let _milli_ be msFromTime(_t_); otherwise,
    let _milli_ be ToNumber(_ms_).

10. ReturnIfAbrupt(_milli_).

11. Let _newDate_ be MakeDate(Day(_t_), MakeTime(_h_, _m_, _s_,
    _milli_)).

12. Let _v_ be TimeClip(_newDate_).

13. Set the [[DateValue]] internal slot of this Date object to _v_.

14. Return _v_.

The LENGTH property of the SETUTCHOURS method is 4.

NOTE If _min_ is not specified, this method behaves as if _min_ were
specified with the value GETUTCMINUTES(). If _sec_ is not specified, it
behaves as if _sec_ were specified with the value GETUTCSECONDS(). If
_ms_ is not specified, it behaves as if _ms_ were specified with the
value GETUTCMILLISECONDS().

Date.prototype.setUTCMilliseconds ( ms )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  Let _milli_ be ToNumber(_ms_).

4.  ReturnIfAbrupt(_milli_).

5.  Let _time_ be MakeTime(HourFromTime(_t_), MinFromTime(_t_),
    SecFromTime(_t_), _milli_).

6.  Let _v_ be TimeClip(MakeDate(Day(_t_), _time_)).

7.  Set the [[DateValue]] internal slot of this Date object to _v_.

8.  Return _v_.

Date.prototype.setUTCMinutes ( min [ , sec [, ms ] ] )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  Let _m_ be ToNumber(_min_).

4.  ReturnIfAbrupt(_m_).

5.  If _sec_ is not specified, let _s_ be SecFromTime(_t_).

6.  Else

    a.  Let _s_ be ToNumber(_sec_).

    b.  ReturnIfAbrupt(_s_).

7.  If _ms_ is not specified, let _milli_ be msFromTime(_t_).

8.  Else

    a.  Let _milli_ be ToNumber(_ms_).

    b.  ReturnIfAbrupt(_milli_).

9.  Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_), _m_,
    _s_, _milli_)).

10. Let _v_ be TimeClip(_date_).

11. Set the [[DateValue]] internal slot of this Date object to _v_.

12. Return _v_.

The LENGTH property of the SETUTCMINUTES method is 3.

NOTE If _sec_ is not specified, this method behaves as if _sec_ were
specified with the value GETUTCSECONDS(). If _ms_ is not specified, it
function behaves as if _ms_ were specified with the value return by
GETUTCMILLISECONDS().

Date.prototype.setUTCMonth ( month [ , date ] )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  Let _m_ be ToNumber(_month_).

4.  ReturnIfAbrupt(_m_).

5.  If _date_ is not specified, let _dt_ be DateFromTime(_t_).

6.  Else

    a.  Let _dt_ be ToNumber(_date_).

    b.  ReturnIfAbrupt(_dt_).

7.  Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_), _m_, _dt_),
    TimeWithinDay(_t_)).

8.  Let _v_ be TimeClip(_newDate_).

9.  Set the [[DateValue]] internal slot of this Date object to _v_.

10. Return _v_.

The LENGTH property of the SETUTCMONTH method is 2.

NOTE If _date_ is not specified, this method behaves as if _date_ were
specified with the value GETUTCDATE().

Date.prototype.setUTCSeconds ( sec [ , ms ] )

The following steps are performed:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  Let _s_ be ToNumber(_sec_).

4.  ReturnIfAbrupt(_s_).

5.  If _ms_ is not specified, let _milli_ be msFromTime(_t_).

6.  Else

    a.  Let _milli_ be ToNumber(_ms_).

    b.  ReturnIfAbrupt(_milli_).

7.  Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_),
    MinFromTime(_t_), _s_, _milli_)).

8.  Let _v_ be TimeClip(_date_).

9.  Set the [[DateValue]] internal slot of this Date object to _v_.

10. Return _v_.

The LENGTH property of the SETUTCSECONDS method is 2.

NOTE If _ms_ is not specified, this method behaves as if _ms_ were
specified with the value GETUTCMILLISECONDS().

Date.prototype.toDateString ( )

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the “date”
portion of the Date in the current time zone in a convenient,
human-readable form.

Date.prototype.toISOString ( )

This function returns a String value representing the instance in time
corresponding to this time value. The format of the String is the Date
Time string format defined in 20.3.1.16. All fields are present in the
String. The time zone is always UTC, denoted by the suffix Z. If this
time value is not a finite Number or if the year is not a value that can
be represented in that format (if necessary using extended year format),
a RANGEERROR exception is thrown.

Date.prototype.toJSON ( key )

This function provides a String representation of a Date object for use
by JSON.STRINGIFY (24.3.2).

When the TOJSON method is called with argument _key_, the following
steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  Let _tv_ be ToPrimitive(_O_, hint Number).

3.  ReturnIfAbrupt(_tv_).

4.  If Type(_tv_) is Number and _tv_ is not finite, return NULL.

5.  Return Invoke(_O_, "TOISOSTRING").

NOTE 1 The argument is ignored.

NOTE 2 The TOJSON function is intentionally generic; it does not require
that its THIS value be a Date object. Therefore, it can be transferred
to other kinds of objects for use as a method. However, it does require
that any such object have a TOISOSTRING method.

Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
DATE.PROTOTYPE.TOLOCALEDATESTRING method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the TOLOCALEDATESTRING
method is used.

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the “date”
portion of the Date in the current time zone in a convenient,
human-readable form that corresponds to the conventions of the host
environment’s current locale.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

The LENGTH property of the TOLOCALEDATESTRING method is 0.

Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
DATE.PROTOTYPE.TOLOCALESTRING method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the TOLOCALESTRING method is
used.

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the Date in the
current time zone in a convenient, human-readable form that corresponds
to the conventions of the host environment’s current locale.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

The LENGTH property of the TOLOCALESTRING method is 0.

Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
DATE.PROTOTYPE.TOLOCALETIMESTRING method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the TOLOCALETIMESTRING
method is used.

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the “time”
portion of the Date in the current time zone in a convenient,
human-readable form that corresponds to the conventions of the host
environment’s current locale.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

The LENGTH property of the TOLOCALETIMESTRING method is 0.

Date.prototype.toString ( )

The following steps are performed:

1.  Let _O_ be this Date object.

2.  If _O_ does not have a [[DateValue]] internal slot, then

    a.  Let _tv_ be NaN.

3.  Else,

    a.  Let _tv_ be this time value.

4.  Return ToDateString(_tv_).

NOTE For any Date object _d_ whose milliseconds amount is zero, the
result of Date.parse(_d_.toString()) is equal to _d_.valueOf(). See
20.3.3.2.

Runtime Semantics: ToDateString(tv) 

The following steps are performed:

1.  Assert: Type(_tv_) is Number.

2.  If _tv_ is NaN, return "INVALID DATE".

3.  Return an implementation-dependent String value that represents _tv
    as a date and time in the current time zone using a convenient,
    human-readable form.

Date.prototype.toTimeString ( )

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the “time”
portion of the Date in the current time zone in a convenient,
human-readable form.

 Date.prototype.toUTCString ( )

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent this time value
in a convenient, human-readable form in UTC.

NOTE The intent is to produce a String representation of a date that is
more readable than the format specified in 20.3.1.16. It is not
essential that the chosen format be unambiguous or easily machine
parsable. If an implementation does not have a preferred human-readable
format it is recommended to use the format defined in 20.3.1.16 but with
a space rather than a "T" used to separate the date and time elements.

Date.prototype.valueOf ( )

The VALUEOF function returns a Number, which is this time value.

Date.prototype [ @@toPrimitive ] ( hint )

This function is called by ECMAScript language operators to convert a
Date object to a primitive value. The allowed values for _hint_ are
"DEFAULT", "NUMBER", and "STRING". Date objects, are unique among
built-in ECMAScript object in that they treat "DEFAULT" as being
equivalent to "STRING", All other built-in ECMAScript objects treat
"DEFAULT" as being equivalent to "NUMBER".

When the @@TOPRIMITIVE method is called with argument _hint_, the
following steps are taken:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _hint_ is the string value "STRING" or the string value "DEFAULT"
    , then

    a.  Let _tryFirst_ be "STRING".

4.  Else if _hint_ is the string value "NUMBER", then

    a.  Let _tryFirst_ be "NUMBER".

5.  Else, throw a TYPEERROR exception.

6.  Return OrdinaryToPrimitive(_O_, _tryFirst_).

The value of the NAME property of this function is
"[SYMBOL.TOPRIMITIVE]".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Date Instances

Date instances are ordinary objects that inherit properties from the
Date prototype object. Date instances also have a [[DateValue]] internal
slot. The [[DateValue]] internal slot is the time value represented by
this Date object.



 TEXT PROCESSING 


String Objects

The String Constructor 

The String constructor is the %String% intrinsic object and the initial
value of the STRING property of the global object. When called as a
constructor it creates and initializes a new String object. When STRING
is called as a function rather than as a constructor, it performs a type
conversion.

The STRING constructor is designed to be subclassable. It may be used as
the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified STRING behaviour must
include a SUPER call to the STRING constructor to create and initialize
the subclass instance with a [[StringData]] internal slot.

String ( value )

When STRING is called with argument _value_, the following steps are
taken:

1.  If no arguments were passed to this function invocation, let _s_ be
    "".

2.  Else,

    a.  If NewTarget is UNDEFINED and Type(_value_) is Symbol, return
        SymbolDescriptiveString(_value_).

    b.  Let _s_ be ToString(_value_).

3.  ReturnIfAbrupt(_s_).

4.  If NewTarget is UNDEFINED_,_ return _s_.

5.  Return StringCreate(_s_, GetPrototypeFromConstructor(NewTarget,
    "%STRINGPROTOTYPE%")).

The LENGTH property of the STRING function is 1.

Properties of the String Constructor

The value of the [[Prototype]] internal slot of the String constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 1), the String constructor
has the following properties:

String.fromCharCode ( ...codeUnits )

The STRING.FROMCHARCODE function may be called with any number of
arguments which form the rest parameter _codeUnits_. The following steps
are taken:

1.  Let _codeUnits_ be a List containing the arguments passed to this
    function.

2.  Let _length_ be the number of elements in _codeUnits_.

3.  Let _elements_ be a new List.

4.  Let _nextIndex_ be 0.

5.  Repeat while _nextIndex_ < _length

    a.  Let _next_ be _codeUnits_[_nextIndex_].

    b.  Let _nextCU_ be ToUint16(_next_).

    c.  ReturnIfAbrupt(_nextCU_).

    d.  Append _nextCU_ to the end of _elements_.

    e.  Let _nextIndex_ be _nextIndex_ + 1.

6.  Return the String value whose elements are, in order, the elements
    in the List _elements_. If _length_ is 0, the empty string is
    returned.

The LENGTH property of the FROMCHARCODE function is 1.

String.fromCodePoint ( ...codePoints )

The STRING.FROMCODEPOINT function may be called with any number of
arguments which form the rest parameter _codePoints_. The following
steps are taken:

1.  Let _codePoints_ be a List containing the arguments passed to this
    function.

2.  Let _length_ be the number of elements in _codePoints_.

3.  Let _elements_ be a new List.

4.  Let _nextIndex_ be 0.

5.  Repeat while _nextIndex_ < _length

    a.  Let _next_ be _codePoints_[_nextIndex_].

    b.  Let _nextCP_ be ToNumber(_next_).

    c.  ReturnIfAbrupt(_nextCP_).

    d.  If SameValue(_nextCP_, ToInteger(_nextCP_)) is FALSE, throw a
        RANGEERROR exception.

    e.  If _nextCP_ < 0 or _nextCP_ > 0x10FFFF, throw a RANGEERROR
        exception.

    f.  Append the elements of the UTF16Encoding (10.1.1) of _nextCP_ to
        the end of _elements_.

    g.  Let _nextIndex_ be _nextIndex_ + 1.

6.  Return the String value whose elements are, in order, the elements
    in the List _elements_. If _length_ is 0, the empty string is
    returned.

The LENGTH property of the FROMCODEPOINT function is 1.

String.prototype

The initial value of STRING.PROTOTYPE is the intrinsic object
%StringPrototype% (21.1.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

String.raw ( template , ...substitutions )

The STRING.RAW function may be called with a variable number of
arguments. The first argument is _template_ and the remainder of the
arguments form the List _substitutions_. The following steps are taken:

1.  Let _substitutions_ be a List consisting of all of the arguments
    passed to this function, starting with the second argument. If fewer
    than two arguments were passed, the List is empty.

2.  Let _numberOfSubstitutions_ be the number of elements in
    _substitutions_.

3.  Let _cooked_ be ToObject(_template_).

4.  ReturnIfAbrupt(_cooked_).

5.  Let _raw_ be ToObject(Get(_cooked_, "RAW")).

6.  7.  ReturnIfAbrupt(_raw_).

8.  Let _literalSegments_ be ToLength(Get(_raw_, "LENGTH")).

9.  ReturnIfAbrupt(_literalSegments_).

10. If _literalSegments_ ≤ 0, return the empty string.

11. Let _stringElements_ be a new List.

12. Let _nextIndex_ be 0.

13. Repeat

    a.  Let _nextKey_ be ToString(_nextIndex_).

    b.  Let _nextSeg_ be ToString(Get(_raw_, _nextKey_)).

    c.  d.  ReturnIfAbrupt(_nextSeg_).

    e.  Append in order the code unit elements of _nextSeg_ to the end
        of _stringElements_.

    f.  If _nextIndex_ + 1 = _literalSegments_, then

        i.  Return the string value whose code units are, in order, the
            elements in the List _stringElements_. If _stringElements_
            has no elements, the empty string is returned.

    g.  If _nextIndex < numberOfSubstitutions_, let _next_ be
        _substitutions_[_nextIndex_].

    h.  Else, let _next_ be the empty String.

    i.  Let _nextSub_ be ToString(_next_).

    j.  ReturnIfAbrupt(_nextSub_).

    k.  Append in order the code unit elements of _nextSub_ to the end
        of _stringElements_.

    l.  Let _nextIndex_ be _nextIndex_ + 1.

The LENGTH property of the RAW function is 1.

NOTE String.raw is intended for use as a tag function of a Tagged
Template (12.3.7). When called as such, the first argument will be a
well formed template object and the rest parameter will contain the
substitution values.

Properties of the String Prototype Object

The String prototype object is the intrinsic object %StringPrototype%.
The String prototype object is itself an ordinary object. It is not a
String instance and does not have a [[StringData]] internal slot.

The value of the [[Prototype]] internal slot of the String prototype
object is the intrinsic object %ObjectPrototype% (19.1.3).

Unless explicitly stated otherwise, the methods of the String prototype
object defined below are not generic and the THIS value passed to them
must be either a String value or an object that has a [[StringData]]
internal slot that has been initialized to a String value.

The abstract operation thisStringValue(_value_) performs the following
steps:

1.  If Type(_value_) is String, return _value_.

2.  If Type(_value_) is Object and _value_ has a [[StringData]] internal
    slot, then

    a.  Assert: _value_’s [[StringData]] internal slot is a String
        value.

    b.  Return the value of _value’s_ [[StringData]] internal slot.

3.  Throw a TYPEERROR exception.

The phrase “this String value” within the specification of a method
refers to the result returned by calling the abstract operation
thisStringValue with the THIS value of the method invocation passed as
the argument.

String.prototype.charAt ( pos )

NOTE Returns a single element String containing the code unit at index
_pos_ in the String value resulting from converting this object to a
String. If there is no element at that index, the result is the empty
String. The result is a String value, not a String object.

If _pos_ is a value of Number type that is an integer, then the result
of X.CHARAT(_pos_) is equal to the result of X.SUBSTRING(_pos_,
_pos_+1).

When the CHARAT method is called with one argument _pos_, the following
steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _position_ be ToInteger(_pos_).

5.  ReturnIfAbrupt(_position_).

6.  Let _size_ be the number of elements in _S_.

7.  If _position_ < 0 or _position_ ≥ _size_, return the empty String.

8.  Return a String of length 1, containing one code unit from _S_,
    namely the code unit at index _position_.

NOTE The CHARAT function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

String.prototype.charCodeAt ( pos )

NOTE Returns a Number (a nonnegative integer less than 2^16^) that is
the code unit value of the string element at index _pos_ in the String
resulting from converting this object to a String. If there is no
element at that index, the result is NAN.

When the CHARCODEAT method is called with one argument _pos_, the
following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _position_ be ToInteger(_pos_).

5.  ReturnIfAbrupt(_position_).

6.  Let _size_ be the number of elements in _S_.

7.  If _position_ < 0 or _position_ ≥ _size_, return NAN.

8.  Return a value of Number type, whose value is the code unit value of
    the element at index _position_ in the String _S_.

NOTE The CHARCODEAT function is intentionally generic; it does not
require that its THIS value be a String object. Therefore it can be
transferred to other kinds of objects for use as a method.

String.prototype.codePointAt ( pos )

NOTE Returns a nonnegative integer Number less than 1114112 (0x110000)
that is the code point value of the UTF-16 encoded code point (6.1.4)
starting at the string element at index _pos_ in the String resulting
from converting this object to a String. If there is no element at that
index, the result is UNDEFINED. If a valid UTF-16 surrogate pair does
not begin at _pos_, the result is the code unit at _pos_.

When the CODEPOINTAT method is called with one argument _pos_, the
following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _position_ be ToInteger(_pos_).

5.  ReturnIfAbrupt(_position_).

6.  Let _size_ be the number of elements in _S_.

7.  If _position_ < 0 or _position_ ≥ _size_, return UNDEFINED.

8.  Let _first_ be the code unit value of the element at index
    _position_ in the String _S_.

9.  If _first_ < 0xD800 or _first_ > 0xDBFF or _position_+1 = _size_,
    return _first_.

10. Let _second_ be the code unit value of the element at index
    _position_+1 in the String _S_.

11. If _second_ < 0xDC00 or _second_ > 0xDFFF, return _first_.

12. Return UTF16Decode(_first_, _second_).

NOTE The CODEPOINTAT function is intentionally generic; it does not
require that its THIS value be a String object. Therefore it can be
transferred to other kinds of objects for use as a method.

String.prototype.concat ( ...args )

NOTE When the CONCAT method is called it returns a String consisting of
the code units of the THIS object (converted to a String) followed by
the code units of each of the arguments converted to a String. The
result is a String value, not a String object.

When the CONCAT method is called with zero or more arguments the
following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _args_ be a List whose elements are the arguments passed to this
    function.

5.  Let _R_ be _S_.

6.  Repeat, while _args_ is not empty

    a.  Remove the first element from _args_ and let _next_ be the value
        of that element.

    b.  Let _nextString_ be ToString(_next_).

    c.  ReturnIfAbrupt(_nextString_).

    d.  Let _R_ be the String value consisting of the code units of the
        previous value of _R_ followed by the code units of
        _nextString_.

7.  Return _R_.

The LENGTH property of the CONCAT method is 1.

NOTE The CONCAT function is intentionally generic; it does not require
that its THIS value be a String object. Therefore it can be transferred
to other kinds of objects for use as a method.

String.prototype.constructor

The initial value of STRING.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %String%.

String.prototype.endsWith ( searchString [ , endPosition] )

The following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _isRegExp_ be IsRegExp(_searchString_).

5.  ReturnIfAbrupt(_isRegExp_).

6.  If _isRegExp_ is TRUE, throw a TYPEERROR exception.

7.  Let _searchStr_ be ToString(_searchString_).

8.  ReturnIfAbrupt(_searchStr_).

9.  Let _len_ be the number of elements in _S_.

10. If _endPosition_ is UNDEFINED, let _pos_ be _len_, else let _pos_ be
    ToInteger(_endPosition_).

11. ReturnIfAbrupt(_pos_).

12. Let _end_ be min(max(_pos_, 0), _len_).

13. Let _searchLength_ be the number of elements in _searchStr_.

14. Let _start_ be _end_ - _searchLength_.

15. If _start_ is less than 0, return FALSE_.

16. If the sequence of elements of _S_ starting at _start_ of length
    _searchLength_ is the same as the full element sequence of
    _searchStr_, return TRUE.

17. Otherwise, return FALSE.

The LENGTH property of the ENDSWITH method is 1.

NOTE 1 Returns TRUE if the sequence of elements of _searchString_
converted to a String is the same as the corresponding elements of this
object (converted to a String) starting at _endPosition_ – length(this).
Otherwise returns FALSE.

NOTE 2 Throwing an exception if the first argument is a RegExp is
specified in order to allow future editions to define extensions that
allow such argument values.

NOTE 3 The ENDSWITH function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.includes ( searchString [ , position ] )

The INCLUDES method takes two arguments, _searchString_ and _position_,
and performs the following steps:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _isRegExp_ be IsRegExp(_searchString_).

5.  ReturnIfAbrupt(_isRegExp_).

6.  If _isRegExp_ is TRUE, throw a TYPEERROR exception.

7.  Let _searchStr_ be ToString(_searchString_).

8.  ReturnIfAbrupt(_searchStr_).

9.  Let _pos_ be ToInteger(_position_). (If _position_ is UNDEFINED,
    this step produces the value 0).

10. ReturnIfAbrupt(_pos_).

11. Let _len_ be the number of elements in _S_.

12. Let _start_ be min(max(_pos_, 0), _len_).

13. Let _searchLen_ be the number of elements in _searchStr_.

14. If there exists any integer _k_ not smaller than _start_ such that
    _k_ + _searchLen_ is not greater than _len_, and for all nonnegative
    integers _j_ less than _searchLen_, the code unit at index _k_+_j_
    of _S_ is the same as the code unit at index _j_ of _searchStr,_
    return TRUE; but if there is no such integer _k_, return FALSE.

The LENGTH property of the INCLUDES method is 1.

NOTE 1 If _searchString_ appears as a substring of the result of
converting this object to a String, at one or more indices that are
greater than or equal to _position_, return TRUE; otherwise, returns
FALSE. If _position_ is UNDEFINED, 0 is assumed, so as to search all of
the String.

NOTE 2 Throwing an exception if the first argument is a RegExp is
specified in order to allow future editions to define extensions that
allow such argument values.

NOTE 3 The INCLUDES function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.indexOf ( searchString [ , position ] )

NOTE If _searchString_ appears as a substring of the result of
converting this object to a String, at one or more indices that are
greater than or equal to _position_, then the smallest such index is
returned; otherwise, 1 is returned. If _position_ is UNDEFINED, 0 is
assumed, so as to search all of the String.

The INDEXOF method takes two arguments, _searchString_ and _position_,
and performs the following steps:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _searchStr_ be ToString(_searchString_).

5.  ReturnIfAbrupt(_searchStr_).

6.  Let _pos_ be ToInteger(_position_). (If _position_ is UNDEFINED,
    this step produces the value 0).

7.  ReturnIfAbrupt(_pos_).

8.  Let _len_ be the number of elements in _S_.

9.  Let _start_ be min(max(_pos_, 0), _len_).

10. Let _searchLen_ be the number of elements in _searchStr_.

11. Return the smallest possible integer _k_ not smaller than _start
    such that _k_+ _searchLen_ is not greater than _len_, and for all
    nonnegative integers _j_ less than _searchLen_, the code unit at
    index _k_+_j_ of _S_ is the same as the code unit at index _j_ of
    _searchStr_; but if there is no such integer _k_, return the value
    -1.

The LENGTH property of the INDEXOF method is 1.

NOTE The INDEXOF function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

String.prototype.lastIndexOf ( searchString [ , position ] )

NOTE If _searchString_ appears as a substring of the result of
converting this object to a String at one or more indices that are
smaller than or equal to _position_, then the greatest such index is
returned; otherwise, 1 is returned. If _position_ is UNDEFINED, the
length of the String value is assumed, so as to search all of the
String.

The LASTINDEXOF method takes two arguments, _searchString_ and
_position_, and performs the following steps:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _searchStr_ be ToString(_searchString_).

5.  ReturnIfAbrupt(_searchString_).

6.  Let _numPos_ be ToNumber(_position_). (If _position_ is UNDEFINED,
    this step produces the value NAN).

7.  ReturnIfAbrupt(_numPos_).

8.  If _numPos_ is NAN, let _pos_ be +∞; otherwise, let _pos_ be
    ToInteger(_numPos_).

9.  Let _len_ be the number of elements in _S_.

10. Let _start_ be min(max(_pos_, 0), _len_).

11. Let _searchLen_ be the number of elements in _searchStr_.

12. Return the largest possible nonnegative integer _k_ not larger than
    _start_ such that _k_+ _searchLen_ is not greater than _len_, and
    for all nonnegative integers _j_ less than _searchLen_, the code
    unit at index _k_+_j_ of _S_ is the same as the code unit at index
    _j_ of _searchStr_; but if there is no such integer _k_, return the
    value -1.

The LENGTH property of the LASTINDEXOF method is 1.

NOTE The LASTINDEXOF function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.localeCompare ( that [, reserved1 [ , reserved2 ] ] )

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the LOCALECOMPARE method as
specified in the ECMA-402 specification. If an ECMAScript implementation
does not include the ECMA-402 API the following specification of the
LOCALECOMPARE method is used.

When the LOCALECOMPARE method is called with argument _that_, it returns
a Number other than NAN that represents the result of a locale-sensitive
String comparison of the THIS value (converted to a String) with _that_
(converted to a String). The two Strings are _S_ and _That_. The two
Strings are compared in an implementation-defined fashion. The result is
intended to order String values in the sort order specified by a host
default locale, and will be negative, zero, or positive, depending on
whether _S_ comes before _That_ in the sort order, the Strings are
equal, or _S_ comes after _That_ in the sort order, respectively.

Before performing the comparisons, the following steps are performed to
prepare the Strings:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _That_ be ToString(_that_).

5.  ReturnIfAbrupt(_That_).

The meaning of the optional second and third parameters to this method
are defined in the ECMA-402 specification; implementations that do not
include ECMA-402 support must not assign any other interpretation to
those parameter positions.

The LOCALECOMPARE method, if considered as a function of two arguments
THIS and _that_, is a consistent comparison function (as defined in
22.1.3.24) on the set of all Strings.

The actual return values are implementation-defined to permit
implementers to encode additional information in the value, but the
function is required to define a total ordering on all Strings. This
function must treat Strings that are canonically equivalent according to
the Unicode standard as identical and must return 0 when comparing
Strings that are considered canonically equivalent.

The LENGTH property of the LOCALECOMPARE method is 1.

NOTE 1 The LOCALECOMPARE method itself is not directly suitable as an
argument to ARRAY.PROTOTYPE.SORT because the latter requires a function
of two arguments.

NOTE 2 This function is intended to rely on whatever language-sensitive
comparison functionality is available to the ECMAScript environment from
the host environment, and to compare according to the rules of the host
environment’s current locale. However, regardless of the host provided
comparison capabilities, this function must treat Strings that are
canonically equivalent according to the Unicode standard as identical.
It is recommended that this function should not honour Unicode
compatibility equivalences or decompositions. For a definition and
discussion of canonical equivalence see the Unicode Standard, chapters 2
and 3, as well as Unicode Standard Annex #15, Unicode Normalization
Forms (_http://www.unicode.org/reports/tr15/_) and Unicode Technical
Note #5, Canonical Equivalence in Applications
(_http://www.unicode.org/notes/tn5/_). Also see Unicode Technical
Standard #10, Unicode Collation Algorithm
(_http://www.unicode.org/reports/tr10/_).

NOTE 3 The LOCALECOMPARE function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.match ( regexp )

When the MATCH method is called with argument _regexp_, the following
steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  If _regexp_ is not UNDEFINED_,_ then

    a.  Let _matcher_ be GetMethod(_regexp_, @@match).

    b.  ReturnIfAbrupt(_matcher_).

    c.  If _matcher_ is not UNDEFINED, then

        i.  Return Call(_matcher_, _regexp_, «‍_O_»).

4.  Let _S_ be ToString(_O_).

5.  ReturnIfAbrupt(_S_).

6.  Let _rx_ be RegExpCreate(_regexp_, UNDEFINED) (see 21.2.3.2.3).

7.  ReturnIfAbrupt(_rx_).

8.  Return Invoke(_rx_, @@match, «‍_S_»).

NOTE The MATCH function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

String.prototype.normalize ( [ form ] )

When the NORMALIZE method is called with one argument _form_, the
following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  If _form_ is not provided or _form_ is UNDEFINED, let _form_ be
    "NFC".

5.  Let _f_ be ToString(_form_).

6.  ReturnIfAbrupt(_f_).

7.  If _f_ is not one of "NFC", "NFD", "NFKC", or "NFKD", throw a
    RANGEERROR exception.

8.  Let _ns_ be the String value that is the result of normalizing _S
    into the normalization form named by _f_ as specified in __Unicode
    Standard Annex #15, Unicode Normalization Forms__.

9.  Return _ns_.

The LENGTH property of the NORMALIZE method is 0.

NOTE The NORMALIZE function is intentionally generic; it does not
require that its THIS value be a String object. Therefore it can be
transferred to other kinds of objects for use as a method.

String.prototype.repeat ( count )

The following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _n_ be ToInteger(_count_).

5.  ReturnIfAbrupt(_n_).

6.  If _n_ < 0, throw a RANGEERROR exception.

7.  If _n_ is +∞, throw a RANGEERROR exception.

8.  Let _T_ be a String value that is made from _n_ copies of _S
    appended together. If _n_ is 0, _T_ is the empty String.

9.  Return _T_.

NOTE 1 This method creates a String consisting of the code units of the
THIS object (converted to String) repeated _count_ times.

NOTE 2 The REPEAT function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

String.prototype.replace (searchValue, replaceValue )

When the REPLACE method is called with arguments _searchValue_ and
_replaceValue_ the following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  If _searchValue_ is not UNDEFINED_,_ then

    a.  Let _replacer_ be GetMethod(_searchValue_, @@replace).

    b.  ReturnIfAbrupt(_replacer_).

    c.  If _replacer_ is not UNDEFINED, then

        i.  Return Call(_replacer_, _searchValue_, «_O_,
            _replaceValue_»).

4.  Let _string_ be ToString(_O_).

5.  ReturnIfAbrupt(_string_).

6.  Let _searchString_ be ToString(_searchValue_).

7.  ReturnIfAbrupt(_searchString_).

8.  Let _functionalReplace_ be IsCallable(_replaceValue_).

9.  If _functionalReplace_ is FALSE, then

    a.  Let _replaceValue_ be ToString(_replaceValue_).

    b.  ReturnIfAbrupt(_replaceValue_).

10. Search _string_ for the first occurrence of _searchString_ and let
    _pos_ be the index within _string_ of the first code unit of the
    matched substring and let _matched_ be _searchString_. If no
    occurrences of _searchString_ were found, return _string_.

11. If _functionalReplace_ is TRUE, then

    a.  Let _replValue_ be Call(_replaceValue_, UNDEFINED,«_matched_,
        _pos_, and _string_»).

    b.  Let _replStr_ be ToString(_replValue_).

    c.  ReturnIfAbrupt(_replStr_).

12. Else,

    a.  Let _captures_ be an empty List.

    b.  Let _replStr_ be GetSubstitution(_matched_, _string_, _pos_,
        _captures_, _replaceValue_).

13. Let _tailPos_ be _pos_ + the number of code units in _matched_.

14. Let _newString_ be the String formed by concatenating the first
    _pos_ code units of _string_, _replStr_, and the trailing substring
    of _string_ starting at index _tailPos_. If _pos_ is 0, the first
    element of the concatenation will be the empty String.

15. Return _newString_.

NOTE The REPLACE function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

Runtime Semantics: GetSubstitution(matched, str, position, captures, replacement)

The abstract operation GetSubstitution performs the following steps:

1.  Assert: Type(_matched_) is String.

2.  Let _matchLength_ be the number of code units in _matched_.

3.  Assert: Type(_str_) is String.

4.  Let _stringLength_ be the number of code units in _str_.

5.  Assert: _position_ is a nonnegative integer.

6.  Assert: _position_ ≤ _stringLength_.

7.  Assert: _captures_ is a possibly empty List of Strings.

8.  Assert: Type( _replacement_) is String

9.  Let _tailPos_ be _position_ + _matchLength_.

10. Let _m_ be the number of elements in _captures_.

11. Let _result_ be a String value derived from _replacement_ by copying
    code unit elements from _replacement_ to _result_ while performing
    replacements as specified in Table 45. These $ replacements are done
    left-to-right, and, once such a replacement is performed, the new
    replacement text is not subject to further replacements.

12. Return _result_.

13. 

Table 45 — Replacement Text Symbol Substitutions

  --------------------- ------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _CODE UNITS_          _UNICODE CHARACTERS_                                                      _REPLACEMENT TEXT_

  0x0024, 0x0024        $$                                                                        $

  0x0024, 0x0026        $&                                                                        _matched_

  0x0024, 0x0060        $`                                                                        If _position_ is 0, the replacement is the empty String. Otherwise the replacement is the substring of _str_ that starts at index 0 and whose last code unit is at index _position_ -1.

  0x0024, 0x0027        $'                                                                        If _tailPos_ ≥ _stringLength_, the replacement is the empty String. Otherwise the replacement is the substring of _str_ that starts at index _tailPos_ and continues to the end of _str_.

  0x0024, N             $N where                                                                  The _n_^th^ element of _captures_, where _n_ is a single digit in the range 1 to 9. If _n_≤_m_ and the _n_^th^ element of _captures_ is UNDEFINED, use the empty String instead. If _n_>_m_, the result is implementation-defined.
  Where                 N is one of 1 2 3 4 5 6 7 8 9 and $N is not followed by a decimal digit   
  0x0031 ≤ N ≤ 0x0039                                                                             

  0x0024, N, N          $NN where                                                                 The _nn_^th^ element of _captures_, where _nn_ is a two-digit decimal number in the range 01 to 99. If _nn_≤_m_ and the _nn_^th^ element of _captures_ is UNDEFINED, use the empty String instead. If _nn_ is 00 or _nn_>_m_, the result is implementation-defined.
  Where                 N is one of 0 1 2 3 4 5 6 7 8 9                                           
  0x0030 ≤ N ≤ 0x0039                                                                             

  0x0024                $ in any context that does not match any of the above.                    $
  --------------------- ------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

String.prototype.search ( regexp )

When the search method is called with argument _regexp_, the following
steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  If _regexp_ is not UNDEFINED_,_ then

    a.  Let _searcher_ be GetMethod(_regexp_, @@search).

    b.  ReturnIfAbrupt(_searcher_).

    c.  If _searcher_ is not UNDEFINED , then

        i.  Return Call(_searcher_, _regexp_, «_O_»)

4.  Let _string_ be ToString(_O_).

5.  ReturnIfAbrupt(_string_).

6.  Let _rx_ be RegExpCreate(_regexp_, UNDEFINED) (see 21.2.3.2.3).

7.  ReturnIfAbrupt(_rx_).

8.  Return Invoke(_rx_, @@search, «‍_string_»).

NOTE The SEARCH function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

String.prototype.slice ( start, end )

The SLICE method takes two arguments, _start_ and _end_, and returns a
substring of the result of converting this object to a String, starting
from index _start_ and running to, but not including, index _end_ (or
through the end of the String if _end_ is UNDEFINED). If _start_ is
negative, it is treated as _sourceLength_+_start_ where _sourceLength_
is the length of the String. If _end_ is negative, it is treated as
_sourceLength_+_end_ where _sourceLength_ is the length of the String.
The result is a String value, not a String object. The following steps
are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _len_ be the number of elements in _S_.

5.  Let _intStart_ be ToInteger(_start_).

6.  ReturnIfAbrupt(_intStart_).

7.  If _end_ is UNDEFINED, let _intEnd_ be _len_; else let _intEnd_ be
    ToInteger(_end_).

8.  ReturnIfAbrupt(_intEnd_).

9.  If _intStart_ < 0, let _from_ be max(_len_ + _intStart_,0);
    otherwise let _from_ be min(_intStart_, _len_).

10. If _intEnd_ < 0, let _to_ be max(_len_ + _intEnd_,0); otherwise let
    _to_ be min(_intEnd_, _len_).

11. Let _span_ be max(_to_ – _from_,0).

12. Return a String value containing _span_ consecutive elements from
    _S_ beginning with the element at index _from_.

The LENGTH property of the SLICE method is 2.

NOTE The SLICE function is intentionally generic; it does not require
that its THIS value be a String object. Therefore it can be transferred
to other kinds of objects for use as a method.

String.prototype.split ( separator, limit )

Returns an Array object into which substrings of the result of
converting this object to a String have been stored. The substrings are
determined by searching from left to right for occurrences of
_separator_; these occurrences are not part of any substring in the
returned array, but serve to divide up the String value. The value of
_separator_ may be a String of any length or it may be a RegExp object.

When the SPLIT method is called, the following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  If _separator_ is not UNDEFINED, then

    a.  Let _splitter_ be GetMethod(_separator_, @@split).

    b.  ReturnIfAbrupt(_splitter_).

    c.  If _splitter_ is not UNDEFINED , then

        i.  Return Call(_splitter_, _separator_, «‍_O_, _limit_»).

4.  Let _S_ be ToString(_O_).

5.  ReturnIfAbrupt(_S_).

6.  Let _A_ be ArrayCreate(0).

7.  Let _lengthA_ be 0.

8.  If _limit_ is UNDEFINED, let _lim_ = 2^53^–1; else let _lim_ =
    ToLength(_limit_).

9.  ReturnIfAbrupt(_lim_).

10. Let _s_ be the number of elements in _S_.

11. Let _p_ = 0.

12. Let _R_ be ToString(_separator_).

13. ReturnIfAbrupt(_R_).

14. If _lim_ = 0, return _A_.

15. If _separator_ is UNDEFINED, then

    a.  Perform CreateDataProperty(_A_, "0", _S_).

    b.  Assert: The above call will never result in an abrupt
        completion.

    c.  Return _A_.

16. If _s_ = 0, then

    a.  Let _z_ be SplitMatch(_S_, 0, _R_).

    b.  If _z_ is not FALSE, return _A_.

    c.  Perform CreateDataProperty(_A_, "0", _S_).

    d.  Assert: The above call will never result in an abrupt
        completion.

    e.  Return _A_.

17. Let _q_ = _p_.

18. Repeat, while _q_ ≠ _s

    a.  Let _e_ be SplitMatch(_S, q, R_).

    b.  If _e_ is FALSE, let _q_ = _q_+1.

    c.  Else _e_ is an integer index into _S_,

        i.  If _e_ = _p_, let _q_ = _q_+1.

        ii. Else _e_ ≠ _p_,

            1.  Let _T_ be a String value equal to the substring of _S_
                consisting of the code units at indices _p_ (inclusive)
                through _q_ (exclusive).

            2.  Perform CreateDataProperty(_A_, ToString(_lengthA_),
                _T_).

            3.  Assert: The above call will never result in an abrupt
                completion.

            4.  Increment _lengthA_ by 1.

            5.  If _lengthA_ = _lim_, return _A_.

            6.  Let _p_ = _e_.

            7.  Let _q_ = _p_.

19. Let _T_ be a String value equal to the substring of _S_ consisting
    of the code units at indices _p_ (inclusive) through _s_
    (exclusive).

20. Perform CreateDataProperty(_A_, ToString(_lengthA_), _T_).

21. Assert: The above call will never result in an abrupt completion.

22. Return _A_.

The LENGTH property of the SPLIT method is 2.

NOTE 1 The value of _separator_ may be an empty String, an empty regular
expression, or a regular expression that can match an empty String. In
this case, _separator_ does not match the empty substring at the
beginning or end of the input String, nor does it match the empty
substring at the end of the previous separator match. (For example, if
_separator_ is the empty String, the String is split up into individual
code unit elements; the length of the result array equals the length of
the String, and each substring contains one code unit.) If _separator_
is a regular expression, only the first match at a given index of the
THIS String is considered, even if backtracking could yield a
non-empty-substring match at that index. (For example, "AB".SPLIT(/A*?/)
evaluates to the array ["A","B"], while "AB".SPLIT(/A*/) evaluates to
the array["","B"].)

If the THIS object is (or converts to) the empty String, the result
depends on whether _separator_ can match the empty String. If it can,
the result array contains no elements. Otherwise, the result array
contains one element, which is the empty String.

If _separator_ is a regular expression that contains capturing
parentheses, then each time _separator_ is matched the results
(including any UNDEFINED results) of the capturing parentheses are
spliced into the output array. For example,

"A<B>BOLD</B>AND<CODE>CODED</CODE>".SPLIT(/<(\/)?([^<>]+)>/)

evaluates to the array

["A", UNDEFINED, "B", "BOLD", "/", "B", "AND", UNDEFINED,
 "CODE", "CODED", "/", "CODE", ""]

If _separator_ is UNDEFINED, then the result array contains just one
String, which is the THIS value (converted to a String). If _limit_ is
not UNDEFINED, then the output array is truncated so that it contains no
more than _limit_ elements.

NOTE 2 The SPLIT function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

Runtime Semantics: SplitMatch ( S, q, R )

The abstract operation SplitMatch takes three parameters, a String _S_,
an integer _q_, and a String _R_, and performs the following steps in
order to return either FALSE or the end index of a match:

1.  Assert: Type(_R_) is String.

2.  Let _r_ be the number of code units in _R_.

3.  Let _s_ be the number of code units in _S_.

4.  If _q_+_r_ > _s_, return FALSE.

5.  If there exists an integer _i_ between 0 (inclusive) and _r
    (exclusive) such that the code unit at index _q_+_i_ of _S_ is
    different from the code unit at index _i_ of _R_, return FALSE.

6.  Return _q_+_r_.

String.prototype.startsWith ( searchString [, position ] )

The following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _isRegExp_ be IsRegExp(_searchString_).

5.  ReturnIfAbrupt(_isRegExp_).

6.  If _isRegExp_ is TRUE, throw a TYPEERROR exception.

7.  Let _searchStr_ be ToString(_searchString_).

8.  ReturnIfAbrupt(_searchString_).

9.  Let _pos_ be ToInteger(_position_). (If _position_ is UNDEFINED,
    this step produces the value 0).

10. ReturnIfAbrupt(_pos_).

11. Let _len_ be the number of elements in _S_.

12. Let _start_ be min(max(_pos_, 0), _len_).

13. Let _searchLength_ be the number of elements in _searchStr_.

14. If _searchLength+start_ is greater than _len_, return FALSE_.

15. If the sequence of elements of _S_ starting at _start_ of length
    _searchLength_ is the same as the full element sequence of
    _searchStr_, return TRUE.

16. Otherwise, return FALSE.

The LENGTH property of the STARTSWITH method is 1.

NOTE 1 This method returns TRUE if the sequence of elements of
_searchString_ converted to a String is the same as the corresponding
elements of this object (converted to a String) starting at index
_position_. Otherwise returns FALSE.

NOTE 2 Throwing an exception if the first argument is a RegExp is
specified in order to allow future editions to define extensions that
allow such argument values.

NOTE 3 The STARTSWITH function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.substring ( start, end )

The SUBSTRING method takes two arguments, _start_ and _end_, and returns
a substring of the result of converting this object to a String,
starting from index _start_ and running to, but not including, index
_end_ of the String (or through the end of the String is _end_ is
UNDEFINED). The result is a String value, not a String object.

If either argument is NAN or negative, it is replaced with zero; if
either argument is larger than the length of the String, it is replaced
with the length of the String.

If _start_ is larger than _end_, they are swapped.

The following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _len_ be the number of elements in _S_.

5.  Let _intStart_ be ToInteger(_start_).

6.  ReturnIfAbrupt(_intStart_).

7.  If _end_ is UNDEFINED, let _intEnd_ be _len_; else let _intEnd_ be
    ToInteger(_end_).

8.  ReturnIfAbrupt(_intEnd_).

9.  Let _finalStart_ be min(max(_intStart_, 0), _len_).

10. Let _finalEnd_ be min(max(_intEnd_, 0), _len_).

11. Let _from_ be min(_finalStart_, _finalEnd_).

12. Let _to_ be max(_finalStart_, _finalEnd_).

13. Return a String whose length is _to_ - _from_, containing code units
    from _S_, namely the code units with indices _from_ through _to_ −1,
    in ascending order.

The LENGTH property of the SUBSTRING method is 2.

NOTE The SUBSTRING function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the TOLOCALELOWERCASE method as
specified in the ECMA-402 specification. If an ECMAScript implementation
does not include the ECMA-402 API the following specification of the
TOLOCALELOWERCASE method is used.

This function interprets a string value as a sequence of UTF-16 encoded
code points, as described in 6.1.4.

This function works exactly the same as TOLOWERCASE except that its
result is intended to yield the correct result for the host
environment’s current locale, rather than a locale-independent result.
There will only be a difference in the few cases (such as Turkish) where
the rules for that language conflict with the regular Unicode case
mappings.

The LENGTH property of the TOLOCALELOWERCASE method is 0.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

NOTE The TOLOCALELOWERCASE function is intentionally generic; it does
not require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.toLocaleUpperCase ([ reserved1 [ , reserved2 ] ] )

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the TOLOCALEUPPERCASE method as
specified in the ECMA-402 specification. If an ECMAScript implementation
does not include the ECMA-402 API the following specification of the
TOLOCALEUPPERCASE method is used.

This function interprets a string value as a sequence of UTF-16 encoded
code points, as described in 6.1.4.

This function works exactly the same as TOUPPERCASE except that its
result is intended to yield the correct result for the host
environment’s current locale, rather than a locale-independent result.
There will only be a difference in the few cases (such as Turkish) where
the rules for that language conflict with the regular Unicode case
mappings.

The LENGTH property of the TOLOCALEUPPERCASE method is 0.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

NOTE The TOLOCALEUPPERCASE function is intentionally generic; it does
not require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.toLowerCase ( )

This function interprets a string value as a sequence of UTF-16 encoded
code points, as described in 6.1.4. The following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _cpList_ be a List containing in order the code points as
    defined in 6.1.4 of _S_, starting at the first element of _S_.

5.  For each code point _c_ in _cpList_, if the Unicode Character
    Database provides a language insensitive lower case equivalent of
    _c_ then replace _c_ in _cpList_ with that equivalent code point(s).

6.  Let _cuList_ be a new List.

7.  For each code point _c_ in _cpList_, in order, append to _cuList
    the elements of the UTF16Encoding (10.1.1) of _c_.

8.  Let _L_ be a String whose elements are, in order, the elements of
    _cuList_ .

9.  Return _L_.

The result must be derived according to the locale-insensitive case
mappings in the Unicode Character Database (this explicitly includes not
only the UnicodeData.txt file, but also all locale-insensitive mappings
in the SpecialCasings.txt file that accompanies it).

NOTE 1 The case mapping of some code points may produce multiple code
points . In this case the result String may not be the same length as
the source String. Because both TOUPPERCASE and TOLOWERCASE have
context-sensitive behaviour, the functions are not symmetrical. In other
words, S.TOUPPERCASE().TOLOWERCASE() is not necessarily equal to
S.TOLOWERCASE().

NOTE 2 The TOLOWERCASE function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.toString ( )

When the TOSTRING method is called, the following steps are taken:

1.  Let _s_ be thisStringValue(THIS value).

2.  Return _s_.

NOTE For a String object, the TOSTRING method happens to return the same
thing as the VALUEOF method.

String.prototype.toUpperCase ( )

This function interprets a string value as a sequence of UTF-16 encoded
code points, as described in 6.1.4.

This function behaves in exactly the same way as
STRING.PROTOTYPE.TOLOWERCASE, except that code points are mapped to
their _uppercase_ equivalents as specified in the Unicode Character
Database.

NOTE The TOUPPERCASE function is intentionally generic; it does not
require that its THIS value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

String.prototype.trim ( )

This function interprets a string value as a sequence of UTF-16 encoded
code points, as described in 6.1.4.

The following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _T_ be a String value that is a copy of _S_ with both leading
    and trailing white space removed. The definition of white space is
    the union of _WhiteSpace_ and _LineTerminator_. When determining
    whether a Unicode code point is in Unicode general category “Zs”,
    code unit sequences are interpreted as UTF-16 encoded code point
    sequences as specified in 6.1.4.

5.  Return _T_.

NOTE The TRIM function is intentionally generic; it does not require
that its THIS value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

String.prototype.valueOf ( )

When the VALUEOF method is called, the following steps are taken:

1.  Let _s_ be thisStringValue(THIS value).

2.  Return _s_.

String.prototype [ @@iterator ]( )

When the @@iterator method is called it returns an Iterator object
(25.1.1.2) that iterates over the code points of a String value,
returning each code point as a String value. The following steps are
taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Return CreateStringIterator(_S_).

The value of the NAME property of this function is "[SYMBOL.ITERATOR]".

Properties of String Instances

String instances are String exotic objects and have the internal methods
specified for such objects. String instances inherit properties from the
String prototype object. String instances also have a [[StringData]]
internal slot.

String instances have a LENGTH property, and a set of enumerable
properties with integer indexed names.

length

The number of elements in the String value represented by this String
object.

Once a String object is initialized, this property is unchanging. It has
the attributes { [[Writable]]: FALSE, [[Enumerable]]: FALSE,
[[Configurable]]: FALSE }.

String Iterator Objects 

An String Iterator is an object, that represents a specific iteration
over some specific String instance object. There is not a named
constructor for String Iterator objects. Instead, String iterator
objects are created by calling certain methods of String instance
objects.

CreateStringIterator Abstract Operation

Several methods of String objects return Iterator objects. The abstract
operation CreateStringIterator with argument _string_ is used to create
such iterator objects. It performs the following steps:

1.  Assert: Type(_string_) is String.

2.  Let _iterator_ be ObjectCreate(%StringIteratorPrototype%,
    «[[IteratedString]], [[StringIteratorNextIndex]] »).

3.  Set _iterator’s_ [[IteratedString]] internal slot to _string_.

4.  Set _iterator’s_ [[StringIteratorNextIndex]] internal slot to 0.

5.  Return _iterator_.

The %StringIteratorPrototype% Object

All String Iterator Objects inherit properties from the
%StringIteratorPrototype% intrinsic object. The
%StringIteratorPrototype% object is an ordinary object and its
[[Prototype]] internal slot is the %IteratorPrototype% intrinsic object
(25.1.2). In addition, %StringIteratorPrototype% has the following
properties:

%StringIteratorPrototype%.next ( )

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have all of the internal slots of an String Iterator
    Instance (21.1.5.3), throw a TYPEERROR exception.

4.  Let _s_ be the value of the [[IteratedString]] internal slot of _O_.

5.  If _s_ is UNDEFINED, return CreateIterResultObject(UNDEFINED, TRUE).

6.  Let _position_ be the value of the [[StringIteratorNextIndex]]
    internal slot of _O_.

7.  Let _len_ be the number of elements in _s_.

8.  If _position_ ≥ _len_, then

    a.  Set the value of the [[IteratedString]] internal slot of _O_ to
        UNDEFINED.

    b.  Return CreateIterResultObject(UNDEFINED, TRUE).

9.  Let _first_ be the code unit value at index _position_ in _s_.

10. If _first_ < 0xD800 or _first_ > 0xDBFF or _position_+1 = _len_, let
    _resultString_ be the string consisting of the single code unit
    _first_.

11. Else,

    a.  Let _second_ be the code unit value at index _position_+1 in the
        String _S_.

    b.  If _second_ < 0xDC00 or _second_ > 0xDFFF, let _resultString_ be
        the string consisting of the single code unit _first_.

    c.  Else, let _resultString_ be the string consisting of the code
        unit _first_ followed by the code unit _second_.

12. Let _resultSize_ be the number of code units in _resultString_.

13. Set the value of the [[StringIteratorNextIndex]] internal slot of
    _O_ to _position_+ _resultSize_.

14. Return CreateIterResultObject(_resultString_, FALSE).

%StringIteratorPrototype% [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"STRING ITERATOR".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of String Iterator Instances

String Iterator instances are ordinary objects that inherit properties
from the %StringIteratorPrototype% intrinsic object. String Iterator
instances are initially created with the internal slots listed in Table
46.

Table 46 — Internal Slots of String Iterator Instances

  ----------------------------- ------------------------------------------------------------------------------
  _INTERNAL SLOT_               _DESCRIPTION_
  [[IteratedString]]            The String value whose elements are being iterated.
  [[StringIteratorNextIndex]]   The integer index of the next string index to be examined by this iteration.
  ----------------------------- ------------------------------------------------------------------------------


RegExp (Regular Expression) Objects

A RegExp object contains a regular expression and the associated flags.

NOTE The form and functionality of regular expressions is modelled after
the regular expression facility in the Perl 5 programming language.

Patterns

The REGEXP constructor applies the following grammar to the input
pattern String. An error occurs if the grammar cannot interpret the
String as an expansion of _Pattern_.

Syntax

Pattern~[U]~ ::

Disjunction~[?U]~

Disjunction~[U]~ ::

Alternative~[?U]~
 Alternative~[?U]~ | Disjunction~[?U]~

Alternative~[U]~ ::

[empty]
Alternative~[?U]~ Term~[?U]~

Term~[U]~ ::

Assertion~[?U]~
Atom~[?U]~
Atom~[?U]~ Quantifier

Assertion~[U]~ ::

^
$
\ B
\ B
( ? = Disjunction~[?U]~ )
( ? ! Disjunction~[?U]~ )

Quantifier ::

QuantifierPrefix
QuantifierPrefix ?

QuantifierPrefix ::

*
+
?
{ DecimalDigits }
{ DecimalDigits , }
{ DecimalDigits , DecimalDigits }

Atom~[U]~ ::

PatternCharacter
.
\ AtomEscape~[?U]~
CharacterClass~[?U]~
( Disjunction~[?U]~ )
( ? : Disjunction~[?U]~ )

SyntaxCharacter :: ONE OF

^ $ \ . * + ? ( ) [ ] { } |

PatternCharacter ::

SourceCharacter BUT NOT SyntaxCharacter

AtomEscape~[U]~ ::

DecimalEscape
CharacterEscape~[?U]~
CharacterClassEscape

CharacterEscape~[U]~ ::

ControlEscape
C ControlLetter
HexEscapeSequence
RegExpUnicodeEscapeSequence~[?U]~
IdentityEscape~[?U]~

ControlEscape :: ONE OF

F N R T V

ControlLetter :: ONE OF

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

RegExpUnicodeEscapeSequence~[U]~ ::

[+U] U LeadSurrogate \U TrailSurrogate
[+U] U LeadSurrogate
[+U] U TailSurrogate
[+U] U NonSurrogate
[~U] U _Hex4Digits_
[+U] U{ HexDigits }

Each \U _TrailSurrogate_ for which the choice of associated U
_LeadSurrogate_ is ambiguous shall be associated with the nearest
possible U _LeadSurrogate_ that would otherwise have no corresponding
\U_ __TrailSurrogate_.

-   

LeadSurrogate ::

Hex4Digits [match only if the SV of Hex4Digits is in the inclusive range
0xD800 to 0xDBFF]

TrailSurrogate ::

Hex4Digits [match only if the SV of Hex4Digits is in the inclusive range
0xDC00 to 0xDFFF]

NonSurrogate ::

Hex4Digits [match only if the SV of Hex4Digits is not in the inclusive
range 0xD800 to 0xDFFF]

IdentityEscape~[U]~ ::

[+U] SyntaxCharacter
[+U] /
 [~U] SourceCharacter BUT NOT UnicodeIDContinue

DecimalEscape ::

DecimalIntegerLiteral [lookahead ∉ DecimalDigit]

CharacterClassEscape :: ONE OF

D D S S W W

CharacterClass~[U]~ ::

[ [lookahead ∉ {^}] ClassRanges~[?U]~ ]
[ ^ ClassRanges~[?U]~ ]

ClassRanges~[U]~ ::

[empty]
NonemptyClassRanges~[?U]~

NonemptyClassRanges~[U]~ ::

ClassAtom~[?U]~
ClassAtom~[?U]~ NonemptyClassRangesNoDash~[?U]~
ClassAtom~[?U]~ - ClassAtom~[?U]~ ClassRanges~[?U]~

NonemptyClassRangesNoDash~[U]~ ::

ClassAtom~[?U]~
ClassAtomNoDash~[?U]~ NonemptyClassRangesNoDash~[?U]~
ClassAtomNoDash~[?U]~ - ClassAtom~[?U]~ ClassRanges~[?U]~

ClassAtom~[U]~ ::

-
ClassAtomNoDash~[?U]~

ClassAtomNoDash~[U]~ ::

SourceCharacter BUT NOT ONE OF \ OR ] OR -
\ ClassEscape~[?U]~

ClassEscape~[U]~ ::

DecimalEscape
B
[+U] -
CharacterEscape~[?U]~
CharacterClassEscape

Static Semantics: Early Errors

_RegExpUnicodeEscapeSequence_ :: U{ _HexDigits_ }

-   It is a Syntax Error if the MV of _HexDigits_ > 1114111_._

Pattern Semantics

A regular expression pattern is converted into an internal procedure
using the process described below. An implementation is encouraged to
use more efficient algorithms than the ones listed below, as long as the
results are the same. The internal procedure is used as the value of a
RegExp object’s [[RegExpMatcher]] internal slot.

A _Pattern_ is either a BMP pattern or a Unicode pattern depending upon
whether or not its associated flags contain a "U". A BMP pattern matches
against a String interpreted as consisting of a sequence of 16-bit
values that are Unicode code points in the range of the Basic
Multilingual Plane. A Unicode pattern matches against a String
interpreted as consisting of Unicode code points encoded using UTF-16.
In the context of describing the behaviour of a BMP pattern “character”
means a single 16-bit Unicode BMP code point. In the context of
describing the behaviour of a Unicode pattern “character” means a UTF-16
encoded code point (6.1.4). In either context, “character value” means
the numeric value of the corresponding non-encoded code point.

The syntax and semantics of _Pattern_ is defined as if the source code
for the _Pattern_ was a List of _SourceCharacter_ values where each
_SourceCharacter_ corresponds to a Unicode code point. If a BMP pattern
contains a non-BMP _SourceCharacter_ the entire pattern is encoded using
UTF-16 and the individual code units of that encoding are used as the
elements of the List.

NOTE For example, consider a pattern expressed in source text as the
single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as
a Unicode pattern, it would be a single element (character) List
consisting of the single code point 0x1D11E. However, interpreted as a
BMP pattern, it is first UTF-16 encoded to produce a two element List
consisting of the code units 0xD834 and 0xDD1E.

Patterns are passed to the RegExp constructor as ECMAScript string
values in which non-BMP characters are UTF-16 encoded. For example, the
single character MUSICAL SYMBOL G CLEF pattern, expressed as a string
value, is a String of length 2 whose elements were the code units 0xD834
and 0xDD1E. So no further translation of the string would be necessary
to process it as a BMP pattern consisting of two pattern characters.
However, to process it as a Unicode pattern UTF16Decode (see 10.1.2)
must be used in producing a List consisting of a single pattern
character, the code point U+1D11E.

An implementation may not actually perform such translations to or from
UTF-16, but the semantics of this specification requires that the result
of pattern matching be as if such translations were performed.

Notation

The descriptions below use the following variables:

-   _Input_ is a List consisting of all of the characters, in order, of
      the String being matched by the regular expression pattern. Each
      character is either a code unit or a code point, depending upon
      the kind of pattern involved. The notation _Input_[_n_] means the
      _n^th^_ character of _Input_, where _n_ can range between 0
      (inclusive) and _InputLength_ (exclusive).

-   _InputLength_ is the number of characters in _Input_.

-   _NcapturingParens_ is the total number of left capturing parentheses
      (i.e. the total number of times the _Atom_ :: ( _Disjunction_ )
      production is expanded) in the pattern. A left capturing
      parenthesis is any ( pattern character that is matched by the (
      terminal of the _Atom_ :: ( _Disjunction_ ) production.

-   _IgnoreCase_ is TRUE if the RegExp object's [[OriginalFlags]]
      internal slot contains "I" and otherwise is FALSE.

-   _Multiline_ is TRUE if the RegExp object’s [[OriginalFlags]]
      internal slot contains "M" and otherwise is FALSE.

-   _Unicode_ is TRUE if the RegExp object’s [[OriginalFlags]] internal
      slot contains "U" and otherwise is FALSE.

Furthermore, the descriptions below use the following internal data
structures:

-   A _CharSet_ is a mathematical set of characters, either code units
      or code points depending up the state of the _Unicode_ flag. “All
      characters” means either all code unit values or all code point
      values also depending upon the state if _Unicode_.

-   A _State_ is an ordered pair (_endIndex_, _captures_) where
      _endIndex_ is an integer and _captures_ is a List of
      _NcapturingParens_ values. _States_ are used to represent partial
      match states in the regular expression matching algorithms. The
      _endIndex_ is one plus the index of the last input character
      matched so far by the pattern, while _captures_ holds the results
      of capturing parentheses. The _n^th^_ element of _captures_ is
      either a List that represents the value obtained by the _n^th^_
      set of capturing parentheses or UNDEFINED if the _n^th^_ set of
      capturing parentheses hasn’t been reached yet. Due to
      backtracking, many _States_ may be in use at any time during the
      matching process.

-   A _MatchResult_ is either a _State_ or the special token FAILURE
      that indicates that the match failed.

-   A _Continuation_ procedure is an internal closure (i.e. an internal
      procedure with some arguments already bound to values) that takes
      one _State_ argument and returns a _MatchResult_ result. If an
      internal closure references variables which are bound in the
      function that creates the closure, the closure uses the values
      that these variables had at the time the closure was created. The
      _Continuation_ attempts to match the remaining portion (specified
      by the closure's already-bound arguments) of the pattern against
      _Input_, starting at the intermediate state given by its _State_
      argument. If the match succeeds, the _Continuation_ returns the
      final _State_ that it reached; if the match fails, the
      _Continuation_ returns FAILURE.

-   A _Matcher_ procedure is an internal closure that takes two
      arguments — a _State_ and a _Continuation_ — and returns a
      _MatchResult_ result. A _Matcher_ attempts to match a middle
      subpattern (specified by the closure's already-bound arguments) of
      the pattern against _Input_, starting at the intermediate state
      given by its _State_ argument. The _Continuation_ argument should
      be a closure that matches the rest of the pattern. After matching
      the subpattern of a pattern to obtain a new _State_, the _Matcher_
      then calls _Continuation_ on that new _State_ to test if the rest
      of the pattern can match as well. If it can, the _Matcher_ returns
      the _State_ returned by _Continuation_; if not, the _Matcher_ may
      try different choices at its choice points, repeatedly calling
      _Continuation_ until it either succeeds or all possibilities have
      been exhausted.

-   An _AssertionTester_ procedure is an internal closure that takes a
      _State_ argument and returns a Boolean result. The assertion
      tester tests a specific condition (specified by the closure's
      already-bound arguments) against the current place in _Input_ and
      returns TRUE if the condition matched or FALSE if not.

-   An _EscapeValue_ is either a character or an integer. An
      _EscapeValue_ is used to denote the interpretation of a
      _DecimalEscape_ escape sequence: a character _ch_ means that the
      escape sequence is interpreted as the character _ch_, while an
      integer _n_ means that the escape sequence is interpreted as a
      backreference to the _n_^th^ set of capturing parentheses.

Pattern

The production _Pattern_ :: _Disjunction_ evaluates as follows:

1.  Evaluate _Disjunction_ to obtain a Matcher _m_.

2.  Return an internal closure that takes two arguments, a String _str
    and an integer _index_, and performs the following steps:

    1.  If _Unicode_ is TRUE, let _Input_ be a List consisting of the
        sequence of code points of _str_ interpreted as a UTF-16 encoded
        (6.1.4) Unicode string. Otherwise, let _Input_ be a List
        consisting of the sequence of code units that are the elements
        of _str_. _Input_ will be used throughout the algorithms in
        21.2.2. Each element of _Input_ is considered to be a character.

    2.  Let _listIndex_ be the index into _Input_ of the character that
        was obtained from element _index_ of _str_.

    3.  Let _InputLength_ be the number of characters contained in
        _Input_. This variable will be used throughout the algorithms in
        21.2.2.

    4.  Let _c_ be a Continuation that always returns its State argument
        as a successful MatchResult.

    5.  Let _cap_ be a List of _NcapturingParens_ UNDEFINED values,
        indexed 1 through _NcapturingParens_.

    6.  Let _x_ be the State (_listIndex_, _cap_).

    7.  Call _m_(_x_, _c_) and return its result.

NOTE A Pattern evaluates (“compiles”) to an internal procedure value.
REGEXP.PROTOTYPE.EXEC and other methods can then apply this procedure to
a String and an offset within the String to determine whether the
pattern would match starting at exactly that offset within the String,
and, if it does match, what the values of the capturing parentheses
would be. The algorithms in 21.2.2 are designed so that compiling a
pattern may throw a SYNTAXERROR exception; on the other hand, once the
pattern is successfully compiled, applying the resulting internal
procedure to find a match in a String cannot throw an exception (except
for any host-defined exceptions that can occur anywhere such as
out-of-memory).

Disjunction

The production _Disjunction_ :: _Alternative_ evaluates by evaluating
_Alternative_ to obtain a Matcher and returning that Matcher.

The production _Disjunction_ :: _Alternative_ | _Disjunction_ evaluates
as follows:

1.  Evaluate _Alternative_ to obtain a Matcher _m1_.

2.  Evaluate _Disjunction_ to obtain a Matcher _m2_.

3.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps when
    evaluated:

    1.  Call _m1_(_x_, _c_) and let _r_ be its result.

    2.  If _r_ is not FAILURE, return _r_.

    3.  Call _m2_(_x_, _c_) and return its result.

NOTE The | regular expression operator separates two alternatives. The
pattern first tries to match the left _Alternative_ (followed by the
sequel of the regular expression); if it fails, it tries to match the
right _Disjunction_ (followed by the sequel of the regular expression).
If the left _Alternative_, the right _Disjunction_, and the sequel all
have choice points, all choices in the sequel are tried before moving on
to the next choice in the left _Alternative_. If choices in the left
_Alternative_ are exhausted, the right _Disjunction_ is tried instead of
the left _Alternative_. Any capturing parentheses inside a portion of
the pattern skipped by | produce UNDEFINED values instead of Strings.
Thus, for example,

  /a|ab/.exec("abc")

returns the result "A" and not "AB". Moreover,

  /((a)|(ab))((c)|(bc))/.exec("abc")

returns the array

  ["abc", "a", "a", undefined, "bc", undefined, "bc"]

and not

  ["abc", "ab", undefined, "ab", "c", "c", undefined]

Alternative

The production _Alternative_ :: [empty] evaluates by returning a Matcher
that takes two arguments, a State _x_ and a Continuation _c_, and
returns the result of calling _c_(_x_).

The production _Alternative_ :: _Alternative_ _Term_ evaluates as
follows:

1.  Evaluate _Alternative_ to obtain a Matcher _m1_.

2.  Evaluate _Term_ to obtain a Matcher _m2_.

3.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps when
    evaluated:

    1.  Create a Continuation _d_ that takes a State argument _y_ and
        returns the result of calling _m2_(_y_, _c_).

    2.  Call _m1_(_x_, _d_) and return its result.

NOTE Consecutive _Terms_ try to simultaneously match consecutive
portions of _Input_. If the left _Alternative_, the right _Term_, and
the sequel of the regular expression all have choice points, all choices
in the sequel are tried before moving on to the next choice in the right
_Term_, and all choices in the right _Term_ are tried before moving on
to the next choice in the left _Alternative_.

Term

The production _Term_ :: _Assertion_ evaluates by returning an internal
Matcher closure that takes two arguments, a State _x_ and a Continuation
_c_, and performs the following steps when evaluated:

1.  Evaluate _Assertion_ to obtain an AssertionTester _t_.

2.  Call _t_(_x_) and let _r_ be the resulting Boolean value.

3.  If _r_ is FALSE, return FAILURE.

4.  Call _c_(_x_) and return its result.

The production _Term_ :: _Atom_ evaluates as follows:

1.  Return the Matcher that is the result of evaluating _Atom_.

The production _Term_ :: _Atom_ _Quantifier_ evaluates as follows:

1.  Evaluate _Atom_ to obtain a Matcher _m_.

2.  Evaluate _Quantifier_ to obtain the three results: an integer _min_,
    an integer (or ∞) _max_, and Boolean _greedy_.

3.  If _max_ is finite and less than _min_, throw a SYNTAXERROR
    exception.

4.  Let _parenIndex_ be the number of left capturing parentheses in the
    entire regular expression that occur to the left of this production
    expansion's _Term_. This is the total number of times the _Atom_ ::
    ( _Disjunction_ ) production is expanded prior to this production's
    _Term_ plus the total number of _Atom_ :: ( _Disjunction_ )
    productions enclosing this _Term_.

5.  Let _parenCount_ be the number of left capturing parentheses in the
    expansion of this production's _Atom_. This is the total number of
    _Atom_ :: ( _Disjunction_ ) productions enclosed by this
    production's _Atom_.

6.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps when
    evaluated:

    1.  Call RepeatMatcher(_m_, _min_, _max_, _greedy_, _x_, _c_,
        _parenIndex_, _parenCount_) and return its result.

Runtime Semantics: RepeatMatcher Abstract Operation

The abstract operation RepeatMatcher takes eight parameters, a Matcher
_m_, an integer _min_, an integer (or ∞) _max_, a Boolean _greedy_, a
State _x_, a Continuation _c_, an integer _parenIndex_, and an integer
_parenCount_, and performs the following steps:

1.  If _max_ is zero, return _c_(_x_).

2.  Create an internal Continuation closure _d_ that takes one State
    argument _y_ and performs the following steps when evaluated:

    1.  If _min_ is zero and _y_'s _endIndex_ is equal to _x_'s
        _endIndex_, return FAILURE.

    2.  If _min_ is zero, let _min2_ be zero; otherwise let _min2_ be
        _min_–1.

    3.  If _max_ is ∞, let _max2_ be ∞; otherwise let _max2_ be _max_–1.

    4.  Call RepeatMatcher(_m_, _min2_, _max2_, _greedy_, _y_, _c_,
        _parenIndex_, _parenCount_) and return its result.

3.  Let _cap_ be a fresh copy of _x_'s _captures_ List.

4.  For every integer _k_ that satisfies _parenIndex_ < _k_ and _k_ ≤
    _parenIndex_+_parenCount_, set _cap_[_k_] to UNDEFINED.

5.  Let _e_ be _x_'s _endIndex_.

6.  Let _xr_ be the State (_e_, _cap_).

7.  If _min_ is not zero, return _m_(_xr_, _d_).

8.  If _greedy_ is FALSE, then

    a.  Call _c_(_x_) and let _z_ be its result.

    b.  If _z_ is not FAILURE, return _z_.

    c.  Call _m_(_xr_, _d_) and return its result.

9.  Call _m_(_xr_, _d_) and let _z_ be its result.

10. If _z_ is not FAILURE, return _z_.

11. Call _c_(_x_) and return its result.

NOTE 1 An _Atom_ followed by a _Quantifier_ is repeated the number of
times specified by the _Quantifier_. A _Quantifier_ can be non-greedy,
in which case the _Atom_ pattern is repeated as few times as possible
while still matching the sequel, or it can be greedy, in which case the
_Atom_ pattern is repeated as many times as possible while still
matching the sequel. The _Atom_ pattern is repeated rather than the
input character sequence that it matches, so different repetitions of
the _Atom_ can match different input substrings.

NOTE 2 If the _Atom_ and the sequel of the regular expression all have
choice points, the _Atom_ is first matched as many (or as few, if
non-greedy) times as possible. All choices in the sequel are tried
before moving on to the next choice in the last repetition of _Atom_.
All choices in the last (n^th^) repetition of _Atom_ are tried before
moving on to the next choice in the next-to-last (n–1)^st^ repetition of
_Atom_; at which point it may turn out that more or fewer repetitions of
_Atom_ are now possible; these are exhausted (again, starting with
either as few or as many as possible) before moving on to the next
choice in the (n-1)^st^ repetition of _Atom_ and so on.

Compare

  /a[a-z]{2,4}/.exec("abcdefghi")

which returns "ABCDE" with

  /a[a-z]{2,4}?/.exec("abcdefghi")

which returns "ABC".

Consider also

  /(aa|aabaac|ba|b|c)*/.exec("aabaac")

which, by the choice point ordering above, returns the array

  ["aaba", "ba"]

and not any of:

  ["aabaac", "aabaac"]

  ["aabaac", "c"]

The above ordering of choice points can be used to write a regular
expression that calculates the greatest common divisor of two numbers
(represented in unary notation). The following example calculates the
gcd of 10 and 15:

  "aaaaaaaaaa,aaaaaaaaaaaaaaa".replace(/^(a+)\1*,\1+$/,"$1")

which returns the gcd in unary notation "AAAAA".

NOTE 3 Step 5 of the RepeatMatcher clears _Atom's_ captures each time
_Atom_ is repeated. We can see its behaviour in the regular expression

  /(z)((a+)?(b+)?(c))*/.exec("zaacbbbcac")

which returns the array

  ["zaacbbbcac", "z", "ac", "a", undefined, "c"]

and not

  ["zaacbbbcac", "z", "ac", "a", "bbb", "c"]

because each iteration of the outermost * clears all captured Strings
contained in the quantified _Atom_, which in this case includes capture
Strings numbered 2, 3, 4, and 5.

NOTE 4 Step 1 of the RepeatMatcher's _d_ closure states that, once the
minimum number of repetitions has been satisfied, any more expansions of
_Atom_ that match the empty character sequence are not considered for
further repetitions. This prevents the regular expression engine from
falling into an infinite loop on patterns such as:

  /(a*)*/.exec("b")

or the slightly more complicated:

  /(a*)b\1+/.exec("baaaac")

which returns the array

  ["b", ""]

Assertion

The production _Assertion_ :: ^ evaluates by returning an internal
AssertionTester closure that takes a State argument _x_ and performs the
following steps when evaluated:

1.  Let _e_ be _x_'s _endIndex_.

2.  If _e_ is zero, return TRUE.

3.  If _Multiline_ is FALSE, return FALSE.

4.  If the character _Input_[_e_–1] is one of _LineTerminator_, return
    TRUE.

5.  Return FALSE.

NOTE Even when the Y flag is used with a pattern, ^ always matches only
at the beginning of _Input_, or (if _Multiline_ is TRUE) at the
beginning of a line.

The production _Assertion_ :: $ evaluates by returning an internal
AssertionTester closure that takes a State argument _x_ and performs the
following steps when evaluated:

1.  Let _e_ be _x_'s _endIndex_.

2.  If _e_ is equal to _InputLength_, return TRUE.

3.  If _Multiline_ is FALSE, return FALSE.

4.  If the character _Input_[_e_] is one of _LineTerminator_, return
    TRUE.

5.  Return FALSE.

The production _Assertion_ :: \ B evaluates by returning an internal
AssertionTester closure that takes a State argument _x_ and performs the
following steps when evaluated:

1.  Let _e_ be _x_'s _endIndex_.

2.  Call IsWordChar(_e_–1) and let _a_ be the Boolean result.

3.  Call IsWordChar(_e_) and let _b_ be the Boolean result.

4.  If _a_ is TRUE and _b_ is FALSE, return TRUE.

5.  If _a_ is FALSE and _b_ is TRUE, return TRUE.

6.  Return FALSE.

The production _Assertion_ :: \ B evaluates by returning an internal
AssertionTester closure that takes a State argument _x_ and performs the
following steps when evaluated:

1.  Let _e_ be _x_'s _endIndex_.

2.  Call IsWordChar(_e_–1) and let _a_ be the Boolean result.

3.  Call IsWordChar(_e_) and let _b_ be the Boolean result.

4.  If _a_ is TRUE and _b_ is FALSE, return FALSE.

5.  If _a_ is FALSE and _b_ is TRUE, return FALSE.

6.  Return TRUE.

The production _Assertion_ :: ( ? = _Disjunction_ ) evaluates as
follows:

1.  Evaluate _Disjunction_ to obtain a Matcher _m_.

2.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps:

    1.  Let _d_ be a Continuation that always returns its State argument
        as a successful MatchResult.

    2.  Call _m_(_x_, _d_) and let _r_ be its result.

    3.  If _r_ is FAILURE, return FAILURE.

    4.  Let _y_ be _r_'s State.

    5.  Let _cap_ be _y_'s _captures_ List.

    6.  Let _xe_ be _x_'s _endIndex_.

    7.  Let _z_ be the State (_xe_, _cap_).

    8.  Call _c_(_z_) and return its result.

The production _Assertion_ :: ( ? ! _Disjunction_ ) evaluates as
follows:

1.  Evaluate _Disjunction_ to obtain a Matcher _m_.

2.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps:

    1.  Let _d_ be a Continuation that always returns its State argument
        as a successful MatchResult.

    2.  Call _m_(_x_, _d_) and let _r_ be its result.

    3.  If _r_ is not FAILURE, return FAILURE.

    4.  Call _c_(_x_) and return its result.

Runtime Semantics: IsWordChar Abstract Operation

The abstract operation IsWordChar takes an integer parameter _e_ and
performs the following steps:

1.  If _e_ is –1 or _e_ is _InputLength_, return FALSE.

2.  Let _c_ be the character _Input_[_e_].

3.  If _c_ is one of the sixty-three characters below, return TRUE.

  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
  a   b   c   d   e   f   g   h   i   j   k   l   m   n   o   p   q   r   s   t   u   v   w   x   y   z
  A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z
  0   1   2   3   4   5   6   7   8   9   _                                                           
  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

1.  Return FALSE.

Quantifier

The production _Quantifier_ :: _QuantifierPrefix_ evaluates as follows:

1.  Evaluate _QuantifierPrefix_ to obtain the two results: an integer
    _min_ and an integer (or ∞) _max_.

2.  Return the three results _min_, _max_, and TRUE.

The production _Quantifier_ :: _QuantifierPrefix_ ? evaluates as
follows:

1.  Evaluate _QuantifierPrefix_ to obtain the two results: an integer
    _min_ and an integer (or ∞) _max_.

2.  Return the three results _min_, _max_, and FALSE.

The production _QuantifierPrefix_ :: * evaluates as follows:

1.  Return the two results 0 and ∞.

The production _QuantifierPrefix_ :: + evaluates as follows:

1.  Return the two results 1 and ∞.

The production _QuantifierPrefix_ :: ? evaluates as follows:

1.  Return the two results 0 and 1.

The production _QuantifierPrefix_ :: { _DecimalDigits_ } evaluates as
follows:

1.  Let _i_ be the MV of _DecimalDigits_ (see 11.8.3).

2.  Return the two results _i_ and _i_.

The production _QuantifierPrefix_ :: { _DecimalDigits_ , } evaluates as
follows:

1.  Let _i_ be the MV of _DecimalDigits_.

2.  Return the two results _i_ and ∞.

The production _QuantifierPrefix_ :: { _DecimalDigits_ , _DecimalDigits_
} evaluates as follows:

1.  Let _i_ be the MV of the first _DecimalDigits_.

2.  Let _j_ be the MV of the second _DecimalDigits_.

3.  Return the two results _i_ and _j_.

Atom

The production _Atom_ :: _PatternCharacter_ evaluates as follows:

1.  Let _ch_ be the character matched by _PatternCharacter_.

2.  Let _A_ be a one-element CharSet containing the character _ch_.

3.  Call CharacterSetMatcher(_A_, FALSE) and return its Matcher result.

The production _Atom_ :: . evaluates as follows:

1.  Let _A_ be the set of all characters except _LineTerminator_.

2.  Call CharacterSetMatcher(_A_, FALSE) and return its Matcher result.

The production _Atom_ :: \ _AtomEscape_ evaluates as follows:

1.  Return the Matcher that is the result of evaluating _AtomEscape_.

The production _Atom_ :: _CharacterClass_ evaluates as follows:

1.  Evaluate _CharacterClass_ to obtain a CharSet _A_ and a Boolean
    _invert_.

2.  Call CharacterSetMatcher(_A_, _invert_) and return its Matcher
    result.

The production _Atom_ :: ( _Disjunction_ ) evaluates as follows:

1.  Evaluate _Disjunction_ to obtain a Matcher _m_.

2.  Let _parenIndex_ be the number of left capturing parentheses in the
    entire regular expression that occur to the left of this production
    expansion's initial left parenthesis. This is the total number of
    times the _Atom_ :: ( _Disjunction _) production is expanded prior
    to this production's _Atom_ plus the total number of
    _Atom_ :: ( _Disjunction_ ) productions enclosing this _Atom_.

3.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps:

    1.  Create an internal Continuation closure _d_ that takes one State
        argument _y_ and performs the following steps:

1.  Let _cap_ be a fresh copy of _y_'s _captures_ List.

2.  Let _xe_ be _x_'s _endIndex_.

3.  Let _ye_ be _y_'s _endIndex_.

4.  Let _s_ be a fresh List whose characters are the characters of
    _Input_ at indices _xe_ (inclusive) through _ye_ (exclusive).

5.  Set _cap_[_parenIndex_+1] to _s_.

6.  Let _z_ be the State (_ye_, _cap_).

7.  Call _c_(_z_) and return its result.

    1.  Call _m_(_x_, _d_) and return its result.

The production _Atom_ :: ( ? : _Disjunction_ ) evaluates as follows:

1.  Return the Matcher that is the result of evaluating _Disjunction_.

Runtime Semantics: CharacterSetMatcher Abstract Operation

The abstract operation CharacterSetMatcher takes two arguments, a
CharSet _A_ and a Boolean flag _invert_, and performs the following
steps:

1.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps when
    evaluated:

    1.  Let _e_ be _x_'s _endIndex_.

    2.  If _e_ is _InputLength_, return FAILURE.

    3.  Let _ch_ be the character _Input_[_e_].

    4.  Let _cc_ be Canonicalize(_ch_).

    5.  If _invert_ is FALSE, then

        a.  If there does not exist a member _a_ of set _A_ such that
            Canonicalize(_a_) is _cc_, return FAILURE.

    6.  Else _invert_ is TRUE,

        a.  If there exists a member _a_ of set _A_ such that
            Canonicalize(_a_) is _cc_, return FAILURE.

    7.  Let _cap_ be _x_'s _captures_ List.

    8.  Let _y_ be the State (_e_+1, _cap_).

    9.  Call _c_(_y_) and return its result.

Runtime Semantics: Canonicalize ( ch )

The abstract operation Canonicalize takes a character parameter _ch_ and
performs the following steps:

1.  If _IgnoreCase_ is FALSE, return _ch_.

2.  If _Unicode_ is TRUE,

    a.  If the file CaseFolding.txt of the Unicode Character Database
        provides a simple or common case folding mapping for _ch_,
        return the result of applying that mapping to _ch_.

    b.  Else, return _ch._

3.  Else,

    a.  Assert: _ch_ is a UTF-16 code unit.

    b.  Let _s_ be the ECMAScript String value consisting of the single
        code unit _ch_.

    c.  Let _u_ be the same result produced as if by performing the
        algorithm for STRING.PROTOTYPE.TOUPPERCASE using _s_ as the THIS
        value.

    d.  e.  Assert: _u_ is a String value.

    f.  If _u_ does not consist of a single code unit, return _ch_.

    g.  Let _cu_ be _u_’s single code unit element.

    h.  If _ch_'s code unit value ≥ 128 and _cu_'s code unit value <
        128, return _ch_.

    i.  Return _cu_.

NOTE 1 Parentheses of the form ( _Disjunction_ ) serve both to group the
components of the _Disjunction_ pattern together and to save the result
of the match. The result can be used either in a backreference (\
followed by a nonzero decimal number), referenced in a replace String,
or returned as part of an array from the regular expression matching
internal procedure. To inhibit the capturing behaviour of parentheses,
use the form (?: _Disjunction_ ) instead.

NOTE 2 The form (?= _Disjunction_ ) specifies a zero-width positive
lookahead. In order for it to succeed, the pattern inside _Disjunction_
must match at the current position, but the current position is not
advanced before matching the sequel. If _Disjunction_ can match at the
current position in several ways, only the first one is tried. Unlike
other regular expression operators, there is no backtracking into a (?=
form (this unusual behaviour is inherited from Perl). This only matters
when the _Disjunction_ contains capturing parentheses and the sequel of
the pattern contains backreferences to those captures.

For example,

  /(?=(a+))/.exec("baaabac")

matches the empty String immediately after the first B and therefore
returns the array:

  ["", "aaa"]

To illustrate the lack of backtracking into the lookahead, consider:

  /(?=(a+))a*b\1/.exec("baaabac")

This expression returns

  ["aba", "a"]

and not:

  ["aaaba", "a"]

NOTE 3 The form (?! _Disjunction_ ) specifies a zero-width negative
lookahead. In order for it to succeed, the pattern inside _Disjunction_
must fail to match at the current position. The current position is not
advanced before matching the sequel. _Disjunction_ can contain capturing
parentheses, but backreferences to them only make sense from within
_Disjunction_ itself. Backreferences to these capturing parentheses from
elsewhere in the pattern always return UNDEFINED because the negative
lookahead must fail for the pattern to succeed. For example,

  /(.*?)a(?!(a+)b\2c)\2(.*)/.exec("baaabaac")

looks for an A not immediately followed by some positive number n of
A's, a B, another n A's (specified by the first \2) and a C. The second
\2 is outside the negative lookahead, so it matches against UNDEFINED
and therefore always succeeds. The whole expression returns the array:

  ["baaabaac", "ba", undefined, "abaac"]

NOTE 4 In case-insignificant matches when _Unicode_ is TRUE, all
characters are implicitly case-folded using the simple mapping provided
by the Unicode standard immediately before they are compared. The simple
mapping always maps to a single code point, so it does not map, for
example, "SS" (U+00DF) to "SS". It may however map a code point outside
the Basic Latin range to a character within, for example, "ſ" (U+017F)
to "s". Such characters are not mapped if _Unicode_ is FALSE. This
prevents Unicode code points such as U+017F and U+212A from matching
regular expressions such as /[AZ]/I, but they will match /[AZ]/UI.

AtomEscape

The production _AtomEscape_ :: _DecimalEscape_ evaluates as follows:

1.  Evaluate _DecimalEscape_ to obtain an EscapeValue _E_.

2.  If _E_ is a character, then

    a.  Let _ch_ be _E_'s character.

    b.  Let _A_ be a one-element CharSet containing the character _ch_.

    c.  Call CharacterSetMatcher(_A_, FALSE) and return its Matcher
        result.

3.  Assert: _E_ must be an integer.

4.  Let _n_ be that integer.

5.  If _n_=0 or _n_>_NcapturingParens_, throw a SYNTAXERROR exception.

6.  Return an internal Matcher closure that takes two arguments, a State
    _x_ and a Continuation _c_, and performs the following steps:

    1.  Let _cap_ be _x_'s _captures_ List.

    2.  Let _s_ be _cap_[_n_].

    3.  If _s_ is UNDEFINED, return _c_(_x_).

    4.  Let _e_ be _x_'s _endIndex_.

    5.  Let _len_ be _s_'s length.

    6.  Let _f_ be _e_+_len_.

    7.  If _f_>_InputLength_, return FAILURE.

    8.  If there exists an integer _i_ between 0 (inclusive) and _len_
        (exclusive) such that Canonicalize(_s_[_i_]) is not the same
        character value as Canonicalize(_Input_ [_e_+_i_]), return
        FAILURE.

    9.  Let _y_ be the State (_f_, _cap_).

    10. Call _c_(_y_) and return its result.

The production _AtomEscape_ :: _CharacterEscape_ evaluates as follows:

1.  Evaluate _CharacterEscape_ to obtain a character _ch_.

2.  Let _A_ be a one-element CharSet containing the character _ch_.

3.  Call CharacterSetMatcher(_A_, FALSE) and return its Matcher result.

The production _AtomEscape_ :: _CharacterClassEscape_ evaluates as
follows:

1.  Evaluate _CharacterClassEscape_ to obtain a CharSet _A_.

2.  Call CharacterSetMatcher(_A_, FALSE) and return its Matcher result.

NOTE An escape sequence of the form \ followed by a nonzero decimal
number _n_ matches the result of the _n_th set of capturing parentheses
(see 21.2.2.11). It is an error if the regular expression has fewer than
_n_ capturing parentheses. If the regular expression has _n_ or more
capturing parentheses but the _n_th one is UNDEFINED because it has not
captured anything, then the backreference always succeeds.

CharacterEscape

The production _CharacterEscape_ :: _ControlEscape_ evaluates by
returning the character according to Table 47.

Table 47 — ControlEscape Character Values

  ----------------- ------------------- -------------- ---------------------- ----------
  _CONTROLESCAPE_   _CHARACTER VALUE_   _CODE POINT_   _UNICODE NAME_         _SYMBOL_
  T                 9                   U+0009         CHARACTER TABULATION   <HT>
  N                 10                  U+000A         LINE FEED (LF)         <LF>
  V                 11                  U+000B         LINE TABULATION        <VT>
  F                 12                  U+000C         FORM FEED (FF)         <FF>
  R                 13                  U+000D         CARRIAGE RETURN (CR)   <CR>
  ----------------- ------------------- -------------- ---------------------- ----------

The production _CharacterEscape_ :: C _ControlLetter_ evaluates as
follows:

1.  Let _ch_ be the character matched by _ControlLetter_.

2.  Let _i_ be _ch_'s character value.

3.  Let _j_ be the remainder of dividing _i_ by 32.

4.  Return the character whose character value is _j_.

The production _CharacterEscape_ :: _HexEscapeSequence_ evaluates as
follows:

1.  Return the character whose code is the SV of _HexEscapeSequence_.

The production _CharacterEscape_ :: _RegExpUnicodeEscapeSequence_
evaluates as follows:

1.  Return the result of evaluating _RegExpUnicodeEscapeSequence_.

The production _CharacterEscape_ :: _IdentityEscape_ evaluates as
follows:

1.  Return the character matched by _IdentityEscape_.

The production _RegExpUnicodeEscapeSequence_ :: U _LeadSurrogate_ \U
_TrailSurrogate_ evaluates as follows:

1.  Let _lead_ be the result of evaluating _LeadSurrogate_.

2.  Let _trail_ be the result of evaluating _TrailSurrogate_.

3.  Let _cp_ be UTF16Decode(_lead_, _trail_).

4.  Return the character whose character value is _cp_.

The production _RegExpUnicodeEscapeSequence_ :: U _LeadSurrogate_
evaluates as follows:

1.  Return the character whose code is the result of evaluating
    _LeadSurrogate_.

The production _RegExpUnicodeEscapeSequence_ :: U _TailSurrogate_
evaluates as follows:

1.  Return the character whose code is the result of evaluating
    _TailSurrogate_.

The production _RegExpUnicodeEscapeSequence_ :: U _NonSurrogate_
evaluates as follows:

1.  Return the character whose code is the result of evaluating
    _NonSurrogate_.

The production _RegExpUnicodeEscapeSequence_ :: U _Hex4Digits_ evaluates
as follows:

1.  Return the character whose code is the SV of _Hex4Digits_.

The production _RegExpUnicodeEscapeSequence_ :: U{ _HexDigits_}
evaluates as follows:

1.  Return the character whose code is the MV of _HexDigits_.

The production _LeadSurrogate_ :: _Hex4Digits_ evaluates as follows:

1.  Return the character whose code is the SV of _Hex4Digits_.

The production _TrailSurrogate_ :: _Hex4Digits_ evaluates as follows:

1.  Return the character whose code is the SV of _Hex4Digits_.

The production _NonSurrogate_ :: _Hex4Digits_ evaluates as follows:

1.  Return the character whose code is the SV of _Hex4Digits_.

DecimalEscape

The production _DecimalEscape_ :: _DecimalIntegerLiteral_ evaluates as
follows:

1.  Let _i_ be the MV of _DecimalIntegerLiteral_.

2.  If _i_ is zero, return the EscapeValue consisting of the character
    U+0000 (NULL).

3.  Return the EscapeValue consisting of the integer _i_.

The definition of “the MV of _DecimalIntegerLiteral_” is in 11.8.3.

NOTE If \ is followed by a decimal number _n_ whose first digit is not
0, then the escape sequence is considered to be a backreference. It is
an error if _n_ is greater than the total number of left capturing
parentheses in the entire regular expression. \0 represents the <NUL>
character and cannot be followed by a decimal digit.

CharacterClassEscape

The production _CharacterClassEscape_ :: D evaluates by returning the
ten-element set of characters containing the characters 0 through 9
inclusive.

The production _CharacterClassEscape_ :: D evaluates by returning the
set of all characters not included in the set returned by
_CharacterClassEscape_ :: D.

The production _CharacterClassEscape_ :: S evaluates by returning the
set of characters containing the characters that are on the right-hand
side of the _WhiteSpace_ (11.2) or _LineTerminator_ (11.3) productions.

The production _CharacterClassEscape_ :: S evaluates by returning the
set of all characters not included in the set returned by
_CharacterClassEscape_ :: S.

The production _CharacterClassEscape_ :: W evaluates by returning the
set of characters containing the sixty-three characters:

  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
  a   b   c   d   e   f   g   h   i   j   k   l   m   n   o   p   q   r   s   t   u   v   w   x   y   z
  A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z
  0   1   2   3   4   5   6   7   8   9   _                                                           
  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

The production _CharacterClassEscape_ :: W evaluates by returning the
set of all characters not included in the set returned by
_CharacterClassEscape_ :: W.

CharacterClass

The production _CharacterClass_ :: [ _ClassRanges_ ] evaluates by
evaluating _ClassRanges_ to obtain a CharSet and returning that CharSet
and the Boolean FALSE.

The production _CharacterClass_ :: [ ^ _ClassRanges_ ] evaluates by
evaluating _ClassRanges_ to obtain a CharSet and returning that CharSet
and the Boolean TRUE.

ClassRanges

The production _ClassRanges_ :: [empty] evaluates by returning the empty
CharSet.

The production _ClassRanges_ :: _NonemptyClassRanges_ evaluates by
evaluating _NonemptyClassRanges_ to obtain a CharSet and returning that
CharSet.

NonemptyClassRanges

The production _NonemptyClassRanges_ :: _ClassAtom_ evaluates as
follows:

1.  Return the CharSet that is the result of evaluating _ClassAtom_.

The production _NonemptyClassRanges_ :: _ClassAtom_
_NonemptyClassRangesNoDash_ evaluates as follows:

1.  Evaluate _ClassAtom_ to obtain a CharSet _A_.

2.  Evaluate _NonemptyClassRangesNoDash_ to obtain a CharSet _B_.

3.  Return the union of CharSets _A_ and _B_.

The production _NonemptyClassRanges_ :: _ClassAtom_ - _ClassAtom_
_ClassRanges_ evaluates as follows:

1.  Evaluate the first _ClassAtom_ to obtain a CharSet _A_.

2.  Evaluate the second _ClassAtom_ to obtain a CharSet _B_.

3.  Evaluate _ClassRanges_ to obtain a CharSet _C_.

4.  Call CharacterRange(_A_, _B_) and let _D_ be the resulting CharSet.

5.  Return the union of CharSets _D_ and _C_.

Runtime Semantics: CharacterRange Abstract Operation

The abstract operation CharacterRange takes two CharSet parameters _A_
and _B_ and performs the following steps:

1.  If _A_ does not contain exactly one character or _B_ does not
    contain exactly one character, throw a SYNTAXERROR exception.

2.  Let _a_ be the one character in CharSet _A_.

3.  Let _b_ be the one character in CharSet _B_.

4.  Let _i_ be the character value of character _a_.

5.  Let _j_ be the character value of character _b_.

6.  If _i_ > _j_, throw a SYNTAXERROR exception.

7.  Return the set containing all characters numbered _i_ through _j_,
    inclusive.

NonemptyClassRangesNoDash

The production _NonemptyClassRangesNoDash_ :: _ClassAtom_ evaluates as
follows:

1.  Return the CharSet that is the result of evaluating _ClassAtom_.

The production _NonemptyClassRangesNoDash_ :: _ClassAtomNoDash_
_NonemptyClassRangesNoDash_ evaluates as follows:

1.  Evaluate _ClassAtomNoDash_ to obtain a CharSet _A_.

2.  Evaluate _NonemptyClassRangesNoDash_ to obtain a CharSet _B_.

3.  Return the union of CharSets _A_ and _B_.

The production _NonemptyClassRangesNoDash_ :: _ClassAtomNoDash_ -
_ClassAtom_ _ClassRanges_ evaluates as follows:

1.  Evaluate _ClassAtomNoDash_ to obtain a CharSet _A_.

2.  Evaluate _ClassAtom_ to obtain a CharSet _B_.

3.  Evaluate _ClassRanges_ to obtain a CharSet _C_.

4.  Call CharacterRange(_A_, _B_) and let _D_ be the resulting CharSet.

5.  Return the union of CharSets _D_ and _C_.

NOTE 1 _ClassRanges_ can expand into single _ClassAtoms_ and/or ranges
of two _ClassAtoms_ separated by dashes. In the latter case the
_ClassRanges_ includes all characters between the first _ClassAtom_ and
the second _ClassAtom_, inclusive; an error occurs if either _ClassAtom_
does not represent a single character (for example, if one is \W) or if
the first _ClassAtom's_ character value is greater than the second
_ClassAtom's_ character value.

NOTE 2 Even if the pattern ignores case, the case of the two ends of a
range is significant in determining which characters belong to the
range. Thus, for example, the pattern /[E-F]/I matches only the letters
E, F, E, and F, while the pattern /[E-F]/I matches all upper and
lower-case letters in the Unicode Basic Latin block as well as the
symbols [, \, ], ^, _, and `.

NOTE 3 A - character can be treated literally or it can denote a range.
It is treated literally if it is the first or last character of
_ClassRanges_, the beginning or end limit of a range specification, or
immediately follows a range specification.

ClassAtom

The production _ClassAtom_ :: - evaluates by returning the CharSet
containing the one character -.

The production _ClassAtom_ :: _ClassAtomNoDash_ evaluates by evaluating
_ClassAtomNoDash_ to obtain a CharSet and returning that CharSet.

ClassAtomNoDash

The production _ClassAtomNoDash_ :: _SourceCharacter_ BUT NOT ONE OF \
OR ] OR - evaluates as follows:

1.  Return the CharSet containing the character matched by
    _SourceCharacter_.

The production _ClassAtomNoDash_ :: \ _ClassEscape_ evaluates as
follows:

1.  Return the CharSet that is the result of evaluating _ClassEscape_.

ClassEscape

The production _ClassEscape_ :: _DecimalEscape_ evaluates as follows:

1.  Evaluate _DecimalEscape_ to obtain an EscapeValue _E_.

2.  If _E_ is not a character, throw a SYNTAXERROR exception.

3.  Let _ch_ be _E_'s character.

4.  Return the one-element CharSet containing the character _ch_.

The production _ClassEscape_ :: B evaluates as follows:

1.  Return the CharSet containing the single character <BS> U+
    (BACKSPACE).

The production _ClassEscape_ :: - evaluates as follows:

1.  Return the CharSet containing the single character - U+002D
    (HYPEN-MINUS).

The production _ClassEscape_ :: _CharacterEscape_ evaluates as follows:

1.  Return the CharSet containing the single character that is the
    result of evaluating _CharacterEscape_.

The production _ClassEscape_ :: _CharacterClassEscape_ evaluates as
follows:

1.  Return the CharSet that is the result of evaluating
    _CharacterClassEscape_.

NOTE A _ClassAtom_ can use any of the escape sequences that are allowed
in the rest of the regular expression except for \B, \B, and
backreferences. Inside a _CharacterClass_, \B means the backspace
character, while \B and backreferences raise errors. Using a
backreference inside a _ClassAtom_ causes an error.

The RegExp Constructor 

The RegExp constructor is the %RegExp% intrinsic object and the initial
value of the REGEXP property of the global object. When REGEXP is called
as a function rather than as a constructor, it creates and initializes a
new RegExp object. Thus the function call REGEXP(…) is equivalent to the
object creation expression NEW REGEXP(…) with the same arguments.

The REGEXP constructor is designed to be subclassable. It may be used as
the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified REGEXP behaviour must
include a SUPER call to the REGEXP constructor to create and initialize
subclass instances with the necessary internal slots.

RegExp ( pattern, flags )

The following steps are taken:

1.  Let _patternIsRegExp_ be IsRegExp(_pattern_).

2.  ReturnIfAbrupt(_patternIsRegExp_).

3.  If NewTarget is not UNDEFINED, let _newTarget_ be NewTarget.

4.  Else,

    a.  Let _newTarget_ be the active function object.

    b.  If _patternIsRegExp_ is TRUE and _flags_ is UNDEFINED, then

        i.  Let _patternConstructor_ be Get(_pattern_, "CONSTRUCTOR").

        ii. ReturnIfAbrupt(_patternConstructor_).

        iii. If SameValue(_newTarget_, _patternConstructor_) is TRUE,
            return _pattern_.

5.  If Type(_pattern_) is Object and _pattern_ has a [[RegExpMatcher]]
    internal slot, then

    a.  Let _P_ be the value of _pattern’s_ [[OriginalSource]] internal
        slot.

    b.  If _flags_ is UNDEFINED, let _F_ be the value of _pattern’s_
        [[OriginalFlags]] internal slot.

    c.  Else, let _F_ be _flags_.

6.  Else if _patternIsRegExp_ is TRUE, then

    a.  Let _P_ be Get(_pattern_, "SOURCE").

    b.  ReturnIfAbrupt(_P_).

    c.  If _flags_ is UNDEFINED, then

        i.  Let _F_ be Get(_pattern_, "FLAGS").

        ii. ReturnIfAbrupt(_F_).

    d.  Else, let _F_ be _flags_.

7.  Else,

    a.  Let _P_ be _pattern_.

    b.  Let _F_ be _flags_.

8.  Let _O_ be RegExpAlloc(_newTarget_).

9.  ReturnIfAbrupt(_O_).

10. Return RegExpInitialize(_O,_ _P_, _F_).

NOTE If pattern is supplied using a _StringLiteral_, the usual escape
sequence substitutions are performed before the String is processed by
RegExp. If pattern must contain an escape sequence to be recognized by
RegExp, any U+005C (REVERSE SOLIDUS) code points must be escaped within
the _StringLiteral_ to prevent them being removed when the contents of
the _StringLiteral_ are formed.

Abstract Operations for the RegExp Constructor

Runtime Semantics: RegExpAlloc ( newTarget )

When the abstract operation RegExpAlloc with argument _newTarget_ is
called, the following steps are taken:

1.  Let _obj_ be OrdinaryCreateFromConstructor(_newTarget_,
    "%REGEXPPROTOTYPE%", «‍[[RegExpMatcher]], [[OriginalSource]],
    [[OriginalFlags]]»).

2.  ReturnIfAbrupt(_obj_).

3.  Let _status_ be DefinePropertyOrThrow(_obj_, "LASTINDEX",
    PropertyDescriptor {[[Writable]]: TRUE, [[Enumerable]]: FALSE,
    [[Configurable]]: FALSE}).

4.  Assert: _status_ is not an abrupt completion.

5.  Return _obj_.

Runtime Semantics: RegExpInitialize ( obj, pattern, flags )

When the abstract operation RegExpInitialize with arguments _obj,_
_pattern_, and _flags_ is called, the following steps are taken:

1.  If _pattern_ is UNDEFINED, let _P_ be the empty String.

2.  Else, let _P_ be ToString(_pattern_).

3.  ReturnIfAbrupt(_P_).

4.  If _flags_ is UNDEFINED, let _F_ be the empty String.

5.  Else, let _F_ be ToString(_flags_).

6.  ReturnIfAbrupt(_F_).

7.  If _F_ contains any code unit other than "G", "I", "M", "U", or "Y"
    or if it contains the same code unit more than once, throw a
    SYNTAXERROR exception.

8.  If _F_ contains "U", let _BMP_ be FALSE; else let _BMP_ be TRUE.

9.  If _BMP_ is TRUE, then

    a.  Parse _P_ using the grammars in 21.2.1 and interpreting each of
        its 16-bit elements as a Unicode BMP code point. UTF-16 decoding
        is not applied to the elements. The goal symbol for the parse is
        _Pattern_. Throw a SYNTAXERROR exception if _P_ did not conform
        to the grammar, if any elements of _P_ were not matched by the
        parse, or if any Early Error conditions exist.

    b.  Let _patternCharacters_ be a List whose elements are the code
        unit elements of _P._

10. Else

    a.  Parse _P_ using the grammars in 21.2.1 and interpreting _P_ as
        UTF-16 encoded Unicode code points (6.1.4). The goal symbol for
        the parse is _Pattern_~[U]~. Throw a SYNTAXERROR exception if
        _P_ did not conform to the grammar, if any elements of _P_ were
        not matched by the parse, or if any Early Error conditions
        exist.

    b.  Let _patternCharacters_ be a List whose elements are the code
        points resulting from applying UTF-16 decoding to _P_’s sequence
        of elements.

11. Set the value of _obj’s_ [[OriginalSource]] internal slot to _P_.

12. Set the value of _obj’s_ [[OriginalFlags]] internal slot to _F_.

13. Set _obj’s_ [[RegExpMatcher]] internal slot to the internal
    procedure that evaluates the above parse of _P_ by applying the
    semantics provided in 21.2.2 using _patternCharacters_ as the
    pattern’s List of _SourceCharacter_ values and _F_ as the flag
    parameters.

14. Let _setStatus_ be Set(_obj_, "LASTINDEX", 0, TRUE).

15. ReturnIfAbrupt(_setStatus_).

16. Return _obj_.

Runtime Semantics: RegExpCreate ( P, F )

When the abstract operation RegExpCreate with arguments _P_ and _F_ is
called, the following steps are taken:

1.  Let _obj_ be RegExpAlloc(%RegExp%).

2.  ReturnIfAbrupt(_obj_).

3.  Return RegExpInitialize(_obj,_ _P_, _F_).

Runtime Semantics: EscapeRegExpPattern ( P, F )

When the abstract operation EscapeRegExpPattern with arguments _P_ and
_F_ is called, the following occurs:

1.  Let _S_ be a String in the form of a _Pattern_ (_Pattern_~[U]~ if
    _F_ contains "U") equivalent to _P_ interpreted as UTF-16 encoded
    Unicode code points (6.1.4), in which certain code points are
    escaped as described below. _S_ may or may not be identical to _P_;
    however, the internal procedure that would result from evaluating
    _S_ as a _Pattern_ (_Pattern_~[U]~ if _F_ contains "U") must behave
    identically to the internal procedure given by the constructed
    object's [[RegExpMatcher]] internal slot. Multiple calls to this
    abstract operation using the same values for _P_ and _F_ must
    produce identical results.

2.  The code points / or any _LineTerminator_ occurring in the pattern
    shall be escaped in _S_ as necessary to ensure that the String value
    formed by concatenating the Strings "/", _S_, "/", and _F_ can be
    parsed (in an appropriate lexical context) as a
    _RegularExpressionLiteral_ that behaves identically to the
    constructed regular expression. For example, if _P_ is "/", then _S_
    could be "\/" or "\U002F", among other possibilities, but not "/",
    because /// followed by _F_ would be parsed as a _SingleLineComment_
    rather than a _RegularExpressionLiteral_. If _P_ is the empty
    String, this specification can be met by letting _S_ be "(?:)".

3.  Return _S_.

Properties of the RegExp Constructor

The value of the [[Prototype]] internal slot of the RegExp constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 2), the RegExp constructor
has the following properties:

RegExp.prototype

The initial value of REGEXP.PROTOTYPE is the intrinsic object
%RegExpPrototype% (21.2.5).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

get RegExp [ @@species ] 

REGEXP[@@SPECIES] is an accessor property whose set accessor function is
UNDEFINED. Its get accessor function performs the following steps:

1.  Return the THIS value.

The value of the NAME property of this function is "GET
[SYMBOL.SPECIES]".

NOTE RegExp prototype methods normally use their THIS object’s
constructor to create a derived object. However, a subclass constructor
may over-ride that default behaviour by redefining its @@species
property.

Properties of the RegExp Prototype Object

The RegExp prototype object is the intrinsic object %RegExpPrototype%.
The RegExp prototype object is an ordinary object. It is not a RegExp
instance and does not have a [[RegExpMatcher]] internal slot or any of
the other internal slots of RegExp instance objects.

The value of the [[Prototype]] internal slot of the RegExp prototype
object is the intrinsic object %ObjectPrototype% (19.1.3).

NOTE The RegExp prototype object does not have a VALUEOF property of its
own; however, it inherits the VALUEOF property from the Object prototype
object.

RegExp.prototype.constructor

The initial value of REGEXP.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %RegExp%.

RegExp.prototype.exec ( string )

Performs a regular expression match of _string_ against the regular
expression and returns an Array object containing the results of the
match, or NULL if _string_ did not match.

The String ToString(_string_) is searched for an occurrence of the
regular expression pattern as follows:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  a.  b.  

4.  If _R_ does not have a [[RegExpMatcher]] internal slot, throw a
    TYPEERROR exception.

5.  Let _S_ be ToString(_string_).

6.  ReturnIfAbrupt(_S_).

7.  Return RegExpBuiltinExec(_R_, _S_).

Runtime Semantics: RegExpExec ( R, S )

The abstract operation RegExpExec with arguments _R_ and _S_ performs
the following steps:

1.  Assert: Type(_R_) is Object.

2.  Assert: Type(_S_) is String.

3.  Let _exec_ be Get(_R_, "EXEC").

4.  ReturnIfAbrupt(_exec_).

5.  If IsCallable(_exec_) is TRUE, then

    a.  Let _result_ be Call(_exec_, _R_, «_S_»).

    b.  ReturnIfAbrupt(_result_).

    c.  If Type(_result_) is neither Object or Null, throw a TYPEERROR
        exception.

    d.  Return _result_.

6.  If _R_ does not have a [[RegExpMatcher]] internal slot, throw a
    TYPEERROR exception.

7.  Return RegExpBuiltinExec(_R_, _S_).

NOTE If a callable EXEC property is not found this algorithm falls back
to attempting to use the built-in RegExp matching algorithm. This
provides compatible behaviour for code written for prior editions where
most built-in algorithms that use regular expressions did not perform a
dynamic property lookup of EXEC.

Runtime Semantics: RegExpBuiltinExec ( R, S ) 

The abstract operation RegExpBuiltinExec with arguments _R_ and _S_
performs the following steps:

1.  Assert: _R_ is an initialized RegExp instance.

2.  Assert: Type(_S_) is String.

3.  Let _length_ be the number of code units in _S_.

4.  Let _lastIndex_ be ToLength(Get(_R_,"LASTINDEX")).

5.  ReturnIfAbrupt(_lastIndex_).

6.  Let _global_ be ToBoolean(Get(_R_, "GLOBAL")).

7.  ReturnIfAbrupt(_global_).

8.  Let _sticky_ be ToBoolean(Get(_R_, "STICKY")).

9.  ReturnIfAbrupt(_sticky_).

10. If _global_ is FALSE and _sticky_ is FALSE, let _lastIndex_ be 0.

11. Let _matcher_ be the value of _R’s_ [[RegExpMatcher]] internal slot.

12. Let _flags_ be the value of _R’s_ [[OriginalFlags]] internal slot.

13. If _flags_ contains "U", let _fullUnicode_ be TRUE, else let
    _fullUnicode_ be FALSE.

14. Let _matchSucceeded_ be FALSE.

15. Repeat, while _matchSucceeded_ is FALSE

    a.  If _lastIndex_ > _length_, then

        i.  Let _setStatus_ be Set(_R_, "LASTINDEX", 0, TRUE).

        ii. ReturnIfAbrupt(_setStatus_).

        iii. Return NULL.

    b.  Let _r_ be _matcher_(_S_, _lastIndex_).

    c.  If _r_ is FAILURE, then

        i.  If _sticky_ is TRUE, then

            1.  Let _setStatus_ be Set(_R_, "LASTINDEX", 0, TRUE).

            2.  ReturnIfAbrupt(_setStatus_).

            3.  Return NULL.

        ii. Let _lastIndex_ be AdvanceStringIndex(_S_, _lastIndex_,
            _fullUnicode_).

    d.  Else,

        i.  Assert: _r_ is a State.

        ii. Set _matchSucceeded_ to TRUE.

16. Let _e_ be _r_'s _endIndex_ value.

17. If _fullUnicode_ is TRUE, then

    a.  _e_ is an index into the _Input_ character list, derived from
        _S_, matched by _matcher_. Let _eUTF_ be the smallest index into
        _S_ that corresponds to the character at element _e_ of _Input_.
        If _e_ is greater than or equal to the length of _Input_, then
        _eUTF_ is the number of code units in _S._

    b.  Let _e_ be _eUTF_.

18. If _global_ is TRUE or _sticky_ is TRUE,

    a.  Let _setStatus_ be Set(_R_, "LASTINDEX", _e_, TRUE).

    b.  ReturnIfAbrupt(_setStatus_).

19. Let _n_ be the length of _r_'s _captures_ List. (This is the same
    value as 21.2.2.1's _NcapturingParens_.)

20. Let _A_ be ArrayCreate(_n_ + 1).

21. Assert: The value of _A_’s "LENGTH" property is _n_ + 1.

22. Let _matchIndex_ be _lastIndex_.

23. Assert: The following CreateDataProperty calls will not result in an
    abrupt completion.

24. Perform CreateDataProperty(_A_, "INDEX", _matchIndex_).

25. Perform CreateDataProperty(_A_, "INPUT", _S_).

26. Let _matchedSubstr_ be the matched substring (i.e. the portion of
    _S_ between offset _lastIndex_ inclusive and offset _e_ exclusive).

27. Perform CreateDataProperty(_A_, "0", _matchedSubstr_).

28. For each integer _i_ such that _i_ > 0 and _i_ ≤ _n

    a.  Let _captureI_ be _i_^th^ element of _r_'s _captures_ List.

    b.  If _captureI_ is UNDEFINED, let _capturedValue_ be UNDEFINED.

    c.  Else if _fullUnicode_ is TRUE,

        i.  Assert: _captureI_ is a List of code points.

        ii. Let _capturedValue_ be a string whose code units are the
            UTF16Encoding (10.1.1) of the code points of _captureI._

    d.  Else, _fullUnicode_ is FALSE,

        i.  Assert: _captureI_ is a List of code units.

        ii. Let _capturedValue_ be a string consisting of the code units
            of _captureI._

    e.  Perform CreateDataProperty(_A_, ToString(_i_) ,
        _capturedValue_).

29. Return _A_.

AdvanceStringIndex ( S, index, unicode )

The abstract operation AdvanceStringIndex with arguments _S_, _index_,
and _unicode_ performs the following steps:

1.  Assert: Type(_S_) is String.

2.  Assert: _index_ is an integer such that 0≤_index_≤2^53^-1.

3.  Assert: Type(_unicode_) is Boolean.

4.  If _unicode_ is FALSE, return _index_+1.

5.  Let _length_ be the number of code units in _S_.

6.  If _index_+1 ≥ _length_, return _index_+1.

7.  Let _first_ be the code unit value at index _index_ in _S_.

8.  If _first_ < 0xD800 or _first_ > 0xDBFF, return _index_+1.

9.  Let _second_ be the code unit value at index _index_+1 in _S_.

10. If _second_ < 0xDC00 or _second_ > 0xDFFF, return _index_+1.

11. Return _index_+2.

get RegExp.prototype.flags 

REGEXP.PROTOTYPE.FLAGS is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  Let _result_ be the empty String.

4.  Let _global_ be ToBoolean(Get(_R_, "GLOBAL")).

5.  ReturnIfAbrupt(_global_).

6.  If _global_ is TRUE, append "G" as the last code unit of _result_.

7.  Let _ignoreCase_ be ToBoolean(Get(_R_, "IGNORECASE")).

8.  ReturnIfAbrupt(_ignoreCase_).

9.  If _ignoreCase_ is TRUE, append "I" as the last code unit of
    _result_.

10. Let _multiline_ be ToBoolean(Get(_R_, "MULTILINE")).

11. ReturnIfAbrupt(_multiline_).

12. If _multiline_ is TRUE, append "M" as the last code unit of
    _result_.

13. Let _unicode_ be ToBoolean(Get(_R_, "UNICODE")).

14. ReturnIfAbrupt(_unicode_).

15. If _unicode_ is TRUE, append "U" as the last code unit of _result_.

16. Let _sticky_ be ToBoolean(Get(_R_, "STICKY")).

17. ReturnIfAbrupt(_sticky_).

18. If _sticky_ is TRUE, append "Y" as the last code unit of _result_.

19. Return _result_.

get RegExp.prototype.global

REGEXP.PROTOTYPE.GLOBAL is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  If _R_ does not have an [[OriginalFlags]] internal slot, throw a
    TYPEERROR exception.

4.  Let _flags_ be the value of _R’s_ [[OriginalFlags]] internal slot.

5.  If _flags_ contains the code unit "G", return TRUE.

6.  Return FALSE.

get RegExp.prototype.ignoreCase

REGEXP.PROTOTYPE.IGNORECASE is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  If _R_ does not have an [[OriginalFlags]] internal slot, throw a
    TYPEERROR exception.

4.  Let _flags_ be the value of _R’s_ [[OriginalFlags]] internal slot.

5.  If _flags_ contains the code unit "I", return TRUE.

6.  Return FALSE.

RegExp.prototype [ @@match ] ( string )

When the @@MATCH method is called with argument _string_, the following
steps are taken:

1.  Let _rx_ be the THIS value.

2.  If Type(_rx_) is not Object, throw a TYPEERROR exception.

3.  Let _S_ be ToString(_string_)

4.  ReturnIfAbrupt(_S_).

5.  Let _global_ be ToBoolean(Get(_rx_, "GLOBAL")).

6.  ReturnIfAbrupt(_global_).

7.  If _global_ is FALSE, then

    a.  Return RegExpExec(_rx_, _S_).

8.  Else _global_ is TRUE,

    a.  Let _fullUnicode_ be ToBoolean(Get(_rx_, "UNICODE")).

    b.  ReturnIfAbrupt(_fullUnicode_).

    c.  Let _setStatus_ be Set(_rx_, "LASTINDEX", 0, TRUE).

    d.  ReturnIfAbrupt(_setStatus_).

    e.  Let _A_ be ArrayCreate(0).

    f.  Let _n_ be 0.

    g.  Repeat,

        i.  Let _result_ be RegExpExec(_rx_, _S_).

        ii. ReturnIfAbrupt(_result_).

        iii. If _result_ is NULL, then

            1.  If _n_=0, return NULL.

            2.  Else, return _A_.

        iv. Else _result_ is not NULL,

            1.  Let _matchStr_ be ToString(Get(_result_, "0")).

            2.  3.  4.  ReturnIfAbrupt(_matchStr_).

            5.  Let _status_ be CreateDataProperty(_A_, ToString(_n_),
                _matchStr_).

            6.  Assert: _status_ is TRUE.

            7.  If _matchStr_ is the empty String, then

                a.  Let _thisIndex_ be ToLength(Get(_rx_, "LASTINDEX")).

                b.  ReturnIfAbrupt(_thisIndex_).

                c.  Let _nextIndex_ be AdvanceStringIndex(_S_,
                    _thisIndex_, _fullUnicode_).

                d.  Let _setStatus_ be Set(_rx_, "LASTINDEX",
                    _nextIndex_, TRUE).

                e.  ReturnIfAbrupt(_setStatus_).

            8.  Increment _n_.

The value of the NAME property of this function is "[SYMBOL.MATCH]".

NOTE The @@match property is used by the IsRegExp abstract operation to
identify objects that have the basic behaviour of regular expressions.
The absence of a @@match property or the existence of such a property
whose value does not Boolean coerce to TRUE indicates that the object is
not intended to be used as a regular expression object.

get RegExp.prototype.multiline

REGEXP.PROTOTYPE.MULTILINE is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  If _R_ does not have an [[OriginalFlags]] internal slot, throw a
    TYPEERROR exception.

4.  Let _flags_ be the value of _R’s_ [[OriginalFlags]] internal slot.

5.  If _flags_ contains the code unit "M", return TRUE.

6.  Return FALSE.

RegExp.prototype [ @@replace ] ( string, replaceValue )

When the @@REPLACE method is called with arguments _string_ and
_replaceValue_ the following steps are taken:

1.  Let _rx_ be the THIS value.

2.  If Type(_rx_) is not Object, throw a TYPEERROR exception.

3.  Let _S_ be ToString(_string_).

4.  ReturnIfAbrupt(_S_).

5.  Let _lengthS_ be the number of code unit elements in _S_.

6.  Let _functionalReplace_ be IsCallable(_replaceValue_).

7.  If _functionalReplace_ is FALSE, then

    a.  Let _replaceValue_ be ToString(_replaceValue_).

    b.  ReturnIfAbrupt(_replaceValue_).

8.  Let _global_ be ToBoolean(Get(_rx_, "GLOBAL")).

9.  ReturnIfAbrupt(_global_).

10. If _global_ is TRUE, then

    a.  Let _fullUnicode_ be ToBoolean(Get(_rx_, "UNICODE")).

    b.  ReturnIfAbrupt(_fullUnicode_).

    c.  Let _setStatus_ be Set(_rx_, "LASTINDEX", 0, TRUE).

    d.  ReturnIfAbrupt(_setStatus_).

11. Let _results_ be a new empty List.

12. Let _done_ be FALSE.

13. Repeat, while _done_ is FALSE

    a.  Let _result_ be RegExpExec(_rx_, _S_).

    b.  ReturnIfAbrupt(_result_).

    c.  If _result_ is NULL, set _done_ to TRUE.

    d.  Else _result_ is not NULL,

        i.  Append _result_ to the end of _results_.

        ii. If _global_ is FALSE, set _done_ to TRUE.

        iii. Else,

            1.  Let _matchStr_ be ToString(Get(_result_, "0")).

            2.  ReturnIfAbrupt(_matchStr_).

            3.  If _matchStr_ is the empty String, then

                a.  Let _thisIndex_ be ToLength(Get(_rx_, "LASTINDEX")).

                b.  ReturnIfAbrupt(_thisIndex_).

                c.  Let _nextIndex_ be AdvanceStringIndex(_S_,
                    _thisIndex_, _fullUnicode_).

                d.  Let _setStatus_ be Set(_rx_, "LASTINDEX",
                    _nextIndex_, TRUE).

                e.  ReturnIfAbrupt(_setStatus_).

14. Let _accumulatedResult_ be the empty String value.

15. Let _nextSourcePosition_ be 0.

16. Repeat, for each _result_ in _results_,

    a.  Let _nCaptures_ be ToLength(Get(_result_, "LENGTH")).

    b.  ReturnIfAbrupt(_nCaptures_).

    c.  Let _nCaptures_ be max(_nCaptures_ − 1, 0).

    d.  Let _matched_ be ToString(Get(_result_, "0")).

    e.  ReturnIfAbrupt(_matched_).

    f.  Let _matchLength_ be the number of code units in _matched_.

    g.  Let _position_ be ToInteger(Get(_result_, "INDEX")).

    h.  ReturnIfAbrupt(_position_).

    i.  Let _position_ be max(min(_position_, _lengthS_), 0).

    j.  Let _n_ be 1.

    k.  Let _captures_ be an empty List.

    l.  Repeat while _n_ ≤ _nCaptures_

        i.  Let _capN_ be Get(_result_, ToString(_n_)).

        ii. ReturnIfAbrupt(_capN_).

        iii. If _capN_ is not UNDEFINED, then

            1.  Let _capN_ be ToString(_capN_).

            2.  ReturnIfAbrupt(_capN_).

        iv. Append _capN_ as the last element of _captures._

        v.  Let _n_ be _n_+1

    m.  If _functionalReplace_ is TRUE, then

        i.  Let _replacerArgs_ be «_matched_».

        ii. Append in list order the elements of _captures_ to the end
            of the List _replacerArgs_.

        iii. Append _position_ and _S_ as the last two elements of
            _replacerArgs._

        iv. Let _replValue_ be Call(_replaceValue_, UNDEFINED,
            _replacerArgs_).

        v.  Let _replacement_ be ToString(_replValue_).

    n.  Else,

        i.  Let _replacement_ be GetSubstitution(_matched_, _S_,
            _position_, _captures_, _replaceValue_).

    o.  ReturnIfAbrupt(_replacement_).

    p.  If _position_ ≥ _nextSourcePosition_, then

        i.  NOTE _position_ should not normally move backwards. If it
            does, it is an indication of an ill-behaving RegExp subclass
            or use of an access triggered side-effect to change the
            global flag or other characteristics of _rx._ In such cases,
            the corresponding substitution is ignored.

        ii. Let _accumulatedResult_ be the String formed by
            concatenating the code units of the current value of
            _accumulatedResult_ with the substring of _S_ consisting of
            the code units from _nextSourcePosition_ (inclusive) up to
            _position_ (exclusive) and with the code units of
            _replacement_.

        iii. Let _nextSourcePosition_ be _position_ + _matchLength_.

17. If _nextSourcePosition_ ≥ _lengthS_, return _accumulatedResult_.

18. Return the String formed by concatenating the code units of
    _accumulatedResult_ with the substring of _S_ consisting of the code
    units from _nextSourcePosition_ (inclusive) up through the final
    code unit of _S_ (inclusive).

The value of the NAME property of this function is "[SYMBOL.REPLACE]".

RegExp.prototype [ @@search ] ( string )

When the @@search method is called with argument _string_, the following
steps are taken:

1.  Let _rx_ be the THIS value.

2.  If Type(_rx_) is not Object, throw a TYPEERROR exception.

3.  Let _S_ be ToString(_string_).

4.  ReturnIfAbrupt(_S_).

5.  Let _previousLastIndex_ be Get(_rx_, "LASTINDEX").

6.  ReturnIfAbrupt(_previousLastIndex_).

7.  Let _status_ be Set(_rx_, "LASTINDEX", 0, TRUE).

8.  ReturnIfAbrupt(_status_).

9.  Let _result_ be RegExpExec(_rx_, _S_).

10. ReturnIfAbrupt(_result_).

11. Let _status_ be Set(_rx_, "LASTINDEX", _previousLastIndex_, TRUE).

12. ReturnIfAbrupt(_status_).

13. If _result_ is NULL, return –1.

14. Return Get(_result_, "INDEX").

The value of the NAME property of this function is "[SYMBOL.SEARCH]".

NOTE The LASTINDEX and GLOBAL properties of this RegExp object are
ignored when performing the search. The LASTINDEX property is left
unchanged.

get RegExp.prototype.source

REGEXP.PROTOTYPE.SOURCE is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  If _R_ does not have an [[OriginalSource]] internal slot, throw a
    TYPEERROR exception.

4.  If _R_ does not have an [[OriginalFlags]] internal slot, throw a
    TYPEERROR exception.

5.  Let _src_ be the value of _R’s_ [[OriginalSource]] internal slot.

6.  Let _flags_ be the value of _R’s_ [[OriginalFlags]] internal slot.

7.  Return EscapeRegExpPattern(_src_, _flags_).

RegExp.prototype [ @@split ] ( string, limit )

NOTE Returns an Array object into which substrings of the result of
converting _string_ to a String have been stored. The substrings are
determined by searching from left to right for matches of the THIS value
regular expression; these occurrences are not part of any substring in
the returned array, but serve to divide up the String value.

The THIS value may be an empty regular expression or a regular
expression that can match an empty String. In this case, regular
expression does not match the empty substring at the beginning or end of
the input String, nor does it match the empty substring at the end of
the previous separator match. (For example, if the regular expression
matches the empty String, the String is split up into individual code
unit elements; the length of the result array equals the length of the
String, and each substring contains one code unit.) Only the first match
at a given index of the THIS String is considered, even if backtracking
could yield a non-empty-substring match at that index. (For example,
/A*?/[SYMBOL.SPLIT]("AB") evaluates to the array ["A","B"], while
/A*/[SYMBOL.SPLIT]("AB") evaluates to the array["","B"].)

If the _string_ is (or converts to) the empty String, the result depends
on whether the regular expression can match the empty String. If it can,
the result array contains no elements. Otherwise, the result array
contains one element, which is the empty String.

If the regular expression that contains capturing parentheses, then each
time _separator_ is matched the results (including any UNDEFINED
results) of the capturing parentheses are spliced into the output array.
For example,

/<(\/)?([^<>]+)>/[SYMBOL.SPLIT]("A<B>BOLD</B>AND<CODE>CODED</CODE>")

evaluates to the array

["A",UNDEFINED,"B","BOLD","/","B","AND",UNDEFINED,"CODE","CODED","/","CODE",""]

If _limit_ is not UNDEFINED, then the output array is truncated so that
it contains no more than _limit_ elements.

When the @@SPLIT method is called, the following steps are taken:

1.  Let _rx_ be the THIS value.

2.  If Type(_rx_) is not Object, throw a TYPEERROR exception.

3.  Let _S_ be ToString(_string_).

4.  ReturnIfAbrupt(_S_).

5.  Let _C_ be SpeciesConstructor(_rx_, %RegExp%).

6.  ReturnIfAbrupt(_C_).

7.  Let _flags_ be ToString(Get(_rx_, "FLAGS")).

8.  ReturnIfAbrupt(_flags_).

9.  If _flags_ contains "U", let _unicodeMatching_ be TRUE.

10. Else, let _unicodeMatching_ be FALSE.

11. If _flags_ contains "Y", let _newFlags_ be _flags_.

12. Else, let _newFlags_ be the string that is the concatenation of
    _flags_ and "Y".

13. Let _splitter_ be Construct(_C_, «_rx_, _newFlags_»).

14. ReturnIfAbrupt(_splitter_).

15. Let _A_ be ArrayCreate(0).

16. Let _lengthA_ be 0.

17. If _limit_ is UNDEFINED, let _lim_ be 2^53^–1; else let _lim_ be
    ToLength(_limit_).

18. ReturnIfAbrupt(_lim_).

19. Let _size_ be the number of elements in _S_.

20. Let _p_ be 0.

21. If _lim_ = 0, return _A_.

22. If _size_ = 0, then

    a.  Let _z_ be RegExpExec(_splitter_, _S_).

    b.  ReturnIfAbrupt(_z_).

    c.  If _z_ is not NULL, return _A_.

    d.  Assert: The following call will never result in an abrupt
        completion.

    e.  Perform CreateDataProperty(_A_, "0", _S_).

    f.  Return _A_.

23. Let _q_ be _p_.

24. Repeat, while _q_ < _size

    a.  Let _setStatus_ be Set(_splitter_, "LASTINDEX", _q_, TRUE).

    b.  ReturnIfAbrupt(_setStatus_).

    c.  Let _z_ be RegExpExec(_splitter_, _S_).

    d.  ReturnIfAbrupt(_z_).

    e.  If _z_ is NULL,

        i.  1.  2.  a.  b.  i.  

    f.  let _q_ be AdvanceStringIndex(_S_, _q_, _unicodeMatching_).

    g.  Else _z_ is not NULL,

        i.  Let _e_ be ToLength(Get(_splitter_, "LASTINDEX")).

        ii. ReturnIfAbrupt(_e_).

        iii. If _e_ = _p_, let _q_ be AdvanceStringIndex(_S_, _q_,
            _unicodeMatching_).

            1.  a.  b.  i.  ii. 1.  

            2.  

        iv. Else _e_ ≠ _p_,

            1.  Let _T_ be a String value equal to the substring of _S_
                consisting of the elements at indices _p_ (inclusive)
                through _q_ (exclusive).

            2.  Assert: The following call will never result in an
                abrupt completion.

            3.  Perform CreateDataProperty(_A_, ToString(_lengthA_),
                _T_).

            4.  Let _lengthA_ be _lengthA_ +1.

            5.  If _lengthA_ = _lim_, return _A_.

            6.  Let _p_ be _e_.

            7.  8.  Let _numberOfCaptures_ be ToLength(Get(_z_,
                "LENGTH")).

            9.  ReturnIfAbrupt(_numberOfCaptures_).

            10. Let _numberOfCaptures_ be max(_numberOfCaptures_-1, 0).

            11. Let _i_ be 1.

            12. Repeat, while _i_ ≤ _numberOfCaptures_.

                a.  Let _nextCapture_ be Get(_z_, ToString(_i_)).

                b.  ReturnIfAbrupt(_nextCapture_).

                c.  Perform CreateDataProperty(_A_, ToString(_lengthA_),
                    _nextCapture_).

                d.  Let _i_ be _i_ +1.

                e.  Let _lengthA_ be _lengthA_ +1.

                f.  If _lengthA_ = _lim_, return _A_.

            13. Let _q_ be _p_.

25. Let _T_ be a String value equal to the substring of _S_ consisting
    of the elements at indices _p_ (inclusive) through _size_
    (exclusive).

26. Assert: The following call will never result in an abrupt
    completion.

27. Perform CreateDataProperty(_A_, ToString(_lengthA_), _T_ ).

28. Return _A_.

The LENGTH property of the @@SPLIT method is 2.

The value of the NAME property of this function is "[SYMBOL.SPLIT]".

NOTE The @@SPLIT method ignores the value of the GLOBAL and STICKY
properties of this RegExp object.

get RegExp.prototype.sticky

REGEXP.PROTOTYPE.STICKY is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  If _R_ does not have an [[OriginalFlags]] internal slot, throw a
    TYPEERROR exception.

4.  Let _flags_ be the value of _R’s_ [[OriginalFlags]] internal slot.

5.  If _flags_ contains the code unit "Y", return TRUE.

6.  Return FALSE.

RegExp.prototype.test( S )

The following steps are taken:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  Let _string_ be ToString(_S_).

4.  ReturnIfAbrupt(_string_).

5.  6.  Let _match_ be RegExpExec(_R_, _string_).

7.  ReturnIfAbrupt(_match_).

8.  If _match_ is not NULL, return TRUE; else return FALSE.

RegExp.prototype.toString ( )

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  Let _pattern_ be ToString(Get(_R_, "SOURCE")).

4.  ReturnIfAbrupt(_pattern_).

5.  Let _flags_ be ToString(Get(_R_, "FLAGS")).

6.  ReturnIfAbrupt(_flags_).

7.  Let _result_ be the String value formed by concatenating "/",
    _pattern_, and "/", and _flags_.

NOTE The returned String has the form of a _RegularExpressionLiteral_
that evaluates to another RegExp object with the same behaviour as this
object.

get RegExp.prototype.unicode

REGEXP.PROTOTYPE.UNICODE is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _R_ be the THIS value.

2.  If Type(_R_) is not Object, throw a TYPEERROR exception.

3.  If _R_ does not have an [[OriginalFlags]] internal slot, throw a
    TYPEERROR exception.

4.  Let _flags_ be the value of _R’s_ [[OriginalFlags]] internal slot.

5.  If _flags_ contains the code unit "U", return TRUE.

6.  Return FALSE.

Properties of RegExp Instances

RegExp instances are ordinary objects that inherit properties from the
RegExp prototype object. RegExp instances have internal slots
[[RegExpMatcher]], [[OriginalSource]], and [[OriginalFlags]]. The value
of the [[RegExpMatcher]] internal slot is an implementation dependent
representation of the _Pattern_ of the RegExp object.

NOTE Prior to ECMAScript 2015, REGEXP instances were specified as having
the own data properties SOURCE, GLOBAL, IGNORECASE, and MULTILINE. Those
properties are now specified as accessor properties of RegExp.prototype.

RegExp instances also have the following property:

lastIndex

The value of the LASTINDEX property specifies the String index at which
to start the next match. It is coerced to an integer when used (see
21.2.5.2.2). This property shall have the attributes { [[Writable]]:
TRUE, [[Enumerable]]: FALSE, [[Configurable]]: FALSE }.



INDEXED COLLECTIONS 


Array Objects

Array objects are exotic objects that give special treatment to a
certain class of property names. See 9.4.2 for a definition of this
special treatment.

The Array Constructor

The Array constructor is the %Array% intrinsic object and the initial
value of the ARRAY property of the global object. When called as a
constructor it creates and initializes a new exotic Array object. When
ARRAY is called as a function rather than as a constructor, it also
creates and initializes a new Array object. Thus the function call
ARRAY(…) is equivalent to the object creation expression NEW ARRAY(…)
with the same arguments.

The ARRAY constructor is a single function whose behaviour is overloaded
based upon the number and types of its arguments.

The ARRAY constructor is designed to be subclassable. It may be used as
the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the exotic ARRAY behaviour must
include a SUPER call to the ARRAY constructor to initialize subclass
instances that are exotic Array objects. However, most of the
ARRAY.PROTOTYPE methods are generic methods that are not dependent upon
their THIS value being an exotic Array object.

The LENGTH property of the ARRAY constructor function is 1.

Array ( )

This description applies if and only if the Array constructor is called
with no arguments.

1.  Let _numberOfArgs_ be the number of arguments passed to this
    function call.

2.  Assert: _numberOfArgs_ = 0.

3.  If NewTarget is UNDEFINED_,_ let _newTarget_ be the active function
    object, else let _newTarget_ be NewTarget.

4.  Let _proto_ be GetPrototypeFromConstructor(_newTarget_,
    "%ARRAYPROTOTYPE%").

5.  ReturnIfAbrupt(_proto_).

6.  Return ArrayCreate(0, _proto_).

Array (len)

This description applies if and only if the Array constructor is called
with exactly one argument.

1.  Let _numberOfArgs_ be the number of arguments passed to this
    function call.

2.  Assert: _numberOfArgs_ = 1.

3.  If NewTarget is UNDEFINED_,_ let _newTarget_ be the active function
    object, else let _newTarget_ be NewTarget.

4.  Let _proto_ be GetPrototypeFromConstructor(_newTarget_,
    "%ARRAYPROTOTYPE%").

5.  ReturnIfAbrupt(_proto_).

6.  Let _array_ be ArrayCreate(0, _proto_).

7.  If Type(_len_) is not Number, then

    a.  Let _defineStatus_ be CreateDataProperty(_array_, "0", _len_).

    b.  Assert: _defineStatus_ is TRUE.

    c.  Let _intLen_ be 1.

8.  Else,

    a.  Let _intLen_ be ToUint32(_len_).

    b.  If _intLen_ ≠ _len_, throw a RANGEERROR exception.

9.  Let _setStatus_ be Set(_array_, "LENGTH", _intLen_, TRUE).

10. Assert: _setStatus_ is not an abrupt completion.

11. Return _array_.

Array (...items )

This description applies if and only if the Array constructor is called
with at least two arguments.

When the ARRAY function is called the following steps are taken:

1.  Let _numberOfArgs_ be the number of arguments passed to this
    function call.

2.  Assert: _numberOfArgs_ ≥ 2.

3.  If NewTarget is UNDEFINED_,_ let _newTarget_ be the active function
    object, else let _newTarget_ be NewTarget.

4.  Let _proto_ be GetPrototypeFromConstructor(_newTarget_,
    "%ARRAYPROTOTYPE%").

5.  ReturnIfAbrupt(_proto_).

6.  Let _array_ be ArrayCreate(_numberOfArgs_, _proto_).

7.  ReturnIfAbrupt(_array_).

8.  Let _k_ be 0.

9.  Let _items_ be a zero-origined List containing the argument items in
    order.

10. Repeat, while _k_ < _numberOfArgs

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _itemK_ be _items_[_k_].

    c.  Let _defineStatus_ be CreateDataProperty(_array_, _Pk_,
        _itemK_).

    d.  Assert: _defineStatus_ is TRUE.

    e.  Increase _k_ by 1.

11. Assert: the value of _array_’s LENGTH property is _numberOfArgs_.

12. Return _array_.

Properties of the Array Constructor

The value of the [[Prototype]] internal slot of the Array constructor is
the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 1), the Array constructor
has the following properties:

Array.from ( items [ , mapfn [ , thisArg ] ] )

When the FROM method is called with argument _items_ and optional
arguments _mapfn_ and _thisArg_ the following steps are taken:

1.  Let _C_ be the THIS value.

2.  If _mapfn_ is UNDEFINED, let _mapping_ be FALSE.

3.  else

    a.  If IsCallable(_mapfn_) is FALSE, throw a TYPEERROR exception.

    b.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
        UNDEFINED.

    c.  Let _mapping_ be TRUE

4.  Let _usingIterator_ be GetMethod(_items_, @@iterator).

5.  ReturnIfAbrupt(_usingIterator_).

6.  If _usingIterator_ is not UNDEFINED, then

    a.  If IsConstructor(_C_) is TRUE, then

        i.  Let _A_ be Construct(_C_).

    b.  Else,

        i.  Let _A_ be ArrayCreate(0).

    c.  ReturnIfAbrupt(_A_).

    d.  Let _iterator_ be GetIterator(_items_, _usingIterator_).

    e.  ReturnIfAbrupt(_iterator_).

    f.  Let _k_ be 0.

    g.  Repeat

        i.  Let _Pk_ be ToString(_k_).

        ii. Let _next_ be IteratorStep(_iterator_).

        iii. ReturnIfAbrupt(_next_).

        iv. If _next_ is FALSE, then

            1.  Let _setStatus_ be Set(_A_, "LENGTH", _k_, TRUE).

            2.  ReturnIfAbrupt(_setStatus_).

            3.  Return _A_.

        v.  Let _nextValue_ be IteratorValue(_next_).

        vi. ReturnIfAbrupt(_nextValue_).

        vii. If _mapping_ is TRUE, then

            1.  Let _mappedValue_ be Call(_mapfn_, _T_, «_nextValue_,
                _k_»).

            2.  If _mappedValue_ is an abrupt completion, return
                IteratorClose(_iterator_, _mappedValue_).

            3.  Let _mappedValue_ be _mappedValue_.[[value]].

        viii. Else, let _mappedValue_ be _nextValue_.

        ix. Let _defineStatus_ be CreateDataPropertyOrThrow(_A_, _Pk_,
            _mappedValue_).

        x.  If _defineStatus_ is an abrupt completion, return
            IteratorClose(_iterator_, _defineStatus_).

        xi. Increase _k_ by 1.

7.  Assert: _items_ is not an Iterable so assume it is an array-like
    object.

8.  Let _arrayLike_ be ToObject(_items_).

9.  ReturnIfAbrupt(_arrayLike_).

10. Let _len_ be ToLength(Get(_arrayLike_, "LENGTH")).

11. ReturnIfAbrupt(_len_).

12. If IsConstructor(_C_) is TRUE, then

    a.  Let _A_ be Construct(_C_, «_len_»).

13. Else,

    a.  Let _A_ be ArrayCreate(_len_).

14. ReturnIfAbrupt(_A_).

15. Let _k_ be 0.

16. Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kValue_ be Get(_arrayLike_, _Pk_).

    c.  ReturnIfAbrupt(_kValue_).

    d.  If _mapping_ is TRUE, then

        i.  Let _mappedValue_ be Call(_mapfn_, _T_, «_kValue_, _k_»).

        ii. ReturnIfAbrupt(_mappedValue_).

    e.  Else, let _mappedValue_ be _kValue_.

    f.  Let _defineStatus_ be CreateDataPropertyOrThrow(_A_, _Pk_,
        _mappedValue_).

    g.  ReturnIfAbrupt(_defineStatus_).

    h.  Increase _k_ by 1.

17. Let _setStatus_ be Set(_A_, "LENGTH", _len_, TRUE).

18. ReturnIfAbrupt(_setStatus_).

19. Return _A_.

The LENGTH property of the FROM method is 1.

NOTE The FROM function is an intentionally generic factory method; it
does not require that its THIS value be the Array constructor. Therefore
it can be transferred to or inherited by any other constructors that may
be called with a single numeric argument.

Array.isArray ( arg )

The ISARRAY function takes one argument _arg_, and performs the
following steps:

1.  Return IsArray(_arg_).

Array.of ( ...items )

When the OF method is called with any number of arguments, the following
steps are taken:

1.  Let _len_ be the actual number of arguments passed to this function.

2.  Let _items_ be the List of arguments passed to this function.

3.  Let _C_ be the THIS value.

4.  If IsConstructor(_C_) is TRUE, then

    a.  Let _A_ be Construct(_C_, «_len_»).

5.  Else,

    a.  Let _A_ be ArrayCreate(_len_).

6.  ReturnIfAbrupt(_A_).

7.  Let _k_ be 0.

8.  Repeat, while _k_ < _len

    a.  Let _kValue_ be _items_[_k_].

    b.  Let _Pk_ be ToString(_k_).

    c.  Let _defineStatus_ be CreateDataPropertyOrThrow(_A_,_Pk_,
        _kValue_).

    d.  ReturnIfAbrupt(_defineStatus_).

    e.  Increase _k_ by 1.

9.  Let _setStatus_ be Set(_A_, "LENGTH", _len_, TRUE).

10. ReturnIfAbrupt(_setStatus_).

11. Return _A_.

The LENGTH property of the OF method is 0.

NOTE 1 The _items_ argument is assumed to be a well-formed rest argument
value.

NOTE 2 The OF function is an intentionally generic factory method; it
does not require that its THIS value be the Array constructor. Therefore
it can be transferred to or inherited by other constructors that may be
called with a single numeric argument.

Array.prototype

The value of ARRAY.PROTOTYPE is %ArrayPrototype%, the intrinsic Array
prototype object (22.1.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

get Array [ @@species ] 

ARRAY[@@SPECIES] is an accessor property whose set accessor function is
UNDEFINED. Its get accessor function performs the following steps:

1.  Return the THIS value.

The value of the NAME property of this function is "GET
[SYMBOL.SPECIES]".

NOTE Array prototype methods normally use their THIS object’s
constructor to create a derived object. However, a subclass constructor
may over-ride that default behaviour by redefining its @@species
property.

Properties of the Array Prototype Object

The Array prototype object is the intrinsic object %ArrayPrototype%. The
Array prototype object is an Array exotic objects and has the internal
methods specified for such objects. It has a LENGTH property whose
initial value is 0 and whose attributes are { [[Writable]]: TRUE,
[[Enumerable]]: FALSE, [[Configurable]]: FALSE }.

The value of the [[Prototype]] internal slot of the Array prototype
object is the intrinsic object %ObjectPrototype%.

NOTE The Array prototype object is specified to be an Array exotic
object to ensure compatibility with ECMAScript code that was created
prior to the ECMAScript 2015 specification.

Array.prototype.concat ( ...arguments )

When the CONCAT method is called with zero or more arguments, it returns
an array containing the array elements of the object followed by the
array elements of each argument in order.

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _A_ be ArraySpeciesCreate(_O_, 0).

4.  ReturnIfAbrupt(_A_).

5.  Let _n_ be 0.

6.  Let _items_ be a List whose first element is _O_ and whose
    subsequent elements are, in left to right order, the arguments that
    were passed to this function invocation.

7.  Repeat, while _items_ is not empty

    a.  Remove the first element from _items_ and let _E_ be the value
        of the element.

    b.  Let _spreadable_ be IsConcatSpreadable(_E_).

    c.  ReturnIfAbrupt(_spreadable_).

    d.  If _spreadable_ is TRUE, then

        i.  Let _k_ be 0.

        ii. Let _len_ be ToLength(Get(_E_, "LENGTH")).

        iii. ReturnIfAbrupt(_len_).

        iv. If _n_ + _len_ > 2^53^-1, throw a TYPEERROR exception.

        v.  Repeat, while _k_ < _len_

            1.  Let _P_ be ToString(_k_).

            2.  Let _exists_ be HasProperty(_E_, _P_).

            3.  ReturnIfAbrupt(_exists_).

            4.  If _exists_ is TRUE, then

                a.  Let _subElement_ be Get(_E_, _P_).

                b.  ReturnIfAbrupt(_subElement_).

                c.  Let _status_ be CreateDataPropertyOrThrow (_A_,
                    ToString(_n_), _subElement_).

                d.  ReturnIfAbrupt(_status_).

            5.  Increase _n_ by 1.

            6.  Increase _k_ by 1.

    e.  Else _E_ is added as a single item rather than spread,

        i.  If _n_≥2^53^-1, throw a TYPEERROR exception.

        ii. Let _status_ be CreateDataPropertyOrThrow (_A_,
            ToString(_n_), _E_).

        iii. ReturnIfAbrupt(_status_).

        iv. Increase _n_ by 1.

8.  Let _setStatus_ be Set(_A_, "LENGTH", _n_, TRUE).

9.  ReturnIfAbrupt(_setStatus_).

10. Return _A_.

The LENGTH property of the CONCAT method is 1.

NOTE 1 The explicit setting of the LENGTH property in step 8 is
necessary to ensure that its value is correct in situations where the
trailing elements of the result Array are not present.

NOTE 2 The CONCAT function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Runtime Semantics: IsConcatSpreadable ( O )

The abstract operation IsConcatSpreadable with argument _O_ performs the
following steps:

1.  If Type(_O_) is not Object, return FALSE.

2.  Let _spreadable_ be Get(_O_, @@isConcatSpreadable).

3.  ReturnIfAbrupt(_spreadable_).

4.  If _spreadable_ is not UNDEFINED, return ToBoolean(_spreadable_).

5.  Return IsArray(_O_).

Array.prototype.constructor

The initial value of ARRAY.PROTOTYPE.CONSTRUCTOR is the intrinsic object
%Array%.

Array.prototype.copyWithin (target, start [ , end ] )

The COPYWITHIN method takes up to three arguments _target_, _start_ and
_end_.

NOTE The _end_ argument is optional with the length of the THIS object
as its default value. If _target_ is negative, it is treated as
_length_+_target_ where _length_ is the length of the array. If _start
is negative, it is treated as _length_+_start_. If _end_ is negative, it
is treated as _length_+_end_.

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _relativeTarget_ be ToInteger(_target_).

6.  ReturnIfAbrupt(_relativeTarget_).

7.  If _relativeTarget_ < 0, let _to_ be max((_len_ +
    _relativeTarget_),0); else let _to_ be min(_relativeTarget_, _len_).

8.  Let _relativeStart_ be ToInteger(_start_).

9.  ReturnIfAbrupt(_relativeStart_).

10. If _relativeStart_ < 0, let _from_ be max((_len_ +
    _relativeStart_),0); else let _from_ be min(_relativeStart_, _len_).

11. If _end_ is UNDEFINED, let _relativeEnd_ be _len_; else let
    _relativeEnd_ be ToInteger(_end_).

12. ReturnIfAbrupt(_relativeEnd_).

13. If _relativeEnd_ < 0, let _final_ be max((_len_ + _relativeEnd_),0);
    else let _final_ be min(_relativeEnd_, _len_).

14. Let _count_ be min(_final_-_from_, _len_-_to_).

15. If _from_<_to_ and _to_<_from_+_count

    a.  Let _direction_ be -1.

    b.  Let _from_ be _from_ + _count_ -1.

    c.  Let _to_ be _to_ + _count_ -1.

16. Else,

    a.  Let _direction_ = 1.

17. Repeat, while _count_ > 

    a.  Let _fromKey_ be ToString(_from_).

    b.  Let _toKey_ be ToString(_to_).

    c.  Let _fromPresent_ be HasProperty(_O_, _fromKey_).

    d.  ReturnIfAbrupt(_fromPresent_).

    e.  If _fromPresent_ is TRUE, then

        i.  Let _fromVal_ be Get(_O_, _fromKey_).

        ii. ReturnIfAbrupt(_fromVal_).

        iii. Let _setStatus_ be Set(_O_, _toKey_, _fromVal_, TRUE).

        iv. ReturnIfAbrupt(_setStatus_).

    f.  Else _fromPresent_ is FALSE,

        i.  Let _deleteStatus_ be DeletePropertyOrThrow(_O_, _toKey_).

        ii. ReturnIfAbrupt(_deleteStatus_).

    g.  Let _from_ be _from_ + _direction_.

    h.  Let _to_ be _to_ + _direction_.

    i.  Let _count_ be _count_ − 1.

18. Return _O_.

The LENGTH property of the COPYWITHIN method is 2.

NOTE 1 The COPYWITHIN function is intentionally generic; it does not
require that its THIS value be an Array object. Therefore it can be
transferred to other kinds of objects for use as a method.

Array.prototype.entries ( )

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Return CreateArrayIterator(_O_, "KEY+VALUE").

Array.prototype.every ( callbackfn [ , thisArg] )

NOTE _callbackfn_ should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value TRUE or FALSE.
EVERY calls _callbackfn_ once for each element present in the array, in
ascending order, until it finds one where _callbackfn_ returns FALSE. If
such an element is found, EVERY immediately returns FALSE. Otherwise, if
_callbackfn_ returned TRUE for all elements, EVERY will return TRUE.
_callbackfn_ is called only for elements of the array which actually
exist; it is not called for missing elements of the array.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _callbackfn_. If it is not provided, UNDEFINED is
used instead.

_callbackfn_ is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

EVERY does not directly mutate the object on which it is called but the
object may be mutated by the calls to _callbackfn_.

The range of elements processed by EVERY is set before the first call to
_callbackfn_. Elements which are appended to the array after the call to
EVERY begins will not be visited by _callbackfn_. If existing elements
of the array are changed, their value as passed to _callbackfn_ will be
the value at the time EVERY visits them; elements that are deleted after
the call to EVERY begins and before being visited are not visited. EVERY
acts like the "for all" quantifier in mathematics. In particular, for an
empty array, it returns TRUE.

When the EVERY method is called with one or two arguments, the following
steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _k_ be 0.

8.  Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _testResult_ be ToBoolean(Call(_callbackfn_, _T_,
            «_kValue_, _k_, _O_»)).

        iv. ReturnIfAbrupt(_testResult_).

        v.  If _testResult_ is FALSE, return FALSE.

    e.  Increase _k_ by 1.

9.  Return TRUE.

The LENGTH property of the EVERY method is 1.

NOTE The EVERY function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.fill (value [ , start [ , end ] ] )

The FILL method takes up to three arguments _value_, _start_ and _end_.

NOTE The _start_ and _end_ arguments are optional with default values of
0 and the length of the THIS object. If _start_ is negative, it is
treated as _length_+_start_ where _length_ is the length of the array.
If _end_ is negative, it is treated as _length_+_end_.

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _relativeStart_ be ToInteger(_start_).

6.  ReturnIfAbrupt(_relativeStart_).

7.  If _relativeStart_ < 0, let _k_ be max((_len_ + _relativeStart_),0);
    else let _k_ be min(_relativeStart_, _len_).

8.  If _end_ is UNDEFINED, let _relativeEnd_ be _len_; else let
    _relativeEnd_ be ToInteger(_end_).

9.  ReturnIfAbrupt(_relativeEnd_).

10. If _relativeEnd_ < 0, let _final_ be max((_len_ + _relativeEnd_),0);
    else let _final_ be min(_relativeEnd_, _len_).

11. Repeat, while _k_ < _final

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _setStatus_ be Set(_O_, _Pk_, _value_, TRUE).

    c.  ReturnIfAbrupt(_setStatus_).

    d.  Increase _k_ by 1.

12. Return _O_.

The LENGTH property of the FILL method is 1.

NOTE The FILL function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.filter ( callbackfn [ , thisArg ] )

NOTE _callbackfn_ should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value TRUE or FALSE.
FILTER calls _callbackfn_ once for each element in the array, in
ascending order, and constructs a new array of all the values for which
_callbackfn_ returns TRUE. _callbackfn_ is called only for elements of
the array which actually exist; it is not called for missing elements of
the array.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _callbackfn_. If it is not provided, UNDEFINED is
used instead.

_callbackfn_ is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

FILTER does not directly mutate the object on which it is called but the
object may be mutated by the calls to _callbackfn_.

The range of elements processed by FILTER is set before the first call
to _callbackfn_. Elements which are appended to the array after the call
to FILTER begins will not be visited by _callbackfn_. If existing
elements of the array are changed their value as passed to _callbackfn_
will be the value at the time FILTER visits them; elements that are
deleted after the call to FILTER begins and before being visited are not
visited.

When the FILTER method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _A_ be ArraySpeciesCreate(_O_, 0).

8.  ReturnIfAbrupt(_A_).

9.  Let _k_ be 0.

10. Let _to_ be 0.

11. Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _selected_ be ToBoolean(Call(_callbackfn_, _T_,
            «_kValue_, _k_, _O_»)).

        iv. ReturnIfAbrupt(_selected_).

        v.  If _selected_ is TRUE, then

            1.  Let _status_ be CreateDataPropertyOrThrow (_A_,
                ToString(_to_), _kValue_).

            2.  ReturnIfAbrupt(_status_).

            3.  Increase _to_ by 1.

    e.  Increase _k_ by 1.

12. Return _A_.

The LENGTH property of the FILTER method is 1.

NOTE The FILTER function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.find ( predicate [ , thisArg ] )

  The FIND method is called with one or two arguments, _predicate_ and
  _thisArg_.

NOTE _predicate_ should be a function that accepts three arguments and
returns a value that is coercible to a Boolean value. FIND calls
_predicate_ once for each element of the array, in ascending order,
until it finds one where _predicate_ returns TRUE. If such an element is
found, FIND immediately returns that element value. Otherwise, FIND
returns UNDEFINED.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _predicate_. If it is not provided, UNDEFINED is
used instead.

_predicate_ is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

FIND does not directly mutate the object on which it is called but the
object may be mutated by the calls to _predicate_.

The range of elements processed by FIND is set before the first call to
_callbackfn_. Elements that are appended to the array after the call to
FIND begins will not be visited by _callbackfn_. If existing elements of
the array are changed, their value as passed to _predicate_ will be the
value at the time that FIND visits them.

When the FIND method is called, the following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_predicate_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _k_ be 0.

8.  Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kValue_ be Get(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kValue_).

    d.  Let _testResult_ be ToBoolean(Call(_predicate_, _T_, «_kValue_,
        _k_, _O_»)).

    e.  ReturnIfAbrupt(_testResult_).

    f.  If _testResult_ is TRUE, return _kValue_.

    g.  Increase _k_ by 1.

9.  Return UNDEFINED.

The LENGTH property of the FIND method is 1.

NOTE The FIND function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.findIndex ( predicate [ , thisArg ] )

NOTE _predicate_ should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value TRUE or FALSE.
FINDINDEX calls _predicate_ once for each element of the array, in
ascending order, until it finds one where _predicate_ returns TRUE. If
such an element is found, FINDINDEX immediately returns the index of
that element value. Otherwise, FINDINDEX returns -1.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _predicate_. If it is not provided, UNDEFINED is
used instead.

_predicate_ is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

FINDINDEX does not directly mutate the object on which it is called but
the object may be mutated by the calls to _predicate_.

The range of elements processed by FINDINDEX is set before the first
call to _callbackfn_. Elements that are appended to the array after the
call to FINDINDEX begins will not be visited by _callbackfn_. If
existing elements of the array are changed, their value as passed to
_predicate_ will be the value at the time that FINDINDEX visits them.

When the FINDINDEX method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_predicate_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _k_ be 0.

8.  Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kValue_ be Get(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kValue_).

    d.  Let _testResult_ be ToBoolean(Call(_predicate_, _T_, «_kValue_,
        _k_, _O_»)).

    e.  ReturnIfAbrupt(_testResult_).

    f.  If _testResult_ is TRUE, return _k_.

    g.  Increase _k_ by 1.

9.  Return -1.

The LENGTH property of the FINDINDEX method is 1.

NOTE The FINDINDEX function is intentionally generic; it does not
require that its THIS value be an Array object. Therefore it can be
transferred to other kinds of objects for use as a method.

Array.prototype.forEach ( callbackfn [ , thisArg ] )

NOTE _callbackfn_ should be a function that accepts three arguments.
FOREACH calls _callbackfn_ once for each element present in the array,
in ascending order. _callbackfn_ is called only for elements of the
array which actually exist; it is not called for missing elements of the
array.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _callbackfn_. If it is not provided, UNDEFINED is
used instead.

_callbackfn_ is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

FOREACH does not directly mutate the object on which it is called but
the object may be mutated by the calls to _callbackfn_.

When the FOREACH method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _k_ be 0.

8.  Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _funcResult_ be Call(_callbackfn_, _T_, «_kValue_, _k_,
            _O_»).

        iv. ReturnIfAbrupt(_funcResult_).

    e.  Increase _k_ by 1.

9.  Return UNDEFINED.

The LENGTH property of the FOREACH method is 1.

NOTE The FOREACH function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.indexOf ( searchElement [ , fromIndex ] )

NOTE INDEXOF compares _searchElement_ to the elements of the array, in
ascending order, using the Strict Equality Comparison algorithm
(7.2.13), and if found at one or more indices, returns the smallest such
index; otherwise, −1 is returned.

The optional second argument _fromIndex_ defaults to 0 (i.e. the whole
array is searched). If it is greater than or equal to the length of the
array, −1 is returned, i.e. the array will not be searched. If it is
negative, it is used as the offset from the end of the array to compute
_fromIndex_. If the computed index is less than 0, the whole array will
be searched.

When the INDEXOF method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If _len_ is 0, return −1.

6.  If argument _fromIndex_ was passed let _n_ be
    ToInteger(_fromIndex_); else let _n_ be 0.

7.  ReturnIfAbrupt(_n_).

8.  If _n_ ≥ _len_, return −1.

9.  If _n_ ≥ 0, then

    a.  Let _k_ be _n_.

10. Else _n_<0,

    a.  Let _k_ be _len_ - abs(_n_).

    b.  If _k_ < 0, let _k_ be 0.

11. Repeat, while _k_<_len

    a.  Let _kPresent_ be HasProperty(_O_, ToString(_k_)).

    b.  ReturnIfAbrupt(_kPresent_).

    c.  If _kPresent_ is TRUE, then

        i.  Let _elementK_ be Get(_O_, ToString(_k_)).

        ii. ReturnIfAbrupt(_elementK_).

        iii. Let _same_ be the result of performing Strict Equality
            Comparison _searchElement_ === _elementK_.

        iv. If _same_ is TRUE, return _k_.

    d.  Increase _k_ by 1.

12. Return -1.

The LENGTH property of the INDEXOF method is 1.

NOTE The INDEXOF function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.join (separator)

NOTE The elements of the array are converted to Strings, and these
Strings are then concatenated, separated by occurrences of the
_separator_. If no separator is provided, a single comma is used as the
separator.

The JOIN method takes one argument, _separator_, and performs the
following steps:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If _separator_ is UNDEFINED, let _separator_ be the single-element
    String ",".

6.  Let _sep_ be ToString(_separator_).

7.  ReturnIfAbrupt(_sep_).

8.  If _len_ is zero, return the empty String.

9.  Let _element0_ be Get(_O_, "0").

10. If _element0_ is UNDEFINED or NULL, let _R_ be the empty String;
    otherwise, let _R_ be ToString(_element0_).

11. ReturnIfAbrupt(_R_).

12. Let _k_ be 1.

13. Repeat, while _k_ < _len

    a.  Let _S_ be the String value produced by concatenating _R_ and
        _sep_.

    b.  Let _element_ be Get(_O_, ToString(_k_)).

    c.  If _element_ is UNDEFINED or NULL, let _next_ be the empty
        String; otherwise, let _next_ be ToString(_element_).

    d.  ReturnIfAbrupt(_next_).

    e.  Let _R_ be a String value produced by concatenating _S_ and
        _next_.

    f.  Increase _k_ by 1.

14. Return _R_.

The LENGTH property of the JOIN method is 1.

NOTE The JOIN function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore, it can be transferred
to other kinds of objects for use as a method.

Array.prototype.keys ( )

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Return CreateArrayIterator(_O_, "KEY").

Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )

NOTE LASTINDEXOF compares _searchElement_ to the elements of the array
in descending order using the Strict Equality Comparison algorithm
(7.2.13), and if found at one or more indices, returns the largest such
index; otherwise, −1 is returned.

The optional second argument _fromIndex_ defaults to the array's length
minus one (i.e. the whole array is searched). If it is greater than or
equal to the length of the array, the whole array will be searched. If
it is negative, it is used as the offset from the end of the array to
compute _fromIndex_. If the computed index is less than 0, −1 is
returned.

When the LASTINDEXOF method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If _len_ is 0, return -1.

6.  If argument _fromIndex_ was passed let _n_ be
    ToInteger(_fromIndex_); else let _n_ be _len_-1.

7.  ReturnIfAbrupt(_n_).

8.  If _n_ ≥ 0, let _k_ be min(_n_, _len_ – 1).

9.  Else _n_ < 0,

    a.  Let _k_ be _len_ - abs(_n_).

10. Repeat, while _k_≥ 

    a.  Let _kPresent_ be HasProperty(_O_, ToString(_k_)).

    b.  ReturnIfAbrupt(_kPresent_).

    c.  If _kPresent_ is TRUE, then

        i.  Let _elementK_ be Get(_O_, ToString(_k_)).

        ii. ReturnIfAbrupt(_elementK_).

        iii. Let _same_ be the result of performing Strict Equality
            Comparison
            _searchElement_ === _elementK_.

        iv. If _same_ is TRUE, return _k_.

    d.  Decrease _k_ by 1.

11. Return -1.

The LENGTH property of the LASTINDEXOF method is 1.

NOTE The LASTINDEXOF function is intentionally generic; it does not
require that its THIS value be an Array object. Therefore it can be
transferred to other kinds of objects for use as a method.

Array.prototype.map ( callbackfn [ , thisArg ] )

NOTE _callbackfn_ should be a function that accepts three arguments. MAP
calls _callbackfn_ once for each element in the array, in ascending
order, and constructs a new Array from the results. _callbackfn_ is
called only for elements of the array which actually exist; it is not
called for missing elements of the array.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _callbackfn_. If it is not provided, UNDEFINED is
used instead.

_callbackfn_ is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

MAP does not directly mutate the object on which it is called but the
object may be mutated by the calls to _callbackfn_.

The range of elements processed by MAP is set before the first call to
_callbackfn_. Elements which are appended to the array after the call to
MAP begins will not be visited by _callbackfn_. If existing elements of
the array are changed, their value as passed to _callbackfn_ will be the
value at the time MAP visits them; elements that are deleted after the
call to MAP begins and before being visited are not visited.

When the MAP method is called with one or two arguments, the following
steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _A_ be ArraySpeciesCreate(_O_, _len_).

8.  ReturnIfAbrupt(_A_).

9.  Let _k_ be 0.

10. Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _mappedValue_ be Call(_callbackfn_, _T_, «_kValue_,
            _k_, _O_»).

        iv. ReturnIfAbrupt(_mappedValue_).

        v.  Let _status_ be CreateDataPropertyOrThrow (_A_, _Pk_,
            _mappedValue_).

        vi. ReturnIfAbrupt(_status_).

    e.  Increase _k_ by 1.

11. Return _A_.

The LENGTH property of the MAP method is 1.

NOTE The MAP function is intentionally generic; it does not require that
its THIS value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

Array.prototype.pop ( )

NOTE The last element of the array is removed from the array and
returned.

When the POP method is called the following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If _len_ is zero,

    a.  Let _setStatus_ be Set(_O_, "LENGTH", 0, TRUE).

    b.  ReturnIfAbrupt(_setStatus_).

    c.  Return UNDEFINED.

6.  Else _len_ > 0,

    a.  Let _newLen_ be _len_–1.

    b.  Let _indx_ be ToString(_newLen_).

    c.  Let _element_ be Get(_O_, _indx_).

    d.  ReturnIfAbrupt(_element_).

    e.  Let _deleteStatus_ be DeletePropertyOrThrow(_O_, _indx_).

    f.  ReturnIfAbrupt(_deleteStatus_).

    g.  Let _setStatus_ be Set(_O_, "LENGTH", _newLen_, TRUE).

    h.  ReturnIfAbrupt(_setStatus_).

    i.  Return _element_.

NOTE The POP function is intentionally generic; it does not require that
its THIS value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

Array.prototype.push ( ...items )

NOTE The arguments are appended to the end of the array, in the order in
which they appear. The new length of the array is returned as the result
of the call.

When the PUSH method is called with zero or more arguments the following
steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _items_ be a List whose elements are, in left to right order,
    the arguments that were passed to this function invocation.

6.  Let _argCount_ be the number of elements in _items_.

7.  If _len_ + _argCount_ > 2^53^-1, throw a TYPEERROR exception.

8.  Repeat, while _items_ is not empty

    a.  Remove the first element from _items_ and let _E_ be the value
        of the element.

    b.  Let _setStatus_ be Set(_O_, ToString(_len_), _E_, TRUE).

    c.  ReturnIfAbrupt(_setStatus_).

    d.  Let _len_ be _len_+1.

9.  Let _setStatus_ be Set(_O_, "LENGTH", _len_, TRUE).

10. ReturnIfAbrupt(_setStatus_).

11. Return _len_.

The LENGTH property of the PUSH method is 1.

NOTE The PUSH function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.reduce ( callbackfn [ , initialValue ] )

NOTE _callbackfn_ should be a function that takes four arguments. REDUCE
calls the callback, as a function, once for each element present in the
array, in ascending order.

_callbackfn_ is called with four arguments: the _previousValue_ (value
from the previous call to _callbackfn_), the _currentValue_ (value of
the current element), the _currentIndex_, and the object being
traversed. The first time that callback is called, the _previousValue_
and _currentValue_ can be one of two values. If an _initialValue_ was
provided in the call to REDUCE, then _previousValue_ will be equal to
_initialValue_ and _currentValue_ will be equal to the first value in
the array. If no _initialValue_ was provided, then _previousValue_ will
be equal to the first value in the array and _currentValue_ will be
equal to the second. It is a TYPEERROR if the array contains no elements
and _initialValue_ is not provided.

REDUCE does not directly mutate the object on which it is called but the
object may be mutated by the calls to _callbackfn_.

The range of elements processed by REDUCE is set before the first call
to _callbackfn_. Elements that are appended to the array after the call
to REDUCE begins will not be visited by _callbackfn_. If existing
elements of the array are changed, their value as passed to _callbackfn_
will be the value at the time REDUCE visits them; elements that are
deleted after the call to REDUCE begins and before being visited are not
visited.

When the REDUCE method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _len_ is 0 and _initialValue_ is not present, throw a TYPEERROR
    exception.

7.  Let _k_ be 0.

8.  If _initialValue_ is present, then

    a.  Set _accumulator_ to _initialValue_.

9.  Else _initialValue_ is not present,

    a.  Let _kPresent_ be FALSE.

    b.  Repeat, while _kPresent_ is FALSE and _k_ < _len_

        i.  Let _Pk_ be ToString(_k_).

        ii. Let _kPresent_ be HasProperty(_O_, _Pk_).

        iii. ReturnIfAbrupt(_kPresent_).

        iv. If _kPresent_ is TRUE, then

            1.  Let _accumulator_ be Get(_O_, _Pk_).

            2.  ReturnIfAbrupt(_accumulator_).

        v.  Increase _k_ by 1.

    c.  If _kPresent_ is FALSE, throw a TYPEERROR exception.

10. Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _accumulator_ be Call(_callbackfn_, UNDEFINED,
            «_accumulator_, _kValue_, _k_, _O_»).

        iv. ReturnIfAbrupt(_accumulator_).

    e.  Increase _k_ by 1.

11. Return _accumulator_.

The LENGTH property of the REDUCE method is 1.

NOTE The REDUCE function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.reduceRight ( callbackfn [ , initialValue ] )

NOTE _callbackfn_ should be a function that takes four arguments.
REDUCERIGHT calls the callback, as a function, once for each element
present in the array, in descending order.

_callbackfn_ is called with four arguments: the _previousValue_ (value
from the previous call to _callbackfn_), the _currentValue_ (value of
the current element), the _currentIndex_, and the object being
traversed. The first time the function is called, the _previousValue_
and _currentValue_ can be one of two values. If an _initialValue_ was
provided in the call to REDUCERIGHT, then _previousValue_ will be equal
to _initialValue_ and _currentValue_ will be equal to the last value in
the array. If no _initialValue_ was provided, then _previousValue_ will
be equal to the last value in the array and _currentValue_ will be equal
to the second-to-last value. It is a TYPEERROR if the array contains no
elements and _initialValue_ is not provided.

REDUCERIGHT does not directly mutate the object on which it is called
but the object may be mutated by the calls to _callbackfn_.

The range of elements processed by REDUCERIGHT is set before the first
call to _callbackfn_. Elements that are appended to the array after the
call to REDUCERIGHT begins will not be visited by _callbackfn_. If
existing elements of the array are changed by _callbackfn_, their value
as passed to _callbackfn_ will be the value at the time REDUCERIGHT
visits them; elements that are deleted after the call to REDUCERIGHT
begins and before being visited are not visited.

When the REDUCERIGHT method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _len_ is 0 and _initialValue_ is not present, throw a TYPEERROR
    exception.

7.  Let _k_ be _len_-1.

8.  If _initialValue_ is present, then

    a.  Set _accumulator_ to _initialValue_.

9.  Else _initialValue_ is not present,

    a.  Let _kPresent_ be FALSE.

    b.  Repeat, while _kPresent_ is FALSE and _k_ ≥ 0

        i.  Let _Pk_ be ToString(_k_).

        ii. Let _kPresent_ be HasProperty(_O_, _Pk_).

        iii. ReturnIfAbrupt(_kPresent_).

        iv. If _kPresent_ is TRUE, then

            1.  Let _accumulator_ be Get(_O_, _Pk_).

            2.  ReturnIfAbrupt(_accumulator_).

        v.  Decrease _k_ by 1.

    c.  If _kPresent_ is FALSE, throw a TYPEERROR exception.

10. Repeat, while _k_ ≥ 

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _accumulator_ be Call(_callbackfn_, UNDEFINED,
            «_accumulator_, _kValue_, _k_, »).

        iv. ReturnIfAbrupt(_accumulator_).

    e.  Decrease _k_ by 1.

11. Return _accumulator_.

The LENGTH property of the REDUCERIGHT method is 1.

NOTE The REDUCERIGHT function is intentionally generic; it does not
require that its this value be an Array object. Therefore it can be
transferred to other kinds of objects for use as a method.

Array.prototype.reverse ( )

NOTE The elements of the array are rearranged so as to reverse their
order. The object is returned as the result of the call.

When the REVERSE method is called the following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _middle_ be floor(_len_/2).

6.  Let _lower_ be 0.

7.  Repeat, while _lower_ ≠ _middle

    a.  Let _upper_ be _len_− _lower_ −1.

    b.  Let _upperP_ be ToString(_upper_).

    c.  Let _lowerP_ be ToString(_lower_).

    d.  Let _lowerExists_ be HasProperty(_O_, _lowerP_).

    e.  ReturnIfAbrupt(_lowerExists_).

    f.  If _lowerExists_ is TRUE, then

        i.  Let _lowerValue_ be Get(_O_, _lowerP_).

        ii. ReturnIfAbrupt(_lowerValue_).

    g.  Let _upperExists_ be HasProperty(_O_, _upperP_).

    h.  ReturnIfAbrupt(_upperExists_).

    i.  If _upperExists_ is TRUE, then

        i.  Let _upperValue_ be Get(_O_, _upper_).

        ii. ReturnIfAbrupt(_upperValue_).

    j.  If _lowerExists_ is TRUE and _upperExists_ is TRUE, then

        i.  Let _setStatus_ be Set(_O_, _lowerP_, _upperValue_, TRUE).

        ii. ReturnIfAbrupt(_setStatus_).

        iii. Let _setStatus_ be Set(_O_, _upperP_, _lowerValue_, TRUE).

        iv. ReturnIfAbrupt(_setStatus_).

    k.  Else if _lowerExists_ is FALSE and _upperExists_ is TRUE, then

        i.  Let _setStatus_ be Set(_O_, _lowerP_, _upperValue_, TRUE).

        ii. ReturnIfAbrupt(_setStatus_).

        iii. Let _deleteStatus_ be DeletePropertyOrThrow (_O_,
            _upperP_).

        iv. ReturnIfAbrupt(_deleteStatus_).

    l.  Else if _lowerExists_ is TRUE and _upperExists_ is FALSE, then

        i.  Let _deleteStatus_ be DeletePropertyOrThrow (_O_, _lowerP_).

        ii. ReturnIfAbrupt(_deleteStatus_).

        iii. Let _setStatus_ be Set(_O_, _upperP_, _lowerValue_, TRUE).

        iv. ReturnIfAbrupt(_setStatus_).

    m.  Else both _lowerExists_ and _upperExists_ are FALSE,

        i.  No action is required.

    n.  Increase _lower_ by 1.

8.  Return _O_ .

NOTE The REVERSE function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore, it can be transferred
to other kinds of objects for use as a method.

Array.prototype.shift ( )

NOTE The first element of the array is removed from the array and
returned.

When the SHIFT method is called the following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If _len_ is zero, then

    a.  Let _setStatus_ be Set(_O_, "LENGTH", 0, TRUE).

    b.  ReturnIfAbrupt(_setStatus_).

    c.  Return UNDEFINED.

6.  Let _first_ be Get(_O_, "0").

7.  ReturnIfAbrupt(_first_).

8.  Let _k_ be 1.

9.  Repeat, while _k_ < _len

    a.  Let _from_ be ToString(_k_).

    b.  Let _to_ be ToString(_k_–1).

    c.  Let _fromPresent_ be HasProperty(_O_, _from_).

    d.  ReturnIfAbrupt(_fromPresent_).

    e.  If _fromPresent_ is TRUE, then

        i.  Let _fromVal_ be Get(_O_, _from_).

        ii. ReturnIfAbrupt(_fromVal_).

        iii. Let _setStatus_ be Set(_O_, _to_, _fromVal_, TRUE).

        iv. ReturnIfAbrupt(_setStatus_).

    f.  Else _fromPresent_ is FALSE,

        i.  Let _deleteStatus_ be DeletePropertyOrThrow(_O_, _to_).

        ii. ReturnIfAbrupt(_deleteStatus_).

    g.  Increase _k_ by 1.

10. Let _deleteStatus_ be DeletePropertyOrThrow(_O_, ToString(_len_–1)).

11. ReturnIfAbrupt(_deleteStatus_).

12. Let _setStatus_ be Set(_O_, "LENGTH", _len_–1, TRUE).

13. ReturnIfAbrupt(_setStatus_).

14. Return _first_.

NOTE The SHIFT function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.slice (start, end)

NOTE The SLICE method takes two arguments, _start_ and _end_, and
returns an array containing the elements of the array from element
_start_ up to, but not including, element _end_ (or through the end of
the array if _end_ is UNDEFINED). If _start_ is negative, it is treated
as _length_+_start_ where _length_ is the length of the array. If _end_
is negative, it is treated as _length_+_end_ where _length_ is the
length of the array.

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _relativeStart_ be ToInteger(_start_).

6.  ReturnIfAbrupt(_relativeStart_).

7.  If _relativeStart_ < 0, let _k_ be max((_len_ + _relativeStart_),0);
    else let _k_ be min(_relativeStart_, _len_).

8.  If _end_ is UNDEFINED, let _relativeEnd_ be _len_; else let
    _relativeEnd_ be ToInteger(_end_).

9.  ReturnIfAbrupt(_relativeEnd_).

10. If _relativeEnd_ < 0, let _final_ be max((_len_ + _relativeEnd_),0);
    else let _final_ be min(_relativeEnd_, _len_).

11. Let _count_ be max(_final_ – _k_, 0).

12. Let _A_ be ArraySpeciesCreate(_O_, _count_).

13. ReturnIfAbrupt(_A_).

14. Let _n_ be 0.

15. Repeat, while _k_ < _final

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _status_ be CreateDataPropertyOrThrow(_A_,
            ToString(_n_), _kValue_ ).

        iv. ReturnIfAbrupt(_status_).

    e.  Increase _k_ by 1.

    f.  Increase _n_ by 1.

16. Let _setStatus_ be Set(_A_, "LENGTH", _n_, TRUE).

17. ReturnIfAbrupt(_setStatus_).

18. Return _A_.

The LENGTH property of the SLICE method is 2.

NOTE 1 The explicit setting of the LENGTH property of the result Array
in step 16 is necessary to ensure that its value is correct in
situations where the trailing elements of the result Array are not
present.

NOTE 2 The SLICE function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.some ( callbackfn [ , thisArg ] )

NOTE _callbackfn_ should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value TRUE or FALSE.
SOME calls _callbackfn_ once for each element present in the array, in
ascending order, until it finds one where _callbackfn_ returns TRUE. If
such an element is found, SOME immediately returns TRUE. Otherwise, SOME
returns FALSE. _callbackfn_ is called only for elements of the array
which actually exist; it is not called for missing elements of the
array.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _callbackfn_. If it is not provided, UNDEFINED is
used instead.

_callbackfn_ is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

SOME does not directly mutate the object on which it is called but the
object may be mutated by the calls to _callbackfn_.

The range of elements processed by SOME is set before the first call to
_callbackfn_. Elements that are appended to the array after the call to
SOME begins will not be visited by _callbackfn_. If existing elements of
the array are changed, their value as passed to _callbackfn_ will be the
value at the time that SOME visits them; elements that are deleted after
the call to SOME begins and before being visited are not visited. SOME
acts like the "exists" quantifier in mathematics. In particular, for an
empty array, it returns FALSE.

When the SOME method is called with one or two arguments, the following
steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _k_ be 0.

8.  Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kPresent_ be HasProperty(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kPresent_).

    d.  If _kPresent_ is TRUE, then

        i.  Let _kValue_ be Get(_O_, _Pk_).

        ii. ReturnIfAbrupt(_kValue_).

        iii. Let _testResult_ be ToBoolean(Call(_callbackfn_, _T_,
            «_kValue_, _k_, and _O_»)).

        iv. ReturnIfAbrupt(_testResult_).

        v.  If _testResult_ is TRUE, return TRUE.

    e.  Increase _k_ by 1.

9.  Return FALSE.

The LENGTH property of the SOME method is 1.

NOTE The SOME function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.sort (comparefn)

The elements of this array are sorted. The sort is not necessarily
stable (that is, elements that compare equal do not necessarily remain
in their original order). If _comparefn_ is not UNDEFINED, it should be
a function that accepts two arguments _x_ and _y_ and returns a negative
value if _x_ < _y_, zero if _x_ = _y_, or a positive value if _x_ > _y_.

1.  2.  a.  b.  

3.  

Upon entry, the following steps are performed to initialize evaluation
of the SORT function:

1.  Let _obj_ be ToObject(THIS value).

2.  Let _len_ be ToLength(Get(_obj_, "LENGTH")).

3.  ReturnIfAbrupt(_len_).

Within this specification of the SORT method, an Array object, _obj_, is
said to be _sparse_ if the following algorithm returns TRUE:

1.  For each integer _i_ in the range 0≤_i_< _len

    a.  Let _elem_ be _obj_.[[GetOwnProperty]](ToString(_i_)).

    b.  If _elem_ is UNDEFINED, return TRUE.

2.  Return FALSE.

The _sort order_ is the ordering, after completion of this function, of
the integer indexed property values of _obj_ whose integer indexes are
less than _len_. The result of the SORT function is then determined as
follows:

If _comparefn_ is not UNDEFINED and is not a consistent comparison
function for the elements of this array (see below), the sort order is
implementation-defined. The sort order is also implementation-defined if
_comparefn_ is UNDEFINED and SortCompare (22.1.3.24.1) does not act as a
consistent comparison function.

Let _proto_ be _obj_.[[GetPrototypeOf]](). If _proto_ is not NULL and
there exists an integer _j_ such that all of the conditions below are
satisfied then the sort order is implementation-defined:

-   _obj_ is sparse

-   0 ≤ _j_ < _len_

-   HasProperty(_proto_, ToString(_j_)) is TRUE.

The sort order is also implementation defined if _obj_ is sparse and any
of the following conditions are true:

-   IsExtensible(_obj_) is FALSE.

-   Any integer index property of _obj_ whose name is a nonnegative
    integer less than _len_ is a data property whose [[Configurable]]
    attribute is FALSE.

The sort order is also implementation defined if any of the following
conditions are true:

-   If _obj_ is an exotic object (including Proxy exotic objects) whose
    behaviour for [[Get]], [[Set]], [[Delete]], and [[GetOwnProperty]]
    is not the ordinary object implementation of these internal methods.

-   If any index index property of _obj_ whose name is a nonnegative
    integer less than _len_ is an accessor property or is a data
    property whose [[Writable]] attribute is FALSE.

-   If _comparefn_ is UNDEFINED and the application of ToString to any
    value passed as an argument to SortCompare modifies _obj_ or any
    object on _obj_’s prototype chain.

-   If _comparefn_ is UNDEFINED and all applications of ToString, to any
    specific value passed as an argument to SortCompare, do not produce
    the same result.

The following steps are taken:

1.  Perform an implementation-dependent sequence of calls to the [[Get]]
    and [[Set]] internal methods of _obj_, to the DeletePropertyOrThrow
    and HasOwnProperty abstract operation with _obj_ as the first
    argument, and to SortCompare (described below), such that:

    -   The property key argument for each call to [[Get]], [[Set]],
        HasOwnProperty, or DeletePropertyOrThrow is the string
        representation of a nonnegative integer less than _len_.

    -   The arguments for calls to SortCompare are values returned by a
        previous call to the [[Get]] internal method, unless the
        properties accessed by those previous calls did not exist
        according to HasOwnProperty. If both perspective arguments to
        SortCompare correspond to non-existent properties, use +0
        instead of calling SortCompare. If only the first perspective
        argument is non-existent use +1. If only the second perspective
        argument is non-existent use −1.

    -   If _obj_ is not sparse then DeletePropertyOrThrow must not be
        called.

    -   If any [[Set]] call returns FALSE a TYPEERROR exception is
        thrown.

    -   If an abrupt completion is returned from any of these
        operations, it is immediately returned as the value of this
        function.

2.  Return _obj_.

Unless the sort order is specified above to be implementation-defined,
the returned object must have the following two characteristics:

-   There must be some mathematical permutation π of the nonnegative
    integers less than _len_, such that for every nonnegative integer
    _j_ less than _len_, if property old[_j_] existed, then new[π(_j_)]
    is exactly the same value as old[_j_]. But if property old[_j_] did
    not exist, then new[π(_j_)] does not exist.

-   Then for all nonnegative integers _j_ and _k_, each less than _len_,
    if SortCompare(old[_j_], old[_k_]) < 0 (see SortCompare below), then
    new[Π(_j_)] < new[Π(_k_)].

Here the notation old[_j_] is used to refer to the hypothetical result
of calling the [[Get]] internal method of _obj_ with argument _j_ before
this function is executed, and the notation new[_j_] to refer to the
hypothetical result of calling the [[Get]] internal method of _obj_ with
argument _j_ after this function has been executed.

A function _comparefn_ is a consistent comparison function for a set of
values _S_ if all of the requirements below are met for all values _a_,
_b_, and _c_ (possibly the same value) in the set _S_: The notation
_a_ <~CF~ _b_ means _comparefn_(_a_,_b_) < 0; _a_ =~CF~ _b_ means
_comparefn_(_a_,_b_) = 0 (of either sign); and _a_ >~CF~ _b_ means
_comparefn_(_a_,_b_) > 0.

-   Calling _comparefn_(_a_,_b_) always returns the same value _v_ when
    given a specific pair of values _a_ and _b_ as its two arguments.
    Furthermore, Type(_v_) is Number, and _v_ is not NaN. Note that this
    implies that exactly one of _a_ <~CF~ _b_, _a_ =~CF~ _b_, and
    _a_ >~CF~ _b_ will be true for a given pair of _a_ and _b_.

-   Calling _comparefn_(_a_,_b_) does not modify _obj_ or any object on
    _obj_’s prototype chain.

-   _a_ =~CF~ _a_ (reflexivity)

-   If _a_ =~CF~ _b_, then _b_ =~CF~ _a_ (symmetry)

-   If _a_ =~CF~ _b_ and _b_ =~CF~ _c_, then _a_ =~CF~ _c_ (transitivity
    of =~CF~)

-   If _a_ <~CF~ _b_ and _b_ <~CF~ _c_, then _a_ <~CF~ _c_ (transitivity
    of <~CF~)

-   If _a_ >~CF~ _b_ and _b_ >~CF~ _c_, then _a_ >~CF~ _c_ (transitivity
    of >~CF~)

NOTE 1 The above conditions are necessary and sufficient to ensure that
_comparefn_ divides the set _S_ into equivalence classes and that these
equivalence classes are totally ordered.

NOTE 2 The SORT function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore, it can be transferred
to other kinds of objects for use as a method.

Runtime Semantics: SortCompare( x, y ) 

When the SortCompare abstract operation is called with two arguments _x_
and _y_. It also has access to the _comparefn_ argument passed to the
current invocation of the SORT method. The following steps are taken:

1.  If _x_ and _y_ are both UNDEFINED, return +0.

2.  If _x_ is UNDEFINED, return 1.

3.  If _y_ is UNDEFINED, return −1.

4.  If the argument _comparefn_ is not UNDEFINED, then

    a.  Let _v_ be ToNumber(Call(_comparefn_, UNDEFINED, «_x_, _y_»)).

    b.  ReturnIfAbrupt(_v_).

    c.  If _v_ is NAN, return +0.

    d.  Return _v_.

5.  Let _xString_ be ToString(_x_).

6.  ReturnIfAbrupt(_xString_).

7.  Let _yString_ be ToString(_y_).

8.  ReturnIfAbrupt(_yString_).

9.  If _xString_ < _yString_, return −1.

10. If _xString_ > _yString_, return 1.

11. Return +0.

NOTE 1 Because non-existent property values always compare greater than
UNDEFINED property values, and UNDEFINED always compares greater than
any other value, UNDEFINED property values always sort to the end of the
result, followed by non-existent property values.

NOTE 2 Method calls performed by the ToString abstract operations in
steps 5 and 7 have the potential to cause SortCompare to not behave as a
consistent comparison function.

Array.prototype.splice (start, deleteCount , ...items )

NOTE When the SPLICE method is called with two or more arguments
_start_, _deleteCount_ and zero or more _items_, the _deleteCount
elements of the array starting at integer index _start_ are replaced by
the arguments _items_. An Array object containing the deleted elements
(if any) is returned.

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _relativeStart_ be ToInteger(_start_).

6.  ReturnIfAbrupt(_relativeStart_).

7.  If _relativeStart_ < 0, let _actualStart_ be max((_len_ +
    _relativeStart_),0); else let _actualStart_ be min(_relativeStart_,
    _len_).

8.  If the number of actual arguments is 0, then

    a.  Let _insertCount_ be 0.

    b.  Let _actualDeleteCount_ be 0.

9.  Else if the number of actual arguments is 1, then

    a.  Let _insertCount_ be 0.

    b.  Let _actualDeleteCount_ be _len_ – _actualStart_.

10. Else,

    a.  Let _insertCount_ be the number of actual arguments minus 2.

    b.  Let _dc_ be ToInteger(_deleteCount_).

    c.  ReturnIfAbrupt(_dc_).

    d.  Let _actualDeleteCount_ be min(max(_dc_,0), _len_ –
        _actualStart_).

11. If _len+insertCount_−_actualDeleteCount_ > 2^53^-1, throw a
    TYPEERROR exception.

12. Let _A_ be ArraySpeciesCreate(_O_, _actualDeleteCount_).

13. ReturnIfAbrupt(_A_).

14. Let _k_ be 0.

15. Repeat, while _k_ < _actualDeleteCount

    a.  Let _from_ be ToString(_actualStart_+_k_).

    b.  Let _fromPresent_ be HasProperty(_O_, _from_).

    c.  ReturnIfAbrupt(_fromPresent_).

    d.  If _fromPresent_ is TRUE, then

        i.  Let _fromValue_ be Get(_O,_ _from_).

        ii. ReturnIfAbrupt(_fromValue_).

        iii. Let _status_ be CreateDataPropertyOrThrow(_A_,
            ToString(_k_), _fromValue_).

        iv. ReturnIfAbrupt(_status_).

    e.  Increment _k_ by 1.

16. Let _setStatus_ be Set(_A_, "LENGTH", _actualDeleteCount_, TRUE).

17. ReturnIfAbrupt(_setStatus_).

18. Let _items_ be a List whose elements are, in left to right order,
    the portion of the actual argument list starting with the third
    argument. The list is empty if fewer than three arguments were
    passed.

19. Let _itemCount_ be the number of elements in _items_.

20. If _itemCount_ < _actualDeleteCount_, then

    a.  Let _k_ be _actualStart_.

    b.  Repeat, while _k_ < (_len_ – _actualDeleteCount_)

        i.  Let _from_ be ToString(_k_+_actualDeleteCount_).

        ii. Let _to_ be ToString(_k_+_itemCount_).

        iii. Let _fromPresent_ be HasProperty(_O_, _from_).

        iv. ReturnIfAbrupt(_fromPresent_).

        v.  If _fromPresent_ is TRUE, then

            1.  Let _fromValue_ be Get(_O_, _from_).

            2.  ReturnIfAbrupt(_fromValue_).

            3.  Let _setStatus_ be Set(_O_, _to_, _fromValue_, TRUE).

            4.  ReturnIfAbrupt(_setStatus_).

        vi. Else _fromPresent_ is FALSE,

            1.  Let _deleteStatus_ be DeletePropertyOrThrow(_O_, _to_).

            2.  ReturnIfAbrupt(_deleteStatus_).

        vii. Increase _k_ by 1.

    c.  Let _k_ be _len_.

    d.  Repeat, while _k_ > (_len_ – _actualDeleteCount_ + _itemCount_)

        i.  Let _deleteStatus_ be DeletePropertyOrThrow(_O_,
            ToString(_k_–1)).

        ii. ReturnIfAbrupt(_deleteStatus_).

        iii. Decrease _k_ by 1.

21. Else if _itemCount_ > _actualDeleteCount_, then

    a.  Let _k_ be (_len_ – _actualDeleteCount_).

    b.  Repeat, while _k_ > _actualStart_

        i.  Let _from_ be ToString(_k_ + _actualDeleteCount_ – 1).

        ii. Let _to_ be ToString(_k_ + _itemCount_ – 1)

        iii. Let _fromPresent_ be HasProperty(_O_, _from_).

        iv. ReturnIfAbrupt(_fromPresent_).

        v.  If _fromPresent_ is TRUE, then

            1.  Let _fromValue_ be Get(_O_, _from_).

            2.  ReturnIfAbrupt(_fromValue_).

            3.  Let _setStatus_ be Set(_O_, _to_, _fromValue_, TRUE).

            4.  ReturnIfAbrupt(_setStatus_).

        vi. Else _fromPresent_ is FALSE,

            1.  Let _deleteStatus_ be DeletePropertyOrThrow(_O_, _to_).

            2.  ReturnIfAbrupt(_deleteStatus_).

        vii. Decrease _k_ by 1.

22. Let _k_ be _actualStart_.

23. Repeat, while _items_ is not empty

    a.  Remove the first element from _items_ and let _E_ be the value
        of that element.

    b.  Let _setStatus_ be Set(_O_, ToString(_k_), _E_, TRUE).

    c.  ReturnIfAbrupt(_setStatus_).

    d.  Increase _k_ by 1.

24. Let _setStatus_ be Set(_O_, "LENGTH", _len_ – _actualDeleteCount_ +
    _itemCount_, TRUE).

25. ReturnIfAbrupt(_setStatus_).

26. Return _A_.

The LENGTH property of the SPLICE method is 2.

NOTE 1 The explicit setting of the LENGTH property of the result Array
in step 24 is necessary to ensure that its value is correct in
situations where its trailing elements are not present.

NOTE 2 The SPLICE function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
ARRAY.PROTOTYPE.TOLOCALESTRING method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the TOLOCALESTRING method is
used.

NOTE The first edition of ECMA-402 did not include a replacement
specification for the ARRAY.PROTOTYPE.TOLOCALESTRING method.

The meanings of the optional parameters to this method are defined in
the ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

The following steps are taken:

1.  Let _array_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_array_).

3.  Let _len_ be ToLength(Get(_array_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _separator_ be the String value for the list-separator String
    appropriate for the host environment’s current locale (this is
    derived in an implementation-defined way).

6.  If _len_ is zero, return the empty String.

7.  Let _firstElement_ be Get(_array_, "0").

8.  ReturnIfAbrupt(_firstElement_).

9.  If _firstElement_ is UNDEFINED or NULL, then

    a.  Let _R_ be the empty String.

10. Else

    a.  Let _R_ be ToString(Invoke(_firstElement_, "TOLOCALESTRING")).

    b.  ReturnIfAbrupt(_R_).

11. Let _k_ be 1.

12. Repeat, while _k_ < _len

    a.  Let _S_ be a String value produced by concatenating _R_ and
        _separator_.

    b.  Let _nextElement_ be Get(_array_, ToString(_k_)).

    c.  ReturnIfAbrupt(_nextElement_).

    d.  If _nextElement_ is UNDEFINED or NULL, then

        i.  Let _R_ be the empty String.

    e.  Else

        i.  Let _R_ be ToString(Invoke(_nextElement_,
            "TOLOCALESTRING")).

        ii. ReturnIfAbrupt(_R_).

    f.  Let _R_ be a String value produced by concatenating _S_ and _R_.

    g.  Increase _k_ by 1.

13. Return _R_.

NOTE 1 The elements of the array are converted to Strings using their
TOLOCALESTRING methods, and these Strings are then concatenated,
separated by occurrences of a separator String that has been derived in
an implementation-defined locale-specific way. The result of calling
this function is intended to be analogous to the result of TOSTRING,
except that the result of this function is intended to be
locale-specific.

NOTE 2 The TOLOCALESTRING function is intentionally generic; it does not
require that its THIS value be an Array object. Therefore it can be
transferred to other kinds of objects for use as a method.

Array.prototype.toString ( )

When the TOSTRING method is called, the following steps are taken:

1.  Let _array_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_array_).

3.  Let _func_ be Get(_array_, "JOIN").

4.  ReturnIfAbrupt(_func_).

5.  If IsCallable(_func_) is FALSE, let _func_ be the intrinsic function
    %ObjProto_toString% (19.1.3.6).

6.  Return Call(_func_, _array_).

NOTE The TOSTRING function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.unshift ( ...items )

NOTE The arguments are prepended to the start of the array, such that
their order within the array is the same as the order in which they
appear in the argument list.

When the UNSHIFT method is called with zero or more arguments _item1_,
_item2_, etc., the following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Let _len_ be ToLength(Get(_O_, "LENGTH")).

4.  ReturnIfAbrupt(_len_).

5.  Let _argCount_ be the number of actual arguments.

6.  If _argCount_ > 0, then

    a.  If _len_+ _argCount_ > 2^53^-1, throw a TYPEERROR exception.

    b.  Let _k_ be _len_.

    c.  Repeat, while _k_ > 0,

        i.  Let _from_ be ToString(_k_–1).

        ii. Let _to_ be ToString(_k_+_argCount_ –1).

        iii. Let _fromPresent_ be HasProperty(_O_, _from_).

        iv. ReturnIfAbrupt(_fromPresent_).

        v.  If _fromPresent_ is TRUE, then

            1.  Let _fromValue_ be Get(_O_, _from_).

            2.  ReturnIfAbrupt(_fromValue_).

            3.  Let _setStatus_ be Set(_O_, _to_, _fromValue_, TRUE).

            4.  ReturnIfAbrupt(_setStatus_).

        vi. Else _fromPresent_ is FALSE,

            1.  Let _deleteStatus_ be DeletePropertyOrThrow(_O_, _to_).

            2.  ReturnIfAbrupt(_deleteStatus_).

        vii. Decrease _k_ by 1.

    d.  Let _j_ be 0.

    e.  Let _items_ be a List whose elements are, in left to right
        order, the arguments that were passed to this function
        invocation.

    f.  Repeat, while _items_ is not empty

        i.  Remove the first element from _items_ and let _E_ be the
            value of that element.

        ii. Let _setStatus_ be Set(_O_, ToString(_j_), _E_, TRUE).

        iii. ReturnIfAbrupt(_setStatus_).

        iv. Increase _j_ by 1.

7.  Let _setStatus_ be Set(_O_, "LENGTH", _len_+_argCount_, TRUE).

8.  ReturnIfAbrupt(_setStatus_).

9.  Return _len_+_argCount_.

The LENGTH property of the UNSHIFT method is 1.

NOTE The UNSHIFT function is intentionally generic; it does not require
that its THIS value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Array.prototype.values ( )

The following steps are taken:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Return CreateArrayIterator(_O_, "VALUE").

This function is the %ArrayProto_values% intrinsic object.

Array.prototype [ @@iterator ] ( )

The initial value of the @@iterator property is the same function object
as the initial value of the ARRAY.PROTOTYPE.VALUES property.

Array.prototype [ @@unscopables ]

The initial value of the @@unscopables data property is an object
created by the following steps:

1.  Let _blackList_ be ObjectCreate(NULL).

2.  Perform CreateDataProperty(_blackList_, "COPYWITHIN", TRUE).

3.  Perform CreateDataProperty(_blackList_, "ENTRIES", TRUE).

4.  Perform CreateDataProperty(_blackList_, "FILL", TRUE).

5.  Perform CreateDataProperty(_blackList_, "FIND", TRUE).

6.  Perform CreateDataProperty(_blackList_, "FINDINDEX", TRUE).

7.  Perform CreateDataProperty(_blackList_, "KEYS", TRUE).

8.  Perform CreateDataProperty(_blackList_, "VALUES", TRUE).

9.  Assert: Each of the above calls will return TRUE.

10. Return _blackList_.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

NOTE The own property names of this object are property names that were
not included as standard properties of ARRAY.PROTOTYPE prior to the
ECMAScrupt 2015 specification. These names are ignored for WITH
statement binding purposes in order to preserve the behaviour of
existing code that might use one of these names as a binding in an outer
scope that is shadowed by a WITH statement whose binding object is an
Array object.

Properties of Array Instances

Array instances are Array exotic objects and have the internal methods
specified for such objects. Array instances inherit properties from the
Array prototype object.

Array instances have a LENGTH property, and a set of enumerable
properties with array index names.

length

The LENGTH property of an Array instance is a data property whose value
is always numerically greater than the name of every configurable own
property whose name is an array index.

The LENGTH property initially has the attributes { [[Writable]]: TRUE,
[[Enumerable]]: FALSE, [[Configurable]]: FALSE }.

NOTE Reducing the value of the LENGTH property has the side-effect of
deleting own array elements whose array index is between the old and new
length values. However, non-configurable properties can not be deleted.
Attempting to set the length property of an Array object to a value that
is numerically less than or equal to the largest numeric own property
name of an existing non-configurable array indexed property of the array
will result in the length being set to a numeric value that is one
greater than that non-configurable numeric own property name. See
9.4.2.1.

Array Iterator Objects 

An Array Iterator is an object, that represents a specific iteration
over some specific Array instance object. There is not a named
constructor for Array Iterator objects. Instead, Array iterator objects
are created by calling certain methods of Array instance objects.

CreateArrayIterator Abstract Operation

Several methods of Array objects return Iterator objects. The abstract
operation CreateArrayIterator with arguments _array_ and _kind_ is used
to create such iterator objects. It performs the following steps:

1.  Assert: Type(_array_) is Object.

2.  Let _iterator_ be ObjectCreate(%ArrayIteratorPrototype%,
    «‍[[IteratedObject]], [[ArrayIteratorNextIndex]],
    [[ArrayIterationKind]]»).

3.  Set _iterator’s_ [[IteratedObject]] internal slot to _array_.

4.  Set _iterator’s_ [[ArrayIteratorNextIndex]] internal slot to 0.

5.  Set _iterator’s_ [[ArrayIterationKind]] internal slot to _kind_.

6.  Return _iterator_.

The %ArrayIteratorPrototype% Object

All Array Iterator Objects inherit properties from the
%ArrayIteratorPrototype% intrinsic object. The %ArrayIteratorPrototype%
object is an ordinary object and its [[Prototype]] internal slot is the
%IteratorPrototype% intrinsic object (25.1.2). In addition,
%ArrayIteratorPrototype% has the following properties:

%ArrayIteratorPrototype%.next( )

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have all of the internal slots of an Array Iterator
    Instance (22.1.5.3), throw a TYPEERROR exception.

4.  Let _a_ be the value of the [[IteratedObject]] internal slot of _O_.

5.  If _a_ is UNDEFINED, return CreateIterResultObject(UNDEFINED, TRUE).

6.  Let _index_ be the value of the [[ArrayIteratorNextIndex]] internal
    slot of _O_.

7.  Let _itemKind_ be the value of the [[ArrayIterationKind]] internal
    slot of _O_.

8.  If _a_ has a [[TypedArrayName]] internal slot, then

    a.  Let _len_ be the value of _O_’s [[ArrayLength]] internal slot.

9.  Else,

    a.  Let _len_ be ToLength(Get(_a_, "LENGTH")).

    b.  ReturnIfAbrupt(_len_).

10. If _index_ ≥ _len_, then

    a.  Set the value of the [[IteratedObject]] internal slot of _O_ to
        UNDEFINED.

    b.  Return CreateIterResultObject(UNDEFINED, TRUE).

11. Set the value of the [[ArrayIteratorNextIndex]] internal slot of _O
    to _index_+1.

12. If _itemKind_ is "KEY", return CreateIterResultObject(_index_,
    FALSE).

13. Let _elementKey_ be ToString(_index_).

14. Let _elementValue_ be Get(_a_, _elementKey_).

15. ReturnIfAbrupt(_elementValue_).

16. If _itemKind_ is "VALUE", let _result_ be _elementValue_.

17. Else,

    a.  Assert: _itemKind_ is "KEY+VALUE".

    b.  Let _result_ be CreateArrayFromList(«_index_, _elementValue_»).

18. Return CreateIterResultObject(_result_, FALSE).

%ArrayIteratorPrototype% [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"ARRAY ITERATOR".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Array Iterator Instances

Array Iterator instances are ordinary objects that inherit properties
from the %ArrayIteratorPrototype% intrinsic object. Array Iterator
instances are initially created with the internal slots listed in Table
48.

Table 48 — Internal Slots of Array Iterator Instances

  ---------------------------- ------------------------------------------------------------------------------------------------------------------------------------------
  _INTERNAL SLOT_              _DESCRIPTION_
  [[IteratedObject]]           The object whose array elements are being iterated.
  [[ArrayIteratorNextIndex]]   The integer index of the next integer index to be examined by this iteration.
  [[ArrayIterationKind]]       A string value that identifies what is returned for each element of the iteration. The possible values are: "KEY", "VALUE", "KEY+VALUE".
  ---------------------------- ------------------------------------------------------------------------------------------------------------------------------------------


_TypedArray_ Objects 

_TypedArray_ objects present an array-like view of an underlying binary
data buffer (24.1). Each element of a _TypedArray_ instance has the same
underlying binary scalar data type. There is a distinct _TypedArray_
constructor, listed in Table 49, for each of the nine supported element
types. Each constructor in Table 49 has a corresponding distinct
prototype object.

Table 49 – The _TypedArray_ Constructors

  -----------------------------------------------------------------------------------------------------------------------------------------------------------------
  _Constructor Name and Intrinsic_   _Element Type_   _Element Size_   _Conversion Operation_   _Description _                                _Equivalent C Type_
  ---------------------------------- ---------------- ---------------- ------------------------ --------------------------------------------- ---------------------
  Int8Array                          Int8             1                ToInt8                   8-bit 2’s complement signed integer           signed char
  %Int8Array%                                                                                                                                 

  Uint8Array                         Uint8            1                ToUint8                  8-bit unsigned integer                        unsigned char
  %Uint8Array%                                                                                                                                

  Uint8ClampedArray                  Uint8C           1                ToUint8Clamp             8-bit unsigned integer (clamped conversion)   unsigned char
  %Uint8ClampedArray%                                                                                                                         

  Int16Array                         Int16            2                ToInt16                  16-bit 2’s complement signed integer          short
  %Int16Array%                                                                                                                                

  Uint16Array                        Uint16           2                ToUint16                 16-bit unsigned integer                       unsigned short
  %Uint16Array%                                                                                                                               

  Int32Array                         Int32            4                ToInt32                  32-bit 2’s complement signed integer          int
  %Int32Array%                                                                                                                                

  Uint32Array                        Uint32           4                ToUint32                 32-bit unsigned integer                       unsigned int
  %Uint32Array%                                                                                                                               

  Float32Array                       Float32          4                                         32-bit IEEE floating point                    float
  %Float32Array%                                                                                                                              

  Float64Array                       Float64          8                                         64-bit IEEE floating point                    double
  %Float64Array%                                                                                                                              
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------

In the definitions below, references to _TypedArray_ should be replaced
with the appropriate constructor name from the above table. The phrase
“the element size in bytes” refers to the value in the Element Size
column of the table in the row corresponding to the constructor. The
phrase “element Type” refers to the value in the Element Type column for
that row.

The %TypedArray% Intrinsic Object

The %TypedArray% intrinsic object is a constructor function object that
all of the _TypedArray_ constructor object inherit from. %TypedArray%
and its corresponding prototype object provide common properties that
are inherited by all _TypedArray_ constructors and their instances. The
%TypedArray% intrinsic does not have a global name or appear as a
property of the global object.

The %TypedArray% intrinsic function object is designed to act as the
superclass of the various _TypedArray_ constructors. Those constructors
use %TypedArray% to initialize their instances by invoking %TypedArray%
as if by making a SUPER call. The %TypedArray% intrinsic function is not
designed to be directly called in any other way. If %TypedArray% is
directly called or called as part of a NEW expression an exception is
thrown.

The %TypedArray% intrinsic constructor function is a single function
whose behaviour is overloaded based upon the number and types of its
arguments. The actual behaviour of a SUPER call of %TypedArray% depends
upon the number and kind of arguments that are passed to it.

%TypedArray% ( )

This description applies only if the %TypedArray% function is called
with no arguments.

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Return AllocateTypedArray(NewTarget, 0).

%TypedArray% ( length )

This description applies only if the %TypedArray% function is called
with at least one argument and the Type of the first argument is not
Object.

%TypedArray% called with argument _length_ performs the following steps:

1.  Assert: Type(_length_) is not Object.

2.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

3.  If _length_ is UNDEFINED, throw a TYPEERROR exception.

4.  Let _numberLength_ be ToNumber(_length_).

5.  Let _elementLength_ be ToLength(_numberLength_).

6.  ReturnIfAbrupt(_elementLength_).

7.  If SameValueZero(_numberLength_, _elementLength_) is FALSE, throw a
    RANGEERROR exception.

8.  Return AllocateTypedArray(NewTarget, _elementLength_).

Runtime Semantics: AllocateTypedArray (newTarget, length )

The abstract operation AllocateTypedArray with argument _newTarget_ and
optional argument _length_ is used to validate and create an instance of
a TypedArray constructor. If the _length_ argument is passed an
ArrayBuffer of that length is also allocated and associated with the new
TypedArray instance. AllocateTypedArray provides common semantics that
is used by all of the %TypeArray% overloads and other methods.
AllocateTypedArray performs the following steps:

1.  Assert: IsConstructor(_newTarget_) is TRUE.

2.  If SameValue(%TypedArray%, _newTarget_) is TRUE, throw a TYPEERROR
    exception.

3.  NOTE %TypedArray% throws an exception when invoked via either a
    function call or the NEW operator. It can only be successfully
    invoked by a _SuperCall_.

4.  Let _constructorName_ be UNDEFINED.

5.  Let _subclass_ be _newTarget_.

6.  Repeat while _constructorName_ is UNDEFINED

    a.  If _subclass_ is NULL, throw a TYPEERROR exception.

    b.  If SameValue(%TypedArray%, _subclass_) is TRUE, throw a
        TYPEERROR exception.

    c.  If _subclass_ has a [[TypedArrayConstructorName]] internal slot,
        let _constructorName_ be the value of _subclass_’s
        [[TypedArrayConstructorName]] internal slot.

    d.  Let _subclass_ be _subclass_.[[GetPrototypeOf]]().

    e.  ReturnIfAbrupt(_subclass_).

7.  Let _proto_ be GetPrototypeFromConstructor(_newTarget_,
    "%TYPEDARRAYPROTOTYPE%").

8.  ReturnIfAbrupt(_proto_).

9.  Let _obj_ be IntegerIndexedObjectCreate (_proto_,
    «‍[[ViewedArrayBuffer]], [[TypedArrayName]], [[ByteLength]],
    [[ByteOffset]], [[ArrayLength]]» ).

10. Assert: The [[ViewedArrayBuffer]] internal slot of _obj_ is
    UNDEFINED.

11. Set _obj_’s [[TypedArrayName]] internal slot to _constructorName_.

12. If _length_ was not passed, then

    a.  Set _obj_’s [[ByteLength]] internal slot to 0.

    b.  Set _obj_’s [[ByteOffset]] internal slot to 0.

    c.  Set _obj_’s [[ArrayLength]] internal slot to 0.

13. Else,

    a.  Let _elementSize_ be the Element Size value in Table 49 for
        _constructorName_.

    b.  Let _byteLength_ be _elementSize_ × _length_.

    c.  Let _data_ be AllocateArrayBuffer(%ArrayBuffer%, _byteLength_).

    d.  ReturnIfAbrupt(_data_).

    e.  Set _obj’s_ [[ViewedArrayBuffer]] internal slot to _data_.

    f.  Set _obj_’s [[ByteLength]] internal slot to _byteLength_.

    g.  Set _obj_’s [[ByteOffset]] internal slot to 0.

    h.  Set _obj_’s [[ArrayLength]] internal slot to _length_.

14. Return _obj_.

%TypedArray% ( typedArray )

This description applies only if the %TypedArray% function is called
with at least one argument and the Type of the first argument is Object
and that object has a [[TypedArrayName]] internal slot.

%TypedArray% called with argument _typedArray_ performs the following
steps:

1.  Assert: Type(_typedArray_) is Object and _typedArray_ has a
    [[TypedArrayName]] internal slot.

2.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

3.  Let _O_ be AllocateTypedArray(NewTarget).

4.  ReturnIfAbrupt(_O_).

5.  Let _srcArray_ be _typedArray_.

6.  Let _srcData_ be the value of _srcArray’s_ [[ViewedArrayBuffer]]
    internal slot.

7.  If IsDetachedBuffer(_srcData_) is TRUE, throw a TYPEERROR exception.

8.  Let _constructorName_ be the string value of _O_’s
    [[TypedArrayName]] internal slot.

9.  Let _elementType_ be the string value of the Element Type value in
    Table 49 for _constructorName_.

10. Let _elementLength_ be the value of _srcArray’s_ [[ArrayLength]]
    internal slot.

11. Let _srcName_ be the string value of _srcArray’s_ [[TypedArrayName]]
    internal slot.

12. Let _srcType_ be the string value of the Element Type value in Table
    49 for _srcName_.

13. Let _srcElementSize_ be the Element Size value in Table 49 for
    _srcName_.

14. Let _srcByteOffset_ be the value of _srcArray_’s [[ByteOffset]]
    internal slot.

15. Let _elementSize_ be the Element Size value in Table 49 for
    _constructorName_.

16. Let _byteLength_ be _elementSize_ × _elementLength_.

17. If SameValue(_elementType_,_srcType_) is TRUE, then

    a.  Let _data_ be CloneArrayBuffer(_srcData_, _srcByteOffset_).

    b.  ReturnIfAbrupt(_data_).

18. Else,

    a.  Let _bufferConstructor_ be SpeciesConstructor(_srcData_,
        %ArrayBuffer%).

    b.  ReturnIfAbrupt(_bufferConstructor_).

    c.  Let _data_ be AllocateArrayBuffer(_bufferConstructor_,
        _byteLength_).

    d.  ReturnIfAbrupt(_data_).

    e.  If IsDetachedBuffer(_srcData_) is TRUE, throw a TYPEERROR
        exception.

    f.  Let _srcByteIndex_ be _srcByteOffset_.

    g.  Let _targetByteIndex_ be 0.

    h.  Let _count_ be _elementLength_.

    i.  Repeat, while _count_ >0

        i.  Let _value_ be GetValueFromBuffer(_srcData_, _srcByteIndex_,
            _srcType_).

        ii. Perform SetValueInBuffer(_data_, _targetByteIndex_,
            _elementType_, _value_).

        iii. Set _srcByteIndex_ to _srcByteIndex_ + _srcElementSize_.

        iv. Set _targetByteIndex_ to _targetByteIndex_ + _elementSize_.

        v.  Decrement _count_ by 1.

19. Set _O’s_ [[ViewedArrayBuffer]] internal slot to _data_.

20. Set _O_’s [[ByteLength]] internal slot to _byteLength_.

21. Set _O_’s [[ByteOffset]] internal slot to 0.

22. Set _O_’s [[ArrayLength]] internal slot to _elementLength_.

23. Return _O_.

%TypedArray% ( object )

This description applies only if the %TypedArray% function is called
with at least one argument and the Type of the first argument is Object
and that object does not have either a [[TypedArrayName]] or an
[[ArrayBufferData]] internal slot.

%TypedArray% called with argument _object_ performs the following steps:

1.  Assert: Type(_object_) is Object and _object_ does not have either a
    [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.

2.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

3.  Return TypedArrayFrom(NewTarget, _object_, UNDEFINED, UNDEFINED).

%TypedArray% ( buffer [ , byteOffset [ , length ] ] )

This description applies only if the %TypedArray% function is called
with at least one argument and the Type of the first argument is Object
and that object has an [[ArrayBufferData]] internal slot.

%TypedArray% called with arguments _buffer_, _byteOffset_, and _length_
performs the following steps:

1.  Assert: Type(_buffer_) is Object and _buffer_ has an
    [[ArrayBufferData]] internal slot.

2.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

3.  Let _O_ be AllocateTypedArray(NewTarget).

4.  ReturnIfAbrupt(_O_).

5.  Let _constructorName_ be the string value of _O_’s
    [[TypedArrayName]] internal slot.

6.  Let _elementSize_ be the Number value of the Element Size value in
    Table 49 for _constructorName_.

7.  Let _offset_ be ToInteger(_byteOffset_).

8.  ReturnIfAbrupt(_offset_).

9.  If _offset_ < 0, throw a RANGEERROR exception.

10. If _offset_ modulo _elementSize_ ≠ 0, throw a RANGEERROR exception.

11. If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

12. Let _bufferByteLength_ be the value of _buffer’s
    [[ArrayBufferByteLength]] internal slot.

13. If _length_ is UNDEFINED, then

    a.  If _bufferByteLength_ modulo _elementSize_ ≠ 0, throw a
        RANGEERROR exception.

    b.  Let _newByteLength_ be _bufferByteLength_ – _offset_.

    c.  If _newByteLength_ < 0, throw a RANGEERROR exception.

14. Else,

    a.  Let _newLength_ be ToLength(_length_)_._

    b.  ReturnIfAbrupt(_newLength_).

    c.  Let _newByteLength_ be _newLength_ × _elementSize_.

    d.  If _offset_+_newByteLength_ > _bufferByteLength_, throw a
        RANGEERROR exception.

15. Set _O’s_ [[ViewedArrayBuffer]] internal slot to _buffer_.

16. Set _O_’s [[ByteLength]] internal slot to _newByteLength_.

17. Set _O_’s [[ByteOffset]] internal slot to _offset_.

18. Set _O_’s [[ArrayLength]] internal slot to _newByteLength /
    elementSize_ .

19. Return _O_.

1.  

Properties of the %TypedArray% Intrinsic Object

The value of the [[Prototype]] internal slot of %TypedArray% is the
intrinsic object %FunctionPrototype% (19.2.3).

Besides a LENGTH property whose value is 3 and a NAME property whose
value is "TYPEDARRAY", %TypedArray% has the following properties:

%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )

When the FROM method is called with argument _source_, and optional
arguments _mapfn_ and _thisArg_, the following steps are taken:

1.  Let _C_ be the THIS value.

2.  If IsConstructor(_C_) is FALSE, throw a TYPEERROR exception.

3.  If _mapfn_ was supplied, let _f_ be _mapfn_; otherwise let _f_ be
    UNDEFINED.

4.  If _f_ is not UNDEFINED, then

    a.  If IsCallable(_f_) is FALSE, throw a TYPEERROR exception.

5.  If _thisArg_ was supplied, let _t_ be _thisArg_; else let _t_ be
    UNDEFINED.

6.  Return TypedArrayFrom(_C_, _source_, _f_, _t_).

The LENGTH property of the FROM method is 1.

Runtime Semantics: TypedArrayFrom( constructor, items, mapfn, thisArg )

When the TypedArrayFrom abstract operation is called with arguments
_constructor_, _items_, _mapfn_, and _thisArg_, the following steps are
taken:

1.  Let _C_ be _constructor_.

2.  Assert: IsConstructor(_C_) is TRUE.

3.  Assert: _mapfn_ is either a callable Object or UNDEFINED.

4.  If _mapfn_ is UNDEFINED, let _mapping_ be FALSE.

5.  Else

    a.  Let _T_ be _thisArg_.

    b.  Let _mapping_ be TRUE

6.  Let _usingIterator_ be GetMethod(_items_, @@iterator).

7.  ReturnIfAbrupt(_usingIterator_).

8.  If _usingIterator_ is not UNDEFINED, then

    a.  Let _iterator_ be GetIterator(_items_, _usingIterator_).

    b.  ReturnIfAbrupt(_iterator_).

    c.  Let _values_ be a new empty List.

    d.  Let _next_ be TRUE.

    e.  Repeat, while _next_ is not FALSE

        i.  Let _next_ be IteratorStep(_iterator_).

        ii. ReturnIfAbrupt(_next_).

        iii. If _next_ is not FALSE, then

            1.  Let _nextValue_ be IteratorValue(_next_).

            2.  ReturnIfAbrupt(_nextValue_).

            3.  Append _nextValue_ to the end of the List _values_.

    f.  Let _len_ be the number of elements in _values_.

    g.  Let _targetObj_ be AllocateTypedArray(_C_, _len_).

    h.  ReturnIfAbrupt(_targetObj_).

    i.  Let _k_ be 0.

    j.  Repeat, while _k_ < _len_

        i.  Let _Pk_ be ToString(_k_).

        ii. Let _kValue_ be the first element of _values_ and remove
            that element from _list_.

        iii. If _mapping_ is TRUE, then

            1.  Let _mappedValue_ be Call(_mapfn_, _T_, «_kValue_,
                _k_»).

            2.  ReturnIfAbrupt(_mappedValue_).

        iv. Else, let _mappedValue_ be _kValue_.

        v.  Let _setStatus_ be Set(_targetObj_, _Pk_, _mappedValue_,
            TRUE).

        vi. ReturnIfAbrupt(_setStatus_).

        vii. Increase _k_ by 1.

    k.  Assert: _values_ is now an empty List.

    l.  Return _targetObj_.

9.  Assert: _items_ is not an Iterable so assume it is an array-like
    object.

10. Let _arrayLike_ be ToObject(_items_).

11. ReturnIfAbrupt(_arrayLike_).

12. Let _len_ be ToLength(Get(_arrayLike_, "LENGTH")).

13. ReturnIfAbrupt(_len_).

14. Let _targetObj_ be AllocateTypedArray(_C_, _len_).

15. ReturnIfAbrupt(_targetObj_).

16. Let _k_ be 0.

17. Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kValue_ be Get(_arrayLike_, _Pk_).

    c.  ReturnIfAbrupt(_kValue_).

    d.  If _mapping_ is TRUE, then

        i.  Let _mappedValue_ be Call(_mapfn_, _T_, «_kValue_, _k_»).

        ii. ReturnIfAbrupt(_mappedValue_).

    e.  Else, let _mappedValue_ be _kValue_.

    f.  Let _setStatus_ be Set(_targetObj_, _Pk_, _mappedValue_, TRUE).

    g.  ReturnIfAbrupt(_setStatus_).

    h.  Increase _k_ by 1.

18. Return _targetObj_.

%TypedArray%.of ( ...items )

When the OF method is called with any number of arguments, the following
steps are taken:

1.  Let _len_ be the actual number of arguments passed to this function.

2.  Let _items_ be the List of arguments passed to this function.

3.  Let _C_ be the THIS value.

4.  If IsConstructor(_C_) is FALSE, throw a TYPEERROR exception.

5.  Let _newObj_ be AllocateTypedArray(_C_, _len_).

6.  ReturnIfAbrupt(_newObj_).

7.  Let _k_ be 0.

8.  Repeat, while _k_ < _len

    a.  Let _kValue_ be _items_[_k_].

    b.  Let _Pk_ be ToString(_k_).

    c.  Let _status_ be Set(_newObj_, _Pk_, _kValue_, TRUE).

    d.  ReturnIfAbrupt(_status_).

    e.  Increase _k_ by 1.

9.  Return _newObj_.

The LENGTH property of the OF method is 0.

NOTE The _items_ argument is assumed to be a well-formed rest argument
value.

%TypedArray%.prototype

The initial value of %TypedArray%.prototype is the %TypedArrayPrototype%
intrinsic object (22.2.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

get %TypedArray% [ @@species ] 

%TypedArray%[@@species] is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Return the THIS value.

The value of the NAME property of this function is "GET
[SYMBOL.SPECIES]".

NOTE %TypedArrayPrototype% methods normally use their THIS object’s
constructor to create a derived object. However, a subclass constructor
may over-ride that default behaviour by redefining its @@species
property.

Properties of the %TypedArrayPrototype% Object

The value of the [[Prototype]] internal slot of the
%TypedArrayPrototype% object is the intrinsic object %ObjectPrototype%
(19.1.3). The %TypedArrayPrototype% object is an ordinary object. It
does not have a [[ViewedArrayBuffer]] or any other of the internal slots
that are specific to _TypedArray_ instance objects.

get %TypedArray%.prototype.buffer

%TypedArray%.PROTOTYPE.BUFFER is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[ViewedArrayBuffer]] internal slot, throw a
    TYPEERROR exception.

4.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

5.  Return _buffer_.

get %TypedArray%.prototype.byteLength

%TypedArray%.PROTOTYPE.BYTELENGTH is an accessor property whose set
accessor function is UNDEFINED. Its get accessor function performs the
following steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[ViewedArrayBuffer]] internal slot, throw a
    TYPEERROR exception.

4.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

5.  If IsDetachedBuffer(_buffer_) is TRUE, return 0.

6.  Let _size_ be the value of _O_’s [[ByteLength]] internal slot.

7.  Return _size_.

get %TypedArray%.prototype.byteOffset

%TypedArray%.PROTOTYPE.BYTEOFFSET is an accessor property whose set
accessor function is UNDEFINED. Its get accessor function performs the
following steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[ViewedArrayBuffer]] internal slot, throw a
    TYPEERROR exception.

4.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

5.  If IsDetachedBuffer(_buffer_) is TRUE, return 0.

6.  Let _offset_ be the value of _O_’s [[ByteOffset]] internal slot.

7.  Return _offset_.

%TypedArray%.prototype.constructor

The initial value of %TypedArray%.prototype.constructor is the
%TypedArray% intrinsic object.

%TypedArray%.prototype.copyWithin (target, start [, end ] )

%TypedArray%.PROTOTYPE.COPYWITHIN is a distinct function that implements
the same algorithm as ARRAY.PROTOTYPE.COPYWITHIN as defined in 22.1.3.3
except that the THIS object’s [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "LENGTH" and the actual copying of
values in step 17 must be performed in a manner that preserves the
bit-level encoding of the source data

The implementation of the algorithm may be optimized with the knowledge
that the THIS value is an object that has a fixed length and whose
integer indexed properties are not sparse. However, such optimization
must not introduce any observable changes in the specified behaviour of
the algorithm.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the COPYWITHIN method is 2.

Runtime Semantics: ValidateTypedArray ( O )

When called with argument _O_ the following steps are taken:

1.  If Type(_O_) is not Object, throw a TYPEERROR exception.

2.  If _O_ does not have a [[TypedArrayName]] internal slot, throw a
    TYPEERROR exception.

3.  If _O_ does not have a [[ViewedArrayBuffer]] internal slot, throw a
    TYPEERROR exception.

4.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

5.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

6.  Return _buffer_.

%TypedArray%.prototype.entries ( )

The following steps are taken:

1.  Let _O_ be the THIS value.

2.  Let _valid_ be ValidateTypedArray(_O_).

3.  ReturnIfAbrupt(_valid_).

4.  Return CreateArrayIterator(_O_, "KEY+VALUE").

%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )

%TypedArray%.PROTOTYPE.EVERY is a distinct function that implements the
same algorithm as ARRAY.PROTOTYPE.EVERY as defined in 22.1.3.5 except
that the THIS object’s [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm and must take into
account the possibility that calls to _callbackfn_ may cause the THIS
value to become detached.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the EVERY method is 1.

%TypedArray%.prototype.fill (value [ , start [ , end ] ] )

%TypedArray%.PROTOTYPE.FILL is a distinct function that implements the
same algorithm as ARRAY.PROTOTYPE.FILL as defined in 22.1.3.6 except
that the THIS object’s [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the FILL method is 1.

%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )

The interpretation and use of the arguments of
%TypedArray%.PROTOTYPE.FILTER are the same as for ARRAY.PROTOTYPE.FILTER
as defined in 22.1.3.7.

When the FILTER method is called with one or two arguments, the
following steps are taken:

1.  Let _O_ be the THIS value.

2.  Let _valid_ be ValidateTypedArray(_O_).

3.  ReturnIfAbrupt(_valid_).

4.  Let _len_ be the value of _O’s_ [[ArrayLength]] internal slot.

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _defaultConstructor_ be the intrinsic object listed in column
    one of Table 49 for the value of _O_’s [[TypedArrayName]] internal
    slot.

8.  Let _C_ be SpeciesConstructor(_O_, _defaultConstructor_).

9.  ReturnIfAbrupt(_C_).

10. Let _kept_ be a new empty List.

11. Let _k_ be 0.

12. Let _captured_ be 0.

13. Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kValue_ be Get(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kValue_).

    d.  Let _selected_ be ToBoolean(Call(_callbackfn_, _T_, «_kValue_,
        _k_, _O_»)).

    e.  ReturnIfAbrupt(_selected_).

    f.  If _selected_ is TRUE, then

        i.  Append _kValue_ to the end of _kept_.

        ii. Increase _captured_ by 1.

    g.  Increase _k_ by 1.

14. Let _A_ be AllocateTypedArray(_C_, _captured_).

15. ReturnIfAbrupt(_A_).

16. Let _n_ be 0.

17. For each element _e_ of _kept

    a.  Let _status_ be Set(_A_, ToString(_n_), _e_, TRUE ).

    b.  ReturnIfAbrupt(_status_).

    c.  Increment _n_ by 1.

18. Return _A_.

This function is not generic. The THIS value must be an object with a
[[TypedArrayName]] internal slot.

The LENGTH property of the FILTER method is 1.

%TypedArray%.prototype.find (predicate [ , thisArg ] )

%TypedArray%.PROTOTYPE.FIND is a distinct function that implements the
same algorithm as ARRAY.PROTOTYPE.FIND as defined in 22.1.3.8 except
that the THIS object’s [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm and must take into
account the possibility that calls to _predicate_ may cause the THIS
value to become detached.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the FIND method is 1.

%TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )

%TypedArray%.PROTOTYPE.FINDINDEX is a distinct function that implements
the same algorithm as ARRAY.PROTOTYPE.FINDINDEX as defined in 22.1.3.9
except that the THIS object’s [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm and must take into
account the possibility that calls to _predicate_ may cause the THIS
value to become detached.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the FINDINDEX method is 1.

%TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )

%TypedArray%.PROTOTYPE.FOREACH is a distinct function that implements
the same algorithm as ARRAY.PROTOTYPE.FOREACH as defined in 22.1.3.10
except that the THIS object’s [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm and must take into
account the possibility that calls to _callbackfn_ may cause the THIS
value to become detached.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the FOREACH method is 1.

%TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )

%TypedArray%.PROTOTYPE.INDEXOF is a distinct function that implements
the same algorithm as ARRAY.PROTOTYPE.INDEXOF as defined in 22.1.3.11
except that the THIS object’s [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the INDEXOF method is 1.

%TypedArray%.prototype.join ( separator )

%TypedArray%.PROTOTYPE.JOIN is a distinct function that implements the
same algorithm as ARRAY.PROTOTYPE.JOIN as defined in 22.1.3.12 except
that the THIS object’s [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

%TypedArray%.prototype.keys ( )

The following steps are taken:

1.  Let _O_ be the THIS value.

2.  Let _valid_ be ValidateTypedArray(_O_).

3.  ReturnIfAbrupt(_valid_).

4.  Return CreateArrayIterator(_O_, "KEY").

%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )

%TypedArray%.PROTOTYPE.LASTINDEXOF is a distinct function that
implements the same algorithm as ARRAY.PROTOTYPE.LASTINDEXOF as defined
in 22.1.3.14 except that the THIS object’s [[ArrayLength]] internal slot
is accessed in place of performing a [[Get]] of "LENGTH". The
implementation of the algorithm may be optimized with the knowledge that
the THIS value is an object that has a fixed length and whose integer
indexed properties are not sparse. However, such optimization must not
introduce any observable changes in the specified behaviour of the
algorithm.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the LASTINDEXOF method is 1.

get %TypedArray%.prototype.length

%TypedArray%.PROTOTYPE.LENGTH is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[TypedArrayName]] internal slot, throw a
    TYPEERROR exception.

4.  Assert: _O_ has [[ViewedArrayBuffer]] and [[ArrayLength]] internal
    slots.

5.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

6.  If IsDetachedBuffer(_buffer_) is TRUE, return 0.

7.  Let _length_ be the value of _O_’s [[ArrayLength]] internal slot.

8.  Return _length_.

This function is not generic. The THIS value must be an object with a
[[TypedArrayName]] internal slot.

%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )

The interpretation and use of the arguments of
%TypedArray%.PROTOTYPE.MAP are the same as for ARRAY.PROTOTYPE.MAP as
defined in 22.1.3.15.

When the MAP method is called with one or two arguments, the following
steps are taken:

1.  Let _O_ be the THIS value.

2.  Let _valid_ be ValidateTypedArray(_O_).

3.  ReturnIfAbrupt(_valid_).

4.  Let _len_ be the value of _O’s_ [[ArrayLength]] internal slot.

5.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

6.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

7.  Let _defaultConstructor_ be the intrinsic object listed in column
    one of Table 49 for the value of _O_’s [[TypedArrayName]] internal
    slot.

8.  Let _C_ be SpeciesConstructor(_O_, _defaultConstructor_).

9.  ReturnIfAbrupt(_C_).

10. Let _A_ be AllocateTypedArray(_C_, _len_).

11. ReturnIfAbrupt(_A_).

12. Let _k_ be 0.

13. Repeat, while _k_ < _len

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kValue_ be Get(_O_, _Pk_).

    c.  ReturnIfAbrupt(_kValue_).

    d.  Let _mappedValue_ be Call(_callbackfn_, _T_, «_kValue_, _k_,
        _O_»).

    e.  ReturnIfAbrupt(_mappedValue_).

    f.  Let _status_ be Set(_A_, _Pk_, _mappedValue_, TRUE ).

    g.  ReturnIfAbrupt(_status_).

    h.  Increase _k_ by 1.

14. Return _A_.

This function is not generic. The THIS value must be an object with a
[[TypedArrayName]] internal slot.

The LENGTH property of the MAP method is 1.

%TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )

%TypedArray%.PROTOTYPE.REDUCE is a distinct function that implements the
same algorithm as ARRAY.PROTOTYPE.REDUCE as defined in 22.1.3.18 except
that the THIS object’s [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm and must take into
account the possibility that calls to _callbackfn_ may cause the THIS
value to become detached.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the REDUCE method is 1.

%TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )

%TypedArray%.PROTOTYPE.REDUCERIGHT is a distinct function that
implements the same algorithm as ARRAY.PROTOTYPE.REDUCERIGHT as defined
in 22.1.3.19 except that the THIS object’s [[ArrayLength]] internal slot
is accessed in place of performing a [[Get]] of "LENGTH". The
implementation of the algorithm may be optimized with the knowledge that
the THIS value is an object that has a fixed length and whose integer
indexed properties are not sparse. However, such optimization must not
introduce any observable changes in the specified behaviour of the
algorithm and must take into account the possibility that calls to
_callbackfn_ may cause the THIS value to become detached.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the REDUCERIGHT method is 1.

%TypedArray%.prototype.reverse ( )

%TypedArray%.PROTOTYPE.REVERSE is a distinct function that implements
the same algorithm as ARRAY.PROTOTYPE.REVERSE as defined in 22.1.3.20
except that the THIS object’s [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

%TypedArray%.prototype.set ( overloaded [ , offset ])

%TypedArray%.PROTOTYPE.SET is a single function whose behaviour is
overloaded based upon the type of its first argument.

This function is not generic. The THIS value must be an object with a
[[TypedArrayName]] internal slot.

  The LENGTH property of the SET method is 1.

%TypedArray%.prototype.set (array [ , offset ] )

Sets multiple values in this _TypedArray_, reading the values from the
object _array_. The optional _offset_ value indicates the first element
index in this _TypedArray_ where values are written. If omitted, it is
assumed to be 0.

1.  Assert: _array_ is any ECMAScript language value other than an
    Object with a [[TypedArrayName]] internal slot. If it is such an
    Object, the definition in 22.2.3.22.2 applies.

2.  Let _target_ be the THIS value.

3.  If Type(_target_) is not Object, throw a TYPEERROR exception.

4.  If _target_ does not have a [[TypedArrayName]] internal slot, throw
    a TYPEERROR exception.

5.  Assert: _target_ has a [[ViewedArrayBuffer]] internal slot.

6.  Let _targetOffset_ be ToInteger (_offset_).

7.  ReturnIfAbrupt(_targetOffset_).

8.  If _targetOffset_ < 0, throw a RANGEERROR exception.

9.  Let _targetBuffer_ be the value of _target_’s [[ViewedArrayBuffer]]
    internal slot.

10. If IsDetachedBuffer(_targetBuffer_) is TRUE, throw a TYPEERROR
    exception.

11. Let _targetLength_ be the value of _target_’s [[ArrayLength]]
    internal slot.

12. Let _targetName_ be the string value of _target_’s
    [[TypedArrayName]] internal slot.

13. Let _targetElementSize_ be the Number value of the Element Size
    value specified in Table 49 for _targetName_.

14. Let _targetType_ be the string value of the Element Type value in
    Table 49 for _targetName_.

15. Let _targetByteOffset_ be the value of _target_’s [[ByteOffset]]
    internal slot.

16. Let _src_ be ToObject(_array_).

17. ReturnIfAbrupt(_src_).

18. Let _srcLength_ be ToLength(Get(_src_, "LENGTH")).

19. 20. ReturnIfAbrupt(_srcLength_).

21. If _srcLength_ + _targetOffset_ > _targetLength_, throw a RANGEERROR
    exception.

22. Let _targetByteIndex_ be _targetOffset_ × _targetElementSize_ +
    _targetByteOffset_.

23. Let _k_ be 0.

24. Let _limit_ be _targetByteIndex_ + _targetElementSize_ ×
    _srcLength_.

25. Repeat, while _targetByteIndex_ < _limit

    a.  Let _Pk_ be ToString(_k_).

    b.  Let _kNumber_ be ToNumber(Get(_src_, _Pk_)).

    c.  d.  ReturnIfAbrupt(_kNumber_).

    e.  If IsDetachedBuffer(_targetBuffer_) is TRUE, throw a TYPEERROR
        exception.

    f.  Perform SetValueInBuffer(_targetBuffer_, _targetByteIndex_,
        _targetType_, _kNumber_).

    g.  Set _k_ to _k_ + 1.

    h.  Set _targetByteIndex_ to _targetByteIndex_ +
        _targetElementSize_.

26. Return UNDEFINED.

%TypedArray%.prototype.set(typedArray [, offset ] )

Sets multiple values in this _TypedArray_, reading the values from the
_typedArray_ argument object. The optional _offset_ value indicates the
first element index in this _TypedArray_ where values are written. If
omitted, it is assumed to be 0.

1.  Assert: _typedArray_ has a [[TypedArrayName]] internal slot. If it
    does not, the definition in 22.2.3.22.1 applies.

2.  Let _target_ be the THIS value.

3.  If Type(_target_) is not Object, throw a TYPEERROR exception.

4.  If _target_ does not have a [[TypedArrayName]] internal slot, throw
    a TYPEERROR exception.

5.  Assert: _target_ has a [[ViewedArrayBuffer]] internal slot.

6.  Let _targetOffset_ be ToInteger (_offset_).

7.  ReturnIfAbrupt(_targetOffset_).

8.  If _targetOffset_ < 0, throw a RANGEERROR exception.

9.  Let _targetBuffer_ be the value of _target_’s [[ViewedArrayBuffer]]
    internal slot.

10. If IsDetachedBuffer(_targetBuffer_) is TRUE, throw a TYPEERROR
    exception.

11. Let _targetLength_ be the value of _target_’s [[ArrayLength]]
    internal slot.

12. Let _srcBuffer_ be the value of _typedArray_’s [[ViewedArrayBuffer]]
    internal slot.

13. If IsDetachedBuffer(_srcBuffer_) is TRUE, throw a TYPEERROR
    exception.

14. Let _targetName_ be the string value of _target_’s
    [[TypedArrayName]] internal slot.

15. Let _targetType_ be the string value of the Element Type value in
    Table 49 for _targetName_.

16. Let _targetElementSize_ be the Number value of the Element Size
    value specified in Table 49 for _targetName_.

17. Let _targetByteOffset_ be the value of _target_’s [[ByteOffset]]
    internal slot.

18. Let _srcName_ be the string value of _typedArray_’s
    [[TypedArrayName]] internal slot.

19. Let _srcType_ be the string value of the Element Type value in Table
    49 for _srcName_ .

20. Let _srcElementSize_ be the Number value of the Element Size value
    specified in Table 49 for _srcName_.

21. Let _srcLength_ be the value of _typedArray_’s [[ArrayLength]]
    internal slot.

22. Let _srcByteOffset_ be the value of _typedArray_’s [[ByteOffset]]
    internal slot.

23. If _srcLength_ + _targetOffset_ > _targetLength_, throw a RANGEERROR
    exception.

24. If SameValue(_srcBuffer_, _targetBuffer_) is TRUE, then

    a.  Let _srcBuffer_ be CloneArrayBuffer(_targetBuffer_,
        _srcByteOffset_, %ArrayBuffer%).

    b.  NOTE: %ArrayBuffer% is used to clone _targetBuffer_ because is
        it known to not have any observable side-effects.

    c.  ReturnIfAbrupt(_srcBuffer_).

    d.  Let _srcByteIndex_ be 0.

25. Else, let _srcByteIndex_ be _srcByteOffset_.

26. Let _targetByteIndex_ be _targetOffset_ × _targetElementSize_ +
    _targetByteOffset_.

27. Let _limit_ be _targetByteIndex_ + _targetElementSize_ ×
    _srcLength_.

28. If SameValue(_srcType_, _targetType_) is FALSE, then

    a.  Repeat, while _targetByteIndex_ < _limit_

        i.  Let _value_ be GetValueFromBuffer(_srcBuffer_,
            _srcByteIndex_, _srcType_).

        ii. Perfrom SetValueInBuffer (_targetBuffer_, _targetByteIndex_,
            _targetType_, _value_).

        iii. Set _srcByteIndex_ to _srcByteIndex_ + _srcElementSize_.

        iv. Set _targetByteIndex_ to _targetByteIndex_ +
            _targetElementSize_.

29. Else,

    a.  NOTE: If _srcType_ and _targetType_ are the same the transfer
        must be performed in a manner that preserves the bit-level
        encoding of the source data.

    b.  Repeat, while _targetByteIndex_ < _limit_

        i.  Let _value_ be GetValueFromBuffer(_srcBuffer_,
            _srcByteIndex_, "UINT8").

        ii. Perform SetValueInBuffer (_targetBuffer_, _targetByteIndex_,
            "UINT8", _value_).

        iii. Set _srcByteIndex_ to _srcByteIndex_ + 1.

        iv. Set _targetByteIndex_ to _targetByteIndex_ + 1.

30. Return UNDEFINED.

%TypedArray%.prototype.slice ( start, end )

The interpretation and use of the arguments of
%TypedArray%.PROTOTYPE.SLICE are the same as for ARRAY.PROTOTYPE.SLICE
as defined in 22.1.3.22. The following steps are taken:

1.  Let _O_ be the THIS value.

2.  Let _valid_ be ValidateTypedArray(_O_).

3.  ReturnIfAbrupt(_valid_).

4.  Let _len_ be the value of _O’s_ [[ArrayLength]] internal slot.

5.  Let _relativeStart_ be ToInteger(_start_).

6.  ReturnIfAbrupt(_relativeStart_).

7.  If _relativeStart_ < 0, let _k_ be max((_len_ + _relativeStart_),0);
    else let _k_ be min(_relativeStart_, _len_).

8.  If _end_ is UNDEFINED, let _relativeEnd_ be _len_; else let
    _relativeEnd_ be ToInteger(_end_).

9.  ReturnIfAbrupt(_relativeEnd_).

10. If _relativeEnd_ < 0, let _final_ be max((_len_ + _relativeEnd_),0);
    else let _final_ be min(_relativeEnd_, _len_).

11. Let _count_ be max(_final_ – _k_, 0).

12. Let _defaultConstructor_ be the intrinsic object listed in column
    one of Table 49 for the value of _O_’s [[TypedArrayName]] internal
    slot.

13. Let _C_ be SpeciesConstructor(_O_, _defaultConstructor_).

14. ReturnIfAbrupt(_C_).

15. Let _A_ be AllocateTypedArray(_C_, _count_).

16. ReturnIfAbrupt(_A_).

17. Let _srcName_ be the string value of _O’s_ [[TypedArrayName]]
    internal slot.

18. Let _srcType_ be the string value of the Element Type value in Table
    49 for _srcName_.

19. Let _targetName_ be the string value of _A’s_ [[TypedArrayName]]
    internal slot.

20. Let _targetType_ be the string value of the Element Type value in
    Table 49 for _targetName_.

21. 22. If SameValue(_srcType_, _targetType_) is FALSE, then

    a.  Let _n_ be 0.

    b.  Repeat, while _k_ < _final_

        i.  Let _Pk_ be ToString(_k_).

        ii. Let _kValue_ be Get(_O_, _Pk_).

        iii. ReturnIfAbrupt(_kValue_).

        iv. Let _status_ be Set(_A_, ToString(_n_), _kValue_, TRUE ).

        v.  ReturnIfAbrupt(_status_).

        vi. Increase _k_ by 1.

        vii. Increase _n_ by 1.

23. Else if _count_ > 0,

    a.  Let _srcBuffer_ be the value of _O_’s [[ViewedArrayBuffer]]
        internal slot.

    b.  If IsDetachedBuffer(_srcBuffer_) is TRUE, throw a TYPEERROR
        exception.

    c.  Let _targetBuffer_ be the value of _A_’s [[ViewedArrayBuffer]]
        internal slot.

    d.  Let _elementSize_ be the Number value of the Element Size value
        specified in Table 49 for _srcType_.

    e.  NOTE: If _srcType_ and _targetType_ are the same the transfer
        must be performed in a manner that preserves the bit-level
        encoding of the source data.

    f.  Let _srcByteOffet_ be the value of _O_’s [[ByteOffset]] internal
        slot.

    g.  Let _targetByteIndex_ be 0.

    h.  Let _srcByteIndex_ be (_k_ × _elementSize_) + _srcByteOffet_.

    i.  Repeat, while _targetByteIndex_ < _count_ × _elementSize_

        i.  Let _value_ be GetValueFromBuffer(_srcBuffer_,
            _srcByteIndex_, "UINT8").

        ii. Perform SetValueInBuffer (_targetBuffer_, _targetByteIndex_,
            "UINT8", _value_).

        iii. Increase _srcByteIndex_ by 1.

        iv. Increase _targetByteIndex_ by 1.

24. Return _A_.

This function is not generic. The THIS value must be an object with a
[[TypedArrayName]] internal slot.

The LENGTH property of the SLICE method is 2.

%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )

%TypedArray%.PROTOTYPE.SOME is a distinct function that implements the
same algorithm as ARRAY.PROTOTYPE.SOME as defined in 22.1.3.23 except
that the THIS object’s [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "LENGTH". The implementation of the
algorithm may be optimized with the knowledge that the THIS value is an
object that has a fixed length and whose integer indexed properties are
not sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm and must take into
account the possibility that calls to _callbackfn_ may cause the THIS
value to become detached.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

The LENGTH property of the SOME method is 1.

%TypedArray%.prototype.sort ( comparefn )

%TypedArray%.PROTOTYPE.SORT is a distinct function that, except as
described below, implements the same requirements as those of
ARRAY.PROTOTYPE.SORT as defined in 22.1.3.24. The implementation of the
%TypedArray%.PROTOTYPE.SORT specification may be optimized with the
knowledge that the THIS value is an object that has a fixed length and
whose integer indexed properties are not sparse. The only internal
methods of the THIS object that the algorithm may call are [[Get]] and
[[Set]].

This function is not generic. The THIS value must be an object with a
[[TypedArrayName]] internal slot.

Upon entry, the following steps are performed to initialize evaluation
of the SORT function. These steps are used instead of the entry steps in
22.1.3.24:

1.  Let _obj_ be the THIS value as the argument.

2.  Let _buffer_ be ValidateTypedArray(_obj_).

3.  ReturnIfAbrupt(_buffer_).

4.  Let _len_ be the value of _obj_’s [[ArrayLength]] internal slot.

The implementation defined sort order condition for exotic objects is
not applied by %TypedArray%.PROTOTYPE.SORT.

The following version of SortCompare is used by
%TypedArray%.PROTOTYPE.SORT. It performs a numeric comparison rather
than the string comparison used in 22.1.3.24. SortCompare has access to
the _comparefn_ and _buffer_ values of the current invocation of the
SORT method.

When the TypedArray SortCompare abstract operation is called with two
arguments _x_ and _y_, the following steps are taken:

1.  Assert: Both Type(_x_) and Type(_y_) is Number.

2.  If the argument _comparefn_ is not UNDEFINED, then

    a.  Let _v_ be Call(_comparefn_, UNDEFINED, «_x_, _y_»).

    b.  ReturnIfAbrupt(_v_).

    c.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR
        exception.

    d.  If _v_ is NAN, return +0.

    e.  Return _v_.

3.  If _x_ and _y_ are both NAN, return +0.

4.  If _x_ is NAN, return 1.

5.  If _y_ is NAN, return −1.

6.  If _x_ < _y_, return −1.

7.  If _x_ > _y_, return 1.

8.  If _x_ is −0 and _y_ is +0, return −1.

9.  If _x_ is +0 and _y_ is −0, return 1.

10. Return +0.

NOTE Because NAN always compares greater than any other value, NAN
property values always sort to the end of the result when _comparefn_ is
not provided.

%TypedArray%.prototype.subarray( [ begin [ , end ] ] )

Returns a new _TypedArray_ object whose element type is the same as this
_TypedArray_ and whose ArrayBuffer is the same as the ArrayBuffer of
this _TypedArray_, referencing the elements at _begin_, inclusive, up to
_end_, exclusive. If either _begin_ or _end_ is negative, it refers to
an index from the end of the array, as opposed to from the beginning.

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[TypedArrayName]] internal slot, throw a
    TYPEERROR exception.

4.  Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.

5.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

6.  Let _srcLength_ be the value of _O_’s [[ArrayLength]] internal slot.

7.  Let _relativeBegin_ be ToInteger(_begin_).

8.  ReturnIfAbrupt(_relativeBegin_).

9.  If _relativeBegin_ < 0, let _beginIndex_ be max((_srcLength_ +
    _relativeBegin_), 0); else

10. let _beginIndex_ be min(_relativeBegin_, _srcLength_).

11. If _end_ is UNDEFINED, let _relativeEnd_ be _srcLength_; else, l

12. et _relativeEnd_ be ToInteger(_end_).

13. ReturnIfAbrupt(_relativeEnd_).

14. If _relativeEnd_ < 0, let _endIndex_ be max((_srcLength_ +
    _relativeEnd_), 0); else

15. let _endIndex_ be min(_relativeEnd_, _srcLength_).

16. 17. Let _newLength_ be max(_endIndex_ – _beginIndex_, 0).

18. Let _constructorName_ be the string value of _O_’s
    [[TypedArrayName]] internal slot.

19. Let _elementSize_ be the Number value of the Element Size value
    specified in Table 49 for _constructorName_.

20. Let _srcByteOffset_ be the value of _O_’s [[ByteOffset]] internal
    slot.

21. Let _beginByteOffset_ be _srcByteOffset_ + _beginIndex_ ×
    _elementSize_.

22. Let _defaultConstructor_ be the intrinsic object listed in column
    one of Table 49 for _constructorName_.

23. Let _constructor_ be SpeciesConstructor(_O_, _defaultConstructor_).

24. ReturnIfAbrupt(_constructor_).

25. Let _argumentsList_ be «_buffer_, _beginByteOffset_, _newLength_».

26. Return Construct(_constructor_, _argumentsList_).

This function is not generic. The THIS value must be an object with a
[[TypedArrayName]] internal slot.

The LENGTH property of the SUBARRAY method is 2.

%TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])

%TypedArray%.PROTOTYPE.TOLOCALESTRING is a distinct function that
implements the same algorithm as ARRAY.PROTOTYPE. TOLOCALESTRING as
defined in 22.1.3.26 except that the THIS object’s [[ArrayLength]]
internal slot is accessed in place of performing a [[Get]] of "LENGTH".
The implementation of the algorithm may be optimized with the knowledge
that the THIS value is an object that has a fixed length and whose
integer indexed properties are not sparse. However, such optimization
must not introduce any observable changes in the specified behaviour of
the algorithm.

This function is not generic. ValidateTypedArray is applied to the THIS
value prior to evaluating the algorithm. If its result is an abrupt
completion that exception is thrown instead of evaluating the algorithm.

NOTE If the ECMAScript implementation includes the ECMA-402
Internationalization API this function is based upon the algorithm for
ARRAY.PROTOTYPE.TOLOCALESTRING that is in the ECMA-402 specification.

%TypedArray%.prototype.toString ( )

The initial value of the %TypedArray%.PROTOTYPE.TOSTRING data property
is the same built-in function object as the ARRAY.PROTOTYPE.TOSTRING
method defined in 22.1.3.27.

%TypedArray%.prototype.values ( )

The following steps are taken:

1.  Let _O_ be the THIS value.

2.  Let _valid_ be ValidateTypedArray(_O_).

3.  ReturnIfAbrupt(_valid_).

4.  Return CreateArrayIterator(_O_, "VALUE").

%TypedArray%.prototype [ @@iterator ] ( )

The initial value of the @@iterator property is the same function object
as the initial value of the %TypedArray%.PROTOTYPE.VALUES property.

get %TypedArray%.prototype [ @@toStringTag ]

%TypedArray%.PROTOTYPE[@@TOSTRINGTAG] is an accessor property whose set
accessor function is UNDEFINED. Its get accessor function performs the
following steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, return UNDEFINED.

3.  If _O_ does not have a [[TypedArrayName]] internal slot, return
    UNDEFINED.

4.  Let _name_ be the value of _O_’s [[TypedArrayName]] internal slot.

5.  Assert: _name_ is a String value.

6.  Return _name_.

This property has the attributes { [[Enumerable]]: FALSE,
[[Configurable]]: TRUE }.

The initial value of the NAME property of this function is "GET
[SYMBOL.TOSTRINGTAG]".

The _TypedArray_ Constructors

Each of the _TypedArray_ constructor objects is an intrinsic object that
has the structure described below, differing only in the name used as
the constructor name instead of _TypedArray_, in Table 49.

The _TypedArray_ constructors are not intended to be called as a
function and will throw an exception when called in that manner.

The _TypedArray_ constructors are designed to be subclassable. They may
be used as the value of an EXTENDS clause of a class definition.
Subclass constructors that intend to inherit the specified _TypedArray_
behaviour must include a SUPER call to the _TypedArray_ constructor to
create and initialize the subclass instance with the internal state
necessary to support the %TypedArray%.PROTOTYPE built-in methods.

_TypedArray_( ... argumentsList)

A _TypedArray_ constructor with a list of arguments _argumentsList_
performs the following steps:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Let _here_ be the active function.

3.  Let _super_ be _here_.[[GetPrototypeOf]]().

4.  ReturnIfAbrupt(_super_).

5.  If IsConstructor (_super_) is FALSE, throw a TYPEERROR exception.

6.  Let _argumentsList_ be the _argumentsList_ argument of the
    [[Construct]] internal method that invoked the active function.

7.  Return Construct(_super_, _argumentsList_, NewTarget).

Properties of the _TypedArray_ Constructors

The value of the [[Prototype]] internal slot of each _TypedArray_
constructor is the %TypedArray% intrinsic object (22.2.1).

Each _TypedArray_ constructor has a [[TypedArrayConstructorName]]
internal slot property whose value is the String value of the
constructor name specified for it in Table 49.

Each _TypedArray_ constructor has a NAME property whose value is the
String value of the constructor name specified for it in Table 49.

Besides a LENGTH property (whose value is 3), each _TypedArray_
constructor has the following properties:

_TypedArray_.BYTES_PER_ELEMENT

The value of _TypedArray_.BYTES_PER_ELEMENT is the Number value of the
Element Size value specified in Table 49 for _TypedArray_.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

_TypedArray_.prototype

The initial value of _TypedArray_.prototype is the corresponding
_TypedArray_ prototype intrinsic object (22.2.6).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of _TypedArray_ Prototype Objects

The value of the [[Prototype]] internal slot of a _TypedArray_ prototype
object is the intrinsic object %TypedArrayPrototype% (22.2.3). A
_TypedArray_ prototype object is an ordinary object. It does not have a
[[ViewedArrayBuffer]] or any other of the internal slots that are
specific to _TypedArray_ instance objects.

_TypedArray_.prototype.BYTES_PER_ELEMENT

The value of _TypedArray_.PROTOTYPE.BYTES_PER_ELEMENT is the Number
value of the Element Size value specified in Table 49 for _TypedArray_.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

_TypedArray_.prototype.constructor

The initial value of a _TypedArray_.PROTOTYPE.CONSTRUCTOR is the
corresponding %_TypedArray_% intrinsic object.

Properties of _TypedArray_ Instances

_TypedArray_ instances are Integer Indexed exotic objects. Each
_TypedArray_ instance inherits properties from the corresponding
_TypedArray_ prototype object. Each _TypedArray_ instances has the
following internal slots: [[TypedArrayName]], [[ViewedArrayBuffer]],
[[ByteLength]], [[ByteOffset]], and [[ArrayLength]].



KEYED COLLECTION 


Map Objects

Map objects are collections of key/value pairs where both the keys and
values may be arbitrary ECMAScript language values. A distinct key value
may only occur in one key/value pair within the Map’s collection.
Distinct key values are discriminated using the SameValueZero comparison
algorithm.

Map object must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of elements in the collection. The data structures used in
this Map objects specification is only intended to describe the required
observable semantics of Map objects. It is not intended to be a viable
implementation model.

The Map Constructor 

The Map constructor is the %Map% intrinsic object and the initial value
of the MAP property of the global object. When called as a constructor
it creates and initializes a new Map object. MAP is not intended to be
called as a function and will throw an exception when called in that
manner.

The MAP constructor is designed to be subclassable. It may be used as
the value in an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified MAP behaviour must
include a SUPER call to the MAP constructor to create and initialize the
subclass instance with the internal state necessary to support the
MAP.PROTOTYPE built-in methods.

Map ( [ iterable ] ) 

When the MAP function is called with optional argument the following
steps are taken:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Let _map_ be OrdinaryCreateFromConstructor(NewTarget,
    "%MAPPROTOTYPE%", «‍[[MapData]]» ).

3.  ReturnIfAbrupt(_map_).

4.  Set _map’s_ [[MapData]] internal slot to a new empty List.

5.  If _iterable_ is not present, let _iterable_ be UNDEFINED.

6.  If _iterable_ is either UNDEFINED or NULL, let _iter_ be UNDEFINED.

7.  Else,

    a.  Let _adder_ be Get(_map_, "SET").

    b.  ReturnIfAbrupt(_adder_).

    c.  If IsCallable(_adder_) is FALSE, throw a TYPEERROR exception.

    d.  Let _iter_ be GetIterator(_iterable_).

    e.  ReturnIfAbrupt(_iter_).

8.  If _iter_ is UNDEFINED, return _map_.

9.  Repeat

    a.  Let _next_ be IteratorStep(_iter_).

    b.  ReturnIfAbrupt(_next_).

    c.  If _next_ is FALSE, return _map_.

    d.  Let _nextItem_ be IteratorValue(_next_).

    e.  ReturnIfAbrupt(_nextItem_).

    f.  If Type(_nextItem_) is not Object,

        i.  Let _error_ be Completion{[[type]]: throw, [[value]]: a
            newly created TYPEERROR object, [[target]]:empty}.

        ii. Return IteratorClose(_iter_, _error_).

    g.  Let _k_ be Get(_nextItem_, "0").

    h.  If _k_ is an abrupt completion, return IteratorClose(_iter_,
        _k_).

    i.  Let _v_ be Get(_nextItem_, "1").

    j.  If _v_ is an abrupt completion, return IteratorClose(_iter_,
        _v_).

    k.  Let _status_ be Call(_adder_, _map_, «_k_.[[value]],
        _v_.[[value]]»).

    l.  If _status_ is an abrupt completion, return
        IteratorClose(_iter_, _status_).

NOTE If the parameter _iterable_ is present, it is expected to be an
object that implements an @@iterator method that returns an iterator
object that produces a two element array-like object whose first element
is a value that will be used as a Map key and whose second element is
the value to associate with that key.

Properties of the Map Constructor

The value of the [[Prototype]] internal slot of the Map constructor is
the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 0), the Map constructor has
the following properties:

Map.prototype

The initial value of MAP.PROTOTYPE is the intrinsic object
%MapPrototype% (23.1.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

get Map [ @@species ] 

MAP[@@SPECIES] is an accessor property whose set accessor function is
UNDEFINED. Its get accessor function performs the following steps:

1.  Return the THIS value.

The value of the NAME property of this function is "GET
[SYMBOL.SPECIES]".

NOTE Methods that create derived collection objects should call
@@species to determine the constructor to use to create the derived
objects. Subclass constructor may over-ride @@species to change the
default coinstructor assignment.

Properties of the Map Prototype Object

The Map prototype object is the intrinsic object %MapPrototype%. The
value of the [[Prototype]] internal slot of the Map prototype object is
the intrinsic object %ObjectPrototype% (19.1.3). The Map prototype
object is an ordinary object. It does not have a [[MapData]] internal
slot.

Map.prototype.clear ( )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[MapData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _M_’s [[MapData]]
    internal slot.

5.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  Set _p_.[[key]] to empty_._

    b.  Set _p_.[[value]] to empty_._

6.  Return UNDEFINED.

NOTE The existing [[MapData]] List is preserved because there may be
existing MapIterator objects that are suspended midway through iterating
over that List.

Map.prototype.constructor

The initial value of MAP.PROTOTYPE.CONSTRUCTOR is the intrinsic object
%Map%.

Map.prototype.delete ( key )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[MapData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _M_’s [[MapData]]
    internal slot.

5.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValueZero(_p_.[[key]],
        _key_) is TRUE, then

        i.  Set _p_.[[key]] to empty_._

        ii. Set _p_.[[value]] to empty_._

        iii. Return TRUE.

6.  Return FALSE.

NOTE The value EMPTY is used as a specification device to indicate that
an entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

Map.prototype.entries ( )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  Return CreateMapIterator(_M_, "KEY+VALUE").

Map.prototype.forEach ( callbackfn [ , thisArg ] )

When the FOREACH method is called with one or two arguments, the
following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[MapData]] internal slot, throw a TYPEERROR
    exception.

4.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

5.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

6.  Let _entries_ be the List that is the value of _M_’s [[MapData]]
    internal slot.

7.  Repeat for each Record {[[key]], [[value]]} _e_ that is an element
    of _entries,_ in original key insertion order

    a.  If _e_.[[key]] is not empty, then

        i.  Let _funcResult_ be Call(_callbackfn_, _T_, «_e_.[[value]],
            _e_.[[key]], _M_»).

        ii. ReturnIfAbrupt(_funcResult_).

8.  Return UNDEFINED.

The LENGTH property of the FOREACH method is 1.

NOTE _callbackfn_ should be a function that accepts three arguments.
FOREACH calls _callbackfn_ once for each key/value pair present in the
map object, in key insertion order. _callbackfn_ is called only for keys
of the map which actually exist; it is not called for keys that have
been deleted from the map.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _callbackfn_. If it is not provided, UNDEFINED is
used instead.

_callbackfn_ is called with three arguments: the value of the item, the
key of the item, and the Map object being traversed.

FOREACH does not directly mutate the object on which it is called but
the object may be mutated by the calls to _callbackfn_. Each entry of a
map’s [[MapData]] is only visited once. New keys added after the call to
FOREACH begins are visited. A key will be revisited if it is deleted
after it has been visited and then re-added before the FOREACH call
completes. Keys that are deleted after the call to FOREACH begins and
before being visited are not visited unless the key is added again
before the FOREACH call completes.

Map.prototype.get ( key )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[MapData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _M_’s [[MapData]]
    internal slot.

5.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValueZero(_p_.[[key]],
        _key_) is TRUE, return _p_.[[value]].

6.  Return UNDEFINED.

Map.prototype.has ( key )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[MapData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _M_’s [[MapData]]
    internal slot.

5.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValueZero(_p_.[[key]],
        _key_) is TRUE, return TRUE_._

6.  Return FALSE.

Map.prototype.keys ( )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  Return CreateMapIterator(_M_, "KEY").

Map.prototype.set ( key , value )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[MapData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _M_’s [[MapData]]
    internal slot.

5.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValueZero(_p_.[[key]],
        _key_) is TRUE, then

        i.  Set _p_.[[value]] to _value._

        ii. Return _M_.

6.  If _key_ is −0, let _key_ be +0.

7.  Let _p_ be the Record {[[key]]: _key_, [[value]]: _value_}.

8.  Append _p_ as the last element of _entries_.

9.  Return _M_.

get Map.prototype.size

Map.prototype.size is an accessor property whose set accessor function
is UNDEFINED. Its get accessor function performs the following steps:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[MapData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _M_’s [[MapData]]
    internal slot.

5.  Let _count_ be 0.

6.  For each Record {[[key]], [[value]]} _p_ that is an element of
    _entries_

    a.  If _p_.[[key]] is not empty, set _count_ to _count_+1.

7.  Return _count_.

Map.prototype.values ( )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  Return CreateMapIterator(_M_, "VALUE").

Map.prototype [ @@iterator ]( )

The initial value of the @@iterator property is the same function object
as the initial value of the ENTRIES property.

Map.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"MAP".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Map Instances

Map instances are ordinary objects that inherit properties from the Map
prototype. Map instances also have a [[MapData]] internal slot.

Map Iterator Objects 

A Map Iterator is an object, that represents a specific iteration over
some specific Map instance object. There is not a named constructor for
Map Iterator objects. Instead, map iterator objects are created by
calling certain methods of Map instance objects.

CreateMapIterator Abstract Operation

Several methods of Map objects return Iterator objects. The abstract
operation CreateMapIterator with arguments _map_ and _kind_ is used to
create such iterator objects. It performs the following steps:

1.  If Type(_map_) is not Object, throw a TYPEERROR exception.

2.  If _map_ does not have a [[MapData]] internal slot, throw a
    TYPEERROR exception.

3.  Let _iterator_ be ObjectCreate(%MapIteratorPrototype%, «‍[[Map]],
    [[MapNextIndex]], [[MapIterationKind]]»).

4.  Set _iterator’s_ [[Map]] internal slot to _map_.

5.  Set _iterator’s_ [[MapNextIndex]] internal slot to 0.

6.  Set _iterator’s_ [[MapIterationKind]] internal slot to _kind_.

7.  Return _iterator_.

The %MapIteratorPrototype% Object

All Map Iterator Objects inherit properties from the
%MapIteratorPrototype% intrinsic object. The %MapIteratorPrototype%
intrinsic object is an ordinary object and its [[Prototype]] internal
slot is the %IteratorPrototype% intrinsic object (25.1.2). In addition,
%MapIteratorPrototype% has the following properties:

%MapIteratorPrototype%.next ( )

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have all of the internal slots of a Map Iterator
    Instance (23.1.5.3), throw a TYPEERROR exception.

4.  Let _m_ be the value of the [[Map]] internal slot of _O_.

5.  Let _index_ be the value of the [[MapNextIndex]] internal slot of
    _O_.

6.  Let _itemKind_ be the value of the [[MapIterationKind]] internal
    slot of _O_.

7.  If _m_ is UNDEFINED, return CreateIterResultObject(UNDEFINED, TRUE).

8.  Assert: _m_ has a [[MapData]] internal slot.

9.  Let _entries_ be the List that is the value of the [[MapData]]
    internal slot of _m_.

10. Repeat while _index_ is less than the total number of elements of
    _entries_. The number of elements must be redetermined each time
    this method is evaluated.

    a.  Let _e_ be the Record {[[key]], [[value]]} that is the value of
        _entries_[_index_].

    b.  Set _index_ to _index_+1.

    c.  Set the [[MapNextIndex]] internal slot of _O_ to _index_.

    d.  If _e_.[[key]] is not empty, then

        i.  If _itemKind_ is "KEY", let _result_ be _e_.[[key]].

        ii. Else if _itemKind_ is "VALUE", let _result_ be
            _e_.[[value]].

        iii. Else,

            1.  Assert: _itemKind_ is "KEY+VALUE".

            2.  Let _result_ be CreateArrayFromList(«_e_.[[key]],
                _e_.[[value]]»).

        iv. Return CreateIterResultObject(_result_, FALSE).

11. Set the [[Map]] internal slot of _O_ to UNDEFINED.

12. Return CreateIterResultObject(UNDEFINED, TRUE).

%MapIteratorPrototype% [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value "MAP
ITERATOR".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Map Iterator Instances

Map Iterator instances are ordinary objects that inherit properties from
the %MapIteratorPrototype% intrinsic object. Map Iterator instances are
initially created with the internal slots described in Table 50.

Table 50 — Internal Slots of Map Iterator Instances

  ---------------------- ------------------------------------------------------------------------------------------------------------------------------------------------
  _INTERNAL SLOT_        _DESCRIPTION_
  [[Map]]                The Map object that is being iterated.
  [[MapNextIndex]]       The integer index of the next Map data element to be examined by this iterator.
  [[MapIterationKind]]   A string value that identifies what is to be returned for each element of the iteration. The possible values are: "KEY", "VALUE", "KEY+VALUE".
  ---------------------- ------------------------------------------------------------------------------------------------------------------------------------------------


Set Objects

Set objects are collections of ECMAScript language values. A distinct
value may only occur once as an element of a Set’s collection. Distinct
values are discriminated using the SameValueZero comparison algorithm.

Set objects must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of elements in the collection. The data structures used in
this Set objects specification is only intended to describe the required
observable semantics of Set objects. It is not intended to be a viable
implementation model.

The Set Constructor 

The Set constructor is the %Set% intrinsic object and the initial value
of the SET property of the global object. When called as a constructor
it creates and initializes a new Set object. SET is not intended to be
called as a function and will throw an exception when called in that
manner.

The SET constructor is designed to be subclassable. It may be used as
the value in an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified SET behaviour must
include a SUPER call to the SET constructor to create and initialize the
subclass instance with the internal state necessary to support the
SET.PROTOTYPE built-in methods.

Set ( [ iterable ] )

When the SET function is called with optional argument _iterable_ the
following steps are taken:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Let _set_ be OrdinaryCreateFromConstructor(NewTarget,
    "%SETPROTOTYPE%", «‍[[SetData]]» ).

3.  ReturnIfAbrupt(_set_).

4.  Set _set’s_ [[SetData]] internal slot to a new empty List.

5.  If _iterable_ is not present, let _iterable_ be UNDEFINED.

6.  If _iterable_ is either UNDEFINED or NULL, let _iter_ be UNDEFINED.

7.  Else,

    a.  Let _adder_ be Get(_set_, "ADD").

    b.  ReturnIfAbrupt(_adder_).

    c.  If IsCallable(_adder_) is FALSE, throw a TYPEERROR exception.

    d.  Let _iter_ be GetIterator(_iterable_).

    e.  ReturnIfAbrupt(_iter_).

8.  If _iter_ is UNDEFINED, return _set_.

9.  Repeat

    a.  Let _next_ be IteratorStep(_iter_).

    b.  ReturnIfAbrupt(_next_).

    c.  If _next_ is FALSE, return _set_.

    d.  Let _nextValue_ be IteratorValue(_next_).

    e.  ReturnIfAbrupt(_nextValue_).

    f.  Let _status_ be Call(_adder_, _set_, «_nextValue_.[[value]]»).

    g.  If _status_ is an abrupt completion, return
        IteratorClose(_iter_, _status_).

Properties of the Set Constructor

The value of the [[Prototype]] internal slot of the Set constructor is
the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 0), the Set constructor has
the following properties:

Set.prototype

The initial value of SET.PROTOTYPE is the intrinsic %SetPrototype%
object (23.2.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

get Set [ @@species ] 

SET[@@SPECIES] is an accessor property whose set accessor function is
UNDEFINED. Its get accessor function performs the following steps:

1.  Return the THIS value.

The value of the NAME property of this function is "GET
[SYMBOL.SPECIES]".

NOTE Methods that create derived collection objects should call
@@species to determine the constructor to use to create the derived
objects. Subclass constructor may over-ride @@species to change the
default coinstructor assignment.

Properties of the Set Prototype Object

The Set prototype object is the intrinsic object %SetPrototype%. The
value of the [[Prototype]] internal slot of the Set prototype object is
the intrinsic object %ObjectPrototype% (19.1.3). The Set prototype
object is an ordinary object. It does not have a [[SetData]] internal
slot.

Set.prototype.add ( value )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[SetData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _S_’s [[SetData]]
    internal slot.

5.  Repeat for each _e_ that is an element of _entries,

    a.  If _e_ is not empty and SameValueZero(_e_, _value_) is TRUE,
        then

        i.  Return _S_.

6.  If _value_ is −0, let _value_ be +0.

7.  Append _value_ as the last element of _entries_.

8.  Return _S_.

Set.prototype.clear ( )

The following steps are taken:

1.  Let _S_ be THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[SetData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _S_’s [[SetData]]
    internal slot.

5.  Repeat for each _e_ that is an element of _entries,

    a.  Replace the element of _entries_ whose value is _e_ with an
        element whose value is empty_._

6.  Return UNDEFINED.

Set.prototype.constructor

The initial value of SET.PROTOTYPE.CONSTRUCTOR is the intrinsic object
%Set%.

Set.prototype.delete ( value )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[SetData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _S_’s [[SetData]]
    internal slot.

5.  Repeat for each _e_ that is an element of _entries_,

    a.  If _e_ is not empty and SameValueZero(_e_, _value_) is TRUE,
        then

        i.  Replace the element of _entries_ whose value is _e_ with an
            element whose value is empty_._

        ii. Return TRUE.

6.  Return FALSE.

NOTE The value EMPTY is used as a specification device to indicate that
an entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

Set.prototype.entries ( )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateSetIterator(_S_, "KEY+VALUE").

NOTE For iteration purposes, a Set appears similar to a Map where each
entry has the same value for its key and value.

Set.prototype.forEach ( callbackfn [ , thisArg ] )

When the FOREACH method is called with one or two arguments, the
following steps are taken:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[SetData]] internal slot, throw a TYPEERROR
    exception.

4.  If IsCallable(_callbackfn_) is FALSE, throw a TYPEERROR exception.

5.  If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be
    UNDEFINED.

6.  Let _entries_ be the List that is the value of _S_’s [[SetData]]
    internal slot.

7.  Repeat for each _e_ that is an element of _entries,_ in original
    insertion order

    a.  If _e_ is not empty, then

        i.  Let _funcResult_ be Call(_callbackfn_, _T_, «_e_, _e_,
            _S_»).

        ii. ReturnIfAbrupt(_funcResult_).

8.  Return UNDEFINED.

The LENGTH property of the FOREACH method is 1.

NOTE _callbackfn_ should be a function that accepts three arguments.
FOREACH calls _callbackfn_ once for each value present in the set
object, in value insertion order. _callbackfn_ is called only for values
of the Set which actually exist; it is not called for keys that have
been deleted from the set.

If a _thisArg_ parameter is provided, it will be used as the THIS value
for each invocation of _callbackfn_. If it is not provided, UNDEFINED is
used instead.

_callbackfn_ is called with three arguments: the first two arguments are
a value contained in the Set. The same value is passed for both
arguments. The Set object being traversed is passed as the third
argument.

The _callbackfn_ is called with three arguments to be consistent with
the call back functions used by FOREACH methods for Map and Array. For
Sets, each item value is considered to be both the key and the value.

FOREACH does not directly mutate the object on which it is called but
the object may be mutated by the calls to _callbackfn_.

Each value is normally visited only once. However, a value will be
revisited if it is deleted after it has been visited and then re-added
before the FOREACH call completes. Values that are deleted after the
call to FOREACH begins and before being visited are not visited unless
the value is added again before the FOREACH call completes. New values
added after the call to FOREACH begins are visited.

Set.prototype.has ( value )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[SetData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _S_’s [[SetData]]
    internal slot.

5.  Repeat for each _e_ that is an element of _entries,

    a.  If _e_ is not empty and SameValueZero(_e_, _value_) is TRUE,
        return TRUE_._

6.  Return FALSE.

Set.prototype.keys ( )

The initial value of the KEYS property is the same function object as
the initial value of the VALUES property.

NOTE For iteration purposes, a Set appears similar to a Map where each
entry has the same value for its key and value.

get Set.prototype.size

SET.PROTOTYPE.SIZE is an accessor property whose set accessor function
is UNDEFINED. Its get accessor function performs the following steps:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[SetData]] internal slot, throw a TYPEERROR
    exception.

4.  Let _entries_ be the List that is the value of _S_’s [[SetData]]
    internal slot.

5.  Let _count_ be 0.

6.  For each _e_ that is an element of _entries

    a.  If _e_ is not empty, set _count_ to _count_+1.

7.  Return _count_.

Set.prototype.values ( )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateSetIterator(_S_, "VALUE").

Set.prototype [ @@iterator ] ( )

The initial value of the @@iterator property is the same function object
as the initial value of the VALUES property.

Set.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"SET".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Set Instances

Set instances are ordinary objects that inherit properties from the Set
prototype. Set instances also have a [[SetData]] internal slot.

Set Iterator Objects

A Set Iterator is an ordinary object, with the structure defined below,
that represents a specific iteration over some specific Set instance
object. There is not a named constructor for Set Iterator objects.
Instead, set iterator objects are created by calling certain methods of
Set instance objects.

CreateSetIterator Abstract Operation

Several methods of Set objects return Iterator objects. The abstract
operation CreateSetIterator with arguments _set_ and _kind_ is used to
create such iterator objects. It performs the following steps:

1.  If Type(_set_) is not Object, throw a TYPEERROR exception.

2.  If _set_ does not have a [[SetData]] internal slot, throw a
    TYPEERROR exception.

3.  Let _iterator_ be ObjectCreate(%SetIteratorPrototype%,
    «‍[[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]]»).

4.  Set _iterator’s_ [[IteratedSet]] internal slot to _set_.

5.  Set _iterator’s_ [[SetNextIndex]] internal slot to 0.

6.  Set _iterator’s_ [[SetIterationKind]] internal slot to _kind_.

7.  Return _iterator_.

The %SetIteratorPrototype% Object

All Set Iterator Objects inherit properties from the
%SetIteratorPrototype% intrinsic object. The %SetIteratorPrototype%
intrinsic object is an ordinary object and its [[Prototype]] internal
slot is the %IteratorPrototype% intrinsic object (25.1.2). In addition,
%SetIteratorPrototype% has the following properties:

%SetIteratorPrototype%.next ( )

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have all of the internal slots of a Set Iterator
    Instance (23.2.5.3), throw a TYPEERROR exception.

4.  Let _s_ be the value of the [[IteratedSet]] internal slot of _O_.

5.  Let _index_ be the value of the [[SetNextIndex]] internal slot of
    _O_.

6.  Let _itemKind_ be the value of the [[SetIterationKind]] internal
    slot of _O_.

7.  If _s_ is UNDEFINED, return CreateIterResultObject(UNDEFINED, TRUE).

8.  Assert: _s_ has a [[SetData]] internal slot.

9.  Let _entries_ be the List that is the value of the [[SetData]]
    internal slot of _s_.

10. Repeat while _index_ is less than the total number of elements of
    _entries_. The number of elements must be redetermined each time
    this method is evaluated.

    a.  Let _e_ be _entries_[_index_].

    b.  Set _index_ to _index_+1;

    c.  Set the [[SetNextIndex]] internal slot of _O_ to _index_.

    d.  If _e_ is not empty, then

        i.  If _itemKind_ is "KEY+VALUE", then

            1.  Return CreateIterResultObject(CreateArrayFromList(«_e_,
                _e_»), FALSE).

        ii. Return CreateIterResultObject(_e_, FALSE).

11. Set the [[IteratedSet]] internal slot of _O_ to UNDEFINED.

12. Return CreateIterResultObject(UNDEFINED, TRUE).

%SetIteratorPrototype% [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value "SET
ITERATOR".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Set Iterator Instances

Set Iterator instances are ordinary objects that inherit properties from
the %SetIteratorPrototype% intrinsic object. Set Iterator instances are
initially created with the internal slots specified in Table 51.

Table 51 — Internal Slots of Set Iterator Instances

  _INTERNAL SLOT_        _DESCRIPTION_
  ---------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[IteratedSet]]        The Set object that is being iterated.
  [[SetNextIndex]]       The integer index of the next Set data element to be examined by this iterator
  [[SetIterationKind]]   A string value that identifies what is to be returned for each element of the iteration. The possible values are: "KEY", "VALUE", "KEY+VALUE". "KEY" and "VALUE" have the same meaning.


WeakMap Objects

WeakMap objects are collections of key/value pairs where the keys are
objects and values may be arbitrary ECMAScript language values. A
WeakMap may be queried to see if it contains a key/value pair with a
specific key, but no mechanism is provided for enumerating the objects
it holds as keys. If an object that is being used as the key of a
WeakMap key/value pair is only reachable by following a chain of
references that start within that WeakMap, then that key/value pair is
inaccessible and is automatically removed from the WeakMap. WeakMap
implementations must detect and remove such key/value pairs and any
associated resources.

An implementation may impose an arbitrarily determined latency between
the time a key/value pair of a WeakMap becomes inaccessible and the time
when the key/value pair is removed from the WeakMap. If this latency was
observable to ECMAScript program, it would be a source of indeterminacy
that could impact program execution. For that reason, an ECMAScript
implementation must not provide any means to observe a key of a WeakMap
that does not require the observer to present the observed key.

WeakMap objects must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of key/value pairs in the collection. The data structure used
in this WeakMap objects specification are only intended to describe the
required observable semantics of WeakMap objects. It is not intended to
be a viable implementation model.

NOTE WeakMap and WeakSets are intended to provide mechanisms for
dynamically associating state with an object in a manner that does not
“leak” memory resources if, in the absence of the WeakMap or WeakSet,
the object otherwise became inaccessible and subject to resource
reclamation by the implementation’s garbage collection mechanisms.
Achieving this characteristic can be achieved by using an inverted
per-object mapping of weak map instances to keys. Alternatively each
weak map may internally store its key to value mappings but this
approach requires coordination between the WeakMap or WeakSet
implementation and the garbage collector. The following references
describe mechanism that may be useful to implementations of WeakMap and
WeakSets:

  Barry Hayes. 1997. Ephemerons: a new finalization mechanism. In
  _Proceedings of the 12th ACM SIGPLAN conference on Object-oriented
  programming, systems, languages, and applications (OOPSLA '97)_, A.
  Michael Berman (Ed.). ACM, New York, NY, USA, 176-183.
  _http://doi.acm.org/10.1145/263698.263733_.

  Alexandra Barros, Roberto Ierusalimschy, Eliminating Cycles in Weak
  Tables. Journal of Universal Computer Science - J.UCS , vol. 14, no.
  21, pp. 3481-3497, 2008.
  _http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak_

The WeakMap Constructor

The WeakMap constructor is the %WeakMap% intrinsic object and the
initial value of the WEAKMAP property of the global object. When called
as a constructor it creates and initializes a new WeakMap object.
WEAKMAP is not intended to be called as a function and will throw an
exception when called in that manner.

The WEAKMAP constructor is designed to be subclassable. It may be used
as the value in an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified WEAKMAP behaviour must
include a SUPER call to the WEAKMAP constructor to create and initialize
the subclass instance with the internal state necessary to support the
WEAKMAP.PROTOTYPE built-in methods.

WeakMap ( [ iterable ] )

When the WEAKMAP function is called with optional argument _iterable_
the following steps are taken:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Let _map_ be OrdinaryCreateFromConstructor(NewTarget,
    "%WEAKMAPPROTOTYPE%", «‍[[WeakMapData]]» ).

3.  ReturnIfAbrupt(_map_).

4.  Set _map’s_ [[WeakMapData]] internal slot to a new empty List.

5.  If _iterable_ is not present, let _iterable_ be UNDEFINED.

6.  If _iterable_ is either UNDEFINED or NULL, let _iter_ be UNDEFINED.

7.  Else,

    a.  Let _adder_ be Get(_map_, "SET").

    b.  ReturnIfAbrupt(_adder_).

    c.  If IsCallable(_adder_) is FALSE, throw a TYPEERROR exception.

    d.  Let _iter_ be GetIterator(_iterable_).

    e.  ReturnIfAbrupt(_iter_).

8.  If _iter_ is UNDEFINED, return _map_.

9.  Repeat

    a.  Let _next_ be IteratorStep(_iter_).

    b.  ReturnIfAbrupt(_next_).

    c.  If _next_ is FALSE, return _map_.

    d.  Let _nextItem_ be IteratorValue(_next_).

    e.  ReturnIfAbrupt(_nextItem_).

    f.  If Type(_nextItem_) is not Object,

        i.  Let _error_ be Completion{[[type]]: throw, [[value]]: a
            newly created TYPEERROR object, [[target]]:empty}.

        ii. Return IteratorClose(_iter_, _error_).

    g.  Let _k_ be Get(_nextItem_, "0").

    h.  If _k_ is an abrupt completion, return IteratorClose(_iter_,
        _k_).

    i.  Let _v_ be Get(_nextItem_, "1").

    j.  If _v_ is an abrupt completion, return IteratorClose(_iter_,
        _v_).

    k.  Let _status_ be Call(_adder_, _map_, «_k_.[[value]],
        _v_.[[value]]»).

    l.  If _status_ is an abrupt completion, return
        IteratorClose(_iter_, _status_).

NOTE If the parameter _iterable_ is present, it is expected to be an
object that implements an @@iterator method that returns an iterator
object that produces a two element array-like object whose first element
is a value that will be used as a WeakMap key and whose second element
is the value to associate with that key.

Properties of the WeakMap Constructor

The value of the [[Prototype]] internal slot of the WeakMap constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 0), the WeakMap constructor
has the following properties:

WeakMap.prototype

The initial value of WEAKMAP.PROTOTYPE is the intrinsic object
%WeakMapPrototype% (23.3.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the WeakMap Prototype Object

The WeakMap prototype object is the intrinsic object %WeakMapPrototype%.
The value of the [[Prototype]] internal slot of the WeakMap prototype
object is the intrinsic object %ObjectPrototype% (19.1.3). The WeakMap
prototype object is an ordinary object. It does not have a
[[WeakMapData]] internal slot.

WeakMap.prototype.constructor

The initial value of WEAKMAP.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %WeakMap%.

WeakMap.prototype.delete ( key )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[WeakMapData]] internal slot, throw a
    TYPEERROR exception.

4.  Let _entries_ be the List that is the value of _M_’s [[WeakMapData]]
    internal slot.

5.  If Type(_key_) is not Object, return FALSE.

6.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValue(_p_.[[key]], _key_) is
        TRUE, then

        i.  Set _p_.[[key]] to empty_._

        ii. Set _p_.[[value]] to empty_._

        iii. Return TRUE.

7.  Return FALSE.

NOTE The value EMPTY is used as a specification device to indicate that
an entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

WeakMap.prototype.get ( key )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[WeakMapData]] internal slot, throw a
    TYPEERROR exception.

4.  Let _entries_ be the List that is the value of _M_’s [[WeakMapData]]
    internal slot.

5.  If Type(_key_) is not Object, return UNDEFINED.

6.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValue(_p_.[[key]], _key_) is
        TRUE, return _p_.[[value]].

7.  Return UNDEFINED_.

WeakMap.prototype.has ( key )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[WeakMapData]] internal slot, throw a
    TYPEERROR exception.

4.  Let _entries_ be the List that is the value of _M_’s [[WeakMapData]]
    internal slot.

5.  If Type(_key_) is not Object, return FALSE.

6.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValue(_p_.[[key]], _key_) is
        TRUE, return TRUE_._

7.  Return FALSE.

WeakMap.prototype.set ( key , value )

The following steps are taken:

1.  Let _M_ be the THIS value.

2.  If Type(_M_) is not Object, throw a TYPEERROR exception.

3.  If _M_ does not have a [[WeakMapData]] internal slot, throw a
    TYPEERROR exception.

4.  Let _entries_ be the List that is the value of _M_’s [[WeakMapData]]
    internal slot.

5.  If Type(_key_) is not Object, throw a TYPEERROR exception.

6.  Repeat for each Record {[[key]], [[value]]} _p_ that is an element
    of _entries,_

    a.  If _p_.[[key]] is not empty and SameValue(_p_.[[key]], _key_) is
        TRUE, then

        i.  Set _p_.[[value]] to _value._

        ii. Return _M_.

7.  Let _p_ be the Record {[[key]]: _key_, [[value]]: _value_}.

8.  Append _p_ as the last element of _entries_.

9.  Return _M_.

WeakMap.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"WEAKMAP".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of WeakMap Instances

WeakMap instances are ordinary objects that inherit properties from the
WeakMap prototype. WeakMap instances also have a [[WeakMapData]]
internal slot.


WeakSet Objects

WeakSet objects are collections of objects. A distinct object may only
occur once as an element of a WeakSet’s collection. A WeakSet may be
queried to see if it contains a specific object, but no mechanism is
provided for enumerating the objects it holds. If an object that is
contained by a WeakSet is only reachable by following a chain of
references that start within that WeakSet, then that object is
inaccessible and is automatically removed from the WeakSet. WeakSet
implementations must detect and remove such objects and any associated
resources.

An implementation may impose an arbitrarily determined latency between
the time an object contained in a WeakSet becomes inaccessible and the
time when the object is removed from the WeakSet. If this latency was
observable to ECMAScript program, it would be a source of indeterminacy
that could impact program execution. For that reason, an ECMAScript
implementation must not provide any means to determine if a WeakSet
contains a particular object that does not require the observer to
present the observed object.

WeakSet objects must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of elements in the collection. The data structure used in
this WeakSet objects specification is only intended to describe the
required observable semantics of WeakSet objects. It is not intended to
be a viable implementation model.

NOTE See the NOTE in 23.3.

The WeakSet Constructor

The WeakSet constructor is the %WeakSet% intrinsic object and the
initial value of the WEAKSET property of the global object. When called
as a constructor it creates and initializes a new WeakSet object.
WEAKSET is not intended to be called as a function and will throw an
exception when called in that manner.

The WEAKSET constructor is designed to be subclassable. It may be used
as the value in an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified WEAKSET behaviour must
include a SUPER call to the WEAKSET constructor to create and initialize
the subclass instance with the internal state necessary to support the
WEAKSET.PROTOTYPE built-in methods.

WeakSet ( [ iterable ] )

When the WEAKSET function is called with optional argument _iterable_
the following steps are taken:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Let _set_ be OrdinaryCreateFromConstructor(NewTarget,
    "%WEAKSETPROTOTYPE%", «‍[[WeakSetData]]» ).

3.  ReturnIfAbrupt(_set_).

4.  Set _set’s_ [[WeakSetData]] internal slot to a new empty List.

5.  If _iterable_ is not present, let _iterable_ be UNDEFINED.

6.  If _iterable_ is either UNDEFINED or NULL, let _iter_ be UNDEFINED.

7.  Else,

    a.  Let _adder_ be Get(_set_, "ADD").

    b.  ReturnIfAbrupt(_adder_).

    c.  If IsCallable(_adder_) is FALSE, throw a TYPEERROR exception.

    d.  Let _iter_ be GetIterator(_iterable_).

    e.  ReturnIfAbrupt(_iter_).

8.  If _iter_ is UNDEFINED, return _set_.

9.  Repeat

    a.  Let _next_ be IteratorStep(_iter_).

    b.  ReturnIfAbrupt(_next_).

    c.  If _next_ is FALSE, return _set_.

    d.  Let _nextValue_ be IteratorValue(_next_).

    e.  ReturnIfAbrupt(_nextValue_).

    f.  Let _status_ be Call(_adder_, _set_, «_nextValue_ »).

    g.  If _status_ is an abrupt completion, return
        IteratorClose(_iter_, _status_).

Properties of the WeakSet Constructor

The value of the [[Prototype]] internal slot of the WeakSet constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 0), the WeakSet constructor
has the following properties:

WeakSet.prototype

The initial value of WEAKSET.PROTOTYPE is the intrinsic
%WeakSetPrototype% object (23.4.3).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the WeakSet Prototype Object

The WeakSet prototype object is the intrinsic object %WeakSetPrototype%.
The value of the [[Prototype]] internal slot of the WeakSet prototype
object is the intrinsic object %ObjectPrototype% (19.1.3). The WeakSet
prototype object is an ordinary object. It does not have a
[[WeakSetData]] internal slot.

WeakSet.prototype.add ( value )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[WeakSetData]] internal slot, throw a
    TYPEERROR exception.

4.  If Type(_value_) is not Object, throw a TYPEERROR exception.

5.  Let _entries_ be the List that is the value of _S_’s [[WeakSetData]]
    internal slot.

6.  Repeat for each _e_ that is an element of _entries,

    a.  If _e_ is not empty and SameValue(_e_, _value_) is TRUE, then

        i.  Return _S_.

7.  Append _value_ as the last element of _entries_.

8.  Return _S_.

WeakSet.prototype.constructor

The initial value of WEAKSET.PROTOTYPE.CONSTRUCTOR is the %WeakSet%
intrinsic object.

WeakSet.prototype.delete ( value )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[WeakSetData]] internal slot, throw a
    TYPEERROR exception.

4.  If Type(_value_) is not Object, return FALSE.

5.  Let _entries_ be the List that is the value of _S_’s [[WeakSetData]]
    internal slot.

6.  Repeat for each _e_ that is an element of _entries_,

    a.  If _e_ is not empty and SameValue(_e_, _value_) is TRUE, then

        i.  Replace the element of _entries_ whose value is _e_ with an
            element whose value is empty_._

        ii. Return TRUE.

7.  Return FALSE.

NOTE The value EMPTY is used as a specification device to indicate that
an entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

WeakSet.prototype.has ( value )

The following steps are taken:

1.  Let _S_ be the THIS value.

2.  If Type(_S_) is not Object, throw a TYPEERROR exception.

3.  If _S_ does not have a [[WeakSetData]] internal slot, throw a
    TYPEERROR exception.

4.  Let _entries_ be the List that is the value of _S_’s [[WeakSetData]]
    internal slot.

5.  If Type(_value_) is not Object, return FALSE.

6.  Repeat for each _e_ that is an element of _entries,

    a.  If _e_ is not empty and SameValue(_e_, _value_) is TRUE, return
        TRUE_._

7.  Return FALSE.

WeakSet.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"WEAKSET".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of WeakSet Instances

WeakSet instances are ordinary objects that inherit properties from the
WeakSet prototype. WeakSet instances also have a [[WeakSetData]]
internal slot.



STRUCTURED DATA


ArrayBuffer Objects

Abstract Operations For ArrayBuffer Objects

AllocateArrayBuffer( constructor, byteLength )

The abstract operation AllocateArrayBuffer with arguments _constructor_
and _byteLength_ is used to create an ArrayBuffer object. It performs
the following steps:

1.  Let _obj_ be OrdinaryCreateFromConstructor(_constructor_,
    "%ARRAYBUFFERPROTOTYPE%", «‍[[ArrayBufferData]],
    [[ArrayBufferByteLength]]» ).

2.  ReturnIfAbrupt(_obj_).

3.  Assert: _byteLength_ is a positive integer.

4.  Let _block_ be CreateByteDataBlock(_byteLength_).

5.  ReturnIfAbrupt(_block_).

6.  Set _obj’s_ [[ArrayBufferData]] internal slot to _block_.

7.  Set _obj_’s [[ArrayBufferByteLength]] internal slot to _byteLength_.

8.  Return _obj_.

IsDetachedBuffer( arrayBuffer )

The abstract operation IsDetachedBuffer with argument _arrayBuffer_
performs the following steps:

1.  Assert: Type(_arrayBuffer_) is Object and it has an
    [[ArrayBufferData]] internal slot.

2.  If _arrayBuffer’s_ [[ArrayBufferData]] internal slot is NULL, return
    TRUE.

3.  Return FALSE.

DetachArrayBuffer( arrayBuffer )

The abstract operation DetachArrayBuffer with argument _arrayBuffer_
performs the following steps:

1.  Assert: Type(_arrayBuffer_) is Object and it has [[ArrayBufferData]]
    and [[ArrayBufferByteLength]] internal slots.

2.  Set _arrayBuffer’s_ [[ArrayBufferData]] internal slot to NULL.

3.  Set _arrayBuffer_’s [[ArrayBufferByteLength]] internal slot to 0.

4.  Return NormalCompletion(NULL).

NOTE Detaching an ArrayBuffer instance disassociates the Data Block used
as its backing store from the instance and sets the byte length of the
buffer to 0. No operations defined by this specification use the
DetachArrayBuffer abstract operation. However, an ECMAScript
implementation or host environment may define such operations.

CloneArrayBuffer( srcBuffer, srcByteOffset [, cloneConstructor] )

The abstract operation CloneArrayBuffer takes three parameters, an
ArrayBuffer _srcBuffer_, an integer _srcByteOffset_ and optionally a
constructor function _cloneConstructor_. It creates a new ArrayBuffer
whose data is a copy of _srcBuffer’s_ data starting at _srcByteOffset_.
This operation performs the following steps:

1.  Assert: Type(_srcBuffer_) is Object and it has an
    [[ArrayBufferData]] internal slot.

2.  If _cloneConstructor_ is not present, then

    a.  Let _cloneConstructor_ be SpeciesConstructor(_srcBuffer_,
        %ArrayBuffer%).

    b.  ReturnIfAbrupt(_cloneConstructor_).

    c.  If IsDetachedBuffer(_srcBuffer_) is TRUE, throw a TYPEERROR
        exception.

3.  Else, Assert: IsConstructor(_cloneConstructor_) is TRUE.

4.  Let _srcLength_ be the value of _srcBuffer_’s
    [[ArrayBufferByteLength]] internal slot.

5.  Assert: _srcByteOffset_ ≤ _srcLength_.

6.  Let _cloneLength_ be _srcLength_ – _srcByteOffset.

7.  Let _srcBlock_ be the value of _srcBuffer’s_ [[ArrayBufferData]]
    internal slot.

8.  Let _targetBuffer_ be AllocateArrayBuffer(_cloneConstructor_,
    _cloneLength_).

9.  ReturnIfAbrupt(_targetBuffer_).

10. If IsDetachedBuffer(_srcBuffer_) is TRUE, throw a TYPEERROR
    exception.

11. Let _targetBlock_ be the value of _targetBuffer’s
    [[ArrayBufferData]] internal slot.

12. Perform CopyDataBlockBytes(_targetBlock_, 0, _srcBlock_,
    _srcByteOffset_, _cloneLength_).

13. Return _targetBuffer_.

GetValueFromBuffer ( arrayBuffer, byteIndex, type, isLittleEndian )

The abstract operation GetValueFromBuffer takes four parameters, an
ArrayBuffer _arrayBuffer_, an integer _byteIndex_, a String _type_, and
optionally a Boolean _isLittleEndian_. This operation performs the
following steps:

1.  Assert: IsDetachedBuffer(_arrayBuffer_) is FALSE.

2.  Assert: There are sufficient bytes in _arrayBuffer_ starting at
    _byteIndex_ to represent a value of _type_.

3.  Assert: _byteIndex_ is a positive integer.

4.  Let _block_ be _arrayBuffer’s_ [[ArrayBufferData]] internal slot.

5.  Let _elementSize_ be the Number value of the Element Size value
    specified in Table 49 for Element Type _type_.

6.  Let _rawValue_ be a List of _elementSize_ containing, in order_,
    the _elementSize_ sequence of bytes starting with
    _block_[_byteIndex_].

7.  If _isLittleEndian_ is not present, set _isLittleEndian_ to either
    TRUE or FALSE. The choice is implementation dependent and should be
    the alternative that is most efficient for the implementation. An
    implementation must use the same value each time this step is
    executed and the same value must be used for the corresponding step
    in the SetValueInBuffer abstract operation.

8.  If _isLittleEndian_ is FALSE, reverse the order of the elements of
    _rawValue_.

9.  If _type_ is "FLOAT32", then

    a.  Let _value_ be the byte elements of _rawValue_ concatenated and
        interpreted as a little-endian bit string encoding of an IEEE
        754-2008 binary32 value.

    b.  If _value_ is an IEEE 754-2008 binary32 NaN value, return the
        NAN Number value.

    c.  Return the Number value that corresponds to _value_.

10. If _type_ is "FLOAT64", then

    a.  Let _value_ be the byte elements of _rawValue_ concatenated and
        interpreted as a little-endian bit string encoding of an IEEE
        754-2008 binary64 value.

    b.  If _value_ is an IEEE 754-2008 binary64 NaN value, return the
        NAN Number value.

    c.  Return the Number value that corresponds to _value_.

11. If the first code unit of _type_ is "U", then

    a.  Let _intValue_ be the byte elements of _rawValue_ concatenated
        and interpreted as a bit string encoding of an unsigned
        little-endian binary number.

12. Else

    a.  Let _intValue_ be the byte elements of _rawValue_ concatenated
        and interpreted as a bit string encoding of a binary
        little-endian 2’s complement number of bit length _elementSize_
        × 8.

13. Return the Number value that corresponds to _intValue_.

SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isLittleEndian )

The abstract operation SetValueInBuffer takes five parameters, an
ArrayBuffer _arrayBuffer_, an integer _byteIndex_, a String _type_, a
Number _value_, and optionally a Boolean _isLittleEndian_. This
operation performs the following steps:

1.  Assert: IsDetachedBuffer(_arrayBuffer_) is FALSE.

2.  Assert: There are sufficient bytes in _arrayBuffer_ starting at
    _byteIndex_ to represent a value of _type_.

3.  Assert: _byteIndex_ is a positive integer.

4.  Assert: Type(_value_) is Number.

5.  Let _block_ be _arrayBuffer’s_ [[ArrayBufferData]] internal slot.

6.  Assert: _block_ is not UNDEFINED.

7.  Let _elementSize_ be the Number value of the Element Size value
    specified in Table 49 for Element Type _type_.

8.  If _isLittleEndian_ is not present, set _isLittleEndian_ to either
    TRUE or FALSE. The choice is implementation dependent and should be
    the alternative that is most efficient for the implementation. An
    implementation must use the same value each time this step is
    executed and the same value must be used for the corresponding step
    in the GetValueFromBuffer abstract operation.

9.  If _type_ is "FLOAT32", then

    a.  Set _rawBytes_to a List containing the 4 bytes that are the
        result of converting _value_ to IEEE 754-2008 binary32 format
        using “Round to nearest, ties to even” rounding mode. If
        _isLittleEndian_ is FALSE, the bytes are arranged in big endian
        order. Otherwise, the bytes are arranged in little endian order.
        If _value_ is NAN, _rawValue_ may be set to any implementation
        chosen non-signaling NaN encoding. An implementation must always
        choose the same non-signaling NaN encoding for a distinct
        Not-a-Number value.

10. Else, if _type_ is "FLOAT64", then

    a.  Set _rawBytes_ to a List containing the 8 bytes that are the
        IEEE 754-2008 binary64 format encoding of _value_. If
        _isLittleEndian_ is FALSE, the bytes are arranged in big endian
        order. Otherwise, the bytes are arranged in little endian order.
        If _value_ is NAN, _rawValue_ may be set to any implementation
        chosen non-signaling NaN encoding. An implementation must always
        choose the same non-signaling NaN encoding for a distinct
        Not-a-Number value.

11. Else,

    a.  Let _n_ be the Number value of the Element Size specified in
        Table 49 for Element Type _type_.

    b.  Let _convOp_ be the abstract operation named in the Conversion
        Operation column in Table 49 for Element Type _type_.

    c.  Let _intValue_ be _convOp_(_value_).

    d.  If _intValue_ ≥ 0, then

        i.  Let _rawBytes_ be a List containing the _n_-byte binary
            encoding of _intValue_. If _isLittleEndian_ is FALSE, the
            bytes are ordered in big endian order. Otherwise, the bytes
            are ordered in little endian order.

    e.  Else,

        i.  Let _rawBytes_ be a List containing the _n_-byte binary 2’s
            complement encoding of _intValue_. If _isLittleEndian_ is
            FALSE, the bytes are ordered in big endian order. Otherwise,
            the bytes are ordered in little endian order.

12. Store the individual bytes of _rawBytes_ into _block_, in order,
    starting at _block_[_byteIndex_].

13. Return NormalCompletion(UNDEFINED).

The ArrayBuffer Constructor

The ArrayBuffer constructor is the %ArrayBuffer% intrinsic object and
the initial value of the ARRAYBUFFER property of the global object. When
called as a constructor it creates and initializes a new ArrayBuffer
object. ARRAYBUFFER is not intended to be called as a function and will
throw an exception when called in that manner.

The ARRAYBUFFER constructor is designed to be subclassable. It may be
used as the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified ARRAYBUFFER behaviour
must include a SUPER call to the ARRAYBUFFER constructor to create and
initialize subclass instances with the internal state necessary to
support the ARRAYBUFFER.PROTOTYPE built-in methods.

ArrayBuffer( length )

ArrayBuffer called with argument _length_ performs the following steps:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Let _numberLength_ be ToNumber(_length_).

3.  Let _byteLength_ be ToLength(_numberLength_).

4.  ReturnIfAbrupt(_byteLength_).

5.  If SameValueZero(_numberLength_, _byteLength_) is FALSE, throw a
    RANGEERROR exception.

6.  Return AllocateArrayBuffer(NewTarget, _byteLength_).

Properties of the ArrayBuffer Constructor

The value of the [[Prototype]] internal slot of the ArrayBuffer
constructor is the intrinsic object %FunctionPrototype% (19.2.3).

Besides its LENGTH property (whose value is 1), the ArrayBuffer
constructor has the following properties:

ArrayBuffer.isView ( arg )

The isView function takes one argument _arg_, and performs the following
steps are taken:

1.  If Type(_arg_) is not Object, return FALSE.

2.  If _arg_ has a [[ViewedArrayBuffer]] internal slot, return TRUE.

3.  Return FALSE.

ArrayBuffer.prototype

The initial value of ArrayBuffer.prototype is the intrinsic object
%ArrayBufferPrototype% (24.1.4).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

get ArrayBuffer [ @@species ] 

ARRAYBUFFER[@@SPECIES] is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Return the THIS value.

The value of the NAME property of this function is "GET
[SYMBOL.SPECIES]".

NOTE ArrayBuffer prototype methods normally use their THIS object’s
constructor to create a derived object. However, a subclass constructor
may over-ride that default behaviour by redefining its @@species
property.

Properties of the ArrayBuffer Prototype Object

The ArrayBuffer prototype object is the intrinsic object
%ArrayBufferPrototype%. The value of the [[Prototype]] internal slot of
the ArrayBuffer prototype object is the intrinsic object
%ObjectPrototype% (19.1.3). The ArrayBuffer prototype object is an
ordinary object. It does not have an [[ArrayBufferData]] or
[[ArrayBufferByteLength]] internal slot.

get ArrayBuffer.prototype.byteLength

ARRAYBUFFER.PROTOTYPE.BYTELENGTH is an accessor property whose set
accessor function is UNDEFINED. Its get accessor function performs the
following steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have an [[ArrayBufferData]] internal slot, throw a
    TYPEERROR exception.

4.  If IsDetachedBuffer(_O_) is TRUE, throw a TYPEERROR exception.

5.  Let _length_ be the value of _O_’s [[ArrayBufferByteLength]]
    internal slot.

6.  Return _length_.

ArrayBuffer.prototype.constructor

The initial value of ARRAYBUFFER.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %ArrayBuffer%.

ArrayBuffer.prototype.slice ( start, end )

The following steps are taken:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have an [[ArrayBufferData]] internal slot, throw a
    TYPEERROR exception.

4.  If IsDetachedBuffer(_O_) is TRUE, throw a TYPEERROR exception.

5.  Let _len_ be the value of _O_’s [[ArrayBufferByteLength]] internal
    slot.

6.  Let _relativeStart_ be ToInteger(_start_).

7.  ReturnIfAbrupt(_relativeStart_).

8.  If _relativeStart_ < 0, let _first_ be max((_len_ +
    _relativeStart_),0); else let _first_ be min(_relativeStart_,
    _len_).

9.  If _end_ is UNDEFINED, let _relativeEnd_ be _len_; else let
    _relativeEnd_ be ToInteger(_end_).

10. ReturnIfAbrupt(_relativeEnd_).

11. If _relativeEnd_ < 0, let _final_ be max((_len_ + _relativeEnd_),0);
    else let _final_ be min(_relativeEnd_, _len_).

12. Let _newLen_ be max(_final_-_first_,0).

13. Let _ctor_ be SpeciesConstructor(_O_, %ArrayBuffer%).

14. ReturnIfAbrupt(_ctor_).

15. Let _new_ be Construct(_ctor_, «_newLen_»).

16. ReturnIfAbrupt(_new_).

17. If _new_ does not have an [[ArrayBufferData]] internal slot, throw a
    TYPEERROR exception.

18. If IsDetachedBuffer(_new_) is TRUE, throw a TYPEERROR exception.

19. If SameValue(_new_, _O_) is TRUE, throw a TYPEERROR exception.

20. If the value of _new_’s [[ArrayBufferByteLength]] internal slot <
    _newLen_, throw a TYPEERROR exception.

21. NOTE: Side-effects of the above steps may have detached _O_.

22. If IsDetachedBuffer(_O_) is TRUE, throw a TYPEERROR exception.

23. Let _fromBuf_ be the value of _O_’s [[ArrayBufferData]] internal
    slot.

24. Let _toBuf_ be the value of _new_’s [[ArrayBufferData]] internal
    slot.

25. Perform CopyDataBlockBytes(_toBuf_, 0, _fromBuf_, _first_,
    _newLen_).

26. Return _new_.

ArrayBuffer.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"ARRAYBUFFER".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of the ArrayBuffer Instances

ArrayBuffer instances inherit properties from the ArrayBuffer prototype
object. ArrayBuffer instances each have an [[ArrayBufferData]] internal
slot and an [[ArrayBufferByteLength]] internal slot.

ArrayBuffer instances whose [[ArrayBufferData]] is NULL are considered
to be detached and all operators to access or modify data contained in
the ArrayBuffer instance will fail.


DataView Objects

Abstract Operations For DataView Objects

GetViewValue ( view, requestIndex, isLittleEndian, type )

The abstract operation GetViewValue with arguments _view_,
_requestIndex_, _isLittleEndian_, and _type_ is used by functions on
DataView instances is to retrieve values from the view’s buffer. It
performs the following steps:

1.  If Type(_view_) is not Object, throw a TYPEERROR exception.

2.  If _view_ does not have a [[DataView]] internal slot, throw a
    TYPEERROR exception.

3.  Let _numberIndex_ be ToNumber(_requestIndex_).

4.  Let _getIndex_ be ToInteger(_numberIndex_).

5.  ReturnIfAbrupt(_getIndex_).

6.  If _numberIndex_ ≠ _getIndex_ or _getIndex_ < 0, throw a RANGEERROR
    exception.

7.  Let _isLittleEndian_ be ToBoolean(_isLittleEndian_).

8.  Let _buffer_ be the value of _view’s_ [[ViewedArrayBuffer]] internal
    slot.

9.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

10. Let _viewOffset_ be the value of _view’s_ [[ByteOffset]] internal
    slot.

11. Let _viewSize_ be the value of _view’s_ [[ByteLength]] internal
    slot.

12. Let _elementSize_ be the Number value of the Element Size value
    specified in Table 49 for Element Type _type_.

13. If _getIndex_ +_elementSize_ > _viewSize_, throw a RANGEERROR
    exception.

14. Let _bufferIndex_ be _getIndex_ + _viewOffset_.

15. Return GetValueFromBuffer(_buffer_, _bufferIndex_, _type_,
    _isLittleEndian_).

SetViewValue ( view, requestIndex, isLittleEndian, type, value )

The abstract operation SetViewValue with arguments _view_,
_requestIndex_, _isLittleEndian_, _type_, and _value_ is used by
functions on DataView instances to store values into the view’s buffer.
It performs the following steps:

1.  If Type(_view_) is not Object, throw a TYPEERROR exception.

2.  If _view_ does not have a [[DataView]] internal slot, throw a
    TYPEERROR exception.

3.  Let _numberIndex_ be ToNumber(_requestIndex_).

4.  Let _getIndex_ be ToInteger(_numberIndex_).

5.  ReturnIfAbrupt(_getIndex_).

6.  If _numberIndex_ ≠ _getIndex_ or _getIndex_ < 0, throw a RANGEERROR
    exception.

7.  Let _isLittleEndian_ be ToBoolean(_isLittleEndian_).

8.  Let _buffer_ be the value of _view’s_ [[ViewedArrayBuffer]] internal
    slot.

9.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

10. Let _viewOffset_ be the value of _view’s_ [[ByteOffset]] internal
    slot.

11. Let _viewSize_ be the value of _view’s_ [[ByteLength]] internal
    slot.

12. Let _elementSize_ be the Number value of the Element Size value
    specified in Table 49 for Element Type _type_.

13. If _getIndex_ +_elementSize_ > _viewSize_, throw a RANGEERROR
    exception.

14. Let _bufferIndex_ be _getIndex_ + _viewOffset_.

15. Return SetValueInBuffer(_buffer_, _bufferIndex_, _type_, _value_,
    _isLittleEndian_).

NOTE The algorithms for GetViewValue and SetViewValue are identical
except for their final steps.

The DataView Constructor

The DataView constructor is the %DataView% intrinsic object and the
initial value of the DATAVIEW property of the global object. When called
as a constructor it creates and initializes a new DataView object.
DATAVIEW is not intended to be called as a function and will throw an
exception when called in that manner.

The DATAVIEW constructor is designed to be subclassable. It may be used
as the value of an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified DATAVIEW behaviour
must include a SUPER call to the DATAVIEW constructor to create and
initialize subclass instances with the internal state necessary to
support the DATAVIEW.PROTOTYPE built-in methods.

DataView (buffer [ , byteOffset [ , byteLength ] ] )

DATAVIEW called with arguments _buffer_, _byteOffset_, and _length_
performs the following steps:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  If Type(_buffer_) is not Object, throw a TYPEERROR exception.

3.  If _buffer_ does not have an [[ArrayBufferData]] internal slot,
    throw a TYPEERROR exception.

4.  Let _numberOffset_ be ToNumber(_byteOffset_).

5.  Let _offset_ be ToInteger(_numberOffset_).

6.  ReturnIfAbrupt(_offset_).

7.  If _numberOffset_ ≠ _offset_ or _offset_ < 0, throw a RANGEERROR
    exception.

8.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

9.  Let _bufferByteLength_ be the value of _buffer’s
    [[ArrayBufferByteLength]] internal slot.

10. If _offset_ > _bufferByteLength_, throw a RANGEERROR exception.

11. If _byteLength_ is UNDEFINED, then

    a.  Let _viewByteLength_ be _bufferByteLength_ – _offset_.

12. Else,

    a.  Let _viewByteLength_ be ToLength(_byteLength_)_._

    b.  ReturnIfAbrupt(_viewByteLength_).

    c.  d.  If _offset_+_viewByteLength_ > _bufferByteLength_, throw a
        RANGEERROR exception.

13. Let _O_ be OrdinaryCreateFromConstructor(NewTarget,
    "%DATAVIEWPROTOTYPE%", «‍[[DataView]], [[ViewedArrayBuffer]],
    [[ByteLength]], [[ByteOffset]]» ).

14. ReturnIfAbrupt(_O_).

15. Set _O’s_ [[DataView]] internal slot to TRUE.

16. Set _O’s_ [[ViewedArrayBuffer]] internal slot to _buffer_.

17. Set _O_’s [[ByteLength]] internal slot to _viewByteLength_.

18. Set _O_’s [[ByteOffset]] internal slot to _offset_.

19. Return _O_.

Properties of the DataView Constructor

The value of the [[Prototype]] internal slot of the DATAVIEW constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 3), the DataView constructor
has the following properties:

DataView.prototype

The initial value of DATAVIEW.PROTOTYPE is the intrinsic object
%DataViewPrototype% (24.2.4).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the DataView Prototype Object

The DataView prototype object is the intrinsic object
%DataViewPrototype%. The value of the [[Prototype]] internal slot of the
DataView prototype object is the intrinsic object %ObjectPrototype%
(19.1.3). The DataView prototype object is an ordinary object. It does
not have a [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], or
[[ByteOffset]] internal slot.

get DataView.prototype.buffer

DATAVIEW.PROTOTYPE.BUFFER is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[ViewedArrayBuffer]] internal slot, throw a
    TYPEERROR exception.

4.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

5.  Return _buffer_.

get DataView.prototype.byteLength

DATAVIEW.PROTOTYPE.BYTELENGTH is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[ViewedArrayBuffer]] internal slot, throw a
    TYPEERROR exception.

4.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

5.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

6.  Let _size_ be the value of _O_’s [[ByteLength]] internal slot.

7.  Return _size_.

get DataView.prototype.byteOffset

DATAVIEW.PROTOTYPE.BYTEOFFSET is an accessor property whose set accessor
function is UNDEFINED. Its get accessor function performs the following
steps:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object, throw a TYPEERROR exception.

3.  If _O_ does not have a [[ViewedArrayBuffer]] internal slot, throw a
    TYPEERROR exception.

4.  Let _buffer_ be the value of _O_’s [[ViewedArrayBuffer]] internal
    slot.

5.  If IsDetachedBuffer(_buffer_) is TRUE, throw a TYPEERROR exception.

6.  Let _offset_ be the value of _O_’s [[ByteOffset]] internal slot.

7.  Return _offset_.

DataView.prototype.constructor

The initial value of DATAVIEW.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %DataView%.

DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )

When the GETFLOAT32 method is called with argument _byteOffset_ and
optional argument _littleEndian_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return GetViewValue(_v_, _byteOffset_, _littleEndian_, "FLOAT32").

DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )

When the GETFLOAT64 method is called with argument _byteOffset_ and
optional argument _littleEndian_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return GetViewValue(_v_, _byteOffset_, _littleEndian_, "FLOAT64").

DataView.prototype.getInt8 ( byteOffset )

When the GETINT8 method is called with argument _byteOffset_ the
following steps are taken:

1.  Let _v_ be the THIS value.

2.  Return GetViewValue(_v_, _byteOffset_, TRUE, "INT8").

DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )

When the GETINT16 method is called with argument _byteOffset_ and
optional argument _littleEndian_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return GetViewValue(_v_, _byteOffset_, _littleEndian_, "INT16").

DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )

When the GETINT32 method is called with argument _byteOffset_ and
optional argument _littleEndian_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be UNDEFINED.

3.  Return GetViewValue(_v_, _byteOffset_, _littleEndian_, "INT32").

DataView.prototype.getUint8 ( byteOffset )

When the GETUINT8 method is called with argument _byteOffset_ the
following steps are taken:

1.  Let _v_ be the THIS value.

2.  Return GetViewValue(_v_, _byteOffset_, TRUE, "UINT8").

DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )

When the GETUINT16 method is called with argument _byteOffset_ and
optional argument _littleEndian_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return GetViewValue(_v_, _byteOffset_, _littleEndian_, "UINT16").

DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )

When the GETUINT32 method is called with argument _byteOffset_ and
optional argument _littleEndian_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return GetViewValue(_v_, _byteOffset_, _littleEndian_, "UINT32").

DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )

When the SETFLOAT32 method is called with arguments _byteOffset_ and
_value_ and optional argument _littleEndian_ the following steps are
taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return SetViewValue(_v_, _byteOffset_, _littleEndian_, "FLOAT32",
    _value_).

DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )

When the SETFLOAT64 method is called with arguments _byteOffset_ and
_value_ and optional argument _littleEndian_ the following steps are
taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return SetViewValue(_v_, _byteOffset_, _littleEndian_, "FLOAT64",
    _value_).

DataView.prototype.setInt8 ( byteOffset, value )

When the SETINT8 method is called with arguments _byteOffset_ and
_value_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  Return SetViewValue(_v_, _byteOffset_, TRUE, "INT8", _value_).

DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )

When the SETINT16 method is called with arguments _byteOffset_ and
_value_ and optional argument _littleEndian_ the following steps are
taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return SetViewValue(_v_, _byteOffset_, _littleEndian_, "INT16",
    _value_).

DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )

When the SETINT32 method is called with arguments _byteOffset_ and
_value_ and optional argument _littleEndian_ the following steps are
taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return SetViewValue(_v_, _byteOffset_, _littleEndian_, "INT32",
    _value_).

DataView.prototype.setUint8 ( byteOffset, value )

When the SETUINT8 method is called with arguments _byteOffset_ and
_value_ the following steps are taken:

1.  Let _v_ be the THIS value.

2.  Return SetViewValue(_v_, _byteOffset_, TRUE, "UINT8", _value_).

DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )

When the SETUINT16 method is called with arguments _byteOffset_ and
_value_ and optional argument _littleEndian_ the following steps are
taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return SetViewValue(_v_, _byteOffset_, _littleEndian_, "UINT16",
    _value_).

DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )

When the SETUINT32 method is called with arguments _byteOffset_ and
_value_ and optional argument _littleEndian_ the following steps are
taken:

1.  Let _v_ be the THIS value.

2.  If _littleEndian_ is not present, let _littleEndian_ be FALSE.

3.  Return SetViewValue(_v_, _byteOffset_, _littleEndian_, "UINT32",
    _value_).

DataView.prototype[ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"DATAVIEW".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of DataView Instances

DataView instances are ordinary objects that inherit properties from the
DataView prototype object. DataView instances each have [[DataView]],
[[ViewedArrayBuffer]], [[ByteLength]], and [[ByteOffset]] internal
slots.

NOTE The value of the [[DataView]] internal slot is not used within this
specification. The simple presence of that internal slot is used within
the specification to identify objects created using the DATAVIEW
constructor.


The JSON Object

The JSON object is the %JSON% intrinsic object and the initial value of
the JSON property of the global object. The JSON object is a single
ordinary object that contains two functions, PARSE and STRINGIFY, that
are used to parse and construct JSON texts. The JSON Data Interchange
Format is defined in ECMA-404. The JSON interchange format used in this
specification is exactly that described by ECMA-404.

Conforming implementations of JSON.PARSE and JSON.STRINGIFY must support
the exact interchange format described in the ECMA-404 specification
without any deletions or extensions to the format.

The value of the [[Prototype]] internal slot of the JSON object is the
intrinsic object %ObjectPrototype% (19.1.3). The value of the
[[Extensible]] internal slot of the JSON object is set to TRUE.

The JSON object does not have a [[Construct]] internal method; it is not
possible to use the JSON object as a constructor with the NEW operator.

The JSON object does not have a [[Call]] internal method; it is not
possible to invoke the JSON object as a function.

JSON.parse ( text [ , reviver ] )

The PARSE function parses a JSON text (a JSON-formatted String) and
produces an ECMAScript value. The JSON format is a subset of the syntax
for ECMAScript literals, Array Initializers and Object Initializers.
After parsing, JSON objects are realized as ECMAScript objects. JSON
arrays are realized as ECMAScript Array instances. JSON strings,
numbers, booleans, and null are realized as ECMAScript Strings, Numbers,
Booleans, and NULL.

The optional _reviver_ parameter is a function that takes two
parameters, _key_ and _value_. It can filter and transform the results.
It is called with each of the _key_/_value_ pairs produced by the parse,
and its return value is used instead of the original value. If it
returns what it received, the structure is not modified. If it returns
UNDEFINED then the property is deleted from the result.

1.  Let _JText_ be ToString(_text_).

2.  ReturnIfAbrupt(_JText_).

3.  Parse _JText_ interpreted as UTF-16 encoded Unicode points (6.1.4)
    as a JSON text as specified in
    ECMA-404. Throw a SYNTAXERROR exception if _JText_ is not a valid
    JSON text as defined in that specification.

4.  Let _scriptText_ be the result of concatenating "(", _JText_, and
    ");".

5.  Let _completion_ be the result of parsing and evaluating
    _scriptText_ as if it was the source text of an ECMAScript _Script_.
    but using the alternative definition of _DoubleStringCharacter_
    provided below. The extended PropertyDefinitionEvaluation semantics
    defined in B.3.1 must not be used during the evaluation.

6.  Let _unfiltered_ be _completion_.[[value]].

7.  Assert: _unfiltered_ will be either a primitive value or an object
    that is defined by either an _ArrayLiteral_ or an _ObjectLiteral_.

8.  If IsCallable(_reviver_) is TRUE, then

    a.  Let _root_ be ObjectCreate(%ObjectPrototype%).

    b.  Let _rootName_ be the empty String.

    c.  Let _status_ be CreateDataProperty(_root_, _rootName_,
        _unfiltered_).

    d.  Assert: _status_ is TRUE.

    e.  Return InternalizeJSONProperty(_root_, _rootName_).

9.  Else

    a.  Return _unfiltered_.

JSON allows Unicode code units 0x2028 (LINE SEPARATOR) and 0x2029
(PARAGRAPH SEPARATOR) to directly appear in _String_ literals without
using an escape sequence. This is enabled by using the following
alternative definition of _DoubleStringCharacter_ when parsing
_scriptText_ in step 5:

_DoubleStringCharacter_ ::

SourceCharacter BUT NOT ONE OF " OR \ OR U+0000 THROUGH U+001F

\ EscapeSequence

-   The SV of _DoubleStringCharacter_ :: _SourceCharacter_ BUT NOT ONE
    OF " OR \ OR U+0000 THROUGH U+001F is the UTF16Encoding (10.1.1) of
    the code point value of _SourceCharacter_.

NOTE The syntax of a valid JSON text is a subset of the ECMAScript
_PrimaryExpression_ syntax. Hence a valid JSON text is also a valid
_PrimaryExpression_. Step 3 above verifies that _JText_ conforms to that
subset. When _scriptText_ is parsed and evaluated as a _Script_ the
result will be either a String, Number, Boolean, or Null primitive value
or an Object defined as if by an _ArrayLiteral_ or _ObjectLiteral_.

Runtime Semantics: InternalizeJSONProperty( holder, name)

The abstract operation InternalizeJSONProperty is a recursive abstract
operation that takes two parameters: a _holder_ object and the String
_name_ of a property in that object. InternalizeJSONProperty uses the
value of _reviver_ that was originally passed to the above parse
function.

1.  Let _val_ be Get(_holder_, _name_).

2.  ReturnIfAbrupt(_val_).

3.  If Type(_val_) is Object, then

    a.  Let _isArray_ be IsArray(_val_).

    b.  ReturnIfAbrupt(_isArray_).

    c.  If _isArray_ is TRUE, then

        i.  Set _I_ to 0.

        ii. Let _len_ be ToLength(Get(_val_, "LENGTH")).

        iii. ReturnIfAbrupt(_len_).

        iv. Repeat while _I_ < _len_,

            1.  Let _newElement_ be InternalizeJSONProperty(_val_,
                ToString(_I_)).

            2.  ReturnIfAbrupt(_newElement_).

            3.  If _newElement_ is UNDEFINED, then

                a.  Let _status_ be _val_.[[Delete]](ToString(_I_)).

            4.  Else

                a.  Let _status_ be CreateDataProperty(_val_,
                    ToString(_I_), _newElement_).

                b.  NOTE This algorithm intentionally does not throw an
                    exception if status is FALSE.

            5.  ReturnIfAbrupt(_status_).

            6.  Add 1 to _I_.

    d.  Else

        i.  Let _keys_ be EnumerableOwnNames(_val_).

        ii. ReturnIfAbrupt(_keys_).

        iii. For each String _P_ in _keys_ do,

            1.  Let _newElement_ be InternalizeJSONProperty(_val_, _P_).

            2.  ReturnIfAbrupt(_newElement_).

            3.  If _newElement_ is UNDEFINED, then

                a.  Let _status_ be _val_.[[Delete]](_P_).

            4.  Else

                a.  Let _status_ be CreateDataProperty(_val_, _P_,
                    _newElement_).

                b.  NOTE This algorithm intentionally does not throw an
                    exception if status is FALSE.

            5.  ReturnIfAbrupt(_status_).

4.  Return Call(_reviver_, _holder_, «_name_, _val_»).

It is not permitted for a conforming implementation of JSON.PARSE to
extend the JSON grammars. If an implementation wishes to support a
modified or extended JSON interchange format it must do so by defining a
different parse function.

NOTE In the case where there are duplicate name Strings within an
object, lexically preceding values for the same key shall be
overwritten.

JSON.stringify ( value [ , replacer [ , space ] ] )

The STRINGIFY function returns a String in UTF-16 encoded JSON format
representing an ECMAScript value. It can take three parameters. The
_value_ parameter is an ECMAScript value, which is usually an object or
array, although it can also be a String, Boolean, Number or NULL. The
optional _replacer_ parameter is either a function that alters the way
objects and arrays are stringified, or an array of Strings and Numbers
that acts as a white list for selecting the object properties that will
be stringified. The optional _space_ parameter is a String or Number
that allows the result to have white space injected into it to improve
human readability.

These are the steps in stringifying an object:

1.  Let _stack_ be an empty List.

2.  Let _indent_ be the empty String.

3.  Let _PropertyList_ and _ReplacerFunction_ be UNDEFINED.

4.  If Type(_replacer_) is Object, then

    a.  If IsCallable(_replacer_) is TRUE, then

        i.  Let _ReplacerFunction_ be _replacer_.

    b.  Else,

        i.  Let _isArray_ be IsArray(_replacer_).

        ii. ReturnIfAbrupt(_isArray_).

        iii. If _isArray_ is TRUE, then

            1.  Let _PropertyList_ be an empty List

            2.  Let _len_ be ToLength(Get(_replacer_, "LENGTH")).

            3.  ReturnIfAbrupt(_len_).

            4.  Let _k_ be 0.

            5.  Repeat while _k_<_len_.

                a.  Let _v_ be Get(_replacer_, ToString(_k_)).

                b.  ReturnIfAbrupt(_v_).

                c.  Let _item_ be UNDEFINED.

                d.  If Type(_v_) is String, let _item_ be _v._

                e.  Else if Type(_v_) is Number, let _item_ be
                    ToString(_v_).

                f.  Else if Type(_v_) is Object, then

                    i.  If _v_ has a [[StringData]] or [[NumberData]]
                        internal slot, let _item_ be ToString(_v_).

                    ii. ReturnIfAbrupt(_item_).

                g.  If _item_ is not UNDEFINED and _item_ is not
                    currently an element of _PropertyList_, then

                    i.  Append _item_ to the end of _PropertyList_.

                h.  Let _k_ be _k_+1.

5.  If Type(_space_) is Object, then

    a.  If _space_ has a [[NumberData]] internal slot, then

        i.  Let _space_ be ToNumber(_space_).

        ii. ReturnIfAbrupt(_space_).

    b.  Else if _space_ has a [[StringData]] internal slot, then

        i.  Let _space_ be ToString(_space_).

        ii. ReturnIfAbrupt(_space_).

6.  If Type(_space_) is Number, then

    a.  Let _space_ be min(10, ToInteger(_space_)).

    b.  Set _gap_ to a String containing _space_ occurrences of code
        unit 0x0020 (SPACE). This will be the empty String if _space_ is
        less than 1.

7.  Else if Type(_space_) is String, then

    a.  If the number of elements in _space_ is 10 or less, set _gap_ to
        _space_ otherwise set _gap_ to a String consisting of the first
        10 elements of _space_.

8.  Else

    a.  Set _gap_ to the empty String.

9.  Let _wrapper_ be ObjectCreate(%ObjectPrototype%).

10. Let _status_ be CreateDataProperty(_wrapper_, the empty String,
    _value_).

11. Assert: _status_ is TRUE.

12. Return SerializeJSONProperty(the empty String, _wrapper_).

NOTE 1 JSON structures are allowed to be nested to any depth, but they
must be acyclic. If _value_ is or contains a cyclic structure, then the
stringify function must throw a TYPEERROR exception. This is an example
of a value that cannot be stringified:

  a = [];

  a[0] = a;

  my_text = JSON.stringify(a); // This must throw a TypeError.

NOTE 2 Symbolic primitive values are rendered as follows:

-   The NULL value is rendered in JSON text as the String NULL.

-   The UNDEFINED value is not rendered.

-   The TRUE value is rendered in JSON text as the String TRUE.

-   The FALSE value is rendered in JSON text as the String FALSE.

NOTE 3 String values are wrapped in QUOTATION MARK (") code units. The
code units " and \ are escaped with \ prefixes. Control characters code
units are replaced with escape sequences \UHHHH, or with the shorter
forms, \B (backspace), \F (form feed), \N (LINE FEED), \R (carriage
return), \T (CHARACTER TABULATION).

NOTE 4 Finite numbers are stringified as if by calling
ToString(_number_). NAN and Infinity regardless of sign are represented
as the String NULL.

NOTE 5 Values that do not have a JSON representation (such as UNDEFINED
and functions) do not produce a String. Instead they produce the
UNDEFINED value. In arrays these values are represented as the String
NULL. In objects an unrepresentable value causes the property to be
excluded from stringification.

NOTE 6 An object is rendered as U+007B (left CURLY BRACKET) followed by
zero or more properties, separated with a U+002C (COMMA), closed with a
U+007D (right CURLY BRACKET). A property is a quoted String representing
the key or property name, a U+003A (colon), and then the stringified
property value. An array is rendered as an opening U+005B (left square
bracket followed by zero or more values, separated with a U+002C
(COMMA), closed with a U+005D (right square bracket).

Runtime Semantics: SerializeJSONProperty ( key, holder )

The abstract operation SerializeJSONProperty with arguments _key_, and
_holder_ has access to _ReplacerFunction_ from the invocation of the
STRINGIFY method. Its algorithm is as follows:

1.  Let _value_ be Get(_holder_, _key_).

2.  ReturnIfAbrupt(_value_).

3.  If Type(_value_) is Object, then

    a.  Let _toJSON_ be Get(_value_, "TOJSON").

    b.  ReturnIfAbrupt(_toJSON_).

    c.  If IsCallable(_toJSON_) is TRUE

        i.  Let _value_ be Call(_toJSON_, _value_, «_key_»).

        ii. ReturnIfAbrupt(_value_).

4.  If _ReplacerFunction_ is not UNDEFINED, then

    a.  Let _value_ be Call(_ReplacerFunction_, _holder_, «_key_,
        _value_»).

    b.  ReturnIfAbrupt(_value_).

5.  If Type(_value_) is Object, then

    a.  If _value_ has a [[NumberData]] internal slot, then

        i.  Let _value_ be ToNumber(_value_).

        ii. ReturnIfAbrupt(_value_).

    b.  Else if _value_ has a [[StringData]] internal slot, then

        i.  Let _value_ be ToString(_value_).

        ii. ReturnIfAbrupt(_value_).

    c.  Else if _value_ has a [[BooleanData]] internal slot, then

        i.  Let _value_ be the value of the [[BooleanData]] internal
            slot of _value_.

6.  If _value_ is NULL, return "NULL".

7.  If _value_ is TRUE, return "TRUE".

8.  If _value_ is FALSE, return "FALSE".

9.  If Type(_value_) is String, return QuoteJSONString(_value_).

10. If Type(_value_) is Number, then

    a.  If _value_ is finite, return ToString(_value_).

    b.  Else, return "NULL".

11. If Type(_value_) is Object, and IsCallable(_value_) is FALSE, then

    a.  Let _isArray_ be IsArray(_value_).

    b.  ReturnIfAbrupt(_isArray_).

    c.  If _isArray_ is TRUE, return SerializeJSONArray(_value_).

    d.  Else, return SerializeJSONObject(_value_).

12. Return UNDEFINED.

Runtime Semantics: QuoteJSONString ( value )

The abstract operation QuoteJSONString with argument _value_ wraps a
String value in QUOTATION MARK code units and escapes certain other code
units within it.

1.  Let _product_ be code unit 0x0022 (QUOTATION MARK).

2.  For each code unit _C_ in _value

    a.  If _C_ is 0x0022 (quOTATion mark) or 0x005C (reverse solidus),
        then

        i.  Let _product_ be the concatenation of _product_ and code
            unit 0x005C (reverse solidus).

        ii. Let _product_ be the concatenation of _product_ and _C_.

    b.  Else if _C_ is 0x0008 (backspace), 0x000C (form feed), 0x000A
        (LINE FEED), 0x000D (carriage return), or 0x000B (LINE
        TABULATION), then

        i.  Let _product_ be the concatenation of _product_ and code
            unit 0x005C (reverse solidus).

        ii. Let _abbrev_ be the string value corresponding to the value
            of _C_ as follows:

  backspace "B"

  form feed (FF) "F"

  LINE FEED (LF) "N"

  carriage return (CR) "R"

  LINE TABULATION "T"

i.  Let _product_ be the concatenation of _product_ and _abbrev_.

a.  Else if _C_ has a code unit value less than 0x0020 (SPACE), then

    i.  Let _product_ be the concatenation of _product_ and code unit
        0x005C (reverse solidus).

    ii. Let _product_ be the concatenation of _product_ and "U".

    iii. Let _hex_ be the string result of converting the numeric code
        unit value of _C_ to a String of four hexadecimal digits.
        Alphabetic hexadecimal digits are presented as lowercase Latin
        letters.

    iv. Let _product_ be the concatenation of _product_ and _hex_.

b.  Else,

    i.  Let _product_ be the concatenation of _product_ and _C_.

1.  Let _product_ be the concatenation of _product_ and code unit 0x
    (QUOTATION MARK).

2.  Return _product_.

Runtime Semantics: SerializeJSONObject ( value )

The abstract operation SerializeJSONObject with argument _value_
serializes an object. It has access to the _stack_, _indent_, _gap_, and
_PropertyList_ values of the current invocation of the STRINGIFY method.

1.  If _stack_ contains _value_, throw a TYPEERROR exception because the
    structure is cyclical.

2.  Append _value_ to _stack_.

3.  Let _stepback_ be _indent_.

4.  Let _indent_ be the concatenation of _indent_ and _gap_.

5.  If _PropertyList_ is not UNDEFINED, then

    a.  Let _K_ be _PropertyList_.

6.  Else,

    a.  Let _K_ be EnumerableOwnNames(_value_).

7.  Let _partial_ be an empty List.

8.  For each element _P_ of _K_,

    a.  Let _strP_ be SerializeJSONProperty(_P_, _value_).

    b.  ReturnIfAbrupt(_strP_).

    c.  If _strP_ is not UNDEFINED, then

        i.  Let _member_ be QuoteJSONString(_P_).

        ii. Let _member_ be the concatenation of _member_ and the string
            ":".

        iii. If _gap_ is not the empty String, then

            1.  Let _member_ be the concatenation of _member_ and code
                unit 0x0020 (SPACE).

        iv. Let _member_ be the concatenation of _member_ and _strP_.

        v.  Append _member_ to _partial_.

9.  If _partial_ is empty, then

    a.  Let _final_ be "{}".

10. Else,

    a.  If _gap_ is the empty String, then

        i.  Let _properties_ be a String formed by concatenating all the
            element Strings of _partial_ with each adjacent pair of
            Strings separated with code unit 0x002C (comma). A comma is
            not inserted either before the first String or after the
            last String.

        ii. Let _final_ be the result of concatenating "{",
            _properties_, and "}".

    b.  Else _gap_ is not the empty String

        i.  Let _separator_ be the result of concatenating code unit
            0x002C (comma), code unit 0x000A (line feed), and _indent_.

        ii. Let _properties_ be a String formed by concatenating all the
            element Strings of _partial_ with each adjacent pair of
            Strings separated with _separator_. The _separator_ String
            is not inserted either before the first String or after the
            last String.

        iii. Let _final_ be the result of concatenating "{", code unit
            0x000A (line feed), _indent_, _properties_, code unit
            0x000A, _stepback_, and "}".

11. Remove the last element of _stack_.

12. Let _indent_ be _stepback_.

13. Return _final_.

Runtime Semantics: SerializeJSONArray ( value )

The abstract operation SerializeJSONArray with argument _value_
serializes an array. It has access to the _stack_, _indent_, and _gap_
values of the current invocation of the STRINGIFY method.

1.  If _stack_ contains _value_, throw a TYPEERROR exception because the
    structure is cyclical.

2.  Append _value_ to _stack_.

3.  Let _stepback_ be _indent_.

4.  Let _indent_ be the concatenation of _indent_ and _gap_.

5.  Let _partial_ be an empty List.

6.  Let _len_ be ToLength(Get(_value_, "LENGTH")).

7.  ReturnIfAbrupt(_len_).

8.  Let _index_ be 0.

9.  Repeat while _index_ < _len

    a.  Let _strP_ be SerializeJSONProperty(ToString(_index_), _value_).

    b.  ReturnIfAbrupt(_strP_).

    c.  If _strP_ is UNDEFINED, then

        i.  Append "NULL" to _partial_.

    d.  Else,

        i.  Append _strP_ to _partial_.

    e.  Increment _index_ by 1.

10. If _partial_ is empty, then

    a.  Let _final_ be "[]".

11. Else,

    a.  If _gap_ is the empty String, then

        i.  Let _properties_ be a String formed by concatenating all the
            element Strings of _partial_ with each adjacent pair of
            Strings separated with code unit 0x002C (comma). A comma is
            not inserted either before the first String or after the
            last String.

        ii. Let _final_ be the result of concatenating "[",
            _properties_, and "]".

    b.  Else,

        i.  Let _separator_ be the result of concatenating code unit
            0x002C (comma), code unit 0x000A (line feed), and _indent_.

        ii. Let _properties_ be a String formed by concatenating all the
            element Strings of _partial_ with each adjacent pair of
            Strings separated with _separator_. The _separator_ String
            is not inserted either before the first String or after the
            last String.

        iii. Let _final_ be the result of concatenating "[", code unit
            0x000A (line feed), _indent_, _properties_, code unit
            0x000A, _stepback_, and "]".

12. Remove the last element of _stack_.

13. Let _indent_ be _stepback_.

14. Return _final_.

NOTE The representation of arrays includes only the elements between
zero and ARRAY.LENGTH – 1 inclusive. Properties whose keys are not array
indexes are excluded from the stringification. An array is stringified
as an opening left square bracket, elements separated by comma, and a
closing right square bracket.

JSON [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"JSON".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.



CONTROL ABSTRACTION OBJECTS


Iteration

Common Iteration Interfaces

An interface is a set of property keys whose associated values match a
specific specification. Any object that provides all the properties as
described by an interface’s specification _conforms_ to that interface.
An interface is not represented by a distinct object. There may be many
separately implemented objects that conform to any interface. An
individual object may conform to multiple interfaces.

The _Iterable_ Interface

The _Iterable_ interface includes the property described in Table 52:

Table 52 — _Iterable_ Interface Required Properties

  _PROPERTY_   _VALUE_                                         _REQUIREMENTS_
  ------------ ----------------------------------------------- ---------------------------------------------------------------
  @@ITERATOR   A function that returns an _Iterator_ object.   The returned object must conform to the _Iterator_ interface.

The _Iterator_ Interface

An object that implements the _Iterator_ interface must include the
property in Table 53. Such objects may also implement the properties in
Table 54.

Table 53 — _Iterator_ Interface Required Properties

  _PROPERTY_   _VALUE_                                               _REQUIREMENTS_
  ------------ ----------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  NEXT         A function that returns an _IteratorResult_ object.   The returned object must conform to the _IteratorResult_ interface. If a previous call to the NEXT method of an _Iterator_ has returned an _IteratorResult_ object whose DONE property is TRUE, then all subsequent calls to the NEXT method of that object should also return an _IteratorResult_ object whose DONE property is TRUE. However, this requirement is not enforced.

NOTE Arguments may be passed to the next function but their
interpretation and validity is dependent upon the target _Iterator_. The
for-of statement and other common users of _Iterators_ do not pass any
arguments, so _Iterator_ objects that expect to be used in such a manner
must be prepared to deal with being called with no arguments.

Table 54 — _Iterator_ Interface Optional Properties

  _PROPERTY_   _VALUE_                                               _REQUIREMENTS_

  RETURN       A function that returns an _IteratorResult_ object.   The returned object must conform to the _IteratorResult_ interface. Invoking this method notifies the _Iterator_ object that the caller does not intend to make any more NEXT method calls to the _Iterator_. The returned _IteratorResult_ object will typically have a DONE property whose value is TRUE, and a VALUE property with the value passed as the argument of the RETURN method. However, this requirement is not enforced.
  THROW        A function that returns an _IteratorResult_ object.   The returned object must conform to the _IteratorResult_ interface. Invoking this method notifies the _Iterator_ object that the caller has detected an error condition. The argument may be used to identify the error condition and typically will be an exception object. A typical response is to THROW the value passed as the argument. If the method does not THROW, the returned _IteratorResult_ object will typically have a DONE property whose value is TRUE.

NOTE Typically callers of these methods should check for their existence
before invoking them. Certain ECMAScript language features including
FOR-OF, YIELD*, and array destructuring call these methods after
performing an existence check. Most ECMAScript library functions that
accept _Iterable_ objects as arguments also conditionally call them.

The IteratorResult Interface

The _IteratorResult_ interface includes the properties listed in Table
55:

Table 55 — _IteratorResult_ Interface Properties

  _PROPERTY_   _VALUE_                          _REQUIREMENTS_
  ------------ -------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  DONE         Either TRUE or FALSE.            This is the result status of an _iterator_ NEXT method call. If the end of the iterator was reached DONE is TRUE. If the end was not reached DONE is FALSE and a value is available. If a DONE property (either own or inherited) does not exist, it is consider to have the value FALSE.
  VALUE        Any ECMAScript language value.   If done is FALSE, this is the current iteration element value. If done is TRUE, this is the return value of the iterator, if it supplied one. If the iterator does not have a return value, VALUE is UNDEFINED. In that case, the VALUE property may be absent from the conforming object if it does not inherit an explicit VALUE property.

The %IteratorPrototype% Object

The value of the [[Prototype]] internal slot of the %IteratorPrototype%
object is the intrinsic object %ObjectPrototype% (19.1.3). The
%IteratorPrototype% object is an ordinary object. The initial value of
the [[Extensible]] internal slot of the %IteratorPrototype% object is
TRUE.

NOTE All objects defined in this specification that implement the
Iterator interface also inherit from %IteratorPrototype%. ECMAScript
code may also define objects that inherit from %IteratorPrototype%.The
%IteratorPrototype% object provides a place where additional methods
that are applicable to all iterator objects may be added.

The following expression is one way that ECMAScript code can access the
%IteratorPrototype% object:

Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))

%IteratorPrototype% [ @@iterator ] ( )

The following steps are taken:

1.  Return the THIS value.

The value of the NAME property of this function is "[SYMBOL.ITERATOR]".


GeneratorFunction Objects

Generator Function objects are constructor functions that are usually
created by evaluating _GeneratorDeclaration_, _GeneratorExpression_, and
_GeneratorMethod_ syntactic productions. They may also be created by
calling the %GeneratorFunction% intrinsic.

  --
  --

Figure 2 (Informative) — Generator Objects Relationships

The GeneratorFunction Constructor

The GENERATORFUNCTION constructor is the %GeneratorFunction% intrinsic.
When GENERATORFUNCTION is called as a function rather than as a
constructor, it creates and initializes a new GeneratorFunction object.
Thus the function call GENERATORFUNCTION (…) is equivalent to the object
creation expression NEW GENERATORFUNCTION (…) with the same arguments.

GENERATORFUNCTION is designed to be subclassable. It may be used as the
value of an EXTENDS clause of a class definition. Subclass constructors
that intend to inherit the specified GENERATORFUNCTION behaviour must
include a SUPER call to the GENERATORFUNCTION constructor to create and
initialize subclass instances with the internal slots necessary for
built-in GeneratorFunction behaviour. All ECMAScript syntactic forms for
defining generator function objects create direct instances of
GENERATORFUNCTION. There is no syntactic means to create instances of
GENERATORFUNCTION subclasses.

GeneratorFunction (p1, p2, … , pn, body)

The last argument specifies the body (executable code) of a generator
function; any preceding arguments specify formal parameters.

When the GENERATORFUNCTION function is called with some arguments _p1_,
_p2_, … , _pn_, _body_ (where _n_ might be 0, that is, there are no
“_p_” arguments, and where _body_ might also not be provided), the
following steps are taken:

1.  Let _C_ be the active function object.

2.  Let _args_ be the _argumentsList_ that was passed to this function
    by [[Call]] or [[Construct]].

3.  Return CreateDynamicFunction(_C_, NewTarget, "GENERATOR", _args_).

NOTE See NOTE for 19.2.1.1.

Properties of the GeneratorFunction Constructor

The GENERATORFUNCTION constructor is a standard built-in function object
that inherits from the FUNCTION constructor. The value of the
[[Prototype]] internal slot of the GENERATORFUNCTION constructor is the
intrinsic object %Function%.

The value of the [[Extensible]] internal slot of the GeneratorFunction
constructor is TRUE.

The value of the NAME property of the GeneratorFunction is
"GENERATORFUNCTION".

The GENERATORFUNCTION constructor has the following properties:

 GeneratorFunction.length

This is a data property with a value of 1. This property has the
attributes { [[Writable]]: FALSE, [[Enumerable]]: FALSE,
[[Configurable]]: TRUE }.

GeneratorFunction.prototype

The initial value of GENERATORFUNCTION.PROTOTYPE is the intrinsic object
%Generator%.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Properties of the GeneratorFunction Prototype Object

The GeneratorFunction prototype object is an ordinary object. It is not
a function object and does not have an [[ECMAScriptCode]] internal slot
or any other of the internal slots listed in Table 27 or Table 56. In
addition to being the value of the prototype property of the
%GeneratorFunction% intrinsic, it is the %Generator% intrinsic (see
Figure 2).

The value of the [[Prototype]] internal slot of the GeneratorFunction
prototype object is the %FunctionPrototype% intrinsic object. The
initial value of the [[Extensible]] internal slot of the
GeneratorFunction prototype object is TRUE.

GeneratorFunction.prototype.constructor

The initial value of GENERATORFUNCTION.PROTOTYPE.CONSTRUCTOR is the
intrinsic object %GeneratorFunction%.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

GeneratorFunction.prototype.prototype

The value of GENERATORFUNCTION.PROTOTYPE.PROTOTYPE is the
%GeneratorPrototype% intrinsic object.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

 GeneratorFunction.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"GENERATORFUNCTION".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

GeneratorFunction Instances

Every GeneratorFunction instance is an ECMAScript function object and
has the internal slots listed in Table 27. The value of the
[[FunctionKind]] internal slot for all such instances is "GENERATOR".

Each GeneratorFunction instance has the following own properties:

length

The value of the LENGTH property is an integer that indicates the
typical number of arguments expected by the GeneratorFunction. However,
the language permits the function to be invoked with some other number
of arguments. The behaviour of a GeneratorFunction when invoked on a
number of arguments other than the number specified by its LENGTH
property depends on the function.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

name

The specification for the NAME property of Function instances given in
19.2.4.2 also applies to GeneratorFunction instances.

prototype

Whenever a GeneratorFunction instance is created another ordinary object
is also created and is the initial value of the generator function’s
PROTOTYPE property. The value of the prototype property is used to
initialize the [[Prototype]] internal slot of a newly created Generator
object when the generator function object is invoked using either
[[Call]] or [[Construct]].

This property has the attributes { [[Writable]]: TRUE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

NOTE Unlike function instances, the object that is the value of the a
GeneratorFunction’s PROTOTYPE property does not have a CONSTRUCTOR
property whose value is the GeneratorFunction instance.


Generator Objects

A Generator object is an instance of a generator function and conforms
to both the _Iterator_ and _Iterable_ interfaces.

Generator instances directly inherit properties from the object that is
the value of the PROTOTYPE property of the Generator function that
created the instance. Generator instances indirectly inherit properties
from the Generator Prototype intrinsic, %GeneratorPrototype%.

Properties of Generator Prototype

The Generator prototype object is the %GeneratorPrototype% intrinsic. It
is also the initial value of the PROTOTYPE property of the %Generator%
intrinsic (the GeneratorFunction.prototype).

The Generator prototype is an ordinary object. It is not a Generator
instance and does not have a [[GeneratorState]] internal slot.

The value of the [[Prototype]] internal slot of the Generator prototype
object is the intrinsic object %IteratorPrototype% (25.1.2). The initial
value of the [[Extensible]] internal slot of the Generator prototype
object is TRUE.

All Generator instances indirectly inherit properties of the Generator
prototype object.

Generator.prototype.constructor

The initial value of GENERATOR.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %Generator%.

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

 Generator.prototype.next ( value )

The NEXT method performs the following steps:

1.  Let _g_ be the THIS value.

2.  Return GeneratorResume(_g_, _value_).

Generator.prototype.return ( value )

The RETURN method performs the following steps:

1.  Let _g_ be the THIS value.

2.  Let _C_ be Completion{[[type]]: return, [[value]]: _value_,
    [[target]]: empty}.

3.  Return GeneratorResumeAbrupt(_g_, _C_).

Generator.prototype.throw ( exception )

The THROW method performs the following steps:

1.  Let _g_ be the THIS value.

2.  Let _C_ be Completion{[[type]]: throw, [[value]]: _exception_,
    [[target]]: empty}.

3.  Return GeneratorResumeAbrupt(_g_, _C_).

Generator.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"GENERATOR".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Generator Instances

Generator instances are initially created with the internal slots
described in Table 56.

Table 56 — Internal Slots of Generator Instances

  ---------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------
  _INTERNAL SLOT_        _DESCRIPTION_
  [[GeneratorState]]     The current execution state of the generator. The possible values are: UNDEFINED, "SUSPENDEDSTART", "SUSPENDEDYIELD", "EXECUTING", and "COMPLETED".
  [[GeneratorContext]]   The execution context that is used when executing the code of this generator.
  ---------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------

Generator Abstract Operations

 GeneratorStart (generator, generatorBody)

The abstract operation GeneratorStart with arguments _generator_ and
_generatorBody_ performs the following steps:

1.  Assert: The value of _generator’s_ [[GeneratorState]] internal slot
    is UNDEFINED.

2.  Let _genContext_ be the running execution context.

3.  Set the Generator component of _genContext_ to _generator.

4.  Set the code evaluation state of _genContext_ such that when
    evaluation is resumed for that execution context the following steps
    will be performed:

    1.  Let _result_ be the result of evaluating _generatorBody_.

    2.  Assert: If we return here, the generator either threw an
        exception or performed either an implicit or explicit return.

    3.  Remove _genContext_ from the execution context stack and restore
        the execution context that is at the top of the execution
        context stack as the running execution context.

    4.  Set _generator’s_ [[GeneratorState]] internal slot to
        "COMPLETED".

    5.  Once a generator enters the "COMPLETED" state it never leaves it
        and its associated execution context is never resumed. Any
        execution state associated with _generator_ can be discarded at
        this point.

    6.  If _result_ is a normal completion, let _resultValue_ be
        UNDEFINED.

    7.  Else,

        a.  If _result_.[[type]] is return, let _resultValue_ be
            _result_.[[value]].

        b.  Else, return Completion(_result_).

    8.  Return CreateIterResultObject(_resultValue_, TRUE).

5.  Set _generator’s_ [[GeneratorContext]] internal slot to
    _genContext_.

6.  Set _generator’s_ [[GeneratorState]] internal slot to
    "SUSPENDEDSTART".

7.  Return NormalCompletion(UNDEFINED).

 GeneratorValidate ( generator )

The abstract operation GeneratorValidate with argument _generator_
performs the following steps:

1.  If Type(_generator_) is not Object, throw a TYPEERROR exception.

2.  If _generator_ does not have a [[GeneratorState]] internal slot,
    throw a TYPEERROR exception.

3.  Assert: _generator_ also has a [[GeneratorContext]] internal slot.

4.  Let _state_ be the value of _generator’s_ [[GeneratorState]]
    internal slot.

5.  If _state_ is "EXECUTING", throw a TYPEERROR exception.

6.  Return _state_.

GeneratorResume ( generator, value )

The abstract operation GeneratorResume with arguments _generator_ and
_value_ performs the following steps:

1.  Let _state_ be GeneratorValidate(_generator_).

2.  ReturnIfAbrupt(_state_).

3.  If _state_ is "COMPLETED", return CreateIterResultObject(UNDEFINED,
    TRUE).

4.  Assert: _state_ is either "SUSPENDEDSTART" or "SUSPENDEDYIELD".

5.  Let _genContext_ be the value of _generator’s_ [[GeneratorContext]]
    internal slot.

6.  Let _methodContext_ be the running execution context.

7.  Suspend _methodContext_.

8.  Set _generator’s_ [[GeneratorState]] internal slot to "EXECUTING".

9.  Push _genContext_ onto the execution context stack; _genContext_ is
    now the running execution context.

10. Resume the suspended evaluation of _genContext_ using
    NormalCompletion(_value_) as the result of the operation that
    suspended it. Let _result_ be the value returned by the resumed
    computation.

11. Assert: When we return here, _genContext_ has already been removed
    from the execution context stack and _methodContext_ is the
    currently running execution context.

12. Return _result_.

GeneratorResumeAbrupt(generator, abruptCompletion)

The abstract operation GeneratorResumeAbrupt with arguments _generator_
and _abruptCompletion_ performs the following steps:

1.  Let _state_ be GeneratorValidate(_generator_).

2.  ReturnIfAbrupt(_state_).

3.  If _state_ is "SUSPENDEDSTART", then

    a.  Set _generator’s_ [[GeneratorState]] internal slot to
        "COMPLETED".

    b.  Once a generator enters the "COMPLETED" state it never leaves it
        and its associated execution context is never resumed. Any
        execution state associated with _generator_ can be discarded at
        this point.

    c.  Let _state_ be "COMPLETED".

4.  If _state_ is "COMPLETED", then

    a.  If _abruptCompletion_.[[type]] is return, then

        i.  Return CreateIterResultObject(_abruptCompletion_.[[value]],
            TRUE).

    b.  Return Completion(_abruptCompletion_).

5.  Assert: _state_ is "SUSPENDEDYIELD".

6.  Let _genContext_ be the value of _generator’s_ [[GeneratorContext]]
    internal slot.

7.  Let _methodContext_ be the running execution context.

8.  Suspend _methodContext_.

9.  Set _generator’s_ [[GeneratorState]] internal slot to "EXECUTING".

10. Push _genContext_ onto the execution context stack; _genContext_ is
    now the running execution context.

11. Resume the suspended evaluation of _genContext_ using
    _abruptCompletion_ as the result of the operation that suspended it.
    Let _result_ be the completion record returned by the resumed
    computation.

12. Assert: When we return here, _genContext_ has already been removed
    from the execution context stack and _methodContext_ is the
    currently running execution context.

13. Return Completion(_result_).

GeneratorYield ( iterNextObj )

The abstract operation GeneratorYield with argument _iterNextObj_
performs the following steps:

1.  Assert: _iterNextObj_ is an Object that implements the
    _IteratorResult_ interface.

2.  Let _genContext_ be the running execution context.

3.  Assert: _genContext_ is the execution context of a generator.

4.  Let _generator_ be the value of the Generator component of
    _genContext_.

5.  Set the value of _generator’s_ [[GeneratorState]] internal slot to
    "SUSPENDEDYIELD".

6.  Remove _genContext_ from the execution context stack and restore the
    execution context that is at the top of the execution context stack
    as the running execution context.

7.  Set the code evaluation state of _genContext_ such that when
    evaluation is resumed with a Completion _resumptionValue_ the
    following steps will be performed:

    1.  Return _resumptionValue_.

    2.  NOTE: This returns to the evaluation of the _YieldExpression_
        production that originally called this abstract operation.

8.  Return NormalCompletion(_iterNextObj_).

9.  NOTE: This returns to the evaluation of the operation that had most
    previously resumed evaluation of _genContext_.


Promise Objects

A Promise is an object that is used as a placeholder for the eventual
results of a deferred (and possibly asynchronous) computation.

Any Promise object is in one of three mutually exclusive states:
_fulfilled_, _rejected_, and _pending_:

-   A promise P is fulfilled if P.THEN(F, R) will immediately enqueue a
    Job to call the function F.

-   A promise P is rejected if P.THEN(F, R) will immediately enqueue a
    Job to call the function R.

-   A promise is pending if it is neither fulfilled nor rejected.

A promise is said to be _settled_ if it is not pending, i.e. if it is
either fulfilled or rejected.

A promise is _resolved_ if it is settled or if it has been “locked in”
to match the state of another promise. Attempting to resolve or reject a
resolved promise has no effect. A promise is _unresolved_ if it is not
resolved. An unresolved promise is always in the pending state. A
resolved promise may be pending, fulfilled or rejected.

Promise Abstract Operations

PromiseCapability Records

A PromiseCapability is a Record value used to encapsulate a promise
object along with the functions that are capable of resolving or
rejecting that promise object. PromiseCapability records are produced by
the NewPromiseCapability abstract operation.

PromiseCapability Records have the fields listed in Table 57.

Table 57 — PromiseCapability Record Fields

  -------------- ------------------- ----------------------------------------------------------------
  _FIELD NAME_   _VALUE_             _MEANING_
  [[Promise]]    An object           An object that is usable as a promise.
  [[Resolve]]    A function object   The function that is used to resolve the given promise object.
  [[Reject]]     A function object   The function that is used to reject the given promise object.
  -------------- ------------------- ----------------------------------------------------------------

IfAbruptRejectPromise ( value, capability )

IfAbruptRejectPromise is a short hand for a sequence of algorithm steps
that use a PromiseCapability record. An algorithm step of the form:

1.  IfAbruptRejectPromise(_value_, _capability_).

means the same thing as:

1.  If _value_ is an abrupt completion,

    a.  Let _rejectResult_ be Call(_capability_.[[Reject]], UNDEFINED,
        «_value_.[[value]]»).

    b.  ReturnIfAbrupt(_rejectResult_).

    c.  Return _capability_.[[Promise]].

2.  Else if _value_ is a Completion Record, let _value_ be
    _value_.[[value]].

PromiseReaction Records

The PromiseReaction is a Record value used to store information about
how a promise should react when it becomes resolved or rejected with a
given value. PromiseReaction records are created by the THEN method of
the Promise prototype, and are used by a PromiseReactionJob.

PromiseReaction records have the fields listed in Table 58.

Table 58 — PromiseReaction Record Fields

  ------------------ ------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  _FIELD NAME_       _VALUE_                         _MEANING_
  [[Capabilities]]   A PromiseCapability record      The capabilities of the promise for which this record provides a reaction handler.
  [[Handler]]        A function object or a String   The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is "IDENTITY" it is equivalent to a function that simply returns its first argument. If [[Handler]] is "THROWER" it is equivalent to a function that throws its first argument as an exception.
  ------------------ ------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CreateResolvingFunctions ( promise )

When CreateResolvingFunctions is performed with argument _promise_, the
following steps are taken:

1.  Let _alreadyResolved_ be a new Record { [[value]]: FALSE }.

2.  Let _resolve_ be a new built-in function object as defined in
    Promise Resolve Functions (25.4.1.3.2).

3.  Set the [[Promise]] internal slot of _resolve_ to _promise_.

4.  Set the [[AlreadyResolved]] internal slot of _resolve_ to
    _alreadyResolved_.

5.  Let _reject_ be a new built-in function object as defined in Promise
    Reject Functions (25.4.1.3.1).

6.  Set the [[Promise]] internal slot of _reject_ to _promise_.

7.  Set the [[AlreadyResolved]] internal slot of _reject_ to
    _alreadyResolved_.

8.  Return a new Record { [[Resolve]]: _resolve_, [[Reject]]: _reject
    }.

Promise Reject Functions

A promise reject function is an anonymous built-in function that has
[[Promise]] and [[AlreadyResolved]] internal slots.

When a promise reject function _F_ is called with argument _reason_, the
following steps are taken:

1.  Assert: _F_ has a [[Promise]] internal slot whose value is an
    Object.

2.  Let _promise_ be the value of _F_'s [[Promise]] internal slot.

3.  Let _alreadyResolved_ be the value of _F_'s [[AlreadyResolved]]
    internal slot.

4.  If _alreadyResolved_.[[value]] is TRUE, return UNDEFINED.

5.  Set _alreadyResolved_.[[value]] to TRUE.

6.  Return RejectPromise(_promise_, _reason_).

Promise Resolve Functions

A promise resolve function is an anonymous built-in function that has
[[Promise]] and [[AlreadyResolved]] internal slots.

When a promise resolve function _F_ is called with argument
_resolution_, the following steps are taken:

1.  Assert: _F_ has a [[Promise]] internal slot whose value is an
    Object.

2.  Let _promise_ be the value of _F_'s [[Promise]] internal slot.

3.  Let _alreadyResolved_ be the value of _F_'s [[AlreadyResolved]]
    internal slot.

4.  If _alreadyResolved_.[[value]] is TRUE, return UNDEFINED.

5.  Set _alreadyResolved_.[[value]] to TRUE.

6.  If SameValue(_resolution_, _promise_) is TRUE, then

    a.  Let _selfResolutionError_ be a newly created TYPEERROR object.

    b.  Return RejectPromise(_promise_, _selfResolutionError_).

7.  If Type(_resolution_) is not Object, then

    a.  Return FulfillPromise(_promise_, _resolution_).

8.  Let _then_ be Get(_resolution_, "THEN").

9.  If _then_ is an abrupt completion, then

    a.  Return RejectPromise(_promise_, _then_.[[value]]).

10. Let _thenAction_ be _then_.[[value]].

11. If IsCallable(_thenAction_) is FALSE, then

    a.  Return FulfillPromise(_promise_, _resolution_).

12. Perform EnqueueJob ("PromiseJobs", PromiseResolveThenableJob,
    «‍_promise_, _resolution_, _thenAction_»)

13. Return UNDEFINED.

FulfillPromise ( promise, value)

When the FulfillPromise abstract operation is called with arguments
_promise_ and _value_ the following steps are taken:

1.  Assert: the value of _promise_'s [[PromiseState]] internal slot is
    "PENDING".

2.  Let _reactions_ be the value of _promise_'s
    [[PromiseFulfillReactions]] internal slot.

3.  Set the value of _promise_'s [[PromiseResult]] internal slot to
    _value_.

4.  Set the value of _promise_'s [[PromiseFulfillReactions]] internal
    slot to UNDEFINED.

5.  Set the value of _promise_'s [[PromiseRejectReactions]] internal
    slot to UNDEFINED.

6.  Set the value of _promise_'s [[PromiseState]] internal slot to
    "FULFILLED".

7.  Return TriggerPromiseReactions(_reactions_, _value_).

NewPromiseCapability ( C )

The abstract operation NewPromiseCapability takes a constructor
function, and attempts to use that constructor function in the fashion
of the built-in PROMISE constructor to create a Promise object and
extract its resolve and reject functions. The promise plus the resolve
and reject functions are used to initialize a new PromiseCapability
record which is returned as the value of this abstract operation.

1.  If IsConstructor(_C_) is FALSE, throw a TYPEERROR exception.

2.  NOTE _C_ is assumed to be a constructor function that supports the
    parameter conventions of the PROMISE constructor (see 25.4.3.1).

3.  Let _promiseCapability_ be a new PromiseCapability { [[Promise]]:
    UNDEFINED, [[Resolve]]: UNDEFINED, [[Reject]]: UNDEFINED }.

4.  Let _executor_ be a new built-in function object as defined in
    GetCapabilitiesExecutor Functions (25.4.1.5.1).

5.  Set the [[Capability]] internal slot of _executor_ to
    _promiseCapability_.

6.  Let _promise_ be Construct(_C_, «_executor_»).

7.  ReturnIfAbrupt(_promise_).

8.  If IsCallable(_promiseCapability_.[[Resolve]]) is FALSE, throw a
    TYPEERROR exception.

9.  If IsCallable(_promiseCapability_.[[Reject]]) is FALSE, throw a
    TYPEERROR exception.

10. Set _promiseCapability_.[[Promise]] to _promise_.

11. Return _promiseCapability_.

NOTE This abstract operation supports Promise subclassing, as it is
generic on any constructor that calls a passed executor function
argument in the same way as the Promise constructor. It is used to
generalize static methods of the Promise constructor to any subclass.

GetCapabilitiesExecutor Functions

A GetCapabilitiesExecutor function is an anonymous built-in function
that has a [[Capability]] internal slot.

When a GetCapabilitiesExecutor function _F_ is called with arguments
_resolve_ and _reject_ the following steps are taken:

1.  Assert: _F_ has a [[Capability]] internal slot whose value is a
    PromiseCapability Record.

2.  Let _promiseCapability_ be the value of _F_'s [[Capability]]
    internal slot.

3.  If _promiseCapability_.[[Resolve]] is not UNDEFINED, throw a
    TYPEERROR exception.

4.  If _promiseCapability_.[[Reject]] is not UNDEFINED, throw a
    TYPEERROR exception.

5.  Set _promiseCapability_.[[Resolve]] to _resolve_.

6.  Set _promiseCapability_.[[Reject]] to _reject_.

7.  Return UNDEFINED.

IsPromise ( x )

The abstract operation IsPromise checks for the promise brand on an
object.

1.  If Type(_x_) is not Object, return FALSE.

2.  If _x_ does not have a [[PromiseState]] internal slot, return FALSE.

3.  Return TRUE.

RejectPromise ( promise, reason)

When the RejectPromise abstract operation is called with arguments
_promise_ and _reason_ the following steps are taken:

1.  Assert: the value of _promise_'s [[PromiseState]] internal slot is
    "PENDING".

2.  Let _reactions_ be the value of _promise_'s
    [[PromiseRejectReactions]] internal slot.

3.  Set the value of _promise_'s [[PromiseResult]] internal slot to
    _reason_.

4.  Set the value of _promise_'s [[PromiseFulfillReactions]] internal
    slot to UNDEFINED.

5.  Set the value of _promise_'s [[PromiseRejectReactions]] internal
    slot to UNDEFINED.

6.  Set the value of _promise_'s [[PromiseState]] internal slot to
    "REJECTED".

7.  Return TriggerPromiseReactions(_reactions_, _reason_).

TriggerPromiseReactions ( reactions, argument )

The abstract operation TriggerPromiseReactions takes a collection of
PromiseReactionRecords and enques a new Job for each record. Each such
Job processes the [[Hanlder]] of the PromiseReactionRecord, and if the
[[Handler]] is a function calls it passing the given argument.

1.  Repeat for each _reaction_ in _reactions_, in original insertion
    order

    a.  Perform EnqueueJob("PROMISEJOBS", PromiseReactionJob,
        «‍_reaction_, _argument_»).

2.  Return UNDEFINED.

Promise Jobs

PromiseReactionJob ( reaction, argument )

The job PromiseReactionJob with parameters _reaction_ and _argument_
applies the appropriate handler to the incoming value, and uses the
handler's return value to resolve or reject the derived promise
associated with that handler.

1.  Assert: _reaction_ is a PromiseReaction Record.

2.  Let _promiseCapability_ be _reaction_.[[Capabilities]].

3.  Let _handler_ be _reaction_.[[Handler]].

4.  If _handler_ is "IDENTITY", let _handlerResult_ be
    NormalCompletion(_argument_).

5.  Else if _handler_ is "THROWER", let _handlerResult_ be
    Completion{[[type]]: throw, [[value]]: _argument_, [[target]]:
    empty}.

6.  Else, let _handlerResult_ be Call(_handler_, UNDEFINED,
    «_argument_»).

7.  If _handlerResult_ is an abrupt completion, then

    a.  Let _status_ be Call(_promiseCapability_.[[Reject]], UNDEFINED,
        «_handlerResult_.[[value]]»).

    b.  NextJob Completion(_status_).

8.  9.  Let _status_ be Call(_promiseCapability_.[[Resolve]], UNDEFINED,
    «_handlerResult_.[[value]]»)_._

10. NextJob Completion(_status_).

PromiseResolveThenableJob ( promiseToResolve, thenable, then)

The job PromiseResolveThenableJob with parameters _promiseToResolve_,
_thenable_, and _then_ performs the following steps:

1.  Let _resolvingFunctions_ be
    CreateResolvingFunctions(_promiseToResolve_).

2.  Let _thenCallResult_ be Call(_then_, _thenable_,
    «_resolvingFunctions_.[[Resolve]],
    _resolvingFunctions_.[[Reject]]»).

3.  If _thenCallResult_ is an abrupt completion,

    a.  Let _status_ be Call(_resolvingFunctions_.[[Reject]], UNDEFINED,
        «_thenCallResult_.[[value]]»)_._

    b.  NextJob Completion(_status_)_._

4.  NextJob Completion(_thenCallResult_).

NOTE This Job uses the supplied thenable and its THEN method to resolve
the given promise. This process must take place as a Job to ensure that
the evaluation of the THEN method occurs after evaluation of any
surrounding code has completed.

The Promise Constructor

The Promise constructor is the %Promise% intrinsic object and the
initial value of the PROMISE property of the global object. When called
as a constructor it creates and initializes a new Promise object.
PROMISE is not intended to be called as a function and will throw an
exception when called in that manner.

The PROMISE constructor is designed to be subclassable. It may be used
as the value in an EXTENDS clause of a class definition. Subclass
constructors that intend to inherit the specified PROMISE behaviour must
include a SUPER call to the PROMISE constructor to create and initialize
the subclass instance with the internal state necessary to support the
PROMISE and PROMISE.PROTOTYPE built-in methods.

Promise ( executor )

When the PROMISE function is called with argument _executor_ the
following steps are taken:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  If IsCallable(_executor_) is FALSE, throw a TYPEERROR exception.

3.  Let _promise_ be OrdinaryCreateFromConstructor(NewTarget,
    "%PROMISEPROTOTYPE%", «‍[[PromiseState]], [[PromiseConstructor]],
    [[PromiseResult]], [[PromiseFulfillReactions]],
    [[PromiseRejectReactions]]» ).

4.  ReturnIfAbrupt(_promise_).

5.  Set the value of _promise’s_ [[PromiseConstructor]] internal slot to
    NewTarget.

6.  Set _promise_'s [[PromiseState]] internal slot to "PENDING".

7.  Set _promise_'s [[PromiseFulfillReactions]] internal slot to a new
    empty List.

8.  Set _promise_'s [[PromiseRejectReactions]] internal slot to a new
    empty List.

9.  Let _resolvingFunctions_ be CreateResolvingFunctions(_promise_).

10. Let _completion_ be Call(_executor_, UNDEFINED,
    «_resolvingFunctions_.[[Resolve]],
    _resolvingFunctions_.[[Reject]]»).

11. If _completion_ is an abrupt completion, then

    a.  Let _status_ be Call(_resolvingFunctions_.[[Reject]], UNDEFINED,
        «_completion_.[[value]]»).

    b.  ReturnIfAbrupt(_status_).

12. Return _promise_.

NOTE The _executor_ argument must be a function object. It is called for
initiating and reporting completion of the possibly deferred action
represented by this Promise object. The executor is called with two
arguments: _resolve_ and _reject_. These are functions that may be used
by the _executor_ function to report eventual completion or failure of
the deferred computation. Returning from the executor function does not
mean that the deferred action has been completed but only that the
request to eventually perform the deferred action has been accepted.

The _resolve_ function that is passed to an _executor_ function accepts
a single argument. The _executor_ code may eventually call the _resolve_
function to indicate that it wishes to resolve the associated Promise
object. The argument passed to the _resolve_ function represents the
eventual value of the deferred action and can be either the actual
fulfillment value or another Promise object which will provide the value
if it is fulfilled.

The _reject_ function that is passed to an _executor_ function accepts a
single argument. The _executor_ code may eventually call the _reject_
function to indicate that the associated Promise is rejected and will
never be fulfilled. The argument passed to the _reject_ function is used
as the rejection value of the promise. Typically it will be an ERROR
object.

The resolve and reject functions passed to an _executor_ function by the
Promise constructor have the capability to actually resolve and reject
the associated promise. Subclasses may have different constructor
behaviour that passes in customized values for resolve and reject.

Properties of the Promise Constructor

The value of the [[Prototype]] internal slot of the PROMISE constructor
is the intrinsic object %FunctionPrototype% (19.2.3).

Besides the LENGTH property (whose value is 1), the Promise constructor
has the following properties:

Promise.all ( iterable ) 

The ALL function returns a new promise which is fulfilled with an array
of fulfillment values for the passed promises, or rejects with the
reason of the first passed promise that rejects. It resolves all
elements of the passed iterable to promises as it runs this algorithm.

1.  Let _C_ be the THIS value.

2.  If Type(_C_) is not Object, throw a TYPEERROR exception.

3.  Let _S_ be Get(_C_, @@species).

4.  ReturnIfAbrupt(_S_).

5.  If _S_ is neither UNDEFINED nor NULL, let _C_ be _S_.

6.  Let _promiseCapability_ be NewPromiseCapability(_C_).

7.  ReturnIfAbrupt(_promiseCapability_).

8.  Let _iterator_ be GetIterator(_iterable_).

9.  IfAbruptRejectPromise(_iterator_, _promiseCapability_).

10. Let _iteratorRecord_ be Record {[[iterator]]: _iterator_, [[done]]:
    FALSE}.

11. Let _result_ be PerformPromiseAll(_iterator_, _C_,
    _promiseCapability_).

12. If _result_ is an abrupt completion,

    a.  If _iteratorRecord_.[[done]] is FALSE, let _result_ be
        IteratorClose(_iterator_, _result_).

    b.  IfAbruptRejectPromise(_result_, _promiseCapability_).

13. Return Completion(_result_).

Note: The ALL function requires its THIS value to be a constructor
function that supports the parameter conventions of the PROMISE
constructor.

Runtime Semantics: PerformPromiseAll( iteratorRecord, constructor, resultCapability)

When the PerformPromiseAll abstract operation is called with arguments
_iteratorRecord, constructor,_ and _resultCapability_ the following
steps are taken:

1.  Assert: _constructor_ is a constructor function.

2.  Assert: _resultCapability_ is a PromiseCapability record.

3.  Let _values_ be a new empty List.

4.  Let _remainingElementsCount_ be a new Record { [[value]]: 1 }.

5.  Let _index_ be 0.

6.  Repeat

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE,

        i.  Set _iteratorRecord_.[[done]] to TRUE.

        ii. Set _remainingElementsCount_.[[value]] to
            _remainingElementsCount_.[[value]] − 1.

        iii. If _remainingElementsCount_.[[value]] is 0,

            1.  Let _valuesArray_ be CreateArrayFromList(_values_).

            2.  Let _resolveResult_ be
                Call(_resultCapability_.[[Resolve]], UNDEFINED,
                «_valuesArray_»).

            3.  ReturnIfAbrupt(_resolveResult_)

        iv. Return _resultCapability_.[[Promise]].

    e.  Let _nextValue_ be IteratorValue(_next_).

    f.  If _nextValue_ is an abrupt completion, set
        _iteratorRecord_.[[done]] to TRUE.

    g.  ReturnIfAbrupt(_nextValue_).

    h.  Append UNDEFINED to _values_.

    i.  Let _nextPromise_ be Invoke(_constructor_, "RESOLVE",
        «‍_nextValue_»).

    j.  ReturnIfAbrupt(_nextPromise_ ).

    k.  Let _resolveElement_ be a new built-in function object as
        defined in Promise.all Resolve Element Functions.

    l.  Set the [[AlreadyCalled]] internal slot of _resolveElement_ to a
        new Record {[[value]]: FALSE }.

    m.  Set the [[Index]] internal slot of _resolveElement_ to _index_.

    n.  Set the [[Values]] internal slot of _resolveElement_ to
        _values_.

    o.  Set the [[Capabilities]] internal slot of _resolveElement_ to
        _resultCapability_.

    p.  Set the [[RemainingElements]] internal slot of _resolveElement_
        to _remainingElementsCount_.

    q.  Set _remainingElementsCount_.[[value]] to
        _remainingElementsCount_.[[value]] + 1.

    r.  Let _result_ be Invoke(_nextPromise_, "THEN",
        «‍_resolveElement_, _resultCapability_.[[Reject]]»).

    s.  ReturnIfAbrupt(_result_).

    t.  Set _index_ to _index_ + 1.

Promise.all Resolve Element Functions

A Promise.all resolve element function is an anonymous built-in function
that is used to resolve a specific Promise.all element. Each Promise.all
resolve element function has [[Index]], [[Values]], [[Capabilities]],
[[RemainingElements]], and [[AlreadyCalled]] internal slots.

When a Promise.all resolve element function _F_ is called with argument
_x_, the following steps are taken:

1.  Let _alreadyCalled_ be the value of _F_'s [[AlreadyCalled]] internal
    slot.

2.  If _alreadyCalled_.[[value]] is TRUE, return UNDEFINED.

3.  Set _alreadyCalled_.[[value]] to TRUE.

4.  Let _index_ be the value of _F_'s [[Index]] internal slot.

5.  Let _values_ be the value of _F_'s [[Values]] internal slot.

6.  Let _promiseCapability_ be the value of _F_'s [[Capabilities]]
    internal slot.

7.  Let _remainingElementsCount_ be the value of _F_'s
    [[RemainingElements]] internal slot.

8.  Set _values_[_index_] to _x_.

9.  Set _remainingElementsCount_.[[value]] to
    _remainingElementsCount_.[[value]] - 1.

10. If _remainingElementsCount_.[[value]] is 0,

    a.  Let _valuesArray_ be CreateArrayFromList(_values_).

    b.  Return Call(_promiseCapability_.[[Resolve]], UNDEFINED,
        «_valuesArray_»).

11. Return UNDEFINED.

Promise.prototype

The initial value of PROMISE.PROTOTYPE is the intrinsic object
%PromisePrototype% (25.4.5).

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: FALSE }.

Promise.race ( iterable )

The RACE function returns a new promise which is settled in the same way
as the first passed promise to settle. It resolves all elements of the
passed iterable to promises as it runs this algorithm.

1.  Let _C_ be the THIS value.

2.  If Type(_C_) is not Object, throw a TYPEERROR exception.

3.  Let _S_ be Get(_C_, @@species).

4.  ReturnIfAbrupt(_S_).

5.  If _S_ is neither UNDEFINED nor NULL, let _C_ be _S_.

6.  Let _promiseCapability_ be NewPromiseCapability(_C_).

7.  ReturnIfAbrupt(_promiseCapability_).

8.  Let _iterator_ be GetIterator(_iterable_).

9.  IfAbruptRejectPromise(_iterator_, _promiseCapability_).

10. Let _iteratorRecord_ be Record {[[iterator]]: _iterator_, [[done]]:
    FALSE}.

11. Let _result_ be PerformPromiseRace(_iteratorRecord_,
    _promiseCapability_, _C_).

12. If _result_ is an abrupt completion, then

    a.  If _iteratorRecord_.[[done]] is FALSE, let _result_ be
        IteratorClose(_iterator,result_).

    b.  IfAbruptRejectPromise(_result_, _promiseCapability_).

13. Return Completion(_result_).

NOTE 1 If the _iterable_ argument is empty or if none of the promises in
_iterable_ ever settle then the pending promise returned by this method
will never be settled

NOTE 2 The RACE function expects its THIS value to be a constructor
function that supports the parameter conventions of the PROMISE
constructor. It also expects that its THIS value provides a RESOLVE
method.

Runtime Semantics: PerformPromiseRace ( iteratorRecord, promiseCapability, C )

When the PerformPromiseRace abstract operation is called with arguments
_iteratorRecord, promiseCapability,_ and _C_ the following steps are
taken:

1.  Repeat

    a.  Let _next_ be IteratorStep(_iteratorRecord_.[[iterator]]).

    b.  If _next_ is an abrupt completion, set _iteratorRecord_.[[done]]
        to TRUE.

    c.  ReturnIfAbrupt(_next_).

    d.  If _next_ is FALSE, then

        i.  Set _iteratorRecord_.[[done]] to TRUE.

        ii. Return _promiseCapability_.[[Promise]].

    e.  Let _nextValue_ be IteratorValue(_next_).

    f.  If _nextValue_ is an abrupt completion, set
        _iteratorRecord_.[[done]] to TRUE.

    g.  ReturnIfAbrupt(_nextValue_).

    h.  Let _nextPromise_ be Invoke(_C_, "RESOLVE", «‍_nextValue_»).

    i.  ReturnIfAbrupt(_nextPromise_).

    j.  Let _result_ be Invoke(_nextPromise_, "THEN",
        «‍_promiseCapability_.[[Resolve]],
        _promiseCapability_.[[Reject]]»).

    k.  ReturnIfAbrupt(_result_).

Promise.reject ( r )

The REJECT function returns a new promise rejected with the passed
argument.

1.  Let _C_ be the THIS value.

2.  If Type(_C_) is not Object, throw a TYPEERROR exception.

3.  Let _S_ be Get(_C_, @@species).

4.  ReturnIfAbrupt(_S_).

5.  If _S_ is neither UNDEFINED nor NULL, let _C_ be _S_.

6.  Let _promiseCapability_ be NewPromiseCapability(_C_).

7.  ReturnIfAbrupt(_promiseCapability_).

8.  Let _rejectResult_ be Call(_promiseCapability_.[[Reject]],
    UNDEFINED, «_r_»).

9.  ReturnIfAbrupt(_rejectResult_).

10. Return _promiseCapability_.[[Promise]].

NOTE The REJECT function expects its THIS value to be a constructor
function that supports the parameter conventions of the PROMISE
constructor.

Promise.resolve ( x )

The RESOLVE function returns either a new promise resolved with the
passed argument, or the argument itself if the argument is a promise
produced by this constructor.

1.  Let _C_ be the THIS value.

2.  If IsPromise(_x_) is TRUE,

    a.  Let _constructor_ be the value of _x_'s [[PromiseConstructor]]
        internal slot.

    b.  If SameValue(_constructor_, _C_) is TRUE, return _x_.

3.  If Type(_C_) is not Object, throw a TYPEERROR exception.

4.  Let _S_ be Get(_C_, @@species).

5.  ReturnIfAbrupt(_S_).

6.  If _S_ is neither UNDEFINED nor NULL, let _C_ be _S_.

7.  Let _promiseCapability_ be NewPromiseCapability(_C_).

8.  ReturnIfAbrupt(_promiseCapability_).

9.  Let _resolveResult_ be Call(_promiseCapability_.[[Resolve]],
    UNDEFINED, «_x_»).

10. ReturnIfAbrupt(_resolveResult_).

11. Return _promiseCapability_.[[Promise]].

NOTE The RESOLVE function expects its THIS value to be a constructor
function that supports the parameter conventions of the PROMISE
constructor.

get Promise [ @@species ] 

PROMISE[@@SPECIES] is an accessor property whose set accessor function
is UNDEFINED. Its get accessor function performs the following steps:

1.  Return the THIS value.

The value of the NAME property of this function is "GET
[SYMBOL.SPECIES]".

NOTE Promise prototype methods normally use their THIS object’s
constructor to create a derived object. However, a subclass constructor
may over-ride that default behaviour by redefining its @@species
property.

Properties of the Promise Prototype Object

The Promise prototype object is the intrinsic object %PromisePrototype%.
The value of the [[Prototype]] internal slot of the Promise prototype
object is the intrinsic object %ObjectPrototype% (19.1.3). The Promise
prototype object is an ordinary object. It does not have a
[[PromiseState]] internal slot or any of the other internal slots of
Promise instances.

Promise.prototype.catch ( onRejected )

When the CATCH method is called with argument _onRejected_ the following
steps are taken:

1.  Let _promise_ be the THIS value.

2.  Return Invoke(_promise_, "THEN", «‍UNDEFINED, _onRejected_»).

Promise.prototype.constructor

The initial value of PROMISE.PROTOTYPE.CONSTRUCTOR is the intrinsic
object %Promise%.

Promise.prototype.then ( onFulfilled , onRejected )

When the THEN method is called with arguments _onFulfilled_ and
_onRejected_ the following steps are taken:

1.  Let _promise_ be the THIS value.

2.  If IsPromise(_promise_) is FALSE, throw a TYPEERROR exception.

3.  Let _C_ be SpeciesConstructor(_promise_, %Promise%).

4.  ReturnIfAbrupt(_C_).

5.  Let _resultCapability_ be NewPromiseCapability(_C_).

6.  ReturnIfAbrupt(_resultCapability_).

7.  Return PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_,
    _resultCapability_).

PerformPromiseThen ( promise, onFulfilled, onRejected, resultCapability )

The abstract operation PerformPromiseThen performs the “then” operation
on _promise_ using _onFulfilled_ and _onRejected_ as its settlement
actions. The result is _resultCapability_’s promise.

1.  Assert: IsPromise(_promise_) is TRUE.

2.  Assert: _resultCapability_ is a PromiseCapability record.

3.  If IsCallable(_onFulfilled_) is FALSE, then

    a.  Let _onFulfilled_ be "IDENTITY".

4.  If IsCallable(_onRejected_) is FALSE, then

    a.  Let _onRejected_ be "THROWER".

5.  Let _fulfillReaction_ be the PromiseReaction { [[Capabilities]]:
    _resultCapability_, [[Handler]]: _onFulfilled_ }.

6.  Let _rejectReaction_ be the PromiseReaction { [[Capabilities]]:
    _resultCapability_, [[Handler]]: _onRejected_}.

7.  If the value of _promise_'s [[PromiseState]] internal slot is
    "PENDING",

    a.  Append _fulfillReaction_ as the last element of the List that is
        the value of _promise_'s [[PromiseFulfillReactions]] internal
        slot.

    b.  Append _rejectReaction_ as the last element of the List that is
        the value of _promise_'s [[PromiseRejectReactions]] internal
        slot.

8.  Else if the value of _promise_'s [[PromiseState]] internal slot is
    "FULFILLED",

    a.  Let _value_ be the value of _promise_'s [[PromiseResult]]
        internal slot.

    b.  Perform EnqueueJob("PROMISEJOBS", PromiseReactionJob,
        «‍_fulfillReaction_, _value_»).

9.  Else if the value of _promise_'s [[PromiseState]] internal slot is
    "REJECTED",

    a.  Let _reason_ be the value of _promise_'s [[PromiseResult]]
        internal slot.

    b.  Perform EnqueueJob("PROMISEJOBS", PromiseReactionJob,
        «‍_rejectReaction_, _reason_»).

10. Return _resultCapability_.[[Promise]].

Promise.prototype [ @@toStringTag ]

The initial value of the @@toStringTag property is the string value
"PROMISE".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

Properties of Promise Instances

Promise instances are ordinary objects that inherit properties from the
Promise prototype object (the intrinsic, %PromisePrototype%). Promise
instances are initially created with the internal slots described in
Table 59.

Table 59 — Internal Slots of Promise Instances

  ----------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------
  _INTERNAL SLOT_               _DESCRIPTION_
  [[PromiseState]]                A string value that governs how a promise will react to incoming calls to its THEN method. The possible values are: "PENDING", "FULFILLED", and "REJECTED".
  [[PromiseConstructor]]          The function object that was used to construct this promise. Checked by the RESOLVE method of the PROMISE constructor.
  [[PromiseResult]]               The value with which the promise has been fulfilled or rejected, if any. Only meaningful if [[PromiseState]] is not "PENDING".
  [[PromiseFulfillReactions]]     A List of PromiseReaction records to be processed when/if the promise transitions from the "PENDING" state to the "FULFILLED" state.
  [[PromiseRejectReactions]]      A List of PromiseReaction records to be processed when/if the promise transitions from the "PENDING" state to the "REJECTED" state.
  ----------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------



REFLECTION 


The Reflect Object

The Reflect object is the %Reflect% intrinsic object and the initial
value of the REFLECT property of the global object.The Reflect object is
an ordinary object.

The value of the [[Prototype]] internal slot of the Reflect object is
the intrinsic object %ObjectPrototype% (19.1.3).

The Reflect object is not a function object. It does not have a
[[Construct]] internal method; it is not possible to use the Reflect
object as a constructor with the NEW operator. The Reflect object also
does not have a [[Call]] internal method; it is not possible to invoke
the Reflect object as a function.

Reflect.apply ( target, thisArgument, argumentsList )

When the APPLY function is called with arguments _target_,
_thisArgument_, and _argumentsList_ the following steps are taken:

1.  If IsCallable(_target_) is FALSE, throw a TYPEERROR exception.

2.  Let _args_ be CreateListFromArrayLike(_argumentsList_).

3.  ReturnIfAbrupt(_args_).

4.  Perform PrepareForTailCall().

5.  Return Call(_target_, _thisArgument_, _args_).

Reflect.construct ( target, argumentsList [, newTarget] )

When the CONSTRUCT function is called with arguments _target_,
_argumentsList_, and _newTarget_ the following steps are taken:

1.  If IsConstructor(_target_) is FALSE, throw a TYPEERROR exception.

2.  If _newTarget_ is not present, let _newTarget_ be _target_.

3.  Else, if IsConstructor(_newTarget_) is FALSE, throw a TYPEERROR
    exception.

4.  Let _args_ be CreateListFromArrayLike(_argumentsList_).

5.  ReturnIfAbrupt(_args_).

6.  Return Construct(_target_, _args_, _newTarget_).

The LENGTH property of the CONSTRUCT function is 2.

Reflect.defineProperty ( target, propertyKey, attributes )

When the DEFINEPROPERTY function is called with arguments _target_,
_propertyKey_, and _attributes_ the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Let _key_ be ToPropertyKey(_propertyKey_).

3.  ReturnIfAbrupt(_key_).

4.  Let _desc_ be ToPropertyDescriptor(_attributes_).

5.  ReturnIfAbrupt(_desc_).

6.  Return _target._[[DefineOwnProperty]](_key_, _desc_).

Reflect.deleteProperty ( target, propertyKey )

When the DELETEPROPERTY function is called with arguments _target_ and
_propertyKey_, the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Let _key_ be ToPropertyKey(_propertyKey_).

3.  ReturnIfAbrupt(_key_).

4.  Return _target._[[Delete]](_key_).

Reflect.enumerate ( target )

When the ENUMERATE function is called with argument _target_ the
following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Return _target._[[Enumerate]]().

Reflect.get ( target, propertyKey [ , receiver ])

When the GET function is called with arguments _target_, _propertyKey_,
and _receiver_ the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Let _key_ be ToPropertyKey(_propertyKey_).

3.  ReturnIfAbrupt(_key_).

4.  If _receiver_ is not present, then

    a.  Let _receiver_ be _target_.

5.  Return _target._[[Get]](_key_, _receiver_).

The LENGTH property of the GET function is 2.

Reflect.getOwnPropertyDescriptor ( target, propertyKey )

When the GETOWNPROPERTYDESCRIPTOR function is called with arguments
_target_ and _propertyKey_, the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Let _key_ be ToPropertyKey(_propertyKey_).

3.  ReturnIfAbrupt(_key_).

4.  Let _desc_ be _target._[[GetOwnProperty]](_key_).

5.  ReturnIfAbrupt(_desc_).

6.  Return FromPropertyDescriptor(_desc_).

Reflect.getPrototypeOf ( target )

When the GETPROTOTYPEOF function is called with argument _target_ the
following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Return _target._[[GetPrototypeOf]]().

Reflect.has ( target, propertyKey )

When the HAS function is called with arguments _target_ and
_propertyKey_, the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Let _key_ be ToPropertyKey(_propertyKey_).

3.  ReturnIfAbrupt(_key_).

4.  Return _target._[[HasProperty]](_key_).

Reflect.isExtensible (target)

When the ISEXTENSIBLE function is called with argument _target_ the
following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Return _target._[[IsExtensible]]().

Reflect.ownKeys ( target )

When the OWNKEYS function is called with argument _target_ the following
steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Let _keys_ be _target._[[OwnPropertyKeys]]().

3.  ReturnIfAbrupt(_keys_).

4.  Return CreateArrayFromList(_keys_).

Reflect.preventExtensions ( target )

When the PREVENTEXTENSIONS function is called with argument _target_,
the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Return _target._[[PreventExtensions]]().

Reflect.set ( target, propertyKey, V [ , receiver ] )

When the SET function is called with arguments _target_, _V_,
_propertyKey_, and _receiver_ the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  Let _key_ be ToPropertyKey(_propertyKey_).

3.  ReturnIfAbrupt(_key_).

4.  If _receiver_ is not present, then

    a.  Let _receiver_ be _target_.

5.  Return _target._[[Set]](_key_, _V_, _receiver_).

The LENGTH property of the SET function is 3.

Reflect.setPrototypeOf ( target, proto )

When the SETPROTOTYPEOF function is called with arguments _target_ and
_propertyKey_, the following steps are taken:

1.  If Type(_target_) is not Object, throw a TYPEERROR exception.

2.  If Type(_proto_) is not Object and _proto_ is not NULL, throw a
    TYPEERROR exception

3.  Return _target._[[SetPrototypeOf]](_proto_).


Proxy Objects

The Proxy Constructor 

The Proxy constructor is the %Proxy% intrinsic object and the initial
value of the PROXY property of the global object. When called as a
constructor it creates and initializes a new proxy exotic object. PROXY
is not intended to be called as a function and will throw an exception
when called in that manner.

Proxy ( target, handler )

When PROXY is called with arguments _target_ and _handler_ performs the
following steps:

1.  If NewTarget is UNDEFINED, throw a TYPEERROR exception.

2.  Return ProxyCreate(_target_, _handler_).

Properties of the Proxy Constructor 

The value of the [[Prototype]] internal slot of the PROXY constructor is
the intrinsic object %FunctionPrototype% (19.2.3).

The PROXY constructor does not have a PROTOTYPE property because proxy
exotic objects do not have a [[Prototype]] internal slot that requires
initialization.

Besides the LENGTH property (whose value is 2), the PROXY constructor
has the following properties:

Proxy.revocable ( target, handler )

The PROXY.REVOCABLE function is used to create a revocable Proxy object.
When PROXY.REVOCABLE is called with arguments _target_ and _handler_ the
following steps are taken:

1.  Let _p_ be ProxyCreate(_target_, _handler_).

2.  ReturnIfAbrupt(_p_).

3.  Let _revoker_ be a new built-in function object as defined in
    26.2.2.1.1.

4.  Set the [[RevocableProxy]] internal slot of _revoker_ to _p_.

5.  Let _result_ be ObjectCreate(%ObjectPrototype%).

6.  Perform CreateDataProperty(_result_, "PROXY", _p_).

7.  Perform CreateDataProperty(_result_, "REVOKE", _revoker_).

8.  Return _result_.

Proxy Revocation Functions

A Proxy revocation function is an anonymous function that has the
ability to invalidate a specific Proxy object.

Each Proxy revocation function has a [[RevocableProxy]] internal slot.

When a Proxy revocation function, _F_, is called the following steps are
taken:

1.  Let _p_ be the value of _F_’s [[RevocableProxy]] internal slot.

2.  If _p_ is NULL, return UNDEFINED.

3.  Set the value of _F_’s [[RevocableProxy]] internal slot to NULL.

4.  Assert: _p_ is a Proxy object.

5.  Set the [[ProxyTarget]] internal slot of _p_ to NULL.

6.  Set the [[ProxyHandler]] internal slot of _p_ to NULL.

7.  Return UNDEFINED.


Module Namespace Objects

A Module Namespace Object is a module namespace exotic object that
provides runtime property-based access to a module’s exported bindings.
There is no constructor function for Module Namespace Objects. Instead,
such an object is created for each module that is imported by an
_ImportDeclaration_ that includes a _NameSpaceImport_ (See 15.2.2).

In addition to the properties specified in 9.4.6 each Module Namespace
Object has the own following properties:

@@toStringTag

The initial value of the @@toStringTag property is the string value
"MODULE".

This property has the attributes { [[Writable]]: FALSE, [[Enumerable]]:
FALSE, [[Configurable]]: TRUE }.

 [ @@iterator ] ( )

When the @@iterator method is called with no arguments following steps
are taken:

1.  Let _N_ be the THIS value.

2.  If Type(_N_) is not Object, throw a TYPEERROR exception.

3.  Return _N_.[[Enumerate]]().

The value of the NAME property of this function is "[SYMBOL.ITERATOR]".

(informative)
Grammar Summary


Lexical Grammar

SourceCharacter :: See 10.1

any Unicode code point

InputElementDiv :: See clause 11

WhiteSpace
LineTerminator
Comment
CommonToken
DivPunctuator
RightBracePunctuator

InputElementRegExp :: See clause 11

WhiteSpace
LineTerminator
Comment
CommonToken
RightBracePunctuator
RegularExpressionLiteral

InputElementRegExpOrTemplateTail :: See clause 11

WhiteSpace
LineTerminator
Comment
CommonToken
RegularExpressionLiteral
TemplateSubstitutionTail

InputElementTemplateTail :: See clause 11

WhiteSpace
LineTerminator
Comment
CommonToken
DivPunctuator
TemplateSubstitutionTail

WhiteSpace :: See 11.2

<TAB>
<VT>
<FF>
<SP>
<NBSP>
<ZWNBSP>
<USP>

LineTerminator :: See 11.3

<LF>
<CR>
<LS>
<PS>

LineTerminatorSequence :: See 11.3

<LF>
<CR> [lookahead ≠ <LF> ]
<LS>
<PS>
<CR> <LF>

Comment :: See 11.4

MultiLineComment
SingleLineComment

MultiLineComment :: See 11.4

/* MultiLineCommentChars~opt~ */

MultiLineCommentChars :: See 11.4

MultiLineNotAsteriskChar MultiLineCommentChars~opt~
* PostAsteriskCommentChars~opt~

PostAsteriskCommentChars :: See 11.4

MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars~opt~
* PostAsteriskCommentChars~opt~

MultiLineNotAsteriskChar :: See 11.4

SourceCharacter BUT NOT *

MultiLineNotForwardSlashOrAsteriskChar :: See 11.4

SourceCharacter BUT NOT ONE OF / OR *

SingleLineComment :: See 11.4

// SingleLineCommentChars~opt~

SingleLineCommentChars :: See 11.4

SingleLineCommentChar SingleLineCommentChars~opt~

SingleLineCommentChar :: See 11.4

SourceCharacter BUT NOT LineTerminator

CommonToken :: See 11.5

IdentifierName
Punctuator
NumericLiteral
StringLiteral
Template

IdentifierName :: See 11.6

IdentifierStart
IdentifierName IdentifierPart

IdentifierStart :: See 11.6

UnicodeIDStart
$
_
\ UnicodeEscapeSequence

IdentifierPart :: See 11.6

UnicodeIDContinue
$
_
\ UnicodeEscapeSequence
<ZWNJ>
<ZWJ>

UnicodeIDStart :: See 11.6

any Unicode code point with the Unicode property “ID_Start” or
“Other_ID_Start”

UnicodeIDContinue :: See 11.6

any Unicode code point with the Unicode property “ID_Continue”,
“Other_ID_Continue”, or “Other_ID_Start”

ReservedWord :: See 11.6.2

Keyword
FutureReservedWord
NullLiteral
BooleanLiteral

Keyword :: ONE OF See 11.6.2.1

  ---------- ---------- ------------ --------
  break      do         in           typeof
  case       else       instanceof   var
  catch      export     new          void
  class      extends    return       while
  const      finally    super        with
  continue   for        switch       yield
  debugger   function   this         
  default    if         throw        
  delete     import     try          
  ---------- ---------- ------------ --------

FutureReservedWord :: See 11.6.2.2

ENUM
AWAIT

AWAIT is only treated as a _FutureReservedWord_ when _Module_ is the
goal symbol of the syntactic grammar.

  The following tokens are also considered to be _FutureReservedWords_
  when parsing strict mode code (see 10.2.1).

  ------------ --------- ----------- --
  implements   package   protected   
  interface    private   public      
  ------------ --------- ----------- --

Punctuator :: ONE OF See 11.7

  ----- ------ ----- ----- ----- -----
  {     }      (     )     [     ]
  .     ;      ,     <     >     <=
  >=    ==     !=    ===   !==   
  +     -      *     %     ++    --
  <<    >>     >>>   &     |     ^
  !     ~      &&    ||    ?     :
  =     +=     -=    *=    %=    <<=
  >>=   >>>=   &=    |=    ^=    =>
  ----- ------ ----- ----- ----- -----

DivPunctuator :: ONE OF See 11.7

  --- ---- -- -- -- --
  /   /=            
  --- ---- -- -- -- --

RightBracePunctuator :: ONE OF See 11.7

  --- -- -- -- -- --
  }               
  --- -- -- -- -- --

NullLiteral :: See 11.8.1

NULL

BooleanLiteral :: See 11.8.2

TRUE
FALSE

_NumericLiteral_ :: See 11.8.

DecimalLiteral
BinaryIntegerLiteral
OctalIntegerLiteral
HexIntegerLiteral

DecimalLiteral :: See 11.8.3

DecimalIntegerLiteral . DecimalDigits~opt~ ExponentPart~opt~
. DecimalDigits ExponentPart~opt~
DecimalIntegerLiteral ExponentPart~opt~

DecimalIntegerLiteral :: See 11.8.3

0
NonZeroDigit DecimalDigits~opt~

DecimalDigits :: See 11.8.3

DecimalDigit
DecimalDigits DecimalDigit

DecimalDigit :: ONE OF See 11.8.3

0 1 2 3 4 5 6 7 8 

NonZeroDigit :: ONE OF See 11.8.3

1 2 3 4 5 6 7 8 

ExponentPart :: See 11.8.3

ExponentIndicator SignedInteger

ExponentIndicator :: ONE OF See 11.8.3

E E

SignedInteger :: See 11.8.3

DecimalDigits
+ DecimalDigits
- DecimalDigits

BinaryIntegerLiteral :: See 11.8.3

0B BinaryDigits
0B BinaryDigits

BinaryDigits :: See 11.8.3

BinaryDigit
BinaryDigits BinaryDigit

BinaryDigit :: ONE OF See 11.8.3

0 

OctalIntegerLiteral :: See 11.8.3

0O OctalDigits
0O OctalDigits

OctalDigits :: See 11.8.3

OctalDigit
OctalDigits OctalDigit

OctalDigit :: ONE OF See 11.8.3

0 1 2 3 4 5 6 

HexIntegerLiteral :: See 11.8.3

0X HexDigits
0X HexDigit

HexDigits :: See 11.8.3

HexDigit
HexDigits HexDigit

HexDigit :: ONE OF See 11.8.3

0 1 2 3 4 5 6 7 8 9 A B C D E F A B C D E F

StringLiteral :: See 11.8.4

" DoubleStringCharacters~opt~ "
' SingleStringCharacters~opt~ '

DoubleStringCharacters :: See 11.8.4

DoubleStringCharacter DoubleStringCharacters~opt~

SingleStringCharacters :: See 11.8.4

SingleStringCharacter SingleStringCharacters~opt~

DoubleStringCharacter :: See 11.8.4

SourceCharacter BUT NOT ONE OF " OR \ OR LineTerminator
\ EscapeSequence
LineContinuation

SingleStringCharacter :: See 11.8.4

SourceCharacter BUT NOT ONE OF ' OR \ OR LineTerminator
\ EscapeSequence
LineContinuation

LineContinuation :: See 11.8.4

\ LineTerminatorSequence

EscapeSequence :: See 11.8.4

CharacterEscapeSequence
0 [lookahead ∉ DecimalDigit]
HexEscapeSequence
UnicodeEscapeSequence

CharacterEscapeSequence :: See 11.8.4

SingleEscapeCharacter
NonEscapeCharacter

SingleEscapeCharacter :: ONE OF See 11.8.4

' " \ B F N R T V

NonEscapeCharacter :: See 11.8.4

SourceCharacter BUT NOT ONE OF EscapeCharacter OR LineTerminator

EscapeCharacter :: See 11.8.4

SingleEscapeCharacter
DecimalDigit
X
U

HexEscapeSequence :: See 11.8.4

X HexDigit HexDigit

UnicodeEscapeSequence :: See 11.8.4

U Hex4Digits
U{ HexDigits }

Hex4Digits :: See 11.8.4

HexDigit HexDigit HexDigit HexDigit

RegularExpressionLiteral :: See 11.8.5

/ RegularExpressionBody / RegularExpressionFlags

RegularExpressionBody :: See 11.8.5

RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChars :: See 11.8.5

[empty]
RegularExpressionChars RegularExpressionChar

RegularExpressionFirstChar :: See 11.8.5

RegularExpressionNonTerminator BUT NOT ONE OF * OR \ OR / OR [
RegularExpressionBackslashSequence
RegularExpressionClass

RegularExpressionChar :: See 11.8.5

RegularExpressionNonTerminator BUT NOT ONE OF \ OR / OR [
RegularExpressionBackslashSequence
RegularExpressionClass

RegularExpressionBackslashSequence :: See 11.8.5

\ RegularExpressionNonTerminator

RegularExpressionNonTerminator :: See 11.8.5

SourceCharacter BUT NOT LineTerminator

RegularExpressionClass :: See 11.8.5

[ RegularExpressionClassChars ]

RegularExpressionClassChars :: See 11.8.5

[empty]
RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionClassChar :: See 11.8.5

RegularExpressionNonTerminator BUT NOT ONE OF ] OR \
RegularExpressionBackslashSequence

RegularExpressionFlags :: See 11.8.5

[empty]
RegularExpressionFlags IdentifierPart

Template :: See 11.8.6

NoSubstitutionTemplate
TemplateHead

NoSubstitutionTemplate :: See 11.8.6

` TemplateCharacters~opt~ `

TemplateHead :: See 11.8.6

` TemplateCharacters~opt~ ${

TemplateSubstitutionTail :: See 11.8.6

TemplateMiddle
TemplateTail

TemplateMiddle :: See 11.8.6

} TemplateCharacters~opt~ ${

TemplateTail :: See 11.8.6

} TemplateCharacters~opt~ `

TemplateCharacters :: See 11.8.6

TemplateCharacter TemplateCharacters~opt~

TemplateCharacter :: See 11.8.6

$ [lookahead ≠ { ]
\ EscapeSequence
LineContinuation
LineTerminatorSequence
SourceCharacter BUT NOT ONE OF ` OR \ OR $ OR LineTerminator


Expressions

IdentifierReference~[Yield]~ : See 12.1

Identifier
[~Yield] YIELD

_BindingIdentifier_~[Yield]~ : See 12.

  _Identifier
  _[~Yield] YIELD

LabelIdentifier~[Yield]~ : See 12.1

_Identifier
[~Yield] YIELD

Identifier : See 12.1

IdentifierName BUT NOT ReservedWord

PrimaryExpression~[Yield]~ : See 12.2

THIS
IdentifierReference~[?Yield]~
Literal
ArrayLiteral~[?Yield]~
ObjectLiteral~[?Yield]~
FunctionExpression
ClassExpression~[?Yield]~
GeneratorExpression
RegularExpressionLiteral
TemplateLiteral~[?Yield]~
CoverParenthesizedExpressionAndArrowParameterList~[?Yield]~

CoverParenthesizedExpressionAndArrowParameterList~[Yield]~ : See 12.2

( Expression~[In,\ ?Yield]~ )
( )
( ... BindingIdentifier~[?Yield]~ )
( Expression~[In,\ ?Yield]~ , ... BindingIdentifier~[?Yield]~ )

When processing the production

_PrimaryExpression_~[Yield]~ :
_CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~
_the interpretation of
_CoverParenthesizedExpressionAndArrowParameterList_ is refined using the
following grammar:

_ParenthesizedExpression_~[Yield]~ : See 12.

( Expression~[In,\ ?Yield]~ )

Literal : See 12.2.3

NullLiteral
BooleanLiteral
NumericLiteral
StringLiteral

ArrayLiteral~[Yield]~ : See 12.2.4

[ Elision~opt~ ]
[ ElementList~[?Yield]~ ]
[ ElementList~[?Yield]~ , Elision~opt~ ]

ElementList~[Yield]~ : See 12.2.4

Elision~opt~ AssignmentExpression~[In,\ ?Yield]~
Elision~opt~ SpreadElement~[?Yield]~
ElementList~[?Yield]~ , Elision~opt~ AssignmentExpression~[In,\ ?Yield]~
ElementList~[?Yield]~ , Elision~opt~ SpreadElement~[?Yield]~

Elision : See 12.2.4

,
Elision ,

SpreadElement~[Yield]~ : See 12.2.4

... AssignmentExpression~[In,\ ?Yield]~

ObjectLiteral~[Yield]~ : See 12.2.5

{ }
{ PropertyDefinitionList~[?Yield]~ }
{ PropertyDefinitionList~[?Yield]~ , }

PropertyDefinitionList~[Yield]~ : See 12.2.5

PropertyDefinition~[?Yield]~
PropertyDefinitionList~[?Yield]~ , PropertyDefinition~[?Yield]~

PropertyDefinition~[Yield]~ : See 12.2.5

IdentifierReference~[?Yield]~
CoverInitializedName~[?Yield]~
PropertyName~[?Yield]~ : AssignmentExpression~[In,\ ?Yield]~
MethodDefinition~[?Yield]~

PropertyName~[Yield,GeneratorParameter]~ : See 12.2.5

LiteralPropertyName
[+GeneratorParameter] ComputedPropertyName
[~GeneratorParameter] ComputedPropertyName~[?Yield]~

LiteralPropertyName : See 12.2.5

IdentifierName
StringLiteral
NumericLiteral

ComputedPropertyName~[Yield]~ : See 12.2.5

[ AssignmentExpression~[In,\ ?Yield]~ ]

CoverInitializedName~[Yield]~ : See 12.2.5

IdentifierReference~[?Yield]~ Initializer~[In,\ ?Yield]~

Initializer~[In,\ Yield]~ : See 12.2.5

= AssignmentExpression~[?In,\ ?Yield]~

TemplateLiteral~[Yield]~ : See 12.2.8

NoSubstitutionTemplate
TemplateHead _Expression_~[In,\ ?Yield]~ TemplateSpans~[?Yield]~

TemplateSpans~[Yield]~ : See 12.2.8

TemplateTail
TemplateMiddleList~[?Yield]~ TemplateTail

TemplateMiddleList~[Yield]~ : See 12.2.8

TemplateMiddle _Expression_~[In,\ ?Yield]~
TemplateMiddleList~[?Yield]~ TemplateMiddle _Expression_~[In,\ ?Yield]~

MemberExpression~[Yield]~ : See 12.3

PrimaryExpression~[?Yield]~
MemberExpression~[?Yield]~ [ Expression~[In,\ ?Yield]~ ]
MemberExpression~[?Yield]~ . IdentifierName
MemberExpression~[?Yield]~ TemplateLiteral~[?Yield]~
_SuperProperty_~[?Yield]~
_MetaProperty
NEW MemberExpression~[?Yield]~ Arguments~[?Yield]~

SuperProperty~[Yield]~ : See 12.3

SUPER [ Expression~[In,\ ?Yield]~ ]
SUPER . IdentifierName

MetaProperty : See 12.3

NewTarget

NewTarget : See 12.3

NEW . TARGET

NewExpression~[Yield]~ : See 12.3

MemberExpression~[?Yield]~
NEW NewExpression~[?Yield]\ ~

CallExpression~[Yield]~ : See 12.3

MemberExpression~[?Yield]~ Arguments~[?Yield]~
SuperCall~[?Yield]~
CallExpression~[?Yield]~ Arguments~[?Yield]~
CallExpression~[?Yield]~ [ Expression~[In,\ ?Yield]~ ]
CallExpression~[?Yield]~ . IdentifierName
CallExpression~[?Yield]~ TemplateLiteral~[?Yield]~

SuperCall~[Yield]~ : See 12.3

SUPER Arguments~[?Yield]~

Arguments~[Yield]~ : See 12.3

( )
( ArgumentList~[?Yield]~ )

ArgumentList~[Yield]~ : See 12.3

AssignmentExpression~[In,\ ?Yield]~
... AssignmentExpression~[In,\ ?Yield]~
ArgumentList~[?Yield]~ , AssignmentExpression~[In,\ ?Yield]~
ArgumentList~[?Yield]~ , ... AssignmentExpression~[In,\ ?Yield]~

LeftHandSideExpression~[Yield]~ : See 12.3

NewExpression~[?Yield]~
CallExpression~[?Yield]~

PostfixExpression~[Yield]~ : See 12.4

LeftHandSideExpression~[?Yield]~
LeftHandSideExpression~[?Yield]~ [no LineTerminator here] ++
LeftHandSideExpression~[?Yield]~ [no LineTerminator here] --

UnaryExpression~[Yield]~ : See 12.5

PostfixExpression~[?Yield]~
DELETE UnaryExpression~[?Yield]~
VOID UnaryExpression~[?Yield]~
TYPEOF UnaryExpression~[?Yield]~
++ UnaryExpression~[?Yield]~
-- UnaryExpression~[?Yield]~
+ UnaryExpression~[?Yield]~
- UnaryExpression~[?Yield]~
~ UnaryExpression~[?Yield]~
! UnaryExpression~[?Yield]~

MultiplicativeExpression~[Yield]~ : See 12.6

UnaryExpression~[?Yield]~
MultiplicativeExpression~[?Yield]~ MultiplicativeOperator
UnaryExpression~[?Yield]~

MultiplicativeOperator : ONE OF See 12.6

* / %

AdditiveExpression~[Yield]~ : See 12.7

MultiplicativeExpression~[?Yield]~
AdditiveExpression~[?Yield]~ + MultiplicativeExpression~[?Yield]~
AdditiveExpression~[?Yield]~ - MultiplicativeExpression~[?Yield]~

ShiftExpression~[Yield]~ : See 12.8

AdditiveExpression~[?Yield]~
ShiftExpression~[?Yield]~ << AdditiveExpression~[?Yield]~
ShiftExpression~[?Yield]~ >> AdditiveExpression~[?Yield]~
ShiftExpression~[?Yield]~ >>> AdditiveExpression~[?Yield]~

RelationalExpression~[In,\ Yield]~ : See 12.9

ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ < ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ > ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ <= ShiftExpression~[?\ Yield]~
RelationalExpression~[?In,\ ?Yield]~ >= ShiftExpression~[?Yield]~
RelationalExpression~[?In,\ ?Yield]~ INSTANCEOF
ShiftExpression~[?Yield]~
[+In] RelationalExpression~[In,\ ?Yield]~ IN ShiftExpression~[?Yield]~

EqualityExpression~[In,\ Yield]~ : See 12.10

RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ ==
RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ !=
RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ ===
RelationalExpression~[?In,\ ?Yield]~
EqualityExpression~[?In,\ ?Yield]~ !==
RelationalExpression~[?In,\ ?Yield]~

BitwiseANDExpression~[In,\ Yield]~ : See 12.11

EqualityExpression~[?In,\ ?Yield]~
BitwiseANDExpression~[?In,\ ?Yield]~ &
EqualityExpression~[?In,\ ?Yield]~

BitwiseXORExpression~[In,\ Yield]~ : See 12.11

BitwiseANDExpression~[?In,\ ?Yield]~
BitwiseXORExpression~[?In,\ ?Yield]~ ^
BitwiseANDExpression~[?In,\ ?Yield]~

BitwiseORExpression~[In,\ Yield]~ : See 12.11

BitwiseXORExpression~[?In,\ ?Yield]~
BitwiseORExpression~[?In,\ ?Yield]~ |
BitwiseXORExpression~[?In,\ ?Yield]~

LogicalANDExpression~[In,\ Yield]~ : See 12.12

BitwiseORExpression~[?In,\ ?Yield]~
LogicalANDExpression~[?In,\ ?Yield]~ &&
BitwiseORExpression~[?In,\ ?Yield]~

LogicalORExpression~[In,\ Yield]~ : See 12.12

LogicalANDExpression~[?In,\ ?Yield]~
LogicalORExpression~[?In,\ ?Yield]~ ||
LogicalANDExpression~[?In,\ ?Yield]~

ConditionalExpression~[In,\ Yield]~ : See 12.13

LogicalORExpression~[?In,\ ?Yield]~
LogicalORExpression~[?In,?Yield]~ ? AssignmentExpression~[In,\ ?Yield]~
: AssignmentExpression~[?In,\ ?Yield]~

AssignmentExpression~[In,\ Yield]~ : See 12.14

ConditionalExpression~[?In,\ ?Yield]~
[+Yield] YieldExpression~[?In]~
ArrowFunction~[?In,\ ?Yield]~
LeftHandSideExpression~[?Yield]~ = AssignmentExpression~[?In,\ ?Yield]~
LeftHandSideExpression~[?Yield]~ AssignmentOperator
AssignmentExpression~[?In,\ ?Yield]~

AssignmentOperator : ONE OF See 12.14

  ---- ---- ---- ---- ---- ----- ----- ------ ---- ---- ----
  *=   /=   %=   +=   -=   <<=   >>=   >>>=   &=   ^=   |=
  ---- ---- ---- ---- ---- ----- ----- ------ ---- ---- ----

_Expression_~[In,\ Yield]~ : See 12.

_AssignmentExpression_~[?In,\ ?Yield]~
Expression~[?In,\ ?Yield]~ , AssignmentExpression~[?In,\ ?Yield]~


Statements

Statement~[Yield,\ Return]~ : See clause 13

BlockStatement~[?Yield,\ ?Return]~
VariableStatement~[?Yield]~
EmptyStatement
ExpressionStatement~[?Yield]~
IfStatement~[?Yield,\ ?Return]~
BreakableStatement~[?Yield,\ ?Return]~
ContinueStatement~[?Yield]~
BreakStatement~[?Yield]~
[+Return] ReturnStatement~[?Yield]~
WithStatement~[?Yield,\ ?Return]~
LabelledStatement~[?Yield,\ ?Return]~
ThrowStatement~[?Yield]~
TryStatement~[?Yield,\ ?Return]~
DebuggerStatement

Declaration~[Yield]~ : See clause 13

HoistableDeclaration~[?Yield]~
ClassDeclaration~[?Yield]~
LexicalDeclaration~[In,\ ?Yield]~

HoistableDeclaration~[Yield,\ Default]~ : See clause 13

FunctionDeclaration~[?Yield,?Default]~
GeneratorDeclaration~[?Yield,\ ?Default]~

BreakableStatement~[Yield,\ Return]~ : See clause 13

IterationStatement~[?Yield,\ ?Return]~
SwitchStatement~[?Yield,\ ?Return]~

BlockStatement~[Yield,\ Return]~ : See 13.1

Block~[?Yield,\ ?Return]~

Block~[Yield,\ Return]~ : See 13.1

{ StatementList~[?Yield,\ ?Return]opt~ }

StatementList~[Yield,\ Return]~ : See 13.1

StatementListItem~[?Yield,\ ?Return]~
StatementList~[?Yield,\ ?Return]~ StatementListItem~[?Yield,\ ?Return]~

StatementListItem~[Yield,\ Return]~ : See 13.1

Statement~[?Yield,\ ?Return]~
Declaration~[?Yield]~

LexicalDeclaration~[In,\ Yield]~ : See 13.2.1

LetOrConst BindingList~[?In,\ ?Yield]~ ;

LetOrConst : See 13.2.1

LET
CONST

BindingList~[In,\ Yield]~ : See 13.2.1

LexicalBinding~[?In,\ ?Yield]~
BindingList~[?In,\ ?Yield]~ , LexicalBinding~[?In,\ ?Yield]~

LexicalBinding~[In,\ Yield]~ : See 13.2.1

BindingIdentifier~[?Yield]~ Initializer~[?In,\ ?Yield]opt
~BindingPattern~[?Yield]~ Initializer~[?In,\ ?Yield]~

VariableStatement~[Yield]~ : See 13.2.2

VAR VariableDeclarationList~[In,\ ?Yield]~ ;

VariableDeclarationList~[In,\ Yield]~ : See 13.2.2

VariableDeclaration~[?In,\ ?Yield]~
VariableDeclarationList~[?In,\ ?Yield]~ ,
VariableDeclaration~[?In,\ ?Yield]~

VariableDeclaration~[In,\ Yield]~ : See 13.2.2

BindingIdentifier~[?Yield]~ Initializer~[?In,\ ?Yield]opt
~BindingPattern~[?Yield]~ Initializer~[?In,\ ?Yield]~

BindingPattern~[Yield,GeneratorParameter]~ : See 13.2.3

ObjectBindingPattern~[?Yield,?GeneratorParameter]~
ArrayBindingPattern~[?Yield,?GeneratorParameter]~

ObjectBindingPattern~[Yield,GeneratorParameter]~ : See 13.2.3

{ }
{ BindingPropertyList~[?Yield,?GeneratorParameter]~ }
{ BindingPropertyList~[?Yield,?GeneratorParameter]~ , }

ArrayBindingPattern~[Yield,GeneratorParameter]~ : See 13.2.3

[ Elision~opt~ BindingRestElement~[?Yield,\ ?GeneratorParameter]opt~ ]
[ BindingElementList~[?Yield,\ ?GeneratorParameter]~ ]
[ BindingElementList~[?Yield,\ ?GeneratorParameter]~ , Elision~opt~
BindingRestElement~[?Yield,\ ?GeneratorParameter]opt~ ]

BindingPropertyList~[Yield,GeneratorParameter]~ : See 13.2.3

BindingProperty~[?Yield,\ ?GeneratorParameter]~
BindingPropertyList~[?Yield,\ ?GeneratorParameter]~ ,
BindingProperty~[?Yield,\ ?GeneratorParameter]~

BindingElementList~[Yield,GeneratorParameter]~ : See 13.2.3

BindingElisionElement~[?Yield,\ ?GeneratorParameter]~
BindingElementList~[?Yield,\ ?GeneratorParameter]~ ,
BindingElisionElement~[?Yield,\ ?GeneratorParameter]~

BindingElisionElement~[Yield,GeneratorParameter]~ : See 13.2.3

Elision~opt~ BindingElement~[?Yield,\ ?GeneratorParameter]~

BindingProperty~[Yield,GeneratorParameter]~ : See 13.2.3

SingleNameBinding~[?Yield,\ ?GeneratorParameter]
~ PropertyName~[?Yield,\ ?GeneratorParameter]~ :
BindingElement~[?Yield,\ ?GeneratorParameter]~

BindingElement~[Yield,\ GeneratorParameter\ ]~ : See 13.2.3

SingleNameBinding~[?Yield,\ ?GeneratorParameter]
~[+GeneratorParameter] BindingPattern~[?Yield,GeneratorParameter]~
Initializer~[In]opt~
[~GeneratorParameter] BindingPattern~[?Yield]~
Initializer~[In,\ ?Yield]opt~

SingleNameBinding~[Yield,GeneratorParameter]~ : See 13.2.3

[+GeneratorParameter] BindingIdentifier~[Yield]~ Initializer~[In]opt~
[~GeneratorParameter] BindingIdentifier~[?Yield]~
Initializer~[In,\ ?Yield]opt~

BindingRestElement~[Yield,\ GeneratorParameter]~ : See 13.2.3

[+GeneratorParameter]... BindingIdentifier~[Yield]~
[~GeneratorParameter] ... BindingIdentifier~[?Yield]~

EmptyStatement : See 13.3

;

ExpressionStatement~[Yield]~ : See 13.4

[lookahead ∉ {{, FUNCTION, CLASS, LET [ }] Expression~[In,\ ?Yield]~ ;

IfStatement~[Yield,\ Return]~ : See 13.5

IF ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~ ELSE
Statement~[?Yield,\ ?Return]~
IF ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

IterationStatement~[Yield,\ Return]~ : See 13.6

  DO Statement~[?Yield,\ ?Return]~ WHILE ( Expression~[In,\ ?Yield]~ ) ;

  WHILE ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

  FOR ( [lookahead ∉ {LET [ }] Expression~[?Yield]opt~ ;
  Expression~[In,\ ?Yield]opt~ ; Expression~[In,\ ?Yield]opt~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( VAR VariableDeclarationList~[?Yield]~;
  Expression~[In,\ ?Yield]opt~ ; Expression~[In,\ ?Yield]opt~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( LexicalDeclaration~[?Yield]~ Expression~[In,\ ?Yield]opt~ ;
  Expression~[In,\ ?Yield]opt~ ) Statement~[?Yield,\ ?Return]~

  FOR ( [lookahead ∉ {LET [ }] LeftHandSideExpression~[?Yield]~ IN
  Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

  FOR ( VAR ForBinding~[?Yield]~ IN Expression~[In,\ ?Yield]~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( ForDeclaration~[?Yield]~ IN Expression~[In,\ ?Yield]~ )
  Statement~[?Yield,\ ?Return]~

  FOR ( [lookahead ≠ LET] LeftHandSideExpression~[?Yield]~ OF
  AssignmentExpression~[In,\ ?Yield]~ ) Statement~[?Yield, ?Return]~

  FOR ( VAR ForBinding~[?Yield]~ OF AssignmentExpression~[In,\ ?Yield]~
  ) Statement~[?Yield,\ ?Return]~

  FOR ( ForDeclaration~[?Yield]~ OF AssignmentExpression~[In,\ ?Yield]~
  ) Statement~[?Yield,\ ?Return]~

ForDeclaration~[Yield]~ : See 13.6

LetOrConst ForBinding~[?Yield]~

ForBinding~[Yield]~ : See 13.6

BindingIdentifier~[?Yield]~
BindingPattern~[?Yield]~

ContinueStatement~[Yield]~ : See 13.7

CONTINUE ;
CONTINUE [no LineTerminator here] _LabelIdentifier_~[?Yield]~ ;

BreakStatement~[Yield]~ : See 13.8

BREAK ;
BREAK [no LineTerminator here] _LabelIdentifier_~[?Yield]~ ;

ReturnStatement~[Yield]~ : See 13.9

RETURN ;
RETURN [no LineTerminator here] Expression~[In,\ ?Yield]~ ;

WithStatement~[Yield,\ Return]~ : See 13.10

WITH ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~

SwitchStatement~[Yield,\ Return]~ : See 13.11

SWITCH ( Expression~[In,\ ?Yield]~ ) CaseBlock~[?Yield,\ ?Return]~

CaseBlock~[Yield,\ Return]~ : See 13.11

{ CaseClauses~[?Yield,\ ?Return]opt~ }
{ CaseClauses~[?Yield,\ ?Return]opt~ DefaultClause~[?Yield,\ ?Return]~
CaseClauses~[?Yield,\ ?Return]opt~ }

CaseClauses~[Yield,\ Return]~ : See 13.11

CaseClause~[?Yield,\ ?Return]~
CaseClauses~[?Yield,\ ?Return]~ CaseClause~[?Yield,\ ?Return]~

CaseClause~[Yield,\ Return]~ : See 13.11

CASE Expression~[In,\ ?Yield]~ : StatementList~[?Yield,\ ?Return]opt~

DefaultClause~[Yield,\ Return]~ : See 13.11

DEFAULT : StatementList~[?Yield,\ ?Return]opt~

LabelledStatement~[Yield,\ Return]~ : See 13.12

LabelIdentifier~[?Yield]~ : LabelledItem~[?Yield,\ ?Return]~

LabelledItem~[Yield,\ Return]~ : See 13.12

Statement~[?Yield,\ ?Return]
~_FunctionDeclaration_~[?Yield]~

ThrowStatement~[Yield]~ : See 13.13

THROW [no LineTerminator here] Expression~[In,\ ?Yield]~ ;

TryStatement~[Yield,\ Return]~ : See 13.14

TRY Block~[?Yield,\ ?Return]~ Catch~[?Yield,\ ?Return]
~TRY Block~[?Yield,\ ?Return]~ Finally~[?Yield,\ ?Return]
~TRY Block~[?Yield,\ ?Return]~ Catch~[?Yield,\ ?Return]~
Finally~[?Yield,\ ?Return]~

Catch~[Yield,\ Return]~ : See 13.14

CATCH ( CatchParameter~[?Yield]~ ) Block~[?Yield,\ ?Return]~

Finally~[Yield,\ Return]~ : See 13.14

FINALLY Block~[?Yield,\ ?Return]~

CatchParameter~[Yield]~ : See 13.14

BindingIdentifier~[?Yield]
~BindingPattern~[?Yield]~

DebuggerStatement : See 13.15

DEBUGGER ;


Functions and Classes

FunctionDeclaration~[Yield,\ Default]~ : See 14.1

FUNCTION BindingIdentifier~[?Yield]~ ( FormalParameters ) { FunctionBody
}
[+Default] FUNCTION ( FormalParameters ) { FunctionBody }

FunctionExpression : See 14.1

FUNCTION BindingIdentifier~opt~ ( FormalParameters ) { FunctionBody }

StrictFormalParameters~[Yield,\ GeneratorParameter]~ : See 14.1

FormalParameters~[?Yield,\ ?GeneratorParameter]~

FormalParameters~[Yield,GeneratorParameter]~ : See 14.1

[empty]
FormalParameterList~[?Yield,\ ?GeneratorParameter]~

FormalParameterList~[Yield,GeneratorParameter]~ : See 14.1

FunctionRestParameter~[?Yield]~
FormalsList~[?Yield,\ ?GeneratorParameter]~
FormalsList~[?Yield,\ ?GeneratorParameter]~,
FunctionRestParameter~[?Yield]~

FormalsList~[Yield,GeneratorParameter]~ : See 14.1

FormalParameter~[?Yield,\ ?GeneratorParameter]~
FormalsList~[?Yield,\ ?GeneratorParameter]~ ,
FormalParameter~[?Yield,?GeneratorParameter]~

FunctionRestParameter~[Yield]~ : See 14.1

BindingRestElement~[?Yield]~

FormalParameter~[Yield,GeneratorParameter]~ : See 14.1

BindingElement~[?Yield,\ ?GeneratorParameter]~

FunctionBody~[Yield]~ : See 14.1

FunctionStatementList~[?Yield]~

FunctionStatementList~[Yield]~ : See 14.1

StatementList~[?Yield,\ Return]opt~

_ArrowFunction_~[In,\ Yield]~ : See 14.

_ArrowParameters_~[?Yield]~ [no LineTerminator here] =>
_ConciseBody_~[?In]~

_ArrowParameters_~[Yield]~ : See 14.

_BindingIdentifier_~[?Yield]~
CoverParenthesizedExpressionAndArrowParameterList~[?Yield]~

ConciseBody~[In]~ : See 14.2

[lookahead ≠ {] AssignmentExpression~[?In]~
{ FunctionBody }

When the production

_ArrowParameters_~[Yield]~ :
_CoverParenthesizedExpressionAndArrowParameterList_~[?Yield]~

is recognized the following grammar is used to refine the interpretation
of _CoverParenthesizedExpressionAndArrowParameterList_:

ArrowFormalParameters~[Yield,\ GeneratorParameter]~ : See 14.2

( StrictFormalParameters~[?Yield,\ ?GeneratorParameter]~ )

MethodDefinition~[Yield]~ : See 14.3

PropertyName~[?Yield]~ ( StrictFormalParameters ) { FunctionBody }
GeneratorMethod~[?Yield]~
GET PropertyName~[?Yield]~ ( ) { FunctionBody }
SET PropertyName~[?Yield]~ ( PropertySetParameterList ) { FunctionBody }

PropertySetParameterList : See 14.3

FormalParameter

GeneratorMethod~[Yield]~ : See 14.4

* PropertyName~[?Yield]~
(StrictFormalParameters~[Yield,GeneratorParameter]~ ) { GeneratorBody }

GeneratorDeclaration~[Yield,\ Default]~ : See 14.4

FUNCTION * BindingIdentifier~[?Yield]~ (
FormalParameters~[Yield,GeneratorParameter]~ ) { GeneratorBody }
[+Default] FUNCTION * ( FormalParameters~[Yield,GeneratorParameter]~ ) {
GeneratorBody }

GeneratorExpression : See 14.4

FUNCTION * BindingIdentifier~[Yield]opt~ (
FormalParameters~[Yield,GeneratorParameter]~ ) { GeneratorBody }

GeneratorBody : See 14.4

FunctionBody~[Yield]~

YieldExpression~[In]~ : See 14.4

YIELD
YIELD [no LineTerminator here] AssignmentExpression~[?In,\ Yield]~
YIELD [no LineTerminator here] * AssignmentExpression~[?In,\ Yield]~

ClassDeclaration~[Yield,\ Default]~ : See 14.5

CLASS BindingIdentifier~[?Yield]~ ClassTail~[?Yield]~
[+Default] CLASS ClassTail~[?Yield]~

ClassExpression~[Yield]~ : See 14.5

CLASS BindingIdentifier~[?Yield]opt~ ClassTail~[?Yield]~

ClassTail~[Yield]~ : See 14.5

ClassHeritage~[?Yield]opt~ { ClassBody~[?Yield]opt~ }

ClassHeritage~[Yield]~ : See 14.5

EXTENDS LeftHandSideExpression~[?Yield]~

ClassBody~[Yield]~ : See 14.5

ClassElementList~[?Yield]~

ClassElementList~[Yield]~ : See 14.5

ClassElement~[?Yield]~
ClassElementList~[?Yield]~ ClassElement~[?Yield]~

ClassElement~[Yield]~ : See 14.5

MethodDefinition~[?Yield]~
STATIC MethodDefinition~[?Yield]~
;


Scripts and Modules

Script : See 15.1

ScriptBody~opt~

ScriptBody : See 15.1

StatementList

Module : See 15.2

ModuleBody~opt~

ModuleBody : See 15.2

ModuleItemList

ModuleItemList : See 15.2

ModuleItem
ModuleItemList ModuleItem

ModuleItem : See 15.2

ImportDeclaration
ExportDeclaration
StatementListItem

ImportDeclaration : See 15.2.2

IMPORT ImportClause FromClause ;
IMPORT ModuleSpecifier ;

ImportClause : See 15.2.2

ImportedDefaultBinding
NameSpaceImport
NamedImports
ImportedDefaultBinding , NameSpaceImport
ImportedDefaultBinding , NamedImports

ImportedDefaultBinding : See 15.2.2

ImportedBinding

NameSpaceImport : See 15.2.2

* AS ImportedBinding

NamedImports : See 15.2.2

{ }
{ ImportsList }
{ ImportsList , }

FromClause : See 15.2.2

FROM ModuleSpecifier

ImportsList : See 15.2.2

ImportSpecifier
ImportsList , ImportSpecifier

ImportSpecifier : See 15.2.2

ImportedBinding
IdentifierName AS ImportedBinding

ModuleSpecifier : See 15.2.2

StringLiteral

ImportedBinding : See 15.2.2

BindingIdentifier

ExportDeclaration : See 15.2.3

EXPORT * FromClause ;
EXPORT ExportClause FromClause ;
EXPORT ExportClause ;
EXPORT VariableStatement
EXPORT Declaration
EXPORT DEFAULT HoistableDeclaration~[Default]
~EXPORT DEFAULT ClassDeclaration~[Default]~
EXPORT DEFAULT [lookahead ∉ { FUNCTION, CLASS }]
AssignmentExpression~[In]~ ;

ExportClause : See 15.2.3

{ }
{ ExportsList }
{ ExportsList , }

ExportsList : See 15.2.3

ExportSpecifier
ExportsList , ExportSpecifier

ExportSpecifier : See 15.2.3

IdentifierName
IdentifierName AS IdentifierName


Number Conversions

StringNumericLiteral ::: See 7.1.3.1

StrWhiteSpace~opt~
StrWhiteSpace~opt~ StrNumericLiteral StrWhiteSpace~opt~

StrWhiteSpace ::: See 7.1.3.1

StrWhiteSpaceChar StrWhiteSpace~opt~

StrWhiteSpaceChar ::: See 7.1.3.1

WhiteSpace
LineTerminator

StrNumericLiteral ::: See 7.1.3.1

StrDecimalLiteral
BinaryIntegerLiteral
OctalIntegerLiteral
HexIntegerLiteral

StrDecimalLiteral ::: See 7.1.3.1

StrUnsignedDecimalLiteral
+ StrUnsignedDecimalLiteral
- StrUnsignedDecimalLiteral

StrUnsignedDecimalLiteral ::: See 7.1.3.1

INFINITY
DecimalDigits . DecimalDigits~opt~ ExponentPart~opt~
. DecimalDigits ExponentPart~opt~
DecimalDigits ExponentPart~opt~

DecimalDigits ::: See 7.1.3.1

DecimalDigit
DecimalDigits DecimalDigit

DecimalDigit ::: ONE OF See 7.1.3.1

0 1 2 3 4 5 6 7 8 

ExponentPart ::: See 7.1.3.1

ExponentIndicator SignedInteger

ExponentIndicator ::: ONE OF See 7.1.3.1

E E

SignedInteger ::: See 7.1.3.1

DecimalDigits
+ DecimalDigits
- DecimalDigits

HexIntegerLiteral ::: See 7.1.3.1

0X HexDigit
0X HexDigit
HexIntegerLiteral HexDigit

HexDigit ::: ONE OF See 7.1.3.1

0 1 2 3 4 5 6 7 8 9 A B C D E F A B C D E F

All grammar symbols not explicitly defined by the _StringNumericLiteral_
grammar have the definitions used in the Lexical Grammar for numeric
literals (11.8.3)


Universal Resource Identifier Character Classes

uri ::: See 18.2.6.1

uriCharacters~opt~

uriCharacters ::: See 18.2.6.1

uriCharacter uriCharacters~opt~

uriCharacter ::: See 18.2.6.1

uriReserved
uriUnescaped
uriEscaped

uriReserved ::: ONE OF See 18.2.6.1

; / ? : @ & = + $ ,

uriUnescaped ::: See 18.2.6.1

uriAlpha
DecimalDigit
uriMark

uriEscaped ::: See 18.2.6.1

% HexDigit HexDigit

uriAlpha ::: ONE OF See 18.2.6.1

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

uriMark ::: ONE OF See 18.2.6.1

- _ . ! ~ * ' ( )


Regular Expressions

Pattern~[U]~ :: See 21.2.1

Disjunction~[?U]~

Disjunction~[U]~ :: See 21.2.1

Alternative~[?U]~
 Alternative~[?U]~ | Disjunction~[?U]~

Alternative~[U]~ :: See 21.2.1

[empty]
Alternative~[?U]~ Term~[?U]~

Term~[U]~ :: See 21.2.1

Assertion~[?U]~
Atom~[?U]~
Atom~[?U]~ Quantifier

Assertion~[U]~ :: See 21.2.1

^
$
\ B
\ B
( ? = Disjunction~[?U]~ )
( ? ! Disjunction~[?U]~ )

Quantifier :: See 21.2.1

QuantifierPrefix
QuantifierPrefix ?

QuantifierPrefix :: See 21.2.1

*
+
?
{ DecimalDigits }
{ DecimalDigits , }
{ DecimalDigits , DecimalDigits }

Atom~[U]~ :: See 21.2.1

PatternCharacter
.
\ AtomEscape~[?U]~
CharacterClass~[?U]~
( Disjunction~[?U]~ )
( ? : Disjunction~[?U]~ )

SyntaxCharacter :: ONE OF See 21.2.1

^ $ \ . * + ? ( ) [ ] { } |

PatternCharacter :: See 21.2.1

SourceCharacter BUT NOT SyntaxCharacter

AtomEscape~[U]~ :: See 21.2.1

DecimalEscape
CharacterEscape~[?U]~
CharacterClassEscape

CharacterEscape~[U]~ :: See 21.2.1

ControlEscape
C ControlLetter
HexEscapeSequence
RegExpUnicodeEscapeSequence~[?U]~
IdentityEscape~[?U]~

ControlEscape :: ONE OF See 21.2.1

F N R T V

ControlLetter :: ONE OF See 21.2.1

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

RegExpUnicodeEscapeSequence~[U]~ :: See 21.2.1

[+U] U LeadSurrogate \U TrailSurrogate
[+U] U LeadSurrogate
[+U] U TailSurrogate
[+U] U NonSurrogate
[~U] U _Hex4Digits_
[+U] U{ HexDigits }

Each \U _TrailSurrogate_ for which the choice of associated U
_LeadSurrogate_ is ambiguous shall be associated with the nearest
possible U _LeadSurrogate_ that would otherwise have no corresponding
\U_ __TrailSurrogate_.

LeadSurrogate :: See 21.2.1

Hex4Digits [match only if the SV of Hex4Digits is in the inclusive range
0xD800 to 0xDBFF]

TrailSurrogate :: See 21.2.1

Hex4Digits [match only if the SV of Hex4Digits is in the inclusive range
0xDC00 to 0xDFFF]

NonSurrogate :: See 21.2.1

Hex4Digits [match only if the SV of Hex4Digits is not in the inclusive
range 0xD800 to 0xDFFF]

IdentityEscape~[U]~ :: See 21.2.1

[+U] SyntaxCharacter
[+U] /
[~U] SourceCharacter BUT NOT UnicodeIDContinue

DecimalEscape :: See 21.2.1

DecimalIntegerLiteral [lookahead ∉ DecimalDigit]

CharacterClassEscape :: ONE OF See 21.2.1

D D S S W W

CharacterClass~[U]~ :: See 21.2.1

[ [lookahead ∉ {^}] ClassRanges~[?U]~ ]
[ ^ ClassRanges~[?U]~ ]

ClassRanges~[U]~ :: See 21.2.1

[empty]
NonemptyClassRanges~[?U]~

NonemptyClassRanges~[U]~ :: See 21.2.1

ClassAtom~[?U]~
ClassAtom~[?U]~ NonemptyClassRangesNoDash~[?U]~
ClassAtom~[?U]~ - ClassAtom~[?U]~ ClassRanges~[?U]~

NonemptyClassRangesNoDash~[U]~ :: See 21.2.1

ClassAtom~[?U]~
ClassAtomNoDash~[?U]~ NonemptyClassRangesNoDash~[?U]~
ClassAtomNoDash~[?U]~ - ClassAtom~[?U]~ ClassRanges~[?U]~

ClassAtom~[U]~ :: See 21.2.1

-
ClassAtomNoDash~[?U]~

ClassAtomNoDash~[U]~ :: See 21.2.1

SourceCharacter BUT NOT ONE OF \ OR ] OR -
\ ClassEscape~[?U]~

ClassEscape~[U]~ :: See 21.2.1

DecimalEscape
B
[+U] -
CharacterEscape~[?U]~
CharacterClassEscape

(normative)
Additional ECMAScript Features for Web Browsers

The ECMAScript language syntax and semantics defined in this annex are
required when the ECMAScript host is a web browser. The content of this
annex is normative but optional if the ECMAScript host is not a web
browser.

NOTE This annex describes various legacy features and other
characteristics of web browser based ECMAScript implementations. All of
the language features and behaviours specified in this annex have one or
more undesirable characteristics and in the absence of legacy usage
would be removed from this specification. However, the usage of these
features by large numbers of existing web pages means that web browsers
must continue to support them. The specifications in this annex defined
the requirements for interoperable implementations of these legacy
features.

These features are not considered part of the core ECMAScript language.
Programmers should not use or assume the existence of these features and
behaviours when writing new ECMAScript code. ECMAScript implementations
are discouraged from implementing these features unless the
implementation is part of a web browser or is required to run the same
legacy ECMAScript code that web browsers encounter.

1.  


    Additional Syntax

    1.  Numeric Literals

The syntax and semantics of 11.8.3 is extended as follows except that
this extension is not allowed for strict mode code:

Syntax

NumericLiteral ::

DecimalLiteral
BinaryIntegerLiteral
OctalIntegerLiteral
HexIntegerLiteral
LegacyOctalIntegerLiteral

LegacyOctalIntegerLiteral ::

0 OctalDigit
LegacyOctalIntegerLiteral OctalDigit

DecimalIntegerLiteral ::

0
NonZeroDigit DecimalDigits~opt
~_NonOctalDecimalInteger_Literal

NonOctalDecimalIntegerLiteral ::

0 NonOctalDigit
LegacyOctalLikeDecimalIntegerLiteral NonOctalDigit
_NonOctalDecimalInteger_Literal DecimalDigit

LegacyOctalLikeDecimalIntegerLiteral ::

0 OctalDigit
LegacyOctalLikeDecimalIntegerLiteral OctalDigit

NonOctalDigit :: ONE OF

8 

1.  STATIC SEMANTICS

-   The MV of _LegacyOctalIntegerLiteral_ :: 0 _OctalDigit_ is the MV of
    _OctalDigit_.

-   The MV of _LegacyOctalIntegerLiteral_ :: _LegacyOctalIntegerLiteral_
    _OctalDigit_ is (the MV of _LegacyOctalIntegerLiteral_ times 8) plus
    the MV of _OctalDigit_.

-   The MV of _DecimalIntegerLiteral_ :: _NonOctalDecimalIntegerLiteral_
    is the MV of _NonOctalDecimalIntegerLiteral_.

-   The MV of _NonOctalDecimalIntegerLiteral_ :: 0 _NonOctalDigit_ is
    the MV of _NonOctalDigit_.

-   The MV of _NonOctalDecimalIntegerLiteral_ ::
    _LegacyOctalLikeDecimalIntegerLiteral_ _NonOctalDigit_ is (the MV of
    _LegacyOctalLikeDecimalIntegerLiteral_ times 10) plus the MV of
    _NonOctalDigit_.

-   The MV of _NonOctalDecimalIntegerLiteral_ ::
    _NonOctalDecimalIntegerLiteral_ _DecimalDigit_ is (the MV of
    _NonOctalDecimalIntegerLiteral_ times 10) plus the MV of
    _DecimalDigit_.

-   The MV of _LegacyOctalLikeDecimalIntegerLiteral_ :: 0 _OctalDigit_
    is the MV of _OctalDigit_.

-   The MV of _LegacyOctalLikeDecimalIntegerLiteral_ ::
    _LegacyOctalLikeDecimalIntegerLiteral_ _OctalDigit_ is (the MV of
    _LegacyOctalLikeDecimalIntegerLiteral_ times 10) plus the MV of
    _OctalDigit_.

-   The MV of _NonOctalDigit_ :: 8 is 8.

-   The MV of _NonOctalDigit_ :: 9 is 9.

    1.  String Literals

The syntax and semantics of 11.8.4 is extended as follows except that
this extension is not allowed for strict mode code:

Syntax

EscapeSequence ::

CharacterEscapeSequence
LegacyOctalEscapeSequence
HexEscapeSequence
UnicodeEscapeSequence

LegacyOctalEscapeSequence ::

OctalDigit [lookahead ∉ OctalDigit]
ZeroToThree OctalDigit [lookahead ∉ OctalDigit]
FourToSeven OctalDigit
ZeroToThree OctalDigit OctalDigit

ZeroToThree :: ONE OF

0 1 2 

FourToSeven :: ONE OF

4 5 6 

This definition of _EscapeSequence_ is not used in strict mode or when
parsing _TemplateCharacter_ (11.8.6).

1.  STATIC SEMANTICS

-   The SV of _EscapeSequence_ :: _LegacyOctalEscapeSequence_ is the SV
    of the _LegacyOctalEscapeSequence_.

-   The SV of _LegacyOctalEscapeSequence_ :: _OctalDigit_ is the code
    unit whose value is the MV of the _OctalDigit_.

-   The SV of _LegacyOctalEscapeSequence_ :: _ZeroToThree_ _OctalDigit_
    is the code unit whose value is (8 times the MV of the
    _ZeroToThree_) plus the MV of the _OctalDigit_.

-   The SV of _LegacyOctalEscapeSequence_ :: _FourToSeven_ _OctalDigit_
    is the code unit whose value is (8 times the MV of the
    _FourToSeven_) plus the MV of the _OctalDigit_.

-   The SV of _LegacyOctalEscapeSequence_ :: _ZeroToThree_ _OctalDigit_
    _OctalDigit_ is the code unit whose value is (64 (that is, 8^2^)
    times the MV of the _ZeroToThree_) plus (8 times the MV of the first
    _OctalDigit_) plus the MV of the second _OctalDigit_.

-   The MV of _ZeroToThree_ :: 0 is 0.

-   The MV of _ZeroToThree_ :: 1 is 1.

-   The MV of _ZeroToThree_ :: 2 is 2.

-   The MV of _ZeroToThree_ :: 3 is 3.

-   The MV of _FourToSeven_ :: 4 is 4.

-   The MV of _FourToSeven_ :: 5 is 5.

-   The MV of _FourToSeven_ :: 6 is 6.

-   The MV of _FourToSeven_ :: 7 is 7.

    1.  HTML-like Comments

The syntax and semantics of 11.4 is extended as follows except that this
extension is not allowed within module code:

Syntax

Comment ::

MultiLineComment
SingleLineComment
SingleLineHTMLOpenComment
SingleLineHTMLCloseComment
SingleLineDelimitedComment

MultiLineComment ::

/* FirstCommentLine~opt~ LineTerminator MultiLineCommentChars~opt~ */
HTMLCloseComment~opt~

FirstCommentLine ::

SingleLineDelimitedCommentChars

SingleLineHTMLOpenComment ::

<!-- SingleLineCommentChars~opt~

SingleLineHTMLCloseComment ::

LineTerminatorSequence HTMLCloseComment

SingleLineDelimitedComment ::

/* SingleLineDelimitedCommentChars~opt~ */

HTMLCloseComment ::

WhiteSpaceSequence~opt~ SingleLineDelimitedCommentSequence~opt~ -->
SingleLineCommentChars~opt~

SingleLineDelimitedCommentChars ::

SingleLineNotAsteriskChar SingleLineDelimitedCommentChars~opt~
* SingleLinePostAsteriskCommentChars~opt~

SingleLineNotAsteriskChar ::

SourceCharacter BUT NOT ONE OF * OR LineTerminator

SingleLinePostAsteriskCommentChars ::

SingleLineNotForwardSlashOrAsteriskChar
SingleLineDelimitedCommentChars~opt~
* SingleLinePostAsteriskCommentChars~opt~

SingleLineNotForwardSlashOrAsteriskChar ::

SourceCharacter BUT NOT ONE OF / OR * OR LineTerminator

WhiteSpaceSequence ::

WhiteSpace WhiteSpaceSequence~opt~

SingleLineDelimitedCommentSequence ::

SingleLineDelimitedComment WhiteSpaceSequence~opt~
SingleLineDelimitedCommentSequence~opt~

Similar to a _MultiLineComment_ that contains a line terminator code
point, a _SingleLineHTMLCloseComment_ is considered to be a
_LineTerminator_ for purposes of parsing by the syntactic grammar.

Regular Expressions Patterns

The syntax of 21.2.1 is modified and extended as follows. These changes
introduce ambiguities that are broken by the ordering of grammar
productions and by contextual information. When parsing using the
following grammar, each alternative is considered only if previous
production alternatives do not match.

This alternative pattern grammar and semantics only changes the syntax
and semantics of BMP patterns. The following grammar extensions include
productions parameterized with the [U] parameter. However, none of these
extensions change the syntax of Unicode patterns recognized when parsing
with the [U] parameter present on the goal symbol.

SYNTAX

Term~[U]~ ::

[~U] ExtendedTerm
[+U] Assertion~[U]~
[+U] Atom~[U]~
[+U] Atom~[U]~ Quantifier

ExtendedTerm ::

Assertion
AtomNoBrace Quantifier
Atom
QuantifiableAssertion Quantifier

AtomNoBrace ::

PatternCharacterNoBrace
.
\ AtomEscape
CharacterClass
( Disjunction )
( ? : Disjunction )

Atom~[U]~ ::

PatternCharacter
.
\ AtomEscape~[?U]~
CharacterClass~[?U]~
( Disjunction~[?U]~ )
( ? : Disjunction~[?U]~ )

PatternCharacterNoBrace ::

SourceCharacter BUT NOT ONE OF
 ^ $ \ . * + ? ( ) [ ] { } |

PatternCharacter ::

SourceCharacter BUT NOT ONE OF
 ^ $ \ . * + ? ( ) [ ] |

QuantifiableAssertion ::

( ? = Disjunction )
( ? ! Disjunction )

Assertion~[U]~ ::

^
$
\ B
\ B
[+U] ( ? = Disjunction~[U]~ )
[+U] ( ? ! Disjunction~[U]~ )
[~U] QuantifiableAssertion

AtomEscape~[U]~ ::

[+U] DecimalEscape
[+U] CharacterEscape~[U]~
[+U] CharacterClassEscape
[~U] DecimalEscape but only if the integer value of DecimalEscape is <=
NCapturingParens
[~U] CharacterClassEscape
[~U] CharacterEscape

CharacterEscape~[U]~ ::

ControlEscape
c ControlLetter
HexEscapeSequence
RegExpUnicodeEscapeSequence~[?U]~
[~U] LegacyOctalEscapeSequence
IdentityEscape~[?U]~

IdentityEscape~[U]~ ::

[+U] SyntaxCharacter
[+U] /
[~U] SourceCharacter BUT NOT C

NonemptyClassRanges~[U]~ ::

ClassAtom~[?U]~
ClassAtom~[?U]~ NonemptyClassRangesNoDash~[?U]
~[+U] ClassAtom~[U]~ - ClassAtom~[U]~ ClassRanges~[U]~
[~U] ClassAtomInRange - ClassAtomInRange ClassRanges

NonemptyClassRangesNoDash~[U]~ ::

ClassAtom~[?U]~
ClassAtomNoDash~[?U]~ NonemptyClassRangesNoDash~[?U]
~[+U] ClassAtomNoDash~[U]~ - ClassAtom~[U]~ ClassRanges~[U]~
[~U] ClassAtomNoDashInRange - ClassAtomInRange ClassRanges

ClassAtom~[U]~ ::

-
ClassAtomNoDash~[?U]~

ClassAtomNoDash~[U]~ ::

SourceCharacter BUT NOT ONE OF \ OR ] OR -
\ ClassEscape~[?U]~

ClassAtomInRange ::

-
ClassAtomNoDashInRange

ClassAtomNoDashInRange ::

SourceCharacter BUT NOT ONE OF \ OR ] OR -
\ ClassEscape but only if ClassEscape evaluates to a CharSet with
exactly one character
\ IdentityEscape

ClassEscape~[U]~ ::

[+U] DecimalEscape
[+U] CharacterEscape~[U]~
[+U] CharacterClassEscape
[~U] DecimalEscape
B
[~U] CharacterClassEscape
[~U] CharacterEscape

NOTE When the same left hand sides occurs with both [+U] and [~U] guards
it is to control the disambiguation priority.

1.  PATTERN SEMANTICS

The semantics of 21.2.2 is extended as follows:

Within 21.2.2.5 reference to “_Atom_ :: ( _Disjunction_ )” are to be
interpreted as meaning “_Atom_ :: ( _Disjunction_ )” or “_AtomNoBrace_
:: ( _Disjunction_ )”.

Term (21.2.2.5) includes the following additional evaluation rule:

  The production _Term_ :: _QuantifiableAssertion_ _Quantifier_
  evaluates the same as the production _Term_ :: _Atom_ _Quantifier_ but
  with _QuantifiableAssertion_ substituted for _Atom_.

Atom (21.2.2.8) evaluation rules for the _Atom_ productions except for
_Atom_ :: _PatternCharacter_ are also used for the _AtomNoBrace
productions, but with _AtomNoBrace_ substituted for _Atom_. The
following evaluation rule is also added:

The production _AtomNoBrace_ :: _PatternCharacterNoBrace_ evaluates as
follows:

1.  Let _ch_ be the character represented by _PatternCharacterNoBrace_.

2.  Let _A_ be a one-element CharSet containing the character _ch_.

3.  Call CharacterSetMatcher(_A_, FALSE) and return its Matcher result.

CharacterEscape (21.2.2.10) includes the following additional evaluation
rule:

  The production _CharacterEscape_ :: _LegacyOctalEscapeSequence_
  evaluates by evaluating the SV of the _LegacyOctalEscapeSequence_ (see
  B.1.2) and returning its character result.

ClassAtom (21.2.2.17) includes the following additional evaluation
rules:

  The production _ClassAtomInRange_ :: - evaluates by returning the
  CharSet containing the one character -.

  The production _ClassAtomInRange_ :: _ClassAtomNoDashInRange_
  evaluates by evaluating _ClassAtomNoDashInRange_ to obtain a CharSet
  and returning that CharSet.

ClassAtomNoDash (21.2.2.18) includes the following additional evaluation
rules:

  The production _ClassAtomNoDashInRange_ :: _SourceCharacter_ BUT NOT
  ONE OF \ OR ] OR - evaluates by returning a one-element CharSet
  containing the character represented by _SourceCharacter_.

  The production _ClassAtomNoDashInRange_ :: \ _ClassEscape_ but only
  if…, evaluates by evaluating _ClassEscape_ to obtain a CharSet and
  returning that CharSet.

  The production _ClassAtomNoDashInRange_ :: \ _IdentityEscape_
  evaluates by returning the character represented by _IdentityEscape_.


Additional Built-in Properties

When the ECMAScript host is a web browser the following additional
properties of the standard built-in objects are defined.

Additional Properties of the Global Object

The entries in Table 60 are added to Table 7.

Table 60 — Additional Well-known Intrinsic Objects

  ------------------ --------------- -----------------------------------
  _INTRINSIC NAME_   _GLOBAL NAME_   _ECMASCRIPT LANGUAGE ASSOCIATION_
  %escape%           ESCAPE          The ESCAPE function (B.2.1.1)
  %unescape%         UNESCAPE        The UNESCAPE function (B.2.1.2)
  ------------------ --------------- -----------------------------------

escape (string)

The ESCAPE function is a property of the global object. It computes a
new version of a String value in which certain code units have been
replaced by a hexadecimal escape sequence.

For those code units being replaced whose value is 0X00FF or less, a
two-digit escape sequence of the form %_xx_ is used. For those
characters being replaced whose code unit value is greater than 0X00FF,
a four-digit escape sequence of the form %U_xxxx_ is used.

The ESCAPE function is the %escape% intrinsic object. When the ESCAPE
function is called with one argument _string_, the following steps are
taken:

1.  Let _string_ be ToString(_string_).

2.  ReturnIfAbrupt(_string_).

3.  Let _length_ be the number of code units in _string_.

4.  Let _R_ be the empty string.

5.  Let _k_ be 0.

6.  Repeat, while _k_ < _length_,

    a.  Let _char_ be the code unit (represented as a 16-bit unsigned
        integer) at index _k_ within _string_.

    b.  If _char_ is one of the code units in
        "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@*_+-./",
        then

        i.  Let _S_ be a String containing the single code unit _char_.

    c.  Else if _char_ ≥ 256, then

        i.  Let _S_ be a String containing six code units "%U_wxyz_"
            where _wxyz_ are the code units of the four hexadecimal
            digits encoding the value of _char_.

    d.  Else, _char_ < 256

        i.  Let _S_ be a String containing three code units "%_xy_"
            where _xy_ are the code units of two hexadecimal digits
            encoding the value of _char_.

    e.  Let _R_ be a new String value computed by concatenating the
        previous value of _R_ and _S_.

    f.  Increase _k_ by 1.

7.  Return _R_.

NOTE The encoding is partly based on the encoding described in RFC 1738,
but the entire encoding specified in this standard is described above
without regard to the contents of RFC 1738. This encoding does not
reflect changes to RFC 1738 made by RFC 3986.

unescape (string)

The UNESCAPE function is a property of the global object. It computes a
new version of a String value in which each escape sequence of the sort
that might be introduced by the ESCAPE function is replaced with the
code unit that it represents.

The UNESCAPE function is the %unescape% intrinsic object. When the
UNESCAPE function is called with one argument _string_, the following
steps are taken:

1.  Let _string_ be ToString(_string_).

2.  ReturnIfAbrupt(_string_).

3.  Let _length_ be the number of code units in _string_.

4.  Let _R_ be the empty String.

5.  Let _k_ be 0.

6.  Repeat, while _k_ ≠ _length

    a.  Let _c_ be the code unit at index _k_ within _string_.

    b.  If _c_ is %,

        i.  If _k_ ≤ _length_−6 and the code unit at index _k_+1 within
            _string_ is U and the four code units at indices _k_+2,
            _k_+3, _k_+4, and _k_+5 within _string_ are all hexadecimal
            digits, then

            1.  Let _c_ be the code unit whose value is the integer
                represented by the four hexadecimal digits at indices
                _k_+2, _k_+3, _k_+4, and _k_+5 within _string_.

            2.  Increase _k_ by 5.

        ii. Else if _k_ ≤ _length_−3 and the two code units at indices
            _k_+1 and _k_+2 within _string_ are both hexadecimal digits,
            then

            1.  Let _c_ be the code unit whose value is the integer
                represented by two zeroes plus the two hexadecimal
                digits at indices _k_+1 and _k_+2 within _string_.

            2.  Increase _k_ by 2.

    c.  Let _R_ be a new String value computed by concatenating the
        previous value of _R_ and _c_.

    d.  Increase _k_ by 1.

7.  Return _R_.

    1.  Additional Properties of the Object.prototype Object

        1.  Object.prototype.__proto__

Object.prototype.__proto__ is an accessor property with attributes {
[[Enumerable]]: FALSE, [[Configurable]]: TRUE }. The [[Get]] and [[Set]]
attributes are defined as follows

get Object.prototype.__proto__

The value of the [[Get]] attribute is a built-in function that requires
no arguments. It performs the following steps:

1.  Let _O_ be ToObject(THIS value).

2.  ReturnIfAbrupt(_O_).

3.  Return _O_.[[GetPrototypeOf]]().

    1.  set Object.prototype.__proto__

The value of the [[Set]] attribute is a built-in function that takes an
argument _proto_. It performs the following steps:

1.  Let _O_ be RequireObjectCoercible(THIS value)_.

2.  ReturnIfAbrupt(_O_).

3.  If Type(_proto_) is neither Object nor Null, return UNDEFINED.

4.  If Type(_O_) is not Object, return UNDEFINED.

5.  Let _status_ be _O_.[[SetPrototypeOf]](_proto_).

6.  ReturnIfAbrupt(_status_).

7.  If _status_ is FALSE, throw a TYPEERROR exception.

8.  Return UNDEFINED.

    1.  Additional Properties of the String.prototype Object

        1.  String.prototype.substr (start, length)

The SUBSTR method takes two arguments, _start_ and _length_, and returns
a substring of the result of converting the THIS object to a String,
starting from index _start_ and running for _length_ code units (or
through the end of the String if _length_ is UNDEFINED). If _start_ is
negative, it is treated as (_sourceLength_+_start_) where _sourceLength_
is the length of the String. The result is a String value, not a String
object. The following steps are taken:

1.  Let _O_ be RequireObjectCoercible(THIS value).

2.  Let _S_ be ToString(_O_).

3.  ReturnIfAbrupt(_S_).

4.  Let _intStart_ be ToInteger(_start_).

5.  ReturnIfAbrupt(_intStart_).

6.  If _length_ is UNDEFINED, let _end_ be +∞; otherwise let _end_ be
    ToInteger(_length_).

7.  ReturnIfAbrupt(_end_).

8.  Let _size_ be the number of code units in _S_.

9.  If _intStart_ < 0, let _intStart_ be max(_size_ + _intStart_,0).

10. Let _resultLength_ be min(max(_end_,0), _size_ – _intStart_).

11. If _resultLength_ ≤ 0, return the empty String "".

12. Return a String containing _resultLength_ consecutive code units
    from _S_ beginning with the code unit at index _intStart_.

The LENGTH property of the SUBSTR method is 2.

NOTE The SUBSTR function is intentionally generic; it does not require
that its THIS value be a String object. Therefore it can be transferred
to other kinds of objects for use as a method.

String.prototype.anchor ( name )

When the ANCHOR method is called with argument _name_, the following
steps are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "A", "NAME", _name_).

    1.  Runtime Semantics: CreateHTML ( string, tag, attribute, value )

The abstract operation CreateHTML is called with arguments _string,
tag_, _attribute_, and _value_. The arguments _tag_ and _attribute_ must
be string values. The following steps are taken:

1.  Let _str_ be RequireObjectCoercible(_string_).

2.  Let _S_ be ToString(_str_).

3.  ReturnIfAbrupt(_S_).

4.  Let _p1_ be the string value that is the concatenation of "<" and
    _tag_.

5.  If _attribute_ is not the empty String, then

    a.  Let _V_ be ToString(_value_).

    b.  ReturnIfAbrupt(_V_).

    c.  Let _escapedV_ be the string value that is the same as _V_
        except that each occurrence of the code unit 0x0022 (QUOTATION
        MARK) in _V_ has been replaced with the six code unit sequence
        "&QUOT;".

    d.  Let _p1_ be the string value that is the concatenation of the
        following string values:

-   The string value of _p1_

-   Code unit 0x0020 (SPACE)

-   The string value of _attribute_

-   Code unit 0x003D (EQUALS SIGN)

-   Code unit 0x0022 (QUOTATION MARK)

-   The string value of _escapedV_

-   Code unit 0x0022 (QUOTATION MARK)

1.  Let _p2_ be the string value that is the concatenation of _p1_ and
    ">".

2.  Let _p3_ be the string value that is the concatenation of _p2_ and
    _S_.

3.  Let _p4_ be the string value that is the concatenation of _p3_,
    "</", _tag_, and ">".

4.  Return _p4_.

    1.  String.prototype.big ()

When the BIG method is called with no arguments, the following steps are
taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "BIG", "", "").

    1.  String.prototype.blink ()

When the BLINK method is called with no arguments, the following steps
are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "BLINK", "", "").

    1.  String.prototype.bold ()

When the BOLD method is called with no arguments, the following steps
are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "B", "", "").

    1.  String.prototype.fixed ()

When the FIXED method is called with no arguments, the following steps
are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "TT", "", "").

    1.  String.prototype.fontcolor ( color )

When the FONTCOLOR method is called with argument _color_, the following
steps are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "FONT", "COLOR", _color_).

    1.  String.prototype.fontsize ( size )

When the FONTSIZE method is called with argument _size_, the following
steps are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "FONT", "SIZE", _size_).

    1.  String.prototype.italics ()

When the ITALICS method is called with no arguments, the following steps
are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "I", "", "").

    1.  String.prototype.link ( url )

When the LINK method is called with argument _url_, the following steps
are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "A", "HREF", _url_).

    1.  String.prototype.small ()

When the SMALL method is called with no arguments, the following steps
are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "SMALL", "", "").

    1.  String.prototype.strike ()

When the STRIKE method is called with no arguments, the following steps
are taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "STRIKE", "", "").

    1.  String.prototype.sub ()

When the SUB method is called with no arguments, the following steps are
taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "SUB", "", "").

    1.  String.prototype.sup ()

When the SUP method is called with no arguments, the following steps are
taken:

1.  Let _S_ be the THIS value.

2.  Return CreateHTML(_S_, "SUP", "", "").

    1.  Additional Properties of the Date.prototype Object

        1.  Date.prototype.getYear ( )

NOTE The GETFULLYEAR method is preferred for nearly all purposes,
because it avoids the “year 2000 problem.”

When the GETYEAR method is called with no arguments, the following steps
are taken:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, return NAN.

4.  Return YearFromTime(LocalTime(_t_)) − 1900.

    1.  Date.prototype.setYear (year)

NOTE The SETFULLYEAR method is preferred for nearly all purposes,
because it avoids the “year 2000 problem.”

When the SETYEAR method is called with one argument _year_, the
following steps are taken:

1.  Let _t_ be this time value.

2.  ReturnIfAbrupt(_t_).

3.  If _t_ is NAN, let _t_ be +0; otherwise, let _t_ be LocalTime(_t_).

4.  Let _y_ be ToNumber(_year_).

5.  ReturnIfAbrupt(_y_).

6.  If _y_ is NAN, set the [[DateValue]] internal slot of this Date
    object to NAN and return NAN.

7.  If _y_ is not NAN and 0 ≤ ToInteger(_y_) ≤ 99, let _yyyy_ be
    ToInteger(_y_) + 1900.

8.  Else, let _yyyy_ be _y_.

9.  Let _d_ be MakeDay(_yyyy_, MonthFromTime(_t_), DateFromTime(_t_)).

10. Let _date_ be UTC(MakeDate(_d_, TimeWithinDay(_t_))).

11. Set the [[DateValue]] internal slot of this Date object to
    TimeClip(_date_).

12. Return the value of the [[DateValue]] internal slot of this Date
    object.

    1.  Date.prototype.toGMTString ( )

NOTE The property TOUTCSTRING is preferred. The TOGMTSTRING property is
provided principally for compatibility with old code. It is recommended
that the TOUTCSTRING property be used in new ECMAScript code.

The function object that is the initial value of
DATE.PROTOTYPE.TOGMTSTRING is the same function object that is the
initial value of DATE.PROTOTYPE.TOUTCSTRING.

1.  Additional Properties of the RegExp.prototype Object

    1.  RegExp.prototype.compile (pattern, flags )

When the COMPILE method is called with arguments _pattern_ and _flags_,
the following steps are taken:

1.  Let _O_ be the THIS value.

2.  If Type(_O_) is not Object or Type(_O_) is Object and _O_ does not
    have a [[RegExpMatcher]] internal slot, then

    a.  Throw a TYPEERROR exception.

3.  If Type(_pattern_) is Object and _pattern_ has a [[RegExpMatcher]]
    internal slot, then

    a.  If _flags_ is not UNDEFINED, throw a TYPEERROR exception.

    b.  Let _P_ be the value of _pattern’s_ [[OriginalSource]] internal
        slot.

    c.  Let _F_ be the value of _pattern’s_ [[OriginalFlags]] internal
        slot.

4.  Else,

    a.  Let _P_ be _pattern_.

    b.  Let _F_ be _flags_.

5.  Return RegExpInitialize(_O,_ _P_, _F_).

NOTE The COMPILE method completely reinitializes the THIS object RegExp
with a new pattern and flags. An implementation may interpret use of
this method as an assertion that the resulting RegExp object will be
used multiple times and hence is a candidate for extra optimization.

1.  


    Other Additional Features

    1.  __proto__ Property Names in Object Initializers

The following Early Error rule is added to those in 12.2.5.1:

_ObjectLiteral_ : { _PropertyDefinitionList_ }

and

_ObjectLiteral_ : { _PropertyDefinitionList_ , }

-   It is a Syntax Error if PropertyNameList of _PropertyDefinitionList_
    contains any duplicate entries for "__PROTO__" and at least two of
    those entries were obtained from productions of the form
    _PropertyDefinition_ : _PropertyName_ : _AssignmentExpression_.

NOTE The List returned by PropertyNameList does not include string
literal property names defined as using a _ComputedPropertyName._

In 12.2.5.9 the PropertyDefinitionEvaluation algorithm for the
production
_PropertyDefinition_ : _PropertyName_ : _AssignmentExpression
is replaced with the following definition:

_PropertyDefinition_ : _PropertyName_ : _AssignmentExpression

1.  Let _propKey_ be the result of evaluating _PropertyName_.

2.  ReturnIfAbrupt(_propKey_).

3.  Let _exprValueRef_ be the result of evaluating
    _AssignmentExpression_.

4.  Let _propValue_ be GetValue(_exprValueRef_).

5.  ReturnIfAbrupt(_propValue_).

6.  If _propKey_ is the string value "__PROTO__" and if
    IsComputedPropertyKey(_propKey_) is FALSE, then

    a.  If Type(_propValue_) is either Object or Null, then

        i.  Return _object_.[[SetPrototypeOf]](_propValue_).

    b.  Return NormalCompletion(empty).

7.  8.  If IsAnonymousFunctionDefinition(_AssignmentExpression_) is
    TRUE, then

    a.  Let _hasNameProperty_ be HasOwnProperty(_propValue_, "NAME").

    b.  ReturnIfAbrupt(_hasNameProperty_).

    c.  If _hasNameProperty_ is FALSE, perform
        SetFunctionName(_propValue_, _propKey_).

9.  Assert: _enumerable_ is TRUE.

10. Return CreateDataPropertyOrThrow(_object_, _propKey_, _propValue_).

    1.  Labelled Function Declarations

Prior to ECMAScript 2015, the specification of _LabelledStatement_ did
not allow for the association of a statement label with a
_FunctionDeclaration_. However, a labelled _FunctionDeclaration_ was an
allowable extension for non-strict code and most browser-hosted
ECMAScript implementations supported that extension. In ECMAScript 2015,
the grammar productions for _LabelledStatement_ permits use of
_FunctionDeclaration_ as a _LabelledItem_ but 13.12.1 includes an Early
Error rule that produces a Syntax Error if that occurs. For web browser
compatibility, that rule is modified with the addition of the underlined
text:

_LabelledItem_ : _FunctionDeclaration

-   It is a Syntax Error if any strict mode source code matches this
    rule.

    1.  Block-Level Function Declarations Web Legacy Compatibility Semantics 

Prior to ECMAScript 2015, the ECMAScript specification did not define
the occurrence of a _FunctionDeclaration_ as an element of a _Block_
statement’s _StatementList_. However, support for that form of
_FunctionDeclaration_ was an allowable extension and most browser-hosted
ECMAScript implementations permitted them. Unfortunately, the semantics
of such declarations differ among those implementations. Because of
these semantic differences, existing web ECMAScript code that uses
_Block_ level function declarations is only portable among browser
implementation if the usage only depends upon the semantic intersection
of all of the browser implementations for such declarations. The
following are the use cases that fall within that intersection
semantics:

1.  A function is declared and only referenced within a single block

    -   A _FunctionDeclaration_ whose _BindingIdentifier_ is the name
        _f_ occurs exactly once within the function code of an enclosing
        function _g_ and that declaration is nested within a _Block_.

    -   No other declaration of _f_ that is not a VAR declaration occurs
        within the function code of _g_

    -   All occurrences of _f_ as an _IdentifierReference_ are within
        the _StatementList_ of the _Block_ containing the declaration of
        _f_.

2.  A function is declared and possibly used within a single _Block_ but
    also referenced by an inner function definition that is not
    contained within that same _Block_.

    -   A _FunctionDeclaration_ whose _BindingIdentifier_ is the name
        _f_ occurs exactly once within the function code of an enclosing
        function _g_ and that declaration is nested within a _Block_.

    -   No other declaration of _f_ that is not a VAR declaration occurs
        within the function code of _g_

    -   There may be occurrences of _f_ as an _IdentifierReference_
        within the _StatementList_ of the _Block_ containing the
        declaration of _f_.

    -   There is at least one occurrence of _f_ as an
        _IdentifierReference_ within the function code of _g_ that
        lexically follows the _Block_ containing the declaration of _f_.

3.  A function is declared and possibly used within a single block but
    also referenced within subsequent blocks.

    -   A _FunctionDeclaration_ whose _BindingIdentifier_ is the name
        _f_ occurs exactly once within the function code of an enclosing
        function _g_ and that declaration is nested within a _Block_.

    -   No other declaration of _f_ that is not a VAR declaration occurs
        within the function code of _g_

    -   There may be occurrences of _f_ as an _IdentifierReference_
        within the _StatementList_ of the _Block_ containing the
        declaration of _f_.

    -   There is at least one occurrence of _f_ as an
        _IdentifierReference_ within another function _h_ that is nested
        within _g_ and no other declaration of _f_ shadows the
        references to _f_ from within _h_.

    -   All invocations of _h_ occur after the declaration of _f_ has
        been evaluated.

The first use case is interoperable with the semantics of _Block_ level
function declarations provided by ECMAScript 2015. Any pre-existing
ECMAScript code that employees that use case will operate using the
Block level function declarations semantics defined by clauses 9, 13,
and 14 of this specification.

ECMAScript 2015 interoperability for the second and third use cases
requires the following extensions to the clause 9 and clause 14
semantics. During FunctionDeclarationInstantiation (9.2.12) the
following steps are performed in place of step 29:

1.  If _strict_ is FALSE, then

    a.  For each _FunctionDeclaration_ _f_ in _varDeclarations_ that is
        directly contained in the _StatementList_ of a _Block_,
        _CaseClause_, or _DefaultClause, _

        i.  Let _F_ be StringValue of the _BindingIdentifier_ of
            _FunctionDeclaration_ _f_.

        ii. If replacing the _FunctionDeclaration_ _f_ with a
            _VariableStatement_ that has _F_ as a _BindingIdentifier_
            would not produce any Early Errors for _func_ and _F_ is not
            an element of BoundNames of _argumentsList_, then

            1.  NOTE A var binding for _F_ is only instantiated here if
                it is neither a VarDeclaredName, the name of a formal
                parameter, or another _FunctionDeclarations_.

            2.  If _instantiatedVarNames_ does not contain _F_, then

                a.  Let _status_ be
                    _varEnvRec._CreateMutableBinding(_F_).

                b.  Assert: _status_ is never an abrupt completion.

                c.  Perform _varEnvRec._InitializeBinding(_F_,
                    UNDEFINED).

                d.  Append _F_ to _instantiatedVarNames_.

            3.  When the _FunctionDeclaration_ _f_ is evaluated, perform
                the following steps in place of the
                _FunctionDeclaration_ Evaluation algorithm provided in
                14.1.20:

                1.  Let _fenv_ be the running execution context’s
                    VariableEnvironment.

                2.  Let _benv_ be the running execution context’s
                    LexicalEnvironment.

                3.  Let _fobj_ be _benv_.GetBindingValue(_F_, FALSE).

                4.  ReturnIfAbrupt(_fobj_).

                5.  Let _status_ be _fenv_.SetMutableBinding(_F_,
                    _fobj_, FALSE).

                6.  Assert: _status_ is never an abrupt completion.

                7.  Return NormalCompletion(empty).

If an ECMAScript implementation has a mechanism for reporting diagnostic
warning messages, a warning should be produced for each function whose
function code contains a _FunctionDeclaration_ for which steps
1.a.ii.1-3 will be performed.

FunctionDeclarations in IfStatement Statement Clauses

The following rules for _IfStatement_ augment those in 13.5:

IfStatement~[Yield,\ Return]~ :

IF ( Expression~[In,\ ?Yield]~ ) FunctionDeclaration~[?Yield]~ ELSE
Statement~[?Yield,\ ?Return]~
IF ( Expression~[In,\ ?Yield]~ ) Statement~[?Yield,\ ?Return]~ ELSE
FunctionDeclaration~[?Yield]~
IF ( Expression~[In,\ ?Yield]~ ) FunctionDeclaration~[?Yield]~ ELSE
FunctionDeclaration~[?Yield]~
IF ( Expression~[In,\ ?Yield]~ ) FunctionDeclaration~[?Yield]~

The above rules are only applied when parsing code that is not strict
mode code. If any such code is match by one of these rules subsequent
processing of that code takes places as if each matching occurrence of
_FunctionDeclaration_~[?Yield]~ was the sole _StatementListItem_ of a
_BlockStatement_ occupying that position in the source code. The
semantics of such a synthetic _BlockStatement_ includes the web legacy
compatibility semantics specified in B.3.3.

VariableStatements in Catch blocks

The content of subclause 13.14.1 is replaced with the following:

_Catch_ : CATCH ( _CatchParameter_ ) _Block 

-   It is a Syntax Error if BoundNames of _CatchParameter_ contains any
    duplicate elements.

-   It is a Syntax Error if any element of the BoundNames of
    _CatchParameter_ also occurs in the LexicallyDeclaredNames of
    _Block_.

-   It is a Syntax Error if any element of the BoundNames of
    _CatchParameter_ also occurs in the VarDeclaredNames of _Block_,
    unless that element is only bound by a _VariableStatement_ or the
    _VariableDeclarationList_ of a for statement, or the _ForBinding_ of
    a for-in statement.

NOTE The _Block_ of a _Catch_ clause may contain VAR declarations that
bind a name that is also bound by the _CatchParameter_. At runtime, such
bindings are instantiated in the VariableDeclarationEnvironment. They do
not shadow the same-named bindings introduced by the _CatchParameter_
and hence the _Initializer_ for such VAR declarations will assign to the
corresponding catch parameter rather than the VAR binding. The
relaxation of the normal static semantic rule does not apply to names
only bound by for-of statements.

This modified behaviour also applies to VAR declarations introduced by
direct evals contained within the _Block_ of a _Catch_ clause. This
change is accomplished by modify the algorithm of 18.2.1.2 as follows:

ii. 

Step 6.d.ii.2.a.i is replaced by:

i.  If _thisEnvRec_ is not the Environment Record for a _Catch_ clause,
    throw a SYNTAXERROR exception.

ii. Else if _name_ is only bound by a _VariableStatement_ or the
    _VariableDeclarationList_ of a for statement, or the _ForBinding_ of
    a for-in statement, throw a SYNTAXERROR exception.

(informative)
The Strict Mode of ECMAScript

THE STRICT MODE RESTRICTION AND EXCEPTIONS

-   IMPLEMENTS, INTERFACE, LET, PACKAGE, PRIVATE, PROTECTED, PUBLIC,
      STATIC, and YIELD are reserved words within strict mode code.
      (11.6.2).

-   A conforming implementation, when processing strict mode code, may
      not extend the syntax of _NumericLiteral_ (11.8.3) to include
      _LegacyOctalIntegerLiteral_ as described in B.1.1.

-   A conforming implementation, when processing strict mode code, may
      not extend the syntax of _EscapeSequence_ to include
      _LegacyOctalEscapeSequence_ as described in B.1.2.

-   Assignment to an undeclared identifier or otherwise unresolvable
      reference does not create a property in the global object. When a
      simple assignment occurs within strict mode code, its
      _LeftHandSide_ must not evaluate to an unresolvable Reference. If
      it does a REFERENCEERROR exception is thrown (6.2.3.2). The
      _LeftHandSide_ also may not be a reference to a data property with
      the attribute value {[[Writable]]:FALSE}, to an accessor property
      with the attribute value {[[Set]]:UNDEFINED}, nor to a
      non-existent property of an object whose [[Extensible]] internal
      slot has the value FALSE. In these cases a TYPEERROR exception is
      thrown (12.14).

-   The identifier EVAL or ARGUMENTS may not appear as the
      _LeftHandSideExpression_ of an Assignment operator (12.14) or of a
      _PostfixExpression_ (12.4) or as the _UnaryExpression_ operated
      upon by a Prefix Increment (12.5.7) or a Prefix Decrement (12.5.8)
      operator.

-   Arguments objects for strict mode functions define non-configurable
      accessor properties named "CALLER" and "CALLEE" which throw a
      TYPEERROR exception on access (9.2.7).

-   Arguments objects for strict mode functions do not dynamically share
      their array indexed property values with the corresponding formal
      parameter bindings of their functions. (9.4.4).

-   For strict mode functions, if an arguments object is created the
      binding of the local identifier ARGUMENTS to the arguments object
      is immutable and hence may not be the target of an assignment
      expression. (9.2.12).

-   It is a SYNTAXERROR if the _IdentifierName_ EVAL or the
      _IdentifierName_ ARGUMENTS occurs as a _BindingIdentifier_ within
      strict mode code (12.1.1).

-   Strict mode eval code cannot instantiate variables or functions in
      the variable environment of the caller to eval. Instead, a new
      variable environment is created and that environment is used for
      declaration binding instantiation for the eval code (18.2.1).

-   If THIS is evaluated within strict mode code, then the THIS value is
      not coerced to an object. A THIS value of NULL or UNDEFINED is not
      converted to the global object and primitive values are not
      converted to wrapper objects. The THIS value passed via a function
      call (including calls made using FUNCTION.PROTOTYPE.APPLY and
      FUNCTION.PROTOTYPE.CALL) do not coerce the passed this value to an
      object (9.2.1.2, 19.2.3.1, 19.2.3.3).

-   When a DELETE operator occurs within strict mode code, a SYNTAXERROR
      is thrown if its _UnaryExpression_ is a direct reference to a
      variable, function argument, or function name (12.5.4.1).

-   When a DELETE operator occurs within strict mode code, a TYPEERROR
      is thrown if the property to be deleted has the attribute {
      [[Configurable]]:FALSE } (12.5.4.2).

-   Strict mode code may not include a _WithStatement_. The occurrence
      of a _WithStatement_ in such a context is a SYNTAXERROR (13.10.1).

-   It is a SYNTAXERROR if a _TryStatement_ with a _Catch_ occurs within
      strict mode code and the _Identifier_ of the _Catch_ production is
      EVAL or ARGUMENTS (13.14.1).

-   It is a SYNTAXERROR if the same _BindingIdentifier_ appears more
      than once in the _FormalParameters_ of a strict mode function. An
      attempt to create such a function using a FUNCTION or GENERATOR
      constructor is a SYNTAXERROR (14.1.2, 19.2.1.1.1).

-   An implementation may not extend, beyond that defined in this
      specification, the meanings within strict mode functions of
      properties named CALLER or ARGUMENTS of function instances.
      ECMAScript code may not create or modify properties with these
      names on function objects that correspond to strict mode functions
      (16.1).

(informative)
Corrections and Clarifications in ECMAScript 2015 with Possible
Compatibility Impact

8.1.1.4.15-8.1.1.4.18 Edition 5 and 5.1 used a property existence test
to determine whether a global object property corresponding to a new
global declaration already existed. ECMAScript 2015 uses an own property
existence test. This corresponds to what has been most commonly
implemented by web browsers.

9.4.2.1: The 5^th^ Edition moved the capture of the current array length
prior to the integer conversion of the array index or new length value.
However, the captured length value could become invalid if the
conversion process has the side-effect of changing the array length.
ECMAScript 2015 specifies that the current array length must be captured
after the possible occurrence of such side-effects.

20.3.1.15: Previous editions permitted the TimeClip abstract operation
to return either +0 or −0 as the representation of a 0 time value.
ECMAScript 2015 specifies that +0 always returned. This means that for
ECMAScript 2015 the time value of a Date object is never observably −0
and methods that return time values never return −0.

20.3.1.16: If a time zone offset is not present, the local time zone is
used. Edition 5.1 incorrectly stated that a missing time zone should be
interpreted as "z".

20.3.4.36: If the year cannot be represented using the Date Time String
Format specified in 20.3.1.16 a RangeError exception is thrown. Previous
editions did not specify the behaviour for that case.

20.3.4.41: Previous editions did not specify the value returned by
Date.prototype.toString when this time value is NaN. ECMAScript 2015
specifies the result to be the String value is "INVALID DATE".

21.2.3.1, 21.2.3.2.4: Any LineTerminator code points in the value of the
SOURCE property of an RegExp instance must be expressed using an escape
sequence. Edition 5.1 only required the escaping of "/".

21.2.5.6, 21.2.5.8: In previous editions, the specifications for
STRING.PROTOTYPE.MATCH and STRING.PROTOTYPE.REPLACE was incorrect for
cases where the pattern argument was a RegExp value whose GLOBAL is flag
set. The previous specifications stated that for each attempt to match
the pattern, if LASTINDEX did not change it should be incremented by 1.
The correct behaviour is that LASTINDEX should be incremented by one
only if the pattern matched the empty string.

22.1.3.24, 22.1.3.24.1: Previous editions did not specify how a NAN
value returned by a _comparefn_ was interpreted by ARRAY.PROTOTYPE.SORT.
ECMAScript 2015 specifies that such as value is treated as if +0 was
returned from the _comparefn_. ECMAScript 2015 also specifies that
ToNumber is applied to the result returned by a _comparefn_. In previous
editions, the effect of a _comparefn_ result that is not a Number value
was implementation dependent. In practice, implementations call
ToNumber.

(informative)
Additions and Changes That
Introduce Incompatibilities with Prior Editions

7.1.3.1: In ECMAScript 2015, ToNumber applied to a String value now
recognizes and converts _BinaryIntegerLiteral_ and _OctalIntegerLIteral_
numeric strings. In previous editions such strings were converted to
NAN,

6.2.3: In ECMAScript 2015, Function calls are not allowed to return a
Reference value.

11.6: In ECMAScript 2015, the valid code points for an _IdentifierName
are specified in terms of the Unicode properties “ID_Start” and
“ID_Continue”. In previous editions, the valid _IdentifierName_ or
_Identifier_ code points were specified by enumerating various Unicode
code point categories.

11.9.1: In ECMAScript 2015, Automatic Semicolon Insertion adds a
semicolon at the end of a do-while statement if the semicolon is
missing. This change aligns the specification with the actual behaviour
of most existing implementations.

12.2.5.1: In ECMAScript 2015, it is no longer an early error to have
duplicate property names in Object Initializers.

12.14.1: In ECMAScript 2015, strict mode code containing an assignment
to an immutable binding such as the function name of a
_FunctionExpression_ does not produce an early error. Instead it
produces a runtime error.

13.4: In ECMAScript 2015, a _StatementListItem_ beginning with the token
LET followed by the token [ is the start of a _LexicalDeclaration_. In
previous editions such a sequence would be the start of an
_ExpressionStatement_.

13.6: In ECMAScript 2015, if the ( token of a for statement is
immediately followed by the token sequence LET [ then the LET is treated
as the start of a _LexicalDeclaration_. In previous editions such a
token sequence would be the start of an _Expression_.

13.6: In ECMAScript 2015, if the ( token of a for-in statement is
immediately followed by the token sequence LET [ then the LET is treated
as the start of a _ForDeclaration_. In previous editions such a token
sequence would be the start of an _LeftHandSideExpression_.

13.6: Prior to ECMAScript 2015, an initialization expression could
appear as part of the _VariableDeclaration_ that precedes the IN
keyword. The value of that expression was always discarded. In
ECMAScript 2015, the _ForBind_ in that same position does not allow the
occurrence of such an initializer.

13.6: In ECMAScript 2015, the normal completion value of an
_IterationStatement_ is never the value EMPTY. If the _Statement_ part
of an _IterationStatement_ is not evaluated or if the final evaluation
of the _Statement_ part produces a normal completion whose value is
EMPTY, the completion value of the _IterationStatement_ is UNDEFINED.

13.10.7: In ECMAScript 2015, the normal completion value of a
_WithStatement_ is never the value EMPTY. If evaluation of the
_Statement_ part of a _WithStatement_ produces a normal completion whose
value is EMPTY, the completion value of the _WithStatement_ is
UNDEFINED.

13.11.9: In ECMAScript 2015, the normal completion value of a
_SwitchStatement_ is never the value EMPTY. If the _CaseBlock_ part of a
_SwitchStatement_ does not contain _CaseClauses_ or if the last
evaluated _CaseClause_ or _DefaultClause_ produces a normal completion
whose value is EMPTY, the completion value of the _SwitchStatement_ is
UNDEFINED.

13.14: In ECMAScript 2015, it is an early error for a _Catch_ clause to
contained a VAR declaration for the same _Identifier_ that appears as
the _Catch_ clause parameter. In previous editions, such a variable
declaration would be instantiated in the enclosing variable environment
but the declaration’s _Initializer_ value would be assigned to the
_Catch_ parameter.

13.14.8: In ECMAScript 2015, the normal completion value of a
_TryStatement_ is never the value EMPTY. If the _Block_ part of a
_TryStatement_ evaluates to a normal completion whose value is EMPTY,
the completion value of the _TryStatement_ is UNDEFINED. If the _Block_
part of a _TryStatement_ evaluates to a throw completion and it has a
Catch part that evaluates to a normal completion whose value is EMPTY,
the completion value of the _TryStatement_ is UNDEFINED.

14.3.9 In ECMAScript 2015, the function objects that are created as the
values of the [[Get]] or [[Set]] attribute of accessor properties in an
_ObjectLiteral_ are not constructor functions and they do not have a
PROTOTYPE own property. In the previous edition, they were constructors
and had a PROTOTYPE property.

19.1.2.5: In ECMAScript 2015, if the argument to OBJECT.FREEZE is not an
object it is treated as if it was a non-extensible ordinary object with
no own properties. In the previous edition, a non-object argument always
causes a TYPEERROR to be thrown.

19.1.2.6: In ECMAScript 2015, if the argument to
OBJECT.GETOWNPROPERTYDESCRIPTOR is not an object an attempt is made to
coerce the argument using ToObject. If the coercion is successful the
result is used in place of the original argument value. In the previous
edition, a non-object argument always causes a TYPEERROR to be thrown.

19.1.2.7: In ECMAScript 2015, if the argument to
OBJECT.GETOWNPROPERTYNAMES is not an object an attempt is made to coerce
the argument using ToObject. If the coercion is successful the result is
used in place of the original argument value. In the previous edition, a
non-object argument always causes a TYPEERROR to be thrown.

19.1.2.9: In ECMAScript 2015, if the argument to OBJECT.GETPROTOTYPEOF
is not an object an attempt is made to coerce the argument using
ToObject. If the coercion is successful the result is used in place of
the original argument value. In the previous edition, a non-object
argument always causes a TYPEERROR to be thrown.

19.1.2.11: In ECMAScript 2015, if the argument to OBJECT.ISEXTENSIBLE is
not an object it is treated as if it was a non-extensible ordinary
object with no own properties. In the previous edition, a non-object
argument always causes a TYPEERROR to be thrown.

19.1.2.12: In ECMAScript 2015, if the argument to OBJECT.ISFROZEN is not
an object it is treated as if it was a non-extensible ordinary object
with no own properties. In the previous edition, a non-object argument
always causes a TYPEERROR to be thrown.

19.1.2.13: In ECMAScript 2015, if the argument to OBJECT.ISSEALED is not
an object it is treated as if it was a non-extensible ordinary object
with no own properties. In the previous edition, a non-object argument
always causes a TYPEERROR to be thrown.

19.1.2.14: In ECMAScript 2015, if the argument to OBJECT.KEYS is not an
object an attempt is made to coerce the argument using ToObject. If the
coercion is successful the result is used in place of the original
argument value. In the previous edition, a non-object argument always
causes a TYPEERROR to be thrown.

19.1.2.15: In ECMAScript 2015, if the argument to
OBJECT.PREVENTEXTENSIONS is not an object it is treated as if it was a
non-extensible ordinary object with no own properties. In the previous
edition, a non-object argument always causes a TYPEERROR to be thrown.

19.1.2.17: In ECMAScript 2015, if the argument to OBJECT.SEAL is not an
object it is treated as if it was a non-extensible ordinary object with
no own properties. In the previous edition, a non-object argument always
causes a TYPEERROR to be thrown.

19.2.3.2: In ECMAScript 2015, the [[Prototype]] internal slot of a bound
function is set to the [[GetPrototypeOf]] value of its target function.
In the previous edition, [[Prototype]] was always set to
%FunctionPrototype%.

19.2.4.1: In ECMAScript 2015, the LENGTH property of function instances
is configurable. In previous editions it was non-configurable.

19.3.3: In ECMAScript 2015, the Boolean prototype object is not a
Boolean instance. In previous editions it was a Boolean instance whose
Boolean value was FALSE.

19.5.6.2: In ECMAScript 2015, the [[Prototype]] internal slot of a
_NativeError_ constructor is the Error constructor. In previous editions
it was the Function prototype object.

20.1.3 In ECMAScript 2015, the Number prototype object is not a Number
instance. In previous editions it was a Number instance whose number
value was +0.

20.3.4 In ECMAScript 2015, the Date prototype object is not a Date
instance. In previous editions it was a Date instance whose TimeValue
was NaN.

21.1.3.10 In ECMAScript 2015, the STRING.PROTOTYPE.LOCALECOMPARE
function must treat Strings that are canonically equivalent according to
the Unicode standard as being identical. In previous editions
implementations were permitted to ignore canonical equivalence and could
instead use a bit-wise comparison.

21.1.3 In ECMAScript 2015, the String prototype object is not a String
instance. In previous editions it was a String instance whose String
value was the empty string.

21.1.3.22 and 21.1.3.24 In ECMAScript 2015, lowercase/upper conversion
processing operates on code points. In previous editions such the
conversion processing was only applied to individual code units. The
only affected code points are those in the Deseret block of Unicode

21.1.3.25 In ECMAScript 2015, the STRING.PROTOTYPE.TRIM method is
defined to recognize white space code points that may exists outside of
the Unicode BMP. However, as of Unicode 6.1 no such code points are
defined. In previous editions such code points would not have been
recognized as white space.

21.2.3.1 In ECMAScript 2015, If the _pattern_ argument is a RegExp
instance and the _flags_ argument is not UNDEFINED, a new RegExp
instance is created just like _pattern_ except that _pattern’s_ flags
are replaced by the argument _flags_. In previous editions a TYPEERROR
exception was thrown when _pattern_ was a RegExp instance and _flags_
was not UNDEFINED.

21.2.5 In ECMAScript 2015, the RegExp prototype object is not a RegExp
instance. In previous editions it was a RegExp instance whose pattern is
the empty string.

21.2.5 In ECMAScript 2015, SOURCE, GLOBAL, IGNORECASE, and MULTILINE are
accessor properties defined on the RegExp prototype object. In previous
editions they were data properties defined on RegExp instances.

Bibliography

ISO 8601:2004(E) _Data elements and interchange formats – Information
interchange_ — _Representation of dates and times_

RFC 1738 “Uniform Resource Locators (URL)”, available at
<_http://tools.ietf.org/html/rfc1738_>

RFC 2396 “Uniform Resource Identifiers (URI): Generic Syntax”, available
at <_http://tools.ietf.org/html/rfc2396_>

RFC 3629 “UTF-8, a transformation format of ISO 10646”, available at
<_http://tools.ietf.org/html/rfc3629_>

RFC 4627 “The application/json Media Type for JavaScript Object Notation
(JSON)” , available at <_http://tools.ietf.org/html/rfc4627_>

Unicode Technical Note #5: Canonical Equivalence in Applications,
available at <_http://www.unicode.org/notes/tn5/_>

Unicode Technical Standard #10: Unicode Collation Algorithm version
5.1.0, or successor, available at
<_http://www.unicode.org/reports/tr10/_>

_IANA Time Zone Database_ at <_http://www.iana.org/time-zones_>

[1] Note: Please note that for ECMAScript Edition 4 the Ecma standard
number “ECMA-262 Edition 4” was reserved but not used in the Ecma
publication process. Therefore “ECMA-262 Edition 4” as an Ecma
International publication does not exist.
